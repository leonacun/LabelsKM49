using System;
using System.Collections.Generic;
using Labels_KM49.Models;
using Microsoft.EntityFrameworkCore;
using Oracle.EntityFrameworkCore;
using Oracle.EntityFrameworkCore.Infrastructure;

namespace Labels_KM49.Data;

public partial class ModelContext : DbContext
{
    public ModelContext()
    {
    }

    public ModelContext(DbContextOptions<ModelContext> options)
        : base(options)
    {
    }

    public virtual DbSet<BChangeOeState> BChangeOeStates { get; set; }

    public virtual DbSet<BOeState> BOeStates { get; set; }

    public virtual DbSet<BOeStateCalled> BOeStateCalleds { get; set; }

    public virtual DbSet<BOeStateChange> BOeStateChanges { get; set; }

    public virtual DbSet<BProperty> BProperties { get; set; }

    public virtual DbSet<BQuery> BQueries { get; set; }

    public virtual DbSet<BReworkjob> BReworkjobs { get; set; }

    public virtual DbSet<BReworkpart> BReworkparts { get; set; }

    public virtual DbSet<CorOutboxEntry> CorOutboxEntries { get; set; }

    public virtual DbSet<CorOutboxHeader> CorOutboxHeaders { get; set; }

    public virtual DbSet<DsNissanfromprod> DsNissanfromprods { get; set; }

    public virtual DbSet<DsNissanfromproditem> DsNissanfromproditems { get; set; }

    public virtual DbSet<DsNissantoprod> DsNissantoprods { get; set; }

    public virtual DbSet<HtJStockentrystat> HtJStockentrystats { get; set; }

    public virtual DbSet<HtJTransfercpacket> HtJTransfercpackets { get; set; }

    public virtual DbSet<JAccessobjecttype> JAccessobjecttypes { get; set; }

    public virtual DbSet<JAccessright> JAccessrights { get; set; }

    public virtual DbSet<JAccessrightset> JAccessrightsets { get; set; }

    public virtual DbSet<JAccesssetting> JAccesssettings { get; set; }

    public virtual DbSet<JAddress> JAddresses { get; set; }

    public virtual DbSet<JAdvice> JAdvices { get; set; }

    public virtual DbSet<JAdviceProdunit> JAdviceProdunits { get; set; }

    public virtual DbSet<JAdviceconfirmation> JAdviceconfirmations { get; set; }

    public virtual DbSet<JAdviceinfo> JAdviceinfos { get; set; }

    public virtual DbSet<JAdviceset> JAdvicesets { get; set; }

    public virtual DbSet<JAlert> JAlerts { get; set; }

    public virtual DbSet<JAlertset> JAlertsets { get; set; }

    public virtual DbSet<JAlertstate> JAlertstates { get; set; }

    public virtual DbSet<JAlerttype> JAlerttypes { get; set; }

    public virtual DbSet<JAlerttypeset> JAlerttypesets { get; set; }

    public virtual DbSet<JBmwcreditnote> JBmwcreditnotes { get; set; }

    public virtual DbSet<JBmwcreditnotepo> JBmwcreditnotepos { get; set; }

    public virtual DbSet<JBmwordererror> JBmwordererrors { get; set; }

    public virtual DbSet<JCalendar> JCalendars { get; set; }

    public virtual DbSet<JCalendarentry> JCalendarentries { get; set; }

    public virtual DbSet<JCalendarentrytype> JCalendarentrytypes { get; set; }

    public virtual DbSet<JChoice> JChoices { get; set; }

    public virtual DbSet<JCodetable> JCodetables { get; set; }

    public virtual DbSet<JCodetableentry> JCodetableentries { get; set; }

    public virtual DbSet<JColor> JColors { get; set; }

    public virtual DbSet<JColorclass> JColorclasses { get; set; }

    public virtual DbSet<JColorclassmember> JColorclassmembers { get; set; }

    public virtual DbSet<JCommcontrol> JCommcontrols { get; set; }

    public virtual DbSet<JCommjob> JCommjobs { get; set; }

    public virtual DbSet<JCommjobContainer> JCommjobContainers { get; set; }

    public virtual DbSet<JCommjobProdjob> JCommjobProdjobs { get; set; }

    public virtual DbSet<JCompany> JCompanies { get; set; }

    public virtual DbSet<JCompanyclass> JCompanyclasses { get; set; }

    public virtual DbSet<JCompanyclassdefelem> JCompanyclassdefelems { get; set; }

    public virtual DbSet<JCompanyclassmember> JCompanyclassmembers { get; set; }

    public virtual DbSet<JCompanycounter> JCompanycounters { get; set; }

    public virtual DbSet<JComponentdef> JComponentdefs { get; set; }

    public virtual DbSet<JComponentdefpropertyset> JComponentdefpropertysets { get; set; }

    public virtual DbSet<JConfigdef> JConfigdefs { get; set; }

    public virtual DbSet<JContainer> JContainers { get; set; }

    public virtual DbSet<JContainerbuffer> JContainerbuffers { get; set; }

    public virtual DbSet<JContainerbufferclass> JContainerbufferclasses { get; set; }

    public virtual DbSet<JContainerbufferclassm> JContainerbufferclassms { get; set; }

    public virtual DbSet<JContainerbufferentry> JContainerbufferentries { get; set; }

    public virtual DbSet<JContainercontainer> JContainercontainers { get; set; }

    public virtual DbSet<JContainerentry> JContainerentries { get; set; }

    public virtual DbSet<JContainerevent> JContainerevents { get; set; }

    public virtual DbSet<JContainerevententry> JContainerevententries { get; set; }

    public virtual DbSet<JContainerinfo> JContainerinfos { get; set; }

    public virtual DbSet<JContainerinv> JContainerinvs { get; set; }

    public virtual DbSet<JContainerinvcontainerset> JContainerinvcontainersets { get; set; }

    public virtual DbSet<JContainerinvsubject> JContainerinvsubjects { get; set; }

    public virtual DbSet<JContainermapcfg> JContainermapcfgs { get; set; }

    public virtual DbSet<JContainermaptype> JContainermaptypes { get; set; }

    public virtual DbSet<JContainermaptypeset> JContainermaptypesets { get; set; }

    public virtual DbSet<JContainerposimage> JContainerposimages { get; set; }

    public virtual DbSet<JContainerposimageregion> JContainerposimageregions { get; set; }

    public virtual DbSet<JContainerposname> JContainerposnames { get; set; }

    public virtual DbSet<JContainerposorder> JContainerposorders { get; set; }

    public virtual DbSet<JContainerposorderoption> JContainerposorderoptions { get; set; }

    public virtual DbSet<JContainerrule> JContainerrules { get; set; }

    public virtual DbSet<JContainerset> JContainersets { get; set; }

    public virtual DbSet<JContainersetclass> JContainersetclasses { get; set; }

    public virtual DbSet<JContainersetclassmember> JContainersetclassmembers { get; set; }

    public virtual DbSet<JContainersetcmaptype> JContainersetcmaptypes { get; set; }

    public virtual DbSet<JContainersetinfo> JContainersetinfos { get; set; }

    public virtual DbSet<JContainersetloc> JContainersetlocs { get; set; }

    public virtual DbSet<JContainersubject> JContainersubjects { get; set; }

    public virtual DbSet<JContainersubjectmark> JContainersubjectmarks { get; set; }

    public virtual DbSet<JContainertype> JContainertypes { get; set; }

    public virtual DbSet<JContainertypeclass> JContainertypeclasses { get; set; }

    public virtual DbSet<JContainertypeclassm> JContainertypeclassms { get; set; }

    public virtual DbSet<JContainertypeset> JContainertypesets { get; set; }

    public virtual DbSet<JContainerusage> JContainerusages { get; set; }

    public virtual DbSet<JContainerusageelem> JContainerusageelems { get; set; }

    public virtual DbSet<JContract> JContracts { get; set; }

    public virtual DbSet<JContractclass> JContractclasses { get; set; }

    public virtual DbSet<JContractclassdefelem> JContractclassdefelems { get; set; }

    public virtual DbSet<JContractclassmember> JContractclassmembers { get; set; }

    public virtual DbSet<JContractcounter> JContractcounters { get; set; }

    public virtual DbSet<JContractcumulative> JContractcumulatives { get; set; }

    public virtual DbSet<JContractentry> JContractentries { get; set; }

    public virtual DbSet<JContractinfo> JContractinfos { get; set; }

    public virtual DbSet<JContractnote> JContractnotes { get; set; }

    public virtual DbSet<JContractnoteentry> JContractnoteentries { get; set; }

    public virtual DbSet<JConvdef> JConvdefs { get; set; }

    public virtual DbSet<JConvdefclass> JConvdefclasses { get; set; }

    public virtual DbSet<JConvdefclassmember> JConvdefclassmembers { get; set; }

    public virtual DbSet<JCounter> JCounters { get; set; }

    public virtual DbSet<JCounterset> JCountersets { get; set; }

    public virtual DbSet<JCposimage> JCposimages { get; set; }

    public virtual DbSet<JCposimageregion> JCposimageregions { get; set; }

    public virtual DbSet<JCposname> JCposnames { get; set; }

    public virtual DbSet<JCposorder> JCposorders { get; set; }

    public virtual DbSet<JCreditnote> JCreditnotes { get; set; }

    public virtual DbSet<JCreditnoteentry> JCreditnoteentries { get; set; }

    public virtual DbSet<JCreditnoteset> JCreditnotesets { get; set; }

    public virtual DbSet<JCsclass> JCsclasses { get; set; }

    public virtual DbSet<JCsclassmember> JCsclassmembers { get; set; }

    public virtual DbSet<JCusageelem> JCusageelems { get; set; }

    public virtual DbSet<JDashboard> JDashboards { get; set; }

    public virtual DbSet<JDashboarddataprovider> JDashboarddataproviders { get; set; }

    public virtual DbSet<JDashboarddbdatasource> JDashboarddbdatasources { get; set; }

    public virtual DbSet<JDashboardinfo> JDashboardinfos { get; set; }

    public virtual DbSet<JDashboardpanel> JDashboardpanels { get; set; }

    public virtual DbSet<JDashboardpaneldef> JDashboardpaneldefs { get; set; }

    public virtual DbSet<JDashboardpaneldefset> JDashboardpaneldefsets { get; set; }

    public virtual DbSet<JDashboardset> JDashboardsets { get; set; }

    public virtual DbSet<JDatabaseobjectsize> JDatabaseobjectsizes { get; set; }

    public virtual DbSet<JDelivery> JDeliveries { get; set; }

    public virtual DbSet<JDeliveryentry> JDeliveryentries { get; set; }

    public virtual DbSet<JDeliveryinfo> JDeliveryinfos { get; set; }

    public virtual DbSet<JDeliverynote> JDeliverynotes { get; set; }

    public virtual DbSet<JDeliverynotecontainer> JDeliverynotecontainers { get; set; }

    public virtual DbSet<JDeliverynoteentry> JDeliverynoteentries { get; set; }

    public virtual DbSet<JDeliverynoteentryorder> JDeliverynoteentryorders { get; set; }

    public virtual DbSet<JDeliverynoteinfo> JDeliverynoteinfos { get; set; }

    public virtual DbSet<JDeliverynoteorder> JDeliverynoteorders { get; set; }

    public virtual DbSet<JDemand> JDemands { get; set; }

    public virtual DbSet<JDemandcategory> JDemandcategories { get; set; }

    public virtual DbSet<JDemandcategoryinfo> JDemandcategoryinfos { get; set; }

    public virtual DbSet<JDestlocationCarrier> JDestlocationCarriers { get; set; }

    public virtual DbSet<JDnoteentryDnoteorder> JDnoteentryDnoteorders { get; set; }

    public virtual DbSet<JDoccfg> JDoccfgs { get; set; }

    public virtual DbSet<JDoccfgitem> JDoccfgitems { get; set; }

    public virtual DbSet<JDocdef> JDocdefs { get; set; }

    public virtual DbSet<JDocdefpropertyset> JDocdefpropertysets { get; set; }

    public virtual DbSet<JEdicfg> JEdicfgs { get; set; }

    public virtual DbSet<JEdicfgitem> JEdicfgitems { get; set; }

    public virtual DbSet<JEdidef> JEdidefs { get; set; }

    public virtual DbSet<JEdidefpropertyset> JEdidefpropertysets { get; set; }

    public virtual DbSet<JErpentity> JErpentities { get; set; }

    public virtual DbSet<JErpentityset> JErpentitysets { get; set; }

    public virtual DbSet<JErpentitytype> JErpentitytypes { get; set; }

    public virtual DbSet<JErpentitytypeset> JErpentitytypesets { get; set; }

    public virtual DbSet<JErptranshist> JErptranshists { get; set; }

    public virtual DbSet<JFailuredetail> JFailuredetails { get; set; }

    public virtual DbSet<JFailuredetailset> JFailuredetailsets { get; set; }

    public virtual DbSet<JFailurereason> JFailurereasons { get; set; }

    public virtual DbSet<JFailurereasonclass> JFailurereasonclasses { get; set; }

    public virtual DbSet<JFailurereasonclassmember> JFailurereasonclassmembers { get; set; }

    public virtual DbSet<JFailurereasonset> JFailurereasonsets { get; set; }

    public virtual DbSet<JFile> JFiles { get; set; }

    public virtual DbSet<JFileset> JFilesets { get; set; }

    public virtual DbSet<JFreasongroup> JFreasongroups { get; set; }

    public virtual DbSet<JFreasongroupgmember> JFreasongroupgmembers { get; set; }

    public virtual DbSet<JFreasongroupmember> JFreasongroupmembers { get; set; }

    public virtual DbSet<JGroup> JGroups { get; set; }

    public virtual DbSet<JGroupmember> JGroupmembers { get; set; }

    public virtual DbSet<JGroupset> JGroupsets { get; set; }

    public virtual DbSet<JHelpkey> JHelpkeys { get; set; }

    public virtual DbSet<JHelpkeyset> JHelpkeysets { get; set; }

    public virtual DbSet<JHelpmap> JHelpmaps { get; set; }

    public virtual DbSet<JHelpmapentry> JHelpmapentries { get; set; }

    public virtual DbSet<JHelpprovider> JHelpproviders { get; set; }

    public virtual DbSet<JHelpproviderset> JHelpprovidersets { get; set; }

    public virtual DbSet<JImage> JImages { get; set; }

    public virtual DbSet<JImagepoint> JImagepoints { get; set; }

    public virtual DbSet<JImageregion> JImageregions { get; set; }

    public virtual DbSet<JImageregionmap> JImageregionmaps { get; set; }

    public virtual DbSet<JImageset> JImagesets { get; set; }

    public virtual DbSet<JImagesetclass> JImagesetclasses { get; set; }

    public virtual DbSet<JImagesetclassmember> JImagesetclassmembers { get; set; }

    public virtual DbSet<JInfotemplate> JInfotemplates { get; set; }

    public virtual DbSet<JKpi> JKpis { get; set; }

    public virtual DbSet<JKpicol> JKpicols { get; set; }

    public virtual DbSet<JKpiset> JKpisets { get; set; }

    public virtual DbSet<JKpivalue> JKpivalues { get; set; }

    public virtual DbSet<JLanguage> JLanguages { get; set; }

    public virtual DbSet<JLoadercontrol> JLoadercontrols { get; set; }

    public virtual DbSet<JLoaderevent> JLoaderevents { get; set; }

    public virtual DbSet<JLoaderparam> JLoaderparams { get; set; }

    public virtual DbSet<JLoadplanentry> JLoadplanentries { get; set; }

    public virtual DbSet<JLoadplanentryinfo> JLoadplanentryinfos { get; set; }

    public virtual DbSet<JLocation> JLocations { get; set; }

    public virtual DbSet<JLocationTour> JLocationTours { get; set; }

    public virtual DbSet<JLocationTtemplate> JLocationTtemplates { get; set; }

    public virtual DbSet<JLocationclass> JLocationclasses { get; set; }

    public virtual DbSet<JLocationclassmember> JLocationclassmembers { get; set; }

    public virtual DbSet<JLocationinfo> JLocationinfos { get; set; }

    public virtual DbSet<JLock> JLocks { get; set; }

    public virtual DbSet<JLog> JLogs { get; set; }

    public virtual DbSet<JLogadviceinfo> JLogadviceinfos { get; set; }

    public virtual DbSet<JLogalert> JLogalerts { get; set; }

    public virtual DbSet<JLogattrsubject> JLogattrsubjects { get; set; }

    public virtual DbSet<JLogcontainer> JLogcontainers { get; set; }

    public virtual DbSet<JLogcontainerentry> JLogcontainerentries { get; set; }

    public virtual DbSet<JLogcontainerrule> JLogcontainerrules { get; set; }

    public virtual DbSet<JLogcontainerset> JLogcontainersets { get; set; }

    public virtual DbSet<JLogcontainersetinfo> JLogcontainersetinfos { get; set; }

    public virtual DbSet<JLogcontainersetloc> JLogcontainersetlocs { get; set; }

    public virtual DbSet<JLogcontainersubject> JLogcontainersubjects { get; set; }

    public virtual DbSet<JLogcontainertype> JLogcontainertypes { get; set; }

    public virtual DbSet<JLogcontainerusage> JLogcontainerusages { get; set; }

    public virtual DbSet<JLogcontractinfo> JLogcontractinfos { get; set; }

    public virtual DbSet<JLogentry> JLogentries { get; set; }

    public virtual DbSet<JLogentryinfo> JLogentryinfos { get; set; }

    public virtual DbSet<JLoggroupmember> JLoggroupmembers { get; set; }

    public virtual DbSet<JLoginpolicy> JLoginpolicies { get; set; }

    public virtual DbSet<JLoginpolicyitem> JLoginpolicyitems { get; set; }

    public virtual DbSet<JLogprodjob> JLogprodjobs { get; set; }

    public virtual DbSet<JLogprodstepinfo> JLogprodstepinfos { get; set; }

    public virtual DbSet<JLogprodunitinfo> JLogprodunitinfos { get; set; }

    public virtual DbSet<JLogproperty> JLogproperties { get; set; }

    public virtual DbSet<JLogpropertyset> JLogpropertysets { get; set; }

    public virtual DbSet<JLogserver> JLogservers { get; set; }

    public virtual DbSet<JLogservice> JLogservices { get; set; }

    public virtual DbSet<JLogservicedef> JLogservicedefs { get; set; }

    public virtual DbSet<JLogservicedefpropertyset> JLogservicedefpropertysets { get; set; }

    public virtual DbSet<JLogservicepropertyset> JLogservicepropertysets { get; set; }

    public virtual DbSet<JLogset> JLogsets { get; set; }

    public virtual DbSet<JLogstation> JLogstations { get; set; }

    public virtual DbSet<JLogstockcfg> JLogstockcfgs { get; set; }

    public virtual DbSet<JLogsubject> JLogsubjects { get; set; }

    public virtual DbSet<JLogsubjectcomp> JLogsubjectcomps { get; set; }

    public virtual DbSet<JLogsubjectcompelem> JLogsubjectcompelems { get; set; }

    public virtual DbSet<JLoguser> JLogusers { get; set; }

    public virtual DbSet<JLoguserinfo> JLoguserinfos { get; set; }

    public virtual DbSet<JLoguserrole> JLoguserroles { get; set; }

    public virtual DbSet<JMaintdef> JMaintdefs { get; set; }

    public virtual DbSet<JMaintdefclass> JMaintdefclasses { get; set; }

    public virtual DbSet<JMaintdefclassmember> JMaintdefclassmembers { get; set; }

    public virtual DbSet<JMaintdefcond> JMaintdefconds { get; set; }

    public virtual DbSet<JMaintdefinstr> JMaintdefinstrs { get; set; }

    public virtual DbSet<JMaintdefmaterial> JMaintdefmaterials { get; set; }

    public virtual DbSet<JMaintdefprodtool> JMaintdefprodtools { get; set; }

    public virtual DbSet<JMaintdefprodunit> JMaintdefprodunits { get; set; }

    public virtual DbSet<JMaintdefset> JMaintdefsets { get; set; }

    public virtual DbSet<JMaintjob> JMaintjobs { get; set; }

    public virtual DbSet<JMaintjobdatum> JMaintjobdata { get; set; }

    public virtual DbSet<JMaintjobmaterial> JMaintjobmaterials { get; set; }

    public virtual DbSet<JMaintjobset> JMaintjobsets { get; set; }

    public virtual DbSet<JMaintprov> JMaintprovs { get; set; }

    public virtual DbSet<JMaintprovset> JMaintprovsets { get; set; }

    public virtual DbSet<JMeasurement> JMeasurements { get; set; }

    public virtual DbSet<JMeasurementset> JMeasurementsets { get; set; }

    public virtual DbSet<JMenu> JMenus { get; set; }

    public virtual DbSet<JMenuitem> JMenuitems { get; set; }

    public virtual DbSet<JMergerobjectinstr> JMergerobjectinstrs { get; set; }

    public virtual DbSet<JMergerresult> JMergerresults { get; set; }

    public virtual DbSet<JMergerresultitem> JMergerresultitems { get; set; }

    public virtual DbSet<JMessagecfg> JMessagecfgs { get; set; }

    public virtual DbSet<JMessagecfgset> JMessagecfgsets { get; set; }

    public virtual DbSet<JMessagecommand> JMessagecommands { get; set; }

    public virtual DbSet<JMontrafficlight> JMontrafficlights { get; set; }

    public virtual DbSet<JMontrafficlightentry> JMontrafficlightentries { get; set; }

    public virtual DbSet<JMsignotification> JMsignotifications { get; set; }

    public virtual DbSet<JObjectcache> JObjectcaches { get; set; }

    public virtual DbSet<JObjectcacheentry> JObjectcacheentries { get; set; }

    public virtual DbSet<JObjectlog> JObjectlogs { get; set; }

    public virtual DbSet<JObjectlogcontrol> JObjectlogcontrols { get; set; }

    public virtual DbSet<JOrder> JOrders { get; set; }

    public virtual DbSet<JOrderbuffer> JOrderbuffers { get; set; }

    public virtual DbSet<JOrderbufferclass> JOrderbufferclasses { get; set; }

    public virtual DbSet<JOrderbufferclassmember> JOrderbufferclassmembers { get; set; }

    public virtual DbSet<JOrderbufferentry> JOrderbufferentries { get; set; }

    public virtual DbSet<JOrdercontrol> JOrdercontrols { get; set; }

    public virtual DbSet<JOrdercontrolresult> JOrdercontrolresults { get; set; }

    public virtual DbSet<JOrdercontrolresultitem> JOrdercontrolresultitems { get; set; }

    public virtual DbSet<JOrderentry> JOrderentries { get; set; }

    public virtual DbSet<JOrderentryinfo> JOrderentryinfos { get; set; }

    public virtual DbSet<JOrderevent> JOrderevents { get; set; }

    public virtual DbSet<JOrdereventcfg> JOrdereventcfgs { get; set; }

    public virtual DbSet<JOrderevententry> JOrderevententries { get; set; }

    public virtual DbSet<JOrdereventparam> JOrdereventparams { get; set; }

    public virtual DbSet<JOrderinfo> JOrderinfos { get; set; }

    public virtual DbSet<JOrdermgr> JOrdermgrs { get; set; }

    public virtual DbSet<JOrdermgrpropertyset> JOrdermgrpropertysets { get; set; }

    public virtual DbSet<JOrderproclog> JOrderproclogs { get; set; }

    public virtual DbSet<JPackcfg> JPackcfgs { get; set; }

    public virtual DbSet<JPackcfgset> JPackcfgsets { get; set; }

    public virtual DbSet<JPackingmaterial> JPackingmaterials { get; set; }

    public virtual DbSet<JPaintarea> JPaintareas { get; set; }

    public virtual DbSet<JPaintchannel> JPaintchannels { get; set; }

    public virtual DbSet<JPaintcolor> JPaintcolors { get; set; }

    public virtual DbSet<JPaintcolorinfo> JPaintcolorinfos { get; set; }

    public virtual DbSet<JPaintcolorseq> JPaintcolorseqs { get; set; }

    public virtual DbSet<JPaintplan> JPaintplans { get; set; }

    public virtual DbSet<JPaintplanentry> JPaintplanentries { get; set; }

    public virtual DbSet<JPaintplanentrydemand> JPaintplanentrydemands { get; set; }

    public virtual DbSet<JPaintplanentryelem> JPaintplanentryelems { get; set; }

    public virtual DbSet<JPaintplanentryinfo> JPaintplanentryinfos { get; set; }

    public virtual DbSet<JPaintplantemplate> JPaintplantemplates { get; set; }

    public virtual DbSet<JPaintplantemplateentry> JPaintplantemplateentries { get; set; }

    public virtual DbSet<JPaintunit> JPaintunits { get; set; }

    public virtual DbSet<JPaintunitskidtype> JPaintunitskidtypes { get; set; }

    public virtual DbSet<JPaintunitstate> JPaintunitstates { get; set; }

    public virtual DbSet<JPaintunitstateelem> JPaintunitstateelems { get; set; }

    public virtual DbSet<JPart> JParts { get; set; }

    public virtual DbSet<JPartbuffer> JPartbuffers { get; set; }

    public virtual DbSet<JPartbufferclass> JPartbufferclasses { get; set; }

    public virtual DbSet<JPartbufferclassmember> JPartbufferclassmembers { get; set; }

    public virtual DbSet<JPartbufferentry> JPartbufferentries { get; set; }

    public virtual DbSet<JPartdatum> JPartdata { get; set; }

    public virtual DbSet<JPartevent> JPartevents { get; set; }

    public virtual DbSet<JPartset> JPartsets { get; set; }

    public virtual DbSet<JParttransfer> JParttransfers { get; set; }

    public virtual DbSet<JPlugindef> JPlugindefs { get; set; }

    public virtual DbSet<JPlugindefpropertyset> JPlugindefpropertysets { get; set; }

    public virtual DbSet<JPolyconpaintevent> JPolyconpaintevents { get; set; }

    public virtual DbSet<JPptemplateentrydefelem> JPptemplateentrydefelems { get; set; }

    public virtual DbSet<JPrintcfg> JPrintcfgs { get; set; }

    public virtual DbSet<JPrintcfgset> JPrintcfgsets { get; set; }

    public virtual DbSet<JPrinter> JPrinters { get; set; }

    public virtual DbSet<JPrinterclass> JPrinterclasses { get; set; }

    public virtual DbSet<JPrinterclassmember> JPrinterclassmembers { get; set; }

    public virtual DbSet<JPrinterset> JPrintersets { get; set; }

    public virtual DbSet<JPrintitem> JPrintitems { get; set; }

    public virtual DbSet<JPrintlog> JPrintlogs { get; set; }

    public virtual DbSet<JProdcounter> JProdcounters { get; set; }

    public virtual DbSet<JProdcounterset> JProdcountersets { get; set; }

    public virtual DbSet<JProdevent> JProdevents { get; set; }

    public virtual DbSet<JProdeventdatum> JProdeventdata { get; set; }

    public virtual DbSet<JProdeventexport> JProdeventexports { get; set; }

    public virtual DbSet<JProdeventset> JProdeventsets { get; set; }

    public virtual DbSet<JProdflow> JProdflows { get; set; }

    public virtual DbSet<JProdflowaction> JProdflowactions { get; set; }

    public virtual DbSet<JProdflowset> JProdflowsets { get; set; }

    public virtual DbSet<JProdflowusage> JProdflowusages { get; set; }

    public virtual DbSet<JProdjob> JProdjobs { get; set; }

    public virtual DbSet<JProdjobbuffer> JProdjobbuffers { get; set; }

    public virtual DbSet<JProdjobbufferclass> JProdjobbufferclasses { get; set; }

    public virtual DbSet<JProdjobbufferclassm> JProdjobbufferclassms { get; set; }

    public virtual DbSet<JProdjobbufferentry> JProdjobbufferentries { get; set; }

    public virtual DbSet<JProdjobdatum> JProdjobdata { get; set; }

    public virtual DbSet<JProdjobdependency> JProdjobdependencies { get; set; }

    public virtual DbSet<JProdjobdependencyitem> JProdjobdependencyitems { get; set; }

    public virtual DbSet<JProdjobentry> JProdjobentries { get; set; }

    public virtual DbSet<JProdjobinfo> JProdjobinfos { get; set; }

    public virtual DbSet<JProdjobset> JProdjobsets { get; set; }

    public virtual DbSet<JProdlot> JProdlots { get; set; }

    public virtual DbSet<JProdlotcontainer> JProdlotcontainers { get; set; }

    public virtual DbSet<JProdlotdatum> JProdlotdata { get; set; }

    public virtual DbSet<JProdlotpart> JProdlotparts { get; set; }

    public virtual DbSet<JProdlotset> JProdlotsets { get; set; }

    public virtual DbSet<JProdnote> JProdnotes { get; set; }

    public virtual DbSet<JProdnoteentry> JProdnoteentries { get; set; }

    public virtual DbSet<JProdnoteset> JProdnotesets { get; set; }

    public virtual DbSet<JProdplan> JProdplans { get; set; }

    public virtual DbSet<JProdplanentry> JProdplanentries { get; set; }

    public virtual DbSet<JProdplanentryelem> JProdplanentryelems { get; set; }

    public virtual DbSet<JProdplanentrytype> JProdplanentrytypes { get; set; }

    public virtual DbSet<JProdplanentrytypeelem> JProdplanentrytypeelems { get; set; }

    public virtual DbSet<JProdplanentrytypeinfo> JProdplanentrytypeinfos { get; set; }

    public virtual DbSet<JProdplanset> JProdplansets { get; set; }

    public virtual DbSet<JProdplantype> JProdplantypes { get; set; }

    public virtual DbSet<JProdplantypeinfo> JProdplantypeinfos { get; set; }

    public virtual DbSet<JProdplantypeset> JProdplantypesets { get; set; }

    public virtual DbSet<JProdreplenishmentcfg> JProdreplenishmentcfgs { get; set; }

    public virtual DbSet<JProdreplenishmentcfgset> JProdreplenishmentcfgsets { get; set; }

    public virtual DbSet<JProdstat> JProdstats { get; set; }

    public virtual DbSet<JProdstatset> JProdstatsets { get; set; }

    public virtual DbSet<JProdstep> JProdsteps { get; set; }

    public virtual DbSet<JProdstepclass> JProdstepclasses { get; set; }

    public virtual DbSet<JProdstepclassmember> JProdstepclassmembers { get; set; }

    public virtual DbSet<JProdstepinfo> JProdstepinfos { get; set; }

    public virtual DbSet<JProdstepset> JProdstepsets { get; set; }

    public virtual DbSet<JProdstepstatus> JProdstepstatuses { get; set; }

    public virtual DbSet<JProdtool> JProdtools { get; set; }

    public virtual DbSet<JProdtooladvice> JProdtooladvices { get; set; }

    public virtual DbSet<JProdtoolclass> JProdtoolclasses { get; set; }

    public virtual DbSet<JProdtoolclassmember> JProdtoolclassmembers { get; set; }

    public virtual DbSet<JProdtoolinfo> JProdtoolinfos { get; set; }

    public virtual DbSet<JProdtoolset> JProdtoolsets { get; set; }

    public virtual DbSet<JProdtoolusage> JProdtoolusages { get; set; }

    public virtual DbSet<JProdtoolusageelem> JProdtoolusageelems { get; set; }

    public virtual DbSet<JProductfamily> JProductfamilies { get; set; }

    public virtual DbSet<JProductfamilyStockset> JProductfamilyStocksets { get; set; }

    public virtual DbSet<JProdunit> JProdunits { get; set; }

    public virtual DbSet<JProdunitadvice> JProdunitadvices { get; set; }

    public virtual DbSet<JProdunitcalendar> JProdunitcalendars { get; set; }

    public virtual DbSet<JProdunitclass> JProdunitclasses { get; set; }

    public virtual DbSet<JProdunitclassmember> JProdunitclassmembers { get; set; }

    public virtual DbSet<JProdunitdatum> JProdunitdata { get; set; }

    public virtual DbSet<JProdunitevent> JProdunitevents { get; set; }

    public virtual DbSet<JProduniteventdatum> JProduniteventdata { get; set; }

    public virtual DbSet<JProduniteventset> JProduniteventsets { get; set; }

    public virtual DbSet<JProdunitfreasongroup> JProdunitfreasongroups { get; set; }

    public virtual DbSet<JProdunitinfo> JProdunitinfos { get; set; }

    public virtual DbSet<JProdunitinterval> JProdunitintervals { get; set; }

    public virtual DbSet<JProdunitintervalinfo> JProdunitintervalinfos { get; set; }

    public virtual DbSet<JProdunitparam> JProdunitparams { get; set; }

    public virtual DbSet<JProdunitset> JProdunitsets { get; set; }

    public virtual DbSet<JProdunittool> JProdunittools { get; set; }

    public virtual DbSet<JProdunittoolinfo> JProdunittoolinfos { get; set; }

    public virtual DbSet<JProdversionclass> JProdversionclasses { get; set; }

    public virtual DbSet<JProdversionclassmember> JProdversionclassmembers { get; set; }

    public virtual DbSet<JProdversioninfo> JProdversioninfos { get; set; }

    public virtual DbSet<JProperty> JProperties { get; set; }

    public virtual DbSet<JPropertyset> JPropertysets { get; set; }

    public virtual DbSet<JPsprodevent> JPsprodevents { get; set; }

    public virtual DbSet<JPsprodeventdatum> JPsprodeventdata { get; set; }

    public virtual DbSet<JPurchasecontract> JPurchasecontracts { get; set; }

    public virtual DbSet<JPvss> JPvsses { get; set; }

    public virtual DbSet<JPvssarea> JPvssareas { get; set; }

    public virtual DbSet<JPvssareaprodunit> JPvssareaprodunits { get; set; }

    public virtual DbSet<JPvssboxdatum> JPvssboxdata { get; set; }

    public virtual DbSet<JPvssboxtype> JPvssboxtypes { get; set; }

    public virtual DbSet<JPvsscomp> JPvsscomps { get; set; }

    public virtual DbSet<JPvssloc> JPvsslocs { get; set; }

    public virtual DbSet<JPvssreason> JPvssreasons { get; set; }

    public virtual DbSet<JPvsssubject> JPvsssubjects { get; set; }

    public virtual DbSet<JPvsstype> JPvsstypes { get; set; }

    public virtual DbSet<JQualification> JQualifications { get; set; }

    public virtual DbSet<JQualificationclass> JQualificationclasses { get; set; }

    public virtual DbSet<JQualificationclassmember> JQualificationclassmembers { get; set; }

    public virtual DbSet<JQualificationset> JQualificationsets { get; set; }

    public virtual DbSet<JReport> JReports { get; set; }

    public virtual DbSet<JReportclass> JReportclasses { get; set; }

    public virtual DbSet<JReportclassmember> JReportclassmembers { get; set; }

    public virtual DbSet<JReportparam> JReportparams { get; set; }

    public virtual DbSet<JReportset> JReportsets { get; set; }

    public virtual DbSet<JReporttemptable> JReporttemptables { get; set; }

    public virtual DbSet<JReporttype> JReporttypes { get; set; }

    public virtual DbSet<JReporttypeset> JReporttypesets { get; set; }

    public virtual DbSet<JSadefBrand> JSadefBrands { get; set; }

    public virtual DbSet<JSadefChryslerappliquecolor> JSadefChryslerappliquecolors { get; set; }

    public virtual DbSet<JSadefChryslerbezeltcolor> JSadefChryslerbezeltcolors { get; set; }

    public virtual DbSet<JSadefChryslerengdevitype> JSadefChryslerengdevitypes { get; set; }

    public virtual DbSet<JSadefChryslerringcolor> JSadefChryslerringcolors { get; set; }

    public virtual DbSet<JSadefDoor> JSadefDoors { get; set; }

    public virtual DbSet<JSadefDrive> JSadefDrives { get; set; }

    public virtual DbSet<JSadefGmcountry> JSadefGmcountries { get; set; }

    public virtual DbSet<JSadefGmversion> JSadefGmversions { get; set; }

    public virtual DbSet<JSadefHorizposition> JSadefHorizpositions { get; set; }

    public virtual DbSet<JSadefLighting> JSadefLightings { get; set; }

    public virtual DbSet<JSadefOrdertype> JSadefOrdertypes { get; set; }

    public virtual DbSet<JSadefPartstyle> JSadefPartstyles { get; set; }

    public virtual DbSet<JSadefSide> JSadefSides { get; set; }

    public virtual DbSet<JSadefUppergrillestyle> JSadefUppergrillestyles { get; set; }

    public virtual DbSet<JSadefVertposition> JSadefVertpositions { get; set; }

    public virtual DbSet<JSalecontract> JSalecontracts { get; set; }

    public virtual DbSet<JSavalApp> JSavalApps { get; set; }

    public virtual DbSet<JSavalBlockheater> JSavalBlockheaters { get; set; }

    public virtual DbSet<JSavalBrand> JSavalBrands { get; set; }

    public virtual DbSet<JSavalBsd> JSavalBsds { get; set; }

    public virtual DbSet<JSavalBuxhitch> JSavalBuxhitches { get; set; }

    public virtual DbSet<JSavalCamera> JSavalCameras { get; set; }

    public virtual DbSet<JSavalChryslerappliquecolor> JSavalChryslerappliquecolors { get; set; }

    public virtual DbSet<JSavalChryslerbezeltrimcolor> JSavalChryslerbezeltrimcolors { get; set; }

    public virtual DbSet<JSavalChryslereafoam> JSavalChryslereafoams { get; set; }

    public virtual DbSet<JSavalChryslerengdevidate> JSavalChryslerengdevidates { get; set; }

    public virtual DbSet<JSavalChryslerengdevidoc> JSavalChryslerengdevidocs { get; set; }

    public virtual DbSet<JSavalChryslerengdevitype> JSavalChryslerengdevitypes { get; set; }

    public virtual DbSet<JSavalChryslerringcolor> JSavalChryslerringcolors { get; set; }

    public virtual DbSet<JSavalColor> JSavalColors { get; set; }

    public virtual DbSet<JSavalCuringtime> JSavalCuringtimes { get; set; }

    public virtual DbSet<JSavalCustPn> JSavalCustPns { get; set; }

    public virtual DbSet<JSavalDasm> JSavalDasms { get; set; }

    public virtual DbSet<JSavalDeposit> JSavalDeposits { get; set; }

    public virtual DbSet<JSavalDiesel> JSavalDiesels { get; set; }

    public virtual DbSet<JSavalDoor> JSavalDoors { get; set; }

    public virtual DbSet<JSavalDrive> JSavalDrives { get; set; }

    public virtual DbSet<JSavalDualexhaust> JSavalDualexhausts { get; set; }

    public virtual DbSet<JSavalFoglamp> JSavalFoglamps { get; set; }

    public virtual DbSet<JSavalGmcountry> JSavalGmcountries { get; set; }

    public virtual DbSet<JSavalGmversion> JSavalGmversions { get; set; }

    public virtual DbSet<JSavalHeadlampwasher> JSavalHeadlampwashers { get; set; }

    public virtual DbSet<JSavalHorizposition> JSavalHorizpositions { get; set; }

    public virtual DbSet<JSavalImage> JSavalImages { get; set; }

    public virtual DbSet<JSavalKicksensor> JSavalKicksensors { get; set; }

    public virtual DbSet<JSavalKicksensort> JSavalKicksensorts { get; set; }

    public virtual DbSet<JSavalLighting> JSavalLightings { get; set; }

    public virtual DbSet<JSavalMca> JSavalMcas { get; set; }

    public virtual DbSet<JSavalModelyear> JSavalModelyears { get; set; }

    public virtual DbSet<JSavalOpengrill> JSavalOpengrills { get; set; }

    public virtual DbSet<JSavalOption> JSavalOptions { get; set; }

    public virtual DbSet<JSavalParkingassistant> JSavalParkingassistants { get; set; }

    public virtual DbSet<JSavalPartstyle> JSavalPartstyles { get; set; }

    public virtual DbSet<JSavalPdc> JSavalPdcs { get; set; }

    public virtual DbSet<JSavalPed> JSavalPeds { get; set; }

    public virtual DbSet<JSavalPhantom> JSavalPhantoms { get; set; }

    public virtual DbSet<JSavalPicklocation> JSavalPicklocations { get; set; }

    public virtual DbSet<JSavalPlate> JSavalPlates { get; set; }

    public virtual DbSet<JSavalReflector> JSavalReflectors { get; set; }

    public virtual DbSet<JSavalReplacedbynew> JSavalReplacedbynews { get; set; }

    public virtual DbSet<JSavalSbza> JSavalSbzas { get; set; }

    public virtual DbSet<JSavalSecondpartnum> JSavalSecondpartnums { get; set; }

    public virtual DbSet<JSavalServiceorder> JSavalServiceorders { get; set; }

    public virtual DbSet<JSavalSide> JSavalSides { get; set; }

    public virtual DbSet<JSavalStandardprice> JSavalStandardprices { get; set; }

    public virtual DbSet<JSavalStdpackqty> JSavalStdpackqties { get; set; }

    public virtual DbSet<JSavalTirepressuremonitor> JSavalTirepressuremonitors { get; set; }

    public virtual DbSet<JSavalTowhook> JSavalTowhooks { get; set; }

    public virtual DbSet<JSavalTrackmaterial> JSavalTrackmaterials { get; set; }

    public virtual DbSet<JSavalTrailerhitch> JSavalTrailerhitches { get; set; }

    public virtual DbSet<JSavalUnitprice> JSavalUnitprices { get; set; }

    public virtual DbSet<JSavalUnitprice1> JSavalUnitprices1 { get; set; }

    public virtual DbSet<JSavalUppergrillestyle> JSavalUppergrillestyles { get; set; }

    public virtual DbSet<JSavalUseasordered> JSavalUseasordereds { get; set; }

    public virtual DbSet<JSavalValidation> JSavalValidations { get; set; }

    public virtual DbSet<JSavalVertposition> JSavalVertpositions { get; set; }

    public virtual DbSet<JSavalWeight> JSavalWeights { get; set; }

    public virtual DbSet<JSchedule> JSchedules { get; set; }

    public virtual DbSet<JScheduleentry> JScheduleentries { get; set; }

    public virtual DbSet<JScheduleentrystatus> JScheduleentrystatuses { get; set; }

    public virtual DbSet<JScheduleinfo> JScheduleinfos { get; set; }

    public virtual DbSet<JSchedulerelease> JSchedulereleases { get; set; }

    public virtual DbSet<JScriptdef> JScriptdefs { get; set; }

    public virtual DbSet<JSearchdef> JSearchdefs { get; set; }

    public virtual DbSet<JSelfcontract> JSelfcontracts { get; set; }

    public virtual DbSet<JServer> JServers { get; set; }

    public virtual DbSet<JServerlog> JServerlogs { get; set; }

    public virtual DbSet<JService> JServices { get; set; }

    public virtual DbSet<JServicedef> JServicedefs { get; set; }

    public virtual DbSet<JServicedefpropertyset> JServicedefpropertysets { get; set; }

    public virtual DbSet<JServicepropertyset> JServicepropertysets { get; set; }

    public virtual DbSet<JSession> JSessions { get; set; }

    public virtual DbSet<JSessioninfo> JSessioninfos { get; set; }

    public virtual DbSet<JSkid> JSkids { get; set; }

    public virtual DbSet<JSkidbuffer> JSkidbuffers { get; set; }

    public virtual DbSet<JSkidbufferclass> JSkidbufferclasses { get; set; }

    public virtual DbSet<JSkidbufferclassmember> JSkidbufferclassmembers { get; set; }

    public virtual DbSet<JSkidbufferentry> JSkidbufferentries { get; set; }

    public virtual DbSet<JSkiddatum> JSkiddata { get; set; }

    public virtual DbSet<JSkidevent> JSkidevents { get; set; }

    public virtual DbSet<JSkideventdatum> JSkideventdata { get; set; }

    public virtual DbSet<JSkideventset> JSkideventsets { get; set; }

    public virtual DbSet<JSkidinfo> JSkidinfos { get; set; }

    public virtual DbSet<JSkidinfoelem> JSkidinfoelems { get; set; }

    public virtual DbSet<JSkidinfoinfo> JSkidinfoinfos { get; set; }

    public virtual DbSet<JSkidset> JSkidsets { get; set; }

    public virtual DbSet<JSkidtype> JSkidtypes { get; set; }

    public virtual DbSet<JSkidtypecolor> JSkidtypecolors { get; set; }

    public virtual DbSet<JSkidtypeinfo> JSkidtypeinfos { get; set; }

    public virtual DbSet<JSkidtypeset> JSkidtypesets { get; set; }

    public virtual DbSet<JSkidusage> JSkidusages { get; set; }

    public virtual DbSet<JSkidusageelem> JSkidusageelems { get; set; }

    public virtual DbSet<JSnapshot> JSnapshots { get; set; }

    public virtual DbSet<JSnapshotset> JSnapshotsets { get; set; }

    public virtual DbSet<JStation> JStations { get; set; }

    public virtual DbSet<JStock> JStocks { get; set; }

    public virtual DbSet<JStockcfg> JStockcfgs { get; set; }

    public virtual DbSet<JStockchannel> JStockchannels { get; set; }

    public virtual DbSet<JStockclass> JStockclasses { get; set; }

    public virtual DbSet<JStockclassmember> JStockclassmembers { get; set; }

    public virtual DbSet<JStockcomponent> JStockcomponents { get; set; }

    public virtual DbSet<JStockentrydyn> JStockentrydyns { get; set; }

    public virtual DbSet<JStockentrymark> JStockentrymarks { get; set; }

    public virtual DbSet<JStockentrystat> JStockentrystats { get; set; }

    public virtual DbSet<JStockentrysubst> JStockentrysubsts { get; set; }

    public virtual DbSet<JStockevent> JStockevents { get; set; }

    public virtual DbSet<JStockinfo> JStockinfos { get; set; }

    public virtual DbSet<JStockinv> JStockinvs { get; set; }

    public virtual DbSet<JStockinvcontainerset> JStockinvcontainersets { get; set; }

    public virtual DbSet<JStockinvcresult> JStockinvcresults { get; set; }

    public virtual DbSet<JStockinvcresultitem> JStockinvcresultitems { get; set; }

    public virtual DbSet<JStockinvdiffitem> JStockinvdiffitems { get; set; }

    public virtual DbSet<JStockinvitem> JStockinvitems { get; set; }

    public virtual DbSet<JStockinvstockentry> JStockinvstockentries { get; set; }

    public virtual DbSet<JStockinvstockloc> JStockinvstocklocs { get; set; }

    public virtual DbSet<JStockinvstockloccnr> JStockinvstockloccnrs { get; set; }

    public virtual DbSet<JStockinvstockloccnrpart> JStockinvstockloccnrparts { get; set; }

    public virtual DbSet<JStockinvstocklocpart> JStockinvstocklocparts { get; set; }

    public virtual DbSet<JStockinvstocklocsubject> JStockinvstocklocsubjects { get; set; }

    public virtual DbSet<JStockinvtype> JStockinvtypes { get; set; }

    public virtual DbSet<JStockloc> JStocklocs { get; set; }

    public virtual DbSet<JStocklocclass> JStocklocclasses { get; set; }

    public virtual DbSet<JStocklocclassdefelem> JStocklocclassdefelems { get; set; }

    public virtual DbSet<JStocklocclassmember> JStocklocclassmembers { get; set; }

    public virtual DbSet<JStockloccontainer> JStockloccontainers { get; set; }

    public virtual DbSet<JStocklocinfo> JStocklocinfos { get; set; }

    public virtual DbSet<JStocklocpart> JStocklocparts { get; set; }

    public virtual DbSet<JStocklocstatus> JStocklocstatuses { get; set; }

    public virtual DbSet<JStocklocsubject> JStocklocsubjects { get; set; }

    public virtual DbSet<JStockloctype> JStockloctypes { get; set; }

    public virtual DbSet<JStockre> JStockres { get; set; }

    public virtual DbSet<JStockset> JStocksets { get; set; }

    public virtual DbSet<JStockstorage> JStockstorages { get; set; }

    public virtual DbSet<JStockstorageelem> JStockstorageelems { get; set; }

    public virtual DbSet<JStockstorageelemloc> JStockstorageelemlocs { get; set; }

    public virtual DbSet<JStockstoragepoint> JStockstoragepoints { get; set; }

    public virtual DbSet<JStocksubstevent> JStocksubstevents { get; set; }

    public virtual DbSet<JStocktag> JStocktags { get; set; }

    public virtual DbSet<JStocktagset> JStocktagsets { get; set; }

    public virtual DbSet<JSubject> JSubjects { get; set; }

    public virtual DbSet<JSubjectSkidusageelem> JSubjectSkidusageelems { get; set; }

    public virtual DbSet<JSubjectattr> JSubjectattrs { get; set; }

    public virtual DbSet<JSubjectattrinfo> JSubjectattrinfos { get; set; }

    public virtual DbSet<JSubjectattrpropa> JSubjectattrpropas { get; set; }

    public virtual DbSet<JSubjectclass> JSubjectclasses { get; set; }

    public virtual DbSet<JSubjectclassSubject> JSubjectclassSubjects { get; set; }

    public virtual DbSet<JSubjectclassdefelem> JSubjectclassdefelems { get; set; }

    public virtual DbSet<JSubjectcomp> JSubjectcomps { get; set; }

    public virtual DbSet<JSubjectcompelem> JSubjectcompelems { get; set; }

    public virtual DbSet<JSubjectcomptype> JSubjectcomptypes { get; set; }

    public virtual DbSet<JSubjectinfo> JSubjectinfos { get; set; }

    public virtual DbSet<JSubjectstatus> JSubjectstatuses { get; set; }

    public virtual DbSet<JSubjecttype> JSubjecttypes { get; set; }

    public virtual DbSet<JSubjecttypeattr> JSubjecttypeattrs { get; set; }

    public virtual DbSet<JSubjecttypeinfo> JSubjecttypeinfos { get; set; }

    public virtual DbSet<JSupply> JSupplies { get; set; }

    public virtual DbSet<JSupplyentry> JSupplyentries { get; set; }

    public virtual DbSet<JSupplynote> JSupplynotes { get; set; }

    public virtual DbSet<JSupplynotecontainer> JSupplynotecontainers { get; set; }

    public virtual DbSet<JSupplynoteentry> JSupplynoteentries { get; set; }

    public virtual DbSet<JSupplynoteentryorder> JSupplynoteentryorders { get; set; }

    public virtual DbSet<JSupplynoteinfo> JSupplynoteinfos { get; set; }

    public virtual DbSet<JSupplynoteorder> JSupplynoteorders { get; set; }

    public virtual DbSet<JSupplynotepart> JSupplynoteparts { get; set; }

    public virtual DbSet<JSystem> JSystems { get; set; }

    public virtual DbSet<JText> JTexts { get; set; }

    public virtual DbSet<JTextcategory> JTextcategories { get; set; }

    public virtual DbSet<JTicket> JTickets { get; set; }

    public virtual DbSet<JTicketset> JTicketsets { get; set; }

    public virtual DbSet<JTicketworkflow> JTicketworkflows { get; set; }

    public virtual DbSet<JTicketworkflowset> JTicketworkflowsets { get; set; }

    public virtual DbSet<JTicketworkflowstate> JTicketworkflowstates { get; set; }

    public virtual DbSet<JToken> JTokens { get; set; }

    public virtual DbSet<JTokenset> JTokensets { get; set; }

    public virtual DbSet<JTool> JTools { get; set; }

    public virtual DbSet<JToolaccessright> JToolaccessrights { get; set; }

    public virtual DbSet<JToolaccessrightset> JToolaccessrightsets { get; set; }

    public virtual DbSet<JTooldef> JTooldefs { get; set; }

    public virtual DbSet<JTooldefpropertyset> JTooldefpropertysets { get; set; }

    public virtual DbSet<JToolgroup> JToolgroups { get; set; }

    public virtual DbSet<JToolpropertyset> JToolpropertysets { get; set; }

    public virtual DbSet<JTour> JTours { get; set; }

    public virtual DbSet<JTourcontainer> JTourcontainers { get; set; }

    public virtual DbSet<JTourcontainerdemand> JTourcontainerdemands { get; set; }

    public virtual DbSet<JToureventcfg> JToureventcfgs { get; set; }

    public virtual DbSet<JToureventcfgcontract> JToureventcfgcontracts { get; set; }

    public virtual DbSet<JToureventcfgparam> JToureventcfgparams { get; set; }

    public virtual DbSet<JTourinfo> JTourinfos { get; set; }

    public virtual DbSet<JTourset> JToursets { get; set; }

    public virtual DbSet<JTourtemplate> JTourtemplates { get; set; }

    public virtual DbSet<JTourtemplateinfo> JTourtemplateinfos { get; set; }

    public virtual DbSet<JTransferconnclass> JTransferconnclasses { get; set; }

    public virtual DbSet<JTransferconnclassm> JTransferconnclassms { get; set; }

    public virtual DbSet<JTransferconnection> JTransferconnections { get; set; }

    public virtual DbSet<JTransfercontrol> JTransfercontrols { get; set; }

    public virtual DbSet<JTransfercpacket> JTransfercpackets { get; set; }

    public virtual DbSet<JTransfercpacketdone> JTransfercpacketdones { get; set; }

    public virtual DbSet<JTransfercpacketmessage> JTransfercpacketmessages { get; set; }

    public virtual DbSet<JTransfercpacketref> JTransfercpacketrefs { get; set; }

    public virtual DbSet<JTransfercpacketstatus> JTransfercpacketstatuses { get; set; }

    public virtual DbSet<JTransfermessage> JTransfermessages { get; set; }

    public virtual DbSet<JTransferpacket> JTransferpackets { get; set; }

    public virtual DbSet<JTransferpacketdone> JTransferpacketdones { get; set; }

    public virtual DbSet<JTransferrecord> JTransferrecords { get; set; }

    public virtual DbSet<JTransferspacket> JTransferspackets { get; set; }

    public virtual DbSet<JTransferspacketmessage> JTransferspacketmessages { get; set; }

    public virtual DbSet<JTransferspacketref> JTransferspacketrefs { get; set; }

    public virtual DbSet<JTransition> JTransitions { get; set; }

    public virtual DbSet<JTransitioninfo> JTransitioninfos { get; set; }

    public virtual DbSet<JTransitioninfocontrol> JTransitioninfocontrols { get; set; }

    public virtual DbSet<JTransitionset> JTransitionsets { get; set; }

    public virtual DbSet<JTransitiontype> JTransitiontypes { get; set; }

    public virtual DbSet<JTransitiontypeset> JTransitiontypesets { get; set; }

    public virtual DbSet<JTranslation> JTranslations { get; set; }

    public virtual DbSet<JTrucktype> JTrucktypes { get; set; }

    public virtual DbSet<JTrucktypeinfo> JTrucktypeinfos { get; set; }

    public virtual DbSet<JUnitofmeasure> JUnitofmeasures { get; set; }

    public virtual DbSet<JUsedasedlcontract> JUsedasedlcontracts { get; set; }

    public virtual DbSet<JUser> JUsers { get; set; }

    public virtual DbSet<JUseridentpolicy> JUseridentpolicies { get; set; }

    public virtual DbSet<JUserinfo> JUserinfos { get; set; }

    public virtual DbSet<JUserqualification> JUserqualifications { get; set; }

    public virtual DbSet<JUserqualificationevent> JUserqualificationevents { get; set; }

    public virtual DbSet<JUserrole> JUserroles { get; set; }

    public virtual DbSet<JUserset> JUsersets { get; set; }

    public virtual DbSet<JUsersetting> JUsersettings { get; set; }

    public virtual DbSet<JUsingedlcontract> JUsingedlcontracts { get; set; }

    public virtual DbSet<JVersioninfo> JVersioninfos { get; set; }

    public virtual DbSet<JVideo> JVideos { get; set; }

    public virtual DbSet<JVideoset> JVideosets { get; set; }

    public virtual DbSet<JWorkflow> JWorkflows { get; set; }

    public virtual DbSet<JWorkflowjob> JWorkflowjobs { get; set; }

    public virtual DbSet<JWorkflowjobentry> JWorkflowjobentries { get; set; }

    public virtual DbSet<JWorkflowjobset> JWorkflowjobsets { get; set; }

    public virtual DbSet<JWorkflowset> JWorkflowsets { get; set; }

    public virtual DbSet<JWorkflowtask> JWorkflowtasks { get; set; }

    public virtual DbSet<JWorktime> JWorktimes { get; set; }

    public virtual DbSet<JWorktimeinfo> JWorktimeinfos { get; set; }

    public virtual DbSet<JWorktimeset> JWorktimesets { get; set; }

    public virtual DbSet<JitLockcache> JitLockcaches { get; set; }

    public virtual DbSet<JitSessioncache> JitSessioncaches { get; set; }

    public virtual DbSet<PlanTable> PlanTables { get; set; }

    public virtual DbSet<ToadPlanTable> ToadPlanTables { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        optionsBuilder.UseOracle("User Id=cust;Password=custcust;Data Source=10.100.87.7:1521/JITPROD.TOLUCA.MAGNA;", options =>
        {
            options.UseOracleSQLCompatibility("11");
        });
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.HasDefaultSchema("CUST");

        modelBuilder.Entity<BChangeOeState>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("B_CHANGE_OE_STATE", "JITTOE");

            entity.Property(e => e.OeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OE_ID");
            entity.Property(e => e.OeState)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("OE_STATE");
        });

        modelBuilder.Entity<BOeState>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("B_OE_STATE", "JITTOE");

            entity.Property(e => e.OId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("O_ID");
        });

        modelBuilder.Entity<BOeStateCalled>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("B_OE_STATE_CALLED", "JITTOE");

            entity.Property(e => e.OeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OE_ID");
        });

        modelBuilder.Entity<BOeStateChange>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("B_OE_STATE_CHANGE", "JITTOE");

            entity.Property(e => e.OeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OE_ID");
        });

        modelBuilder.Entity<BProperty>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("B_PROPERTY", "JITTOE");

            entity.Property(e => e.ProDescr)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("PRO_DESCR");
            entity.Property(e => e.ProEnabled)
                .HasPrecision(1)
                .HasColumnName("PRO_ENABLED");
            entity.Property(e => e.ProId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRO_ID");
            entity.Property(e => e.ProKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PRO_KEY");
            entity.Property(e => e.ProLength)
                .HasPrecision(3)
                .HasColumnName("PRO_LENGTH");
            entity.Property(e => e.ProName)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PRO_NAME");
            entity.Property(e => e.ProOwner)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("PRO_OWNER");
            entity.Property(e => e.ProPropertysetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRO_PROPERTYSET_ID");
            entity.Property(e => e.ProTcreation)
                .HasColumnType("DATE")
                .HasColumnName("PRO_TCREATION");
            entity.Property(e => e.ProTupdate)
                .HasColumnType("DATE")
                .HasColumnName("PRO_TUPDATE");
            entity.Property(e => e.ProValue)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasColumnName("PRO_VALUE");
            entity.Property(e => e.ProValuetype)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("PRO_VALUETYPE");
        });

        modelBuilder.Entity<BQuery>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("B_QUERIES", "JITTOE");

            entity.Property(e => e.SqlId)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("SQL_ID");
        });

        modelBuilder.Entity<BReworkjob>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("B_REWORKJOBS", "JITTOE");

            entity.Property(e => e.PjAltseqno)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("PJ_ALTSEQNO");
            entity.Property(e => e.PjCommcontrolId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJ_COMMCONTROL_ID");
            entity.Property(e => e.PjContainerId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJ_CONTAINER_ID");
            entity.Property(e => e.PjDeletionid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJ_DELETIONID");
            entity.Property(e => e.PjDescr)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PJ_DESCR");
            entity.Property(e => e.PjDeststockId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJ_DESTSTOCK_ID");
            entity.Property(e => e.PjDeststocklocId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJ_DESTSTOCKLOC_ID");
            entity.Property(e => e.PjId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJ_ID");
            entity.Property(e => e.PjNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PJ_NO");
            entity.Property(e => e.PjOrderId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJ_ORDER_ID");
            entity.Property(e => e.PjParentId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJ_PARENT_ID");
            entity.Property(e => e.PjProdjobsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJ_PRODJOBSET_ID");
            entity.Property(e => e.PjProdreplenishmentcfgId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJ_PRODREPLENISHMENTCFG_ID");
            entity.Property(e => e.PjProdstepId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJ_PRODSTEP_ID");
            entity.Property(e => e.PjProdunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJ_PRODUNIT_ID");
            entity.Property(e => e.PjRetries)
                .HasPrecision(6)
                .HasColumnName("PJ_RETRIES");
            entity.Property(e => e.PjRetryreason)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("PJ_RETRYREASON");
            entity.Property(e => e.PjScheduledtime)
                .HasColumnType("DATE")
                .HasColumnName("PJ_SCHEDULEDTIME");
            entity.Property(e => e.PjSeqno)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("PJ_SEQNO");
            entity.Property(e => e.PjSourcestocklocId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJ_SOURCESTOCKLOC_ID");
            entity.Property(e => e.PjStartseq)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJ_STARTSEQ");
            entity.Property(e => e.PjState)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("PJ_STATE");
            entity.Property(e => e.PjStrategy)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("PJ_STRATEGY");
            entity.Property(e => e.PjTcreation)
                .HasColumnType("DATE")
                .HasColumnName("PJ_TCREATION");
            entity.Property(e => e.PjTdeletion)
                .HasColumnType("DATE")
                .HasColumnName("PJ_TDELETION");
            entity.Property(e => e.PjTupdate)
                .HasColumnType("DATE")
                .HasColumnName("PJ_TUPDATE");
            entity.Property(e => e.PrsAltlabeltype)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("PRS_ALTLABELTYPE");
            entity.Property(e => e.PrsCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PRS_CODE");
            entity.Property(e => e.PrsDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PRS_DESCR");
            entity.Property(e => e.PrsDoccfgId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRS_DOCCFG_ID");
            entity.Property(e => e.PrsDohandlestock)
                .HasPrecision(1)
                .HasColumnName("PRS_DOHANDLESTOCK");
            entity.Property(e => e.PrsFreasonsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRS_FREASONSET_ID");
            entity.Property(e => e.PrsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRS_ID");
            entity.Property(e => e.PrsKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PRS_KEY");
            entity.Property(e => e.PrsKind)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PRS_KIND");
            entity.Property(e => e.PrsLabeltype)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("PRS_LABELTYPE");
            entity.Property(e => e.PrsProdstepsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRS_PRODSTEPSET_ID");
            entity.Property(e => e.PrsTcreation)
                .HasColumnType("DATE")
                .HasColumnName("PRS_TCREATION");
        });

        modelBuilder.Entity<BReworkpart>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("B_REWORKPARTS", "JITTOE");

            entity.Property(e => e.PContainerentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("P_CONTAINERENTRY_ID");
            entity.Property(e => e.PDoccfgId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("P_DOCCFG_ID");
            entity.Property(e => e.PId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("P_ID");
            entity.Property(e => e.PNo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("P_NO");
            entity.Property(e => e.POrderentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("P_ORDERENTRY_ID");
            entity.Property(e => e.PParentpartId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("P_PARENTPART_ID");
            entity.Property(e => e.PPartsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("P_PARTSET_ID");
            entity.Property(e => e.PProdunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("P_PRODUNIT_ID");
            entity.Property(e => e.PQualityclass)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("P_QUALITYCLASS");
            entity.Property(e => e.PRefpartId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("P_REFPART_ID");
            entity.Property(e => e.PStockId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("P_STOCK_ID");
            entity.Property(e => e.PSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("P_SUBJECT_ID");
            entity.Property(e => e.PTcreation)
                .HasColumnType("DATE")
                .HasColumnName("P_TCREATION");
            entity.Property(e => e.PTupdate)
                .HasColumnType("DATE")
                .HasColumnName("P_TUPDATE");
        });

        modelBuilder.Entity<CorOutboxEntry>(entity =>
        {
            entity.HasKey(e => e.CId).HasName("PK_OUTBOX_ENTRY");

            entity.ToTable("COR_OUTBOX_ENTRY", "JITTOE");

            entity.Property(e => e.CId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("C_ID");
            entity.Property(e => e.CCreatedDateTime)
                .HasColumnType("DATE")
                .HasColumnName("C_CREATED_DATE_TIME");
            entity.Property(e => e.CMessagePriority)
                .HasPrecision(4)
                .HasColumnName("C_MESSAGE_PRIORITY");
            entity.Property(e => e.CTenantId)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("C_TENANT_ID");
            entity.Property(e => e.CWasProcessed)
                .HasPrecision(1)
                .HasColumnName("C_WAS_PROCESSED");
            entity.Property(e => e.CXml)
                .HasColumnType("BLOB")
                .HasColumnName("C_XML");
        });

        modelBuilder.Entity<CorOutboxHeader>(entity =>
        {
            entity.HasKey(e => e.CId).HasName("PK_OUTBOX_HEADERS");

            entity.ToTable("COR_OUTBOX_HEADERS", "JITTOE");

            entity.HasIndex(e => e.COutboxId, "I_OUTBOX_ENTRY_HEADERS");

            entity.Property(e => e.CId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("C_ID");
            entity.Property(e => e.CHeaderKey)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("C_HEADER_KEY");
            entity.Property(e => e.CHeaderValue)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("C_HEADER_VALUE");
            entity.Property(e => e.COutboxId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("C_OUTBOX_ID");

            entity.HasOne(d => d.COutbox).WithMany(p => p.CorOutboxHeaders)
                .HasForeignKey(d => d.COutboxId)
                .HasConstraintName("FK_OUTBOX_ENTRY_HEADERS");
        });

        modelBuilder.Entity<DsNissanfromprod>(entity =>
        {
            entity.HasKey(e => e.NfpId);

            entity.ToTable("DS_NISSANFROMPROD", "JITTOE");

            entity.HasIndex(e => new { e.NfpHdrserial, e.NfpDeletionid }, "UN_NFP_SERIAL").IsUnique();

            entity.Property(e => e.NfpId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("NFP_ID");
            entity.Property(e => e.NfpDeletionid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("NFP_DELETIONID");
            entity.Property(e => e.NfpHdrserial)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("NFP_HDRSERIAL");
            entity.Property(e => e.NfpTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("NFP_TCREATION");
            entity.Property(e => e.NfpTdeletion)
                .HasColumnType("DATE")
                .HasColumnName("NFP_TDELETION");
        });

        modelBuilder.Entity<DsNissanfromproditem>(entity =>
        {
            entity.HasKey(e => e.NfpiId);

            entity.ToTable("DS_NISSANFROMPRODITEM", "JITTOE");

            entity.HasIndex(e => e.NfpiNissanfromprodId, "I_DSNFPROD_DSNFPRODITEM");

            entity.HasIndex(e => new { e.NfpiNissanfromprodId, e.NfpiKey1, e.NfpiKey2, e.NfpiKey3 }, "UN_NFPI_ITEM").IsUnique();

            entity.Property(e => e.NfpiId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("NFPI_ID");
            entity.Property(e => e.NfpiKey1)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("NFPI_KEY1");
            entity.Property(e => e.NfpiKey2)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("NFPI_KEY2");
            entity.Property(e => e.NfpiKey3)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("NFPI_KEY3");
            entity.Property(e => e.NfpiNissanfromprodId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("NFPI_NISSANFROMPROD_ID");
            entity.Property(e => e.NfpiStringvalue)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("NFPI_STRINGVALUE");
            entity.Property(e => e.NfpiTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("NFPI_TCREATION");
            entity.Property(e => e.NfpiTimevalue)
                .HasColumnType("DATE")
                .HasColumnName("NFPI_TIMEVALUE");

            entity.HasOne(d => d.NfpiNissanfromprod).WithMany(p => p.DsNissanfromproditems)
                .HasForeignKey(d => d.NfpiNissanfromprodId)
                .HasConstraintName("FK_DSNFPROD_DSNFPRODITEM");
        });

        modelBuilder.Entity<DsNissantoprod>(entity =>
        {
            entity.HasKey(e => e.NtpId);

            entity.ToTable("DS_NISSANTOPROD", "JITTOE");

            entity.HasIndex(e => e.NtpDeletionid, "I_DSNTP_DELETIONID");

            entity.HasIndex(e => new { e.NtpHdrserial, e.NtpDeletionid }, "UN_NTP_SERIAL").IsUnique();

            entity.Property(e => e.NtpId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("NTP_ID");
            entity.Property(e => e.NtpDeletionid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("NTP_DELETIONID");
            entity.Property(e => e.NtpHdrdescr)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("NTP_HDRDESCR");
            entity.Property(e => e.NtpHdrinnerprodjobno)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("NTP_HDRINNERPRODJOBNO");
            entity.Property(e => e.NtpHdrorderno)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("NTP_HDRORDERNO");
            entity.Property(e => e.NtpHdrouterprodjobno)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("NTP_HDROUTERPRODJOBNO");
            entity.Property(e => e.NtpHdrserial)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("NTP_HDRSERIAL");
            entity.Property(e => e.NtpOptioncamera)
                .HasPrecision(5)
                .HasColumnName("NTP_OPTIONCAMERA");
            entity.Property(e => e.NtpOptioncolor)
                .HasPrecision(5)
                .HasColumnName("NTP_OPTIONCOLOR");
            entity.Property(e => e.NtpOptionglass)
                .HasPrecision(5)
                .HasColumnName("NTP_OPTIONGLASS");
            entity.Property(e => e.NtpOptionhandle)
                .HasPrecision(5)
                .HasColumnName("NTP_OPTIONHANDLE");
            entity.Property(e => e.NtpOptionharness)
                .HasPrecision(5)
                .HasColumnName("NTP_OPTIONHARNESS");
            entity.Property(e => e.NtpOptionikey)
                .HasPrecision(5)
                .HasColumnName("NTP_OPTIONIKEY");
            entity.Property(e => e.NtpOptionlic)
                .HasPrecision(5)
                .HasColumnName("NTP_OPTIONLIC");
            entity.Property(e => e.NtpOptionopcode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("NTP_OPTIONOPCODE");
            entity.Property(e => e.NtpOptionpbd)
                .HasPrecision(5)
                .HasColumnName("NTP_OPTIONPBD");
            entity.Property(e => e.NtpTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("NTP_TCREATION");
            entity.Property(e => e.NtpTdeletion)
                .HasColumnType("DATE")
                .HasColumnName("NTP_TDELETION");
        });

        modelBuilder.Entity<HtJStockentrystat>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("HT_J_STOCKENTRYSTAT", "JITTOE");

            entity.Property(e => e.SesId)
                .HasColumnType("NUMBER(19,2)")
                .HasColumnName("SES_ID");
        });

        modelBuilder.Entity<HtJTransfercpacket>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("HT_J_TRANSFERCPACKET", "JITTOE");

            entity.Property(e => e.TcpId)
                .HasColumnType("NUMBER(19,2)")
                .HasColumnName("TCP_ID");
        });

        modelBuilder.Entity<JAccessobjecttype>(entity =>
        {
            entity.HasKey(e => e.AcotId).HasName("PK_ACCESSOBJECTTYPE");

            entity.ToTable("J_ACCESSOBJECTTYPE", "JITTOE");

            entity.HasIndex(e => e.AcotKey, "UN_ACOT_KEY").IsUnique();

            entity.Property(e => e.AcotId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ACOT_ID");
            entity.Property(e => e.AcotDescr)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("ACOT_DESCR");
            entity.Property(e => e.AcotIseditable)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("1  ")
                .HasColumnName("ACOT_ISEDITABLE");
            entity.Property(e => e.AcotKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("ACOT_KEY");
            entity.Property(e => e.AcotTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("ACOT_TCREATION");
            entity.Property(e => e.AcotTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("ACOT_TUPDATE");
        });

        modelBuilder.Entity<JAccessright>(entity =>
        {
            entity.HasKey(e => e.AcrId).HasName("PK_ACCESSRIGHT");

            entity.ToTable("J_ACCESSRIGHT", "JITTOE");

            entity.HasIndex(e => e.AcrAccessobjecttypeId, "I_AOBJECTTYPE_ARIGHT");

            entity.HasIndex(e => e.AcrAccessrightsetId, "I_ARIGHTSET_ARIGHT");

            entity.HasIndex(e => e.AcrAccesssettingsId, "I_ASETTINGS_ARIGHT");

            entity.Property(e => e.AcrId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ACR_ID");
            entity.Property(e => e.AcrAccessobjecttypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ACR_ACCESSOBJECTTYPE_ID");
            entity.Property(e => e.AcrAccessrightsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ACR_ACCESSRIGHTSET_ID");
            entity.Property(e => e.AcrAccesssettingsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ACR_ACCESSSETTINGS_ID");
            entity.Property(e => e.AcrTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("ACR_TCREATION");
            entity.Property(e => e.AcrTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("ACR_TUPDATE");

            entity.HasOne(d => d.AcrAccessobjecttype).WithMany(p => p.JAccessrights)
                .HasForeignKey(d => d.AcrAccessobjecttypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AOBJECTTYPE_ARIGHT");

            entity.HasOne(d => d.AcrAccessrightset).WithMany(p => p.JAccessrights)
                .HasForeignKey(d => d.AcrAccessrightsetId)
                .HasConstraintName("FK_ARIGHTSET_ARIGHT");

            entity.HasOne(d => d.AcrAccesssettings).WithMany(p => p.JAccessrights)
                .HasForeignKey(d => d.AcrAccesssettingsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ASETTINGS_ARIGHT");
        });

        modelBuilder.Entity<JAccessrightset>(entity =>
        {
            entity.HasKey(e => e.AcrsId).HasName("PK_ACCESSRIGHTSET");

            entity.ToTable("J_ACCESSRIGHTSET", "JITTOE");

            entity.HasIndex(e => e.AcrsDefaccesssettingsId, "I_ASETTINGS_ARIGHTSET");

            entity.HasIndex(e => e.AcrsKey, "UN_ACRS_KEY").IsUnique();

            entity.Property(e => e.AcrsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ACRS_ID");
            entity.Property(e => e.AcrsDefaccesssettingsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ACRS_DEFACCESSSETTINGS_ID");
            entity.Property(e => e.AcrsDescr)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("ACRS_DESCR");
            entity.Property(e => e.AcrsKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("ACRS_KEY");
            entity.Property(e => e.AcrsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("ACRS_TCREATION");
            entity.Property(e => e.AcrsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("ACRS_TUPDATE");

            entity.HasOne(d => d.AcrsDefaccesssettings).WithMany(p => p.JAccessrightsets)
                .HasForeignKey(d => d.AcrsDefaccesssettingsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ASETTINGS_ARIGHTSET");
        });

        modelBuilder.Entity<JAccesssetting>(entity =>
        {
            entity.HasKey(e => e.AcsId).HasName("PK_ACCESSSETTINGS");

            entity.ToTable("J_ACCESSSETTINGS", "JITTOE");

            entity.HasIndex(e => e.AcsCode, "UN_ACS_CODE").IsUnique();

            entity.Property(e => e.AcsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ACS_ID");
            entity.Property(e => e.AcsCode)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("ACS_CODE");
            entity.Property(e => e.AcsDescr)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("ACS_DESCR");
            entity.Property(e => e.AcsIseditable)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("1  ")
                .HasColumnName("ACS_ISEDITABLE");
            entity.Property(e => e.AcsOpcreate)
                .HasPrecision(1)
                .HasColumnName("ACS_OPCREATE");
            entity.Property(e => e.AcsOpdelete)
                .HasPrecision(1)
                .HasColumnName("ACS_OPDELETE");
            entity.Property(e => e.AcsOpedit)
                .HasPrecision(1)
                .HasColumnName("ACS_OPEDIT");
            entity.Property(e => e.AcsOpoperation)
                .HasPrecision(1)
                .HasColumnName("ACS_OPOPERATION");
            entity.Property(e => e.AcsOpview)
                .HasPrecision(1)
                .HasColumnName("ACS_OPVIEW");
            entity.Property(e => e.AcsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("ACS_TCREATION");
            entity.Property(e => e.AcsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("ACS_TUPDATE");
        });

        modelBuilder.Entity<JAddress>(entity =>
        {
            entity.HasKey(e => e.AdId).HasName("PK_ADDRESS");

            entity.ToTable("J_ADDRESS", "JITTOE");

            entity.HasIndex(e => e.AdCompanyId, "I_COMPANY_ADDRESS");

            entity.HasIndex(e => e.AdKey, "UN_AD_KEY").IsUnique();

            entity.Property(e => e.AdId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("AD_ID");
            entity.Property(e => e.AdCity)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AD_CITY");
            entity.Property(e => e.AdCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("AD_COMPANY_ID");
            entity.Property(e => e.AdCountrycode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("AD_COUNTRYCODE");
            entity.Property(e => e.AdEmail)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AD_EMAIL");
            entity.Property(e => e.AdFax)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("AD_FAX");
            entity.Property(e => e.AdIsmaincity)
                .HasPrecision(1)
                .HasColumnName("AD_ISMAINCITY");
            entity.Property(e => e.AdIsmaincountrycode)
                .HasPrecision(1)
                .HasColumnName("AD_ISMAINCOUNTRYCODE");
            entity.Property(e => e.AdIsmainemail)
                .HasPrecision(1)
                .HasColumnName("AD_ISMAINEMAIL");
            entity.Property(e => e.AdIsmainfax)
                .HasPrecision(1)
                .HasColumnName("AD_ISMAINFAX");
            entity.Property(e => e.AdIsmainname)
                .HasPrecision(1)
                .HasColumnName("AD_ISMAINNAME");
            entity.Property(e => e.AdIsmainnameext1)
                .HasPrecision(1)
                .HasColumnName("AD_ISMAINNAMEEXT1");
            entity.Property(e => e.AdIsmainnameext2)
                .HasPrecision(1)
                .HasColumnName("AD_ISMAINNAMEEXT2");
            entity.Property(e => e.AdIsmainphone1)
                .HasPrecision(1)
                .HasColumnName("AD_ISMAINPHONE1");
            entity.Property(e => e.AdIsmainphone2)
                .HasPrecision(1)
                .HasColumnName("AD_ISMAINPHONE2");
            entity.Property(e => e.AdIsmainpostcode)
                .HasPrecision(1)
                .HasColumnName("AD_ISMAINPOSTCODE");
            entity.Property(e => e.AdIsmainpostofficebox)
                .HasPrecision(1)
                .HasColumnName("AD_ISMAINPOSTOFFICEBOX");
            entity.Property(e => e.AdIsmainstreet)
                .HasPrecision(1)
                .HasColumnName("AD_ISMAINSTREET");
            entity.Property(e => e.AdKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("AD_KEY");
            entity.Property(e => e.AdName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AD_NAME");
            entity.Property(e => e.AdNameext1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AD_NAMEEXT1");
            entity.Property(e => e.AdNameext2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AD_NAMEEXT2");
            entity.Property(e => e.AdPhone1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("AD_PHONE1");
            entity.Property(e => e.AdPhone2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("AD_PHONE2");
            entity.Property(e => e.AdPostcode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("AD_POSTCODE");
            entity.Property(e => e.AdPostofficebox)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("AD_POSTOFFICEBOX");
            entity.Property(e => e.AdStreet)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AD_STREET");
            entity.Property(e => e.AdTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("AD_TCREATION");
            entity.Property(e => e.AdTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("AD_TUPDATE");
            entity.Property(e => e.AdType)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("AD_TYPE");

            entity.HasOne(d => d.AdCompany).WithMany(p => p.JAddresses)
                .HasForeignKey(d => d.AdCompanyId)
                .HasConstraintName("FK_COMPANY_ADDRESS");
        });

        modelBuilder.Entity<JAdvice>(entity =>
        {
            entity.HasKey(e => e.AdvId).HasName("PK_ADVICE");

            entity.ToTable("J_ADVICE", "JITTOE");

            entity.HasIndex(e => e.AdvAdvicesetId, "I_ADVICESET_ADVICE");

            entity.HasIndex(e => e.AdvAuthorId, "I_AUTHOR_ADVICE");

            entity.HasIndex(e => e.AdvConfirmedbyuserId, "I_CONFIRMEDBY_ADVICE");

            entity.HasIndex(e => e.AdvFileId, "I_FILE_ADVICE");

            entity.HasIndex(e => e.AdvTogroupId, "I_GROUP_ADVICE");

            entity.HasIndex(e => e.AdvImageId, "I_IMAGE_ADVICE");

            entity.HasIndex(e => new { e.AdvAdvicesetId, e.AdvCode }, "UN_ADV_CODE").IsUnique();

            entity.Property(e => e.AdvId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ADV_ID");
            entity.Property(e => e.AdvAdvicesetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ADV_ADVICESET_ID");
            entity.Property(e => e.AdvAuthorId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ADV_AUTHOR_ID");
            entity.Property(e => e.AdvCode)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("ADV_CODE");
            entity.Property(e => e.AdvConfintervalcount)
                .HasPrecision(6)
                .HasDefaultValueSql("0  ")
                .HasColumnName("ADV_CONFINTERVALCOUNT");
            entity.Property(e => e.AdvConfintervaltimescale)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasDefaultValueSql("'Day'  ")
                .HasColumnName("ADV_CONFINTERVALTIMESCALE");
            entity.Property(e => e.AdvConfirmationpolicy)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasDefaultValueSql("'None'  ")
                .HasColumnName("ADV_CONFIRMATIONPOLICY");
            entity.Property(e => e.AdvConfirmedbyuserId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ADV_CONFIRMEDBYUSER_ID");
            entity.Property(e => e.AdvDescr)
                .HasMaxLength(160)
                .IsUnicode(false)
                .HasColumnName("ADV_DESCR");
            entity.Property(e => e.AdvFileId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ADV_FILE_ID");
            entity.Property(e => e.AdvImageId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ADV_IMAGE_ID");
            entity.Property(e => e.AdvPriority)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasDefaultValueSql("'P00None'  ")
                .HasColumnName("ADV_PRIORITY");
            entity.Property(e => e.AdvReference)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ADV_REFERENCE");
            entity.Property(e => e.AdvTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("ADV_TCREATION");
            entity.Property(e => e.AdvTimeconfirmed)
                .HasColumnType("DATE")
                .HasColumnName("ADV_TIMECONFIRMED");
            entity.Property(e => e.AdvTogroupId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ADV_TOGROUP_ID");
            entity.Property(e => e.AdvType)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("ADV_TYPE");
            entity.Property(e => e.AdvValiduntiltime)
                .HasColumnType("DATE")
                .HasColumnName("ADV_VALIDUNTILTIME");

            entity.HasOne(d => d.AdvAdviceset).WithMany(p => p.JAdvices)
                .HasForeignKey(d => d.AdvAdvicesetId)
                .HasConstraintName("FK_ADVICESET_ADVICE");

            entity.HasOne(d => d.AdvAuthor).WithMany(p => p.JAdviceAdvAuthors)
                .HasForeignKey(d => d.AdvAuthorId)
                .HasConstraintName("FK_AUTHOR_ADVICE");

            entity.HasOne(d => d.AdvConfirmedbyuser).WithMany(p => p.JAdviceAdvConfirmedbyusers)
                .HasForeignKey(d => d.AdvConfirmedbyuserId)
                .HasConstraintName("FK_CONFIRMEDBY_ADVICE");

            entity.HasOne(d => d.AdvFile).WithMany(p => p.JAdvices)
                .HasForeignKey(d => d.AdvFileId)
                .HasConstraintName("FK_FILE_ADVICE");

            entity.HasOne(d => d.AdvImage).WithMany(p => p.JAdvices)
                .HasForeignKey(d => d.AdvImageId)
                .HasConstraintName("FK_IMAGE_ADVICE");

            entity.HasOne(d => d.AdvTogroup).WithMany(p => p.JAdvices)
                .HasForeignKey(d => d.AdvTogroupId)
                .HasConstraintName("FK_GROUP_ADVICE");
        });

        modelBuilder.Entity<JAdviceProdunit>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("J_ADVICE_PRODUNIT", "JITTOE");

            entity.HasIndex(e => e.AdviceId, "I_ADVICE_PRODUNIT_1");

            entity.HasIndex(e => e.ProdunitId, "I_ADVICE_PRODUNIT_2");

            entity.HasIndex(e => new { e.AdviceId, e.ProdunitId }, "UN_ADVICE_PRODUNIT").IsUnique();

            entity.Property(e => e.AdviceId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ADVICE_ID");
            entity.Property(e => e.ProdunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRODUNIT_ID");

            entity.HasOne(d => d.Advice).WithMany()
                .HasForeignKey(d => d.AdviceId)
                .HasConstraintName("FK_ADVICE_PRODUNIT_1");

            entity.HasOne(d => d.Produnit).WithMany()
                .HasForeignKey(d => d.ProdunitId)
                .HasConstraintName("FK_ADVICE_PRODUNIT_2");
        });

        modelBuilder.Entity<JAdviceconfirmation>(entity =>
        {
            entity.HasKey(e => e.AdvcId).HasName("PK_ADVICECONFIRMATION");

            entity.ToTable("J_ADVICECONFIRMATION", "JITTOE");

            entity.HasIndex(e => e.AdvcAdviceId, "I_ADVICE_ADVICECONF");

            entity.HasIndex(e => e.AdvcConfirmedbyuserId, "I_CONFIRMEDBY_ADVICECONF");

            entity.HasIndex(e => e.AdvcProdtoolId, "I_PRODTOOL_ADVICECONF");

            entity.HasIndex(e => e.AdvcProdunitId, "I_PRODUNIT_ADVICECONF");

            entity.HasIndex(e => new { e.AdvcAdviceId, e.AdvcConfirmedbyuserId, e.AdvcProdtoolId, e.AdvcProdunitId }, "UN_ADVC_USER").IsUnique();

            entity.Property(e => e.AdvcId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ADVC_ID");
            entity.Property(e => e.AdvcAdviceId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ADVC_ADVICE_ID");
            entity.Property(e => e.AdvcConfirmedbyuserId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ADVC_CONFIRMEDBYUSER_ID");
            entity.Property(e => e.AdvcProdtoolId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ADVC_PRODTOOL_ID");
            entity.Property(e => e.AdvcProdunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ADVC_PRODUNIT_ID");
            entity.Property(e => e.AdvcTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("ADVC_TCREATION");

            entity.HasOne(d => d.AdvcAdvice).WithMany(p => p.JAdviceconfirmations)
                .HasForeignKey(d => d.AdvcAdviceId)
                .HasConstraintName("FK_ADVICE_ADVICECONF");

            entity.HasOne(d => d.AdvcConfirmedbyuser).WithMany(p => p.JAdviceconfirmations)
                .HasForeignKey(d => d.AdvcConfirmedbyuserId)
                .HasConstraintName("FK_CONFIRMEDBY_ADVICECONF");

            entity.HasOne(d => d.AdvcProdtool).WithMany(p => p.JAdviceconfirmations)
                .HasForeignKey(d => d.AdvcProdtoolId)
                .HasConstraintName("FK_PRODTOOL_ADVICECONF");

            entity.HasOne(d => d.AdvcProdunit).WithMany(p => p.JAdviceconfirmations)
                .HasForeignKey(d => d.AdvcProdunitId)
                .HasConstraintName("FK_PRODUNIT_ADVICECONF");
        });

        modelBuilder.Entity<JAdviceinfo>(entity =>
        {
            entity.HasKey(e => e.AdviId).HasName("PK_ADVICEINFO");

            entity.ToTable("J_ADVICEINFO", "JITTOE");

            entity.HasIndex(e => e.AdviAdviceId, "I_ADVICE_ADVICEINFO");

            entity.HasIndex(e => e.AdviImageId, "I_IMAGE_ADVICEINFO");

            entity.HasIndex(e => new { e.AdviAdviceId, e.AdviType, e.AdviKey1, e.AdviKey2, e.AdviKey3 }, "UN_ADVI_INFO").IsUnique();

            entity.Property(e => e.AdviId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ADVI_ID");
            entity.Property(e => e.AdviAdviceId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ADVI_ADVICE_ID");
            entity.Property(e => e.AdviImageId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ADVI_IMAGE_ID");
            entity.Property(e => e.AdviIntvalue)
                .HasPrecision(10)
                .HasColumnName("ADVI_INTVALUE");
            entity.Property(e => e.AdviKey1)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("ADVI_KEY1");
            entity.Property(e => e.AdviKey2)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("ADVI_KEY2");
            entity.Property(e => e.AdviKey3)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("ADVI_KEY3");
            entity.Property(e => e.AdviStringvalue)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("ADVI_STRINGVALUE");
            entity.Property(e => e.AdviTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("ADVI_TCREATION");
            entity.Property(e => e.AdviTimevalue)
                .HasColumnType("DATE")
                .HasColumnName("ADVI_TIMEVALUE");
            entity.Property(e => e.AdviTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("ADVI_TUPDATE");
            entity.Property(e => e.AdviType)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("ADVI_TYPE");

            entity.HasOne(d => d.AdviAdvice).WithMany(p => p.JAdviceinfos)
                .HasForeignKey(d => d.AdviAdviceId)
                .HasConstraintName("FK_ADVICE_ADVICEINFO");

            entity.HasOne(d => d.AdviImage).WithMany(p => p.JAdviceinfos)
                .HasForeignKey(d => d.AdviImageId)
                .HasConstraintName("FK_IMAGE_ADVICEINFO");
        });

        modelBuilder.Entity<JAdviceset>(entity =>
        {
            entity.HasKey(e => e.AdvsId).HasName("PK_ADVICESET");

            entity.ToTable("J_ADVICESET", "JITTOE");

            entity.HasIndex(e => e.AdvsCodecounterId, "I_CODECOUNTER_ADVICESET");

            entity.HasIndex(e => e.AdvsCompanyId, "I_COMPANY_ADVICESET");

            entity.HasIndex(e => e.AdvsKey, "UN_ADVS_KEY").IsUnique();

            entity.Property(e => e.AdvsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ADVS_ID");
            entity.Property(e => e.AdvsCodecounterId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ADVS_CODECOUNTER_ID");
            entity.Property(e => e.AdvsCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ADVS_COMPANY_ID");
            entity.Property(e => e.AdvsDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ADVS_DESCR");
            entity.Property(e => e.AdvsKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("ADVS_KEY");
            entity.Property(e => e.AdvsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("ADVS_TCREATION");
            entity.Property(e => e.AdvsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("ADVS_TUPDATE");
            entity.Property(e => e.AdvsType)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValueSql("'ProdUnit'  ")
                .HasColumnName("ADVS_TYPE");

            entity.HasOne(d => d.AdvsCodecounter).WithMany(p => p.JAdvicesets)
                .HasForeignKey(d => d.AdvsCodecounterId)
                .HasConstraintName("FK_CODECOUNTER_ADVICESET");

            entity.HasOne(d => d.AdvsCompany).WithMany(p => p.JAdvicesets)
                .HasForeignKey(d => d.AdvsCompanyId)
                .HasConstraintName("FK_COMPANY_ADVICESET");
        });

        modelBuilder.Entity<JAlert>(entity =>
        {
            entity.HasKey(e => e.AlId).HasName("PK_ALERT");

            entity.ToTable("J_ALERT", "JITTOE");

            entity.HasIndex(e => e.AlAlertsetId, "I_ALERTSET_ALERT");

            entity.HasIndex(e => e.AlAlertstateId, "I_ALERTSTATE_ALERT");

            entity.HasIndex(e => e.AlAlerttypeId, "I_ALERTTYPE_ALERT");

            entity.HasIndex(e => new { e.AlAlerttypeId, e.AlKeyintype }, "UN_AL_ALERTTYPE_KEY").IsUnique();

            entity.Property(e => e.AlId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("AL_ID");
            entity.Property(e => e.AlAlertsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("AL_ALERTSET_ID");
            entity.Property(e => e.AlAlertstateId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("AL_ALERTSTATE_ID");
            entity.Property(e => e.AlAlerttypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("AL_ALERTTYPE_ID");
            entity.Property(e => e.AlApplication)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("AL_APPLICATION");
            entity.Property(e => e.AlContext)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("AL_CONTEXT");
            entity.Property(e => e.AlDescr)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("AL_DESCR");
            entity.Property(e => e.AlInfo1)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("AL_INFO1");
            entity.Property(e => e.AlInfo2)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("AL_INFO2");
            entity.Property(e => e.AlInfo3)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("AL_INFO3");
            entity.Property(e => e.AlKeyintype)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("AL_KEYINTYPE");
            entity.Property(e => e.AlLevel)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("AL_LEVEL");
            entity.Property(e => e.AlMessage)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("AL_MESSAGE");
            entity.Property(e => e.AlMessagecode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AL_MESSAGECODE");
            entity.Property(e => e.AlMsgseverity)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("AL_MSGSEVERITY");
            entity.Property(e => e.AlNrofsuspensions)
                .HasPrecision(5)
                .HasDefaultValueSql("0  ")
                .HasColumnName("AL_NROFSUSPENSIONS");
            entity.Property(e => e.AlTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("AL_TCREATION");
            entity.Property(e => e.AlTimeconfirmed)
                .HasColumnType("DATE")
                .HasColumnName("AL_TIMECONFIRMED");
            entity.Property(e => e.AlTimeescalated)
                .HasColumnType("DATE")
                .HasColumnName("AL_TIMEESCALATED");
            entity.Property(e => e.AlTimemsg)
                .HasColumnType("DATE")
                .HasColumnName("AL_TIMEMSG");
            entity.Property(e => e.AlTimeset)
                .HasColumnType("DATE")
                .HasColumnName("AL_TIMESET");
            entity.Property(e => e.AlTimesuspendeduntil)
                .HasColumnType("DATE")
                .HasColumnName("AL_TIMESUSPENDEDUNTIL");
            entity.Property(e => e.AlTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("AL_TUPDATE");

            entity.HasOne(d => d.AlAlertset).WithMany(p => p.JAlerts)
                .HasForeignKey(d => d.AlAlertsetId)
                .HasConstraintName("FK_ALERTSET_ALERT");

            entity.HasOne(d => d.AlAlertstate).WithMany(p => p.JAlerts)
                .HasForeignKey(d => d.AlAlertstateId)
                .HasConstraintName("FK_ALERTSTATE_ALERT");

            entity.HasOne(d => d.AlAlerttype).WithMany(p => p.JAlerts)
                .HasForeignKey(d => d.AlAlerttypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ALERTTYPE_ALERT");
        });

        modelBuilder.Entity<JAlertset>(entity =>
        {
            entity.HasKey(e => e.AlsId).HasName("PK_ALERTSET");

            entity.ToTable("J_ALERTSET", "JITTOE");

            entity.HasIndex(e => e.AlsKey, "UN_ALS_KEY").IsUnique();

            entity.Property(e => e.AlsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ALS_ID");
            entity.Property(e => e.AlsDescr)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("ALS_DESCR");
            entity.Property(e => e.AlsKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("ALS_KEY");
            entity.Property(e => e.AlsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("ALS_TCREATION");
            entity.Property(e => e.AlsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("ALS_TUPDATE");
        });

        modelBuilder.Entity<JAlertstate>(entity =>
        {
            entity.HasKey(e => e.AltstId).HasName("PK_ALERTSTATE");

            entity.ToTable("J_ALERTSTATE", "JITTOE");

            entity.HasIndex(e => e.AltstAlerttypeId, "I_ALERTTYPE_ALERTSTATE");

            entity.HasIndex(e => e.AltstEscalertstateId, "I_ESCALERTSTATE_ALERTSTATE");

            entity.HasIndex(e => new { e.AltstAlerttypeId, e.AltstShortname }, "UN_ALTST_SHORTNAME").IsUnique();

            entity.Property(e => e.AltstId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ALTST_ID");
            entity.Property(e => e.AltstAlertlevel)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("ALTST_ALERTLEVEL");
            entity.Property(e => e.AltstAlerttypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ALTST_ALERTTYPE_ID");
            entity.Property(e => e.AltstAutoconfirmationminutes)
                .HasPrecision(5)
                .HasColumnName("ALTST_AUTOCONFIRMATIONMINUTES");
            entity.Property(e => e.AltstDescr)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("ALTST_DESCR");
            entity.Property(e => e.AltstEscalationminutes)
                .HasPrecision(5)
                .HasColumnName("ALTST_ESCALATIONMINUTES");
            entity.Property(e => e.AltstEscalertstateId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ALTST_ESCALERTSTATE_ID");
            entity.Property(e => e.AltstHasautoconfirmation)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("0  ")
                .HasColumnName("ALTST_HASAUTOCONFIRMATION");
            entity.Property(e => e.AltstHasautoescalation)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("0  ")
                .HasColumnName("ALTST_HASAUTOESCALATION");
            entity.Property(e => e.AltstHasmsg)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("0  ")
                .HasColumnName("ALTST_HASMSG");
            entity.Property(e => e.AltstHassuspension)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("0  ")
                .HasColumnName("ALTST_HASSUSPENSION");
            entity.Property(e => e.AltstIsstartstate)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("0  ")
                .HasColumnName("ALTST_ISSTARTSTATE");
            entity.Property(e => e.AltstMaxsuspensioninminutes)
                .HasPrecision(5)
                .HasDefaultValueSql("0  ")
                .HasColumnName("ALTST_MAXSUSPENSIONINMINUTES");
            entity.Property(e => e.AltstMsgapplication)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ALTST_MSGAPPLICATION");
            entity.Property(e => e.AltstMsgcontext)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ALTST_MSGCONTEXT");
            entity.Property(e => e.AltstMsginfo)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("ALTST_MSGINFO");
            entity.Property(e => e.AltstMsgrepetitioninminutes)
                .HasPrecision(5)
                .HasDefaultValueSql("0  ")
                .HasColumnName("ALTST_MSGREPETITIONINMINUTES");
            entity.Property(e => e.AltstMsgseverity)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("ALTST_MSGSEVERITY");
            entity.Property(e => e.AltstShortname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ALTST_SHORTNAME");
            entity.Property(e => e.AltstTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("ALTST_TCREATION");
            entity.Property(e => e.AltstTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("ALTST_TUPDATE");

            entity.HasOne(d => d.AltstAlerttype).WithMany(p => p.JAlertstates)
                .HasForeignKey(d => d.AltstAlerttypeId)
                .HasConstraintName("FK_ALERTTYPE_ALERTSTATE");

            entity.HasOne(d => d.AltstEscalertstate).WithMany(p => p.InverseAltstEscalertstate)
                .HasForeignKey(d => d.AltstEscalertstateId)
                .HasConstraintName("FK_ESCALERTSTATE_ALERTSTATE");
        });

        modelBuilder.Entity<JAlerttype>(entity =>
        {
            entity.HasKey(e => e.AltId).HasName("PK_ALERTTYPE");

            entity.ToTable("J_ALERTTYPE", "JITTOE");

            entity.HasIndex(e => e.AltAlerttypesetId, "I_ALERTTYPESET_ALERTTYPE");

            entity.HasIndex(e => e.AltKey, "UN_ALT_KEY").IsUnique();

            entity.Property(e => e.AltId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ALT_ID");
            entity.Property(e => e.AltAlerttypesetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ALT_ALERTTYPESET_ID");
            entity.Property(e => e.AltAutoconfirmationminutes)
                .HasPrecision(5)
                .HasDefaultValueSql("0")
                .HasColumnName("ALT_AUTOCONFIRMATIONMINUTES");
            entity.Property(e => e.AltCategory)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("ALT_CATEGORY");
            entity.Property(e => e.AltDefaultlevel)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasDefaultValueSql("'L00None'")
                .HasColumnName("ALT_DEFAULTLEVEL");
            entity.Property(e => e.AltDefaultmsgseverity)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasDefaultValueSql("'Info'\n")
                .HasColumnName("ALT_DEFAULTMSGSEVERITY");
            entity.Property(e => e.AltDescr)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("ALT_DESCR");
            entity.Property(e => e.AltEscalationminutes)
                .HasPrecision(5)
                .HasDefaultValueSql("0")
                .HasColumnName("ALT_ESCALATIONMINUTES");
            entity.Property(e => e.AltHasautoconfirmation)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("0")
                .HasColumnName("ALT_HASAUTOCONFIRMATION");
            entity.Property(e => e.AltHasautoescalation)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("0")
                .HasColumnName("ALT_HASAUTOESCALATION");
            entity.Property(e => e.AltHasmsg)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("0")
                .HasColumnName("ALT_HASMSG");
            entity.Property(e => e.AltHassuspension)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("0  ")
                .HasColumnName("ALT_HASSUSPENSION");
            entity.Property(e => e.AltKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("ALT_KEY");
            entity.Property(e => e.AltMaxautoconfirmationlevel)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasDefaultValueSql("'L00None'")
                .HasColumnName("ALT_MAXAUTOCONFIRMATIONLEVEL");
            entity.Property(e => e.AltMaxescalationlevel)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasDefaultValueSql("'L00None'")
                .HasColumnName("ALT_MAXESCALATIONLEVEL");
            entity.Property(e => e.AltMaxnrofsuspensions)
                .HasPrecision(5)
                .HasDefaultValueSql("0  ")
                .HasColumnName("ALT_MAXNROFSUSPENSIONS");
            entity.Property(e => e.AltMaxsuspensioninminutes)
                .HasPrecision(5)
                .HasDefaultValueSql("0  ")
                .HasColumnName("ALT_MAXSUSPENSIONINMINUTES");
            entity.Property(e => e.AltMinescalationlevel)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasDefaultValueSql("'L00None'")
                .HasColumnName("ALT_MINESCALATIONLEVEL");
            entity.Property(e => e.AltMinmsglevel)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasDefaultValueSql("'L00None'")
                .HasColumnName("ALT_MINMSGLEVEL");
            entity.Property(e => e.AltMsgrepetitioninminutes)
                .HasPrecision(5)
                .HasDefaultValueSql("0")
                .HasColumnName("ALT_MSGREPETITIONINMINUTES");
            entity.Property(e => e.AltTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("ALT_TCREATION");
            entity.Property(e => e.AltTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("ALT_TUPDATE");

            entity.HasOne(d => d.AltAlerttypeset).WithMany(p => p.JAlerttypes)
                .HasForeignKey(d => d.AltAlerttypesetId)
                .HasConstraintName("FK_ALERTTYPESET_ALERTTYPE");
        });

        modelBuilder.Entity<JAlerttypeset>(entity =>
        {
            entity.HasKey(e => e.AltsId).HasName("PK_ALERTTYPESET");

            entity.ToTable("J_ALERTTYPESET", "JITTOE");

            entity.HasIndex(e => e.AltsKey, "UN_ALTS_KEY").IsUnique();

            entity.Property(e => e.AltsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ALTS_ID");
            entity.Property(e => e.AltsDescr)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("ALTS_DESCR");
            entity.Property(e => e.AltsKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("ALTS_KEY");
            entity.Property(e => e.AltsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("ALTS_TCREATION");
            entity.Property(e => e.AltsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("ALTS_TUPDATE");
        });

        modelBuilder.Entity<JBmwcreditnote>(entity =>
        {
            entity.HasKey(e => e.BcnId).HasName("PK_BMWCREDITNOTE");

            entity.ToTable("J_BMWCREDITNOTE", "JITTOE");

            entity.HasIndex(e => e.BcnContractId, "I_CONTRACT_BMWCREDITNOTE");

            entity.HasIndex(e => new { e.BcnContractId, e.BcnNo }, "UN_BCN_NO").IsUnique();

            entity.Property(e => e.BcnId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("BCN_ID");
            entity.Property(e => e.BcnContractId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("BCN_CONTRACT_ID");
            entity.Property(e => e.BcnNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("BCN_NO");
            entity.Property(e => e.BcnTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("BCN_TCREATION");
            entity.Property(e => e.BcnTotalamount)
                .HasColumnType("NUMBER(13,2)")
                .HasColumnName("BCN_TOTALAMOUNT");

            entity.HasOne(d => d.BcnContract).WithMany(p => p.JBmwcreditnotes)
                .HasForeignKey(d => d.BcnContractId)
                .HasConstraintName("FK_CONTRACT_BMWCREDITNOTE");
        });

        modelBuilder.Entity<JBmwcreditnotepo>(entity =>
        {
            entity.HasKey(e => e.BcnpId).HasName("PK_BMWCREDITNOTEPOS");

            entity.ToTable("J_BMWCREDITNOTEPOS", "JITTOE");

            entity.HasIndex(e => e.BcnpBmwcreditnoteId, "I_BMWCREDITNOTE_POS");

            entity.HasIndex(e => e.BcnpSubjectId, "I_SUBJECT_BMWCREDITNOTEPOS");

            entity.Property(e => e.BcnpId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("BCNP_ID");
            entity.Property(e => e.BcnpAmount)
                .HasColumnType("NUMBER(13,2)")
                .HasColumnName("BCNP_AMOUNT");
            entity.Property(e => e.BcnpBmwcreditnoteId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("BCNP_BMWCREDITNOTE_ID");
            entity.Property(e => e.BcnpCustomersubjectno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BCNP_CUSTOMERSUBJECTNO");
            entity.Property(e => e.BcnpDeliverynote)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("BCNP_DELIVERYNOTE");
            entity.Property(e => e.BcnpDocumentdate)
                .HasColumnType("DATE")
                .HasColumnName("BCNP_DOCUMENTDATE");
            entity.Property(e => e.BcnpHeadertext)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("BCNP_HEADERTEXT");
            entity.Property(e => e.BcnpItemtext)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BCNP_ITEMTEXT");
            entity.Property(e => e.BcnpMaterialdoc)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("BCNP_MATERIALDOC");
            entity.Property(e => e.BcnpMovementtype)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("BCNP_MOVEMENTTYPE");
            entity.Property(e => e.BcnpPartprice)
                .HasColumnType("NUMBER(13,2)")
                .HasColumnName("BCNP_PARTPRICE");
            entity.Property(e => e.BcnpPurchaseno)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("BCNP_PURCHASENO");
            entity.Property(e => e.BcnpQuantity)
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("BCNP_QUANTITY");
            entity.Property(e => e.BcnpSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("BCNP_SUBJECT_ID");
            entity.Property(e => e.BcnpTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("BCNP_TCREATION");

            entity.HasOne(d => d.BcnpBmwcreditnote).WithMany(p => p.JBmwcreditnotepos)
                .HasForeignKey(d => d.BcnpBmwcreditnoteId)
                .HasConstraintName("FK_BMWCREDITNOTE_POS");

            entity.HasOne(d => d.BcnpSubject).WithMany(p => p.JBmwcreditnotepos)
                .HasForeignKey(d => d.BcnpSubjectId)
                .HasConstraintName("FK_SUBJECT_BMWCREDITNOTEPOS");
        });

        modelBuilder.Entity<JBmwordererror>(entity =>
        {
            entity.HasKey(e => e.BoeId).HasName("PK_BMWORDERERROR");

            entity.ToTable("J_BMWORDERERROR", "JITTOE");

            entity.HasIndex(e => new { e.BoeContractId, e.BoeOrderno }, "I_BOE_ORDER");

            entity.HasIndex(e => e.BoeContractId, "I_CONTRACT_BMWORDERERROR");

            entity.Property(e => e.BoeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("BOE_ID");
            entity.Property(e => e.BoeComment)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("BOE_COMMENT");
            entity.Property(e => e.BoeContractId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("BOE_CONTRACT_ID");
            entity.Property(e => e.BoeFiledate)
                .HasColumnType("DATE")
                .HasColumnName("BOE_FILEDATE");
            entity.Property(e => e.BoeFiletype)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("BOE_FILETYPE");
            entity.Property(e => e.BoeOrderno)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BOE_ORDERNO");
            entity.Property(e => e.BoePartfamily)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("BOE_PARTFAMILY");
            entity.Property(e => e.BoeSidate)
                .HasColumnType("DATE")
                .HasColumnName("BOE_SIDATE");
            entity.Property(e => e.BoeSupplygroup)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("BOE_SUPPLYGROUP");
            entity.Property(e => e.BoeTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("BOE_TCREATION");
            entity.Property(e => e.BoeToddate)
                .HasColumnType("DATE")
                .HasColumnName("BOE_TODDATE");
            entity.Property(e => e.BoeTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("BOE_TUPDATE");
            entity.Property(e => e.BoeType)
                .HasMaxLength(17)
                .IsUnicode(false)
                .HasColumnName("BOE_TYPE");

            entity.HasOne(d => d.BoeContract).WithMany(p => p.JBmwordererrors)
                .HasForeignKey(d => d.BoeContractId)
                .HasConstraintName("FK_CONTRACT_BMWORDERERROR");
        });

        modelBuilder.Entity<JCalendar>(entity =>
        {
            entity.HasKey(e => e.CaId).HasName("PK_CALENDAR");

            entity.ToTable("J_CALENDAR", "JITTOE");

            entity.HasIndex(e => e.CaCompanyId, "I_COMPANY_CALENDAR");

            entity.HasIndex(e => e.CaKey, "UN_CA_KEY").IsUnique();

            entity.Property(e => e.CaId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CA_ID");
            entity.Property(e => e.CaCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CA_COMPANY_ID");
            entity.Property(e => e.CaDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CA_DESCR");
            entity.Property(e => e.CaKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("CA_KEY");
            entity.Property(e => e.CaTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CA_TCREATION");
            entity.Property(e => e.CaTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CA_TUPDATE");

            entity.HasOne(d => d.CaCompany).WithMany(p => p.JCalendars)
                .HasForeignKey(d => d.CaCompanyId)
                .HasConstraintName("FK_COMPANY_CALENDAR");
        });

        modelBuilder.Entity<JCalendarentry>(entity =>
        {
            entity.HasKey(e => e.CaeId).HasName("PK_CALENDARENTRY");

            entity.ToTable("J_CALENDARENTRY", "JITTOE");

            entity.HasIndex(e => e.CaeAuthorId, "I_AUTHOR_CALENDARENTRY");

            entity.HasIndex(e => new { e.CaeFrom, e.CaeTo }, "I_CAE_FROM_TO");

            entity.HasIndex(e => e.CaeEntrytypeId, "I_CALENDARENTRYTYPE_ENTRY");

            entity.HasIndex(e => e.CaeCodetableentryId, "I_CODETABLEENTRY_CE");

            entity.HasIndex(e => e.CaeUserId, "I_USER_CALENDARENTRY");

            entity.Property(e => e.CaeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CAE_ID");
            entity.Property(e => e.CaeAuthorId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CAE_AUTHOR_ID");
            entity.Property(e => e.CaeCodetableentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CAE_CODETABLEENTRY_ID");
            entity.Property(e => e.CaeComment)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("CAE_COMMENT");
            entity.Property(e => e.CaeEntrytypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CAE_ENTRYTYPE_ID");
            entity.Property(e => e.CaeFrom)
                .HasColumnType("DATE")
                .HasColumnName("CAE_FROM");
            entity.Property(e => e.CaeInfo1)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("CAE_INFO1");
            entity.Property(e => e.CaeInfo2)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("CAE_INFO2");
            entity.Property(e => e.CaeInfo3)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("CAE_INFO3");
            entity.Property(e => e.CaeTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CAE_TCREATION");
            entity.Property(e => e.CaeTimeissued)
                .HasColumnType("DATE")
                .HasColumnName("CAE_TIMEISSUED");
            entity.Property(e => e.CaeTo)
                .HasColumnType("DATE")
                .HasColumnName("CAE_TO");
            entity.Property(e => e.CaeTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CAE_TUPDATE");
            entity.Property(e => e.CaeUserId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CAE_USER_ID");

            entity.HasOne(d => d.CaeAuthor).WithMany(p => p.JCalendarentryCaeAuthors)
                .HasForeignKey(d => d.CaeAuthorId)
                .HasConstraintName("FK_AUTHOR_CALENDARENTRY");

            entity.HasOne(d => d.CaeCodetableentry).WithMany(p => p.JCalendarentries)
                .HasForeignKey(d => d.CaeCodetableentryId)
                .HasConstraintName("FK_CODETABLEENTRY_CE");

            entity.HasOne(d => d.CaeEntrytype).WithMany(p => p.JCalendarentries)
                .HasForeignKey(d => d.CaeEntrytypeId)
                .HasConstraintName("FK_CALENDARENTRYTYPE_ENTRY");

            entity.HasOne(d => d.CaeUser).WithMany(p => p.JCalendarentryCaeUsers)
                .HasForeignKey(d => d.CaeUserId)
                .HasConstraintName("FK_USER_CALENDARENTRY");
        });

        modelBuilder.Entity<JCalendarentrytype>(entity =>
        {
            entity.HasKey(e => e.CaetId).HasName("PK_CALENDARENTRYTYPE");

            entity.ToTable("J_CALENDARENTRYTYPE", "JITTOE");

            entity.HasIndex(e => e.CaetCalendarId, "I_CALENDAR_ENTRYTYPE");

            entity.HasIndex(e => new { e.CaetCalendarId, e.CaetPosno }, "UN_CAET_CALENDARPOS").IsUnique();

            entity.HasIndex(e => e.CaetKey, "UN_CAET_KEY").IsUnique();

            entity.Property(e => e.CaetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CAET_ID");
            entity.Property(e => e.CaetCalendarId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CAET_CALENDAR_ID");
            entity.Property(e => e.CaetDatetype)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("CAET_DATETYPE");
            entity.Property(e => e.CaetDefaultdurationinsec)
                .HasDefaultValueSql("0  ")
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("CAET_DEFAULTDURATIONINSEC");
            entity.Property(e => e.CaetDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CAET_DESCR");
            entity.Property(e => e.CaetDisplaycolor)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CAET_DISPLAYCOLOR");
            entity.Property(e => e.CaetIconfile)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CAET_ICONFILE");
            entity.Property(e => e.CaetKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("CAET_KEY");
            entity.Property(e => e.CaetPosno)
                .HasPrecision(3)
                .HasColumnName("CAET_POSNO");
            entity.Property(e => e.CaetTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CAET_TCREATION");
            entity.Property(e => e.CaetTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CAET_TUPDATE");

            entity.HasOne(d => d.CaetCalendar).WithMany(p => p.JCalendarentrytypes)
                .HasForeignKey(d => d.CaetCalendarId)
                .HasConstraintName("FK_CALENDAR_ENTRYTYPE");
        });

        modelBuilder.Entity<JChoice>(entity =>
        {
            entity.HasKey(e => e.ChId).HasName("PK_CHOICE");

            entity.ToTable("J_CHOICE", "JITTOE");

            entity.HasIndex(e => e.ChCompanyId, "I_COMPANY_CHOICE");

            entity.HasIndex(e => new { e.ChCompanyId, e.ChKeyincompany }, "UN_CH_COMPANY_KEY").IsUnique();

            entity.Property(e => e.ChId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CH_ID");
            entity.Property(e => e.ChCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CH_COMPANY_ID");
            entity.Property(e => e.ChDescr)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CH_DESCR");
            entity.Property(e => e.ChKeycolumnname)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CH_KEYCOLUMNNAME");
            entity.Property(e => e.ChKeyincompany)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("CH_KEYINCOMPANY");
            entity.Property(e => e.ChOrdercolumnname)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CH_ORDERCOLUMNNAME");
            entity.Property(e => e.ChTablename)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CH_TABLENAME");
            entity.Property(e => e.ChTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CH_TCREATION");
            entity.Property(e => e.ChTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CH_TUPDATE");
            entity.Property(e => e.ChValuecolumnname)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CH_VALUECOLUMNNAME");

            entity.HasOne(d => d.ChCompany).WithMany(p => p.JChoices)
                .HasForeignKey(d => d.ChCompanyId)
                .HasConstraintName("FK_COMPANY_CHOICE");
        });

        modelBuilder.Entity<JCodetable>(entity =>
        {
            entity.HasKey(e => e.CotId).HasName("PK_CODETABLE");

            entity.ToTable("J_CODETABLE", "JITTOE");

            entity.HasIndex(e => e.CotCompanyId, "I_COMPANY_CODETABLE");

            entity.HasIndex(e => e.CotKey, "UN_COT_KEY").IsUnique();

            entity.Property(e => e.CotId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("COT_ID");
            entity.Property(e => e.CotCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("COT_COMPANY_ID");
            entity.Property(e => e.CotDescr)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("COT_DESCR");
            entity.Property(e => e.CotKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("COT_KEY");
            entity.Property(e => e.CotTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("COT_TCREATION");
            entity.Property(e => e.CotTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("COT_TUPDATE");

            entity.HasOne(d => d.CotCompany).WithMany(p => p.JCodetables)
                .HasForeignKey(d => d.CotCompanyId)
                .HasConstraintName("FK_COMPANY_CODETABLE");
        });

        modelBuilder.Entity<JCodetableentry>(entity =>
        {
            entity.HasKey(e => e.CoteId).HasName("PK_CODETABLEENTRY");

            entity.ToTable("J_CODETABLEENTRY", "JITTOE");

            entity.HasIndex(e => e.CoteCodetableId, "I_CODE");

            entity.HasIndex(e => new { e.CoteCodetableId, e.CoteCode }, "UN_COTE_CODE").IsUnique();

            entity.HasIndex(e => e.CoteKey, "UN_COTE_KEY").IsUnique();

            entity.Property(e => e.CoteId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("COTE_ID");
            entity.Property(e => e.CoteCode)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("COTE_CODE");
            entity.Property(e => e.CoteCodetableId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("COTE_CODETABLE_ID");
            entity.Property(e => e.CoteDescr)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("COTE_DESCR");
            entity.Property(e => e.CoteKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("COTE_KEY");
            entity.Property(e => e.CoteTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("COTE_TCREATION");
            entity.Property(e => e.CoteTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("COTE_TUPDATE");
            entity.Property(e => e.CoteValue)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasColumnName("COTE_VALUE");

            entity.HasOne(d => d.CoteCodetable).WithMany(p => p.JCodetableentries)
                .HasForeignKey(d => d.CoteCodetableId)
                .HasConstraintName("FK_CODE");
        });

        modelBuilder.Entity<JColor>(entity =>
        {
            entity.HasKey(e => e.ColId).HasName("PK_COLOR");

            entity.ToTable("J_COLOR", "JITTOE");

            entity.HasIndex(e => e.ColCompanyId, "I_COMPANY_COLOR");

            entity.HasIndex(e => new { e.ColCompanyId, e.ColCode }, "UN_COL_COMPANY_CODE").IsUnique();

            entity.Property(e => e.ColId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("COL_ID");
            entity.Property(e => e.ColCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("COL_CODE");
            entity.Property(e => e.ColCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("COL_COMPANY_ID");
            entity.Property(e => e.ColDescr)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("COL_DESCR");
            entity.Property(e => e.ColDisplaycolor)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("COL_DISPLAYCOLOR");
            entity.Property(e => e.ColInfo1)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("COL_INFO1");
            entity.Property(e => e.ColInfo2)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("COL_INFO2");
            entity.Property(e => e.ColInfo3)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("COL_INFO3");
            entity.Property(e => e.ColTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("COL_TCREATION");
            entity.Property(e => e.ColTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("COL_TUPDATE");

            entity.HasOne(d => d.ColCompany).WithMany(p => p.JColors)
                .HasForeignKey(d => d.ColCompanyId)
                .HasConstraintName("FK_COMPANY_COLOR");
        });

        modelBuilder.Entity<JColorclass>(entity =>
        {
            entity.HasKey(e => e.ColcId).HasName("PK_COLORCLASS");

            entity.ToTable("J_COLORCLASS", "JITTOE");

            entity.HasIndex(e => e.ColcCompanyId, "I_COMPANY_COLORCLASS");

            entity.HasIndex(e => e.ColcKey, "UN_COLC_KEY").IsUnique();

            entity.Property(e => e.ColcId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("COLC_ID");
            entity.Property(e => e.ColcCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("COLC_COMPANY_ID");
            entity.Property(e => e.ColcDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("COLC_DESCR");
            entity.Property(e => e.ColcKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("COLC_KEY");
            entity.Property(e => e.ColcTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("COLC_TCREATION");
            entity.Property(e => e.ColcTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("COLC_TUPDATE");

            entity.HasOne(d => d.ColcCompany).WithMany(p => p.JColorclasses)
                .HasForeignKey(d => d.ColcCompanyId)
                .HasConstraintName("FK_COMPANY_COLORCLASS");
        });

        modelBuilder.Entity<JColorclassmember>(entity =>
        {
            entity.HasKey(e => e.ColcmId).HasName("PK_COLORCLASSMEMBER");

            entity.ToTable("J_COLORCLASSMEMBER", "JITTOE");

            entity.HasIndex(e => e.ColcmColorclassId, "I_COLORCLASS_COLORCLASSMEMBER");

            entity.HasIndex(e => e.ColcmColorId, "I_COLOR_COLORCLASSMEMBER");

            entity.HasIndex(e => new { e.ColcmColorId, e.ColcmColorclassId }, "UN_COLCM_KEY").IsUnique();

            entity.Property(e => e.ColcmId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("COLCM_ID");
            entity.Property(e => e.ColcmColorId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("COLCM_COLOR_ID");
            entity.Property(e => e.ColcmColorclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("COLCM_COLORCLASS_ID");
            entity.Property(e => e.ColcmTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("COLCM_TCREATION");
            entity.Property(e => e.ColcmTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("COLCM_TUPDATE");

            entity.HasOne(d => d.ColcmColor).WithMany(p => p.JColorclassmembers)
                .HasForeignKey(d => d.ColcmColorId)
                .HasConstraintName("FK_COLOR_COLORCLASSMEMBER");

            entity.HasOne(d => d.ColcmColorclass).WithMany(p => p.JColorclassmembers)
                .HasForeignKey(d => d.ColcmColorclassId)
                .HasConstraintName("FK_COLORCLASS_COLORCLASSMEMBER");
        });

        modelBuilder.Entity<JCommcontrol>(entity =>
        {
            entity.HasKey(e => e.CmcId).HasName("PK_COMMCONTROL");

            entity.ToTable("J_COMMCONTROL", "JITTOE");

            entity.HasIndex(e => e.CmcCompanyId, "I_COMPANY_COMMCONTROL");

            entity.HasIndex(e => e.CmcKey, "UN_CMC_KEY").IsUnique();

            entity.Property(e => e.CmcId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CMC_ID");
            entity.Property(e => e.CmcCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CMC_COMPANY_ID");
            entity.Property(e => e.CmcDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CMC_DESCR");
            entity.Property(e => e.CmcJobsize)
                .HasPrecision(3)
                .HasColumnName("CMC_JOBSIZE");
            entity.Property(e => e.CmcJobsizedelta)
                .HasPrecision(3)
                .HasColumnName("CMC_JOBSIZEDELTA");
            entity.Property(e => e.CmcKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("CMC_KEY");
            entity.Property(e => e.CmcLastevent)
                .HasColumnType("DATE")
                .HasColumnName("CMC_LASTEVENT");
            entity.Property(e => e.CmcMode)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("CMC_MODE");
            entity.Property(e => e.CmcReqmode)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("CMC_REQMODE");
            entity.Property(e => e.CmcRequseprotocol)
                .HasPrecision(1)
                .HasColumnName("CMC_REQUSEPROTOCOL");
            entity.Property(e => e.CmcState)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CMC_STATE");
            entity.Property(e => e.CmcTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CMC_TCREATION");
            entity.Property(e => e.CmcTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CMC_TUPDATE");
            entity.Property(e => e.CmcUseprotocol)
                .HasPrecision(1)
                .HasColumnName("CMC_USEPROTOCOL");

            entity.HasOne(d => d.CmcCompany).WithMany(p => p.JCommcontrols)
                .HasForeignKey(d => d.CmcCompanyId)
                .HasConstraintName("FK_COMPANY_COMMCONTROL");
        });

        modelBuilder.Entity<JCommjob>(entity =>
        {
            entity.HasKey(e => e.CmjId).HasName("PK_COMMJOB");

            entity.ToTable("J_COMMJOB", "JITTOE");

            entity.HasIndex(e => e.CmjCommcontrolId, "I_COMMCONTROL_COMMJOB");

            entity.HasIndex(e => new { e.CmjCommcontrolId, e.CmjPos }, "UN_CMJ_POS").IsUnique();

            entity.Property(e => e.CmjId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CMJ_ID");
            entity.Property(e => e.CmjCommcontrolId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CMJ_COMMCONTROL_ID");
            entity.Property(e => e.CmjPos)
                .HasPrecision(5)
                .HasColumnName("CMJ_POS");
            entity.Property(e => e.CmjState)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CMJ_STATE");
            entity.Property(e => e.CmjTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CMJ_TCREATION");

            entity.HasOne(d => d.CmjCommcontrol).WithMany(p => p.JCommjobs)
                .HasForeignKey(d => d.CmjCommcontrolId)
                .HasConstraintName("FK_COMMCONTROL_COMMJOB");
        });

        modelBuilder.Entity<JCommjobContainer>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("J_COMMJOB_CONTAINER", "JITTOE");

            entity.HasIndex(e => e.CommjobId, "I_COMMJOB_CONTAINER_1");

            entity.HasIndex(e => e.ContainerId, "I_COMMJOB_CONTAINER_2");

            entity.HasIndex(e => new { e.CommjobId, e.ContainerId }, "UN_COMMJOB_CONTAINER").IsUnique();

            entity.Property(e => e.CommjobId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("COMMJOB_ID");
            entity.Property(e => e.ContainerId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CONTAINER_ID");
            entity.Property(e => e.Tcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TCREATION");

            entity.HasOne(d => d.Commjob).WithMany()
                .HasForeignKey(d => d.CommjobId)
                .HasConstraintName("FK_COMMJOB_CONTAINER_1");

            entity.HasOne(d => d.Container).WithMany()
                .HasForeignKey(d => d.ContainerId)
                .HasConstraintName("FK_COMMJOB_CONTAINER_2");
        });

        modelBuilder.Entity<JCommjobProdjob>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("J_COMMJOB_PRODJOB", "JITTOE");

            entity.HasIndex(e => e.CommjobId, "I_COMMJOB_PRODJOB_1");

            entity.HasIndex(e => e.ProdjobId, "I_COMMJOB_PRODJOB_2");

            entity.HasIndex(e => new { e.CommjobId, e.ProdjobId }, "UN_COMMJOB_PRODJOB").IsUnique();

            entity.Property(e => e.CommjobId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("COMMJOB_ID");
            entity.Property(e => e.ProdjobId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRODJOB_ID");
            entity.Property(e => e.Tcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TCREATION");

            entity.HasOne(d => d.Commjob).WithMany()
                .HasForeignKey(d => d.CommjobId)
                .HasConstraintName("FK_COMMJOB_PRODJOB_1");

            entity.HasOne(d => d.Prodjob).WithMany()
                .HasForeignKey(d => d.ProdjobId)
                .HasConstraintName("FK_COMMJOB_PRODJOB_2");
        });

        modelBuilder.Entity<JCompany>(entity =>
        {
            entity.HasKey(e => e.CoId).HasName("PK_COMPANY");

            entity.ToTable("J_COMPANY", "JITTOE");

            entity.HasIndex(e => e.CoLogoimageId, "I_LOGOIMAGE_COMPANY");

            entity.HasIndex(e => e.CoMastercompanyId, "I_MASTER_COMPANY");

            entity.HasIndex(e => e.CoPropertysetId, "I_PROPERTYSET_COMPANY");

            entity.HasIndex(e => e.CoNo, "UN_CO_COMPANYNO").IsUnique();

            entity.HasIndex(e => e.CoDunsno, "UN_CO_DUNSNO").IsUnique();

            entity.HasIndex(e => e.CoKey, "UN_CO_KEY").IsUnique();

            entity.Property(e => e.CoId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CO_ID");
            entity.Property(e => e.CoDunsno)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("CO_DUNSNO");
            entity.Property(e => e.CoIconfile)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CO_ICONFILE");
            entity.Property(e => e.CoIscarrier)
                .HasPrecision(1)
                .HasColumnName("CO_ISCARRIER");
            entity.Property(e => e.CoIscustomer)
                .HasPrecision(1)
                .HasColumnName("CO_ISCUSTOMER");
            entity.Property(e => e.CoIssupplier)
                .HasPrecision(1)
                .HasColumnName("CO_ISSUPPLIER");
            entity.Property(e => e.CoKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("CO_KEY");
            entity.Property(e => e.CoLogoimageId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CO_LOGOIMAGE_ID");
            entity.Property(e => e.CoMastercompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CO_MASTERCOMPANY_ID");
            entity.Property(e => e.CoNo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CO_NO");
            entity.Property(e => e.CoPropertysetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CO_PROPERTYSET_ID");
            entity.Property(e => e.CoTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CO_TCREATION");
            entity.Property(e => e.CoTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CO_TUPDATE");

            entity.HasOne(d => d.CoLogoimage).WithMany(p => p.JCompanies)
                .HasForeignKey(d => d.CoLogoimageId)
                .HasConstraintName("FK_LOGOIMAGE_COMPANY");

            entity.HasOne(d => d.CoMastercompany).WithMany(p => p.InverseCoMastercompany)
                .HasForeignKey(d => d.CoMastercompanyId)
                .HasConstraintName("FK_MASTER_COMPANY");

            entity.HasOne(d => d.CoPropertyset).WithMany(p => p.JCompanies)
                .HasForeignKey(d => d.CoPropertysetId)
                .HasConstraintName("FK_PROPERTYSET_COMPANY");
        });

        modelBuilder.Entity<JCompanyclass>(entity =>
        {
            entity.HasKey(e => e.CoclId).HasName("PK_COMPANYCLASS");

            entity.ToTable("J_COMPANYCLASS", "JITTOE");

            entity.HasIndex(e => e.CoclCompanyId, "I_COMPANY_COCLASS");

            entity.HasIndex(e => e.CoclKey, "UN_COCL_KEY").IsUnique();

            entity.Property(e => e.CoclId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("COCL_ID");
            entity.Property(e => e.CoclCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("COCL_COMPANY_ID");
            entity.Property(e => e.CoclDeftype)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("'Enumeration'  ")
                .HasColumnName("COCL_DEFTYPE");
            entity.Property(e => e.CoclDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("COCL_DESCR");
            entity.Property(e => e.CoclKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("COCL_KEY");
            entity.Property(e => e.CoclTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("COCL_TCREATION");
            entity.Property(e => e.CoclTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("COCL_TUPDATE");

            entity.HasOne(d => d.CoclCompany).WithMany(p => p.JCompanyclasses)
                .HasForeignKey(d => d.CoclCompanyId)
                .HasConstraintName("FK_COMPANY_COCLASS");
        });

        modelBuilder.Entity<JCompanyclassdefelem>(entity =>
        {
            entity.HasKey(e => e.CocldeId).HasName("PK_COMPANYCLASSDEFELEM");

            entity.ToTable("J_COMPANYCLASSDEFELEM", "JITTOE");

            entity.HasIndex(e => e.CocldeIncompanyclassId, "I_COCLASS_COCLDEFELEM");

            entity.HasIndex(e => e.CocldeCompanyclassId, "I_DEFCOCLASS_COCLDEFELEM");

            entity.Property(e => e.CocldeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("COCLDE_ID");
            entity.Property(e => e.CocldeCompanyclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("COCLDE_COMPANYCLASS_ID");
            entity.Property(e => e.CocldeIncompanyclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("COCLDE_INCOMPANYCLASS_ID");
            entity.Property(e => e.CocldeIscarrier)
                .HasPrecision(1)
                .HasColumnName("COCLDE_ISCARRIER");
            entity.Property(e => e.CocldeIscustomer)
                .HasPrecision(1)
                .HasColumnName("COCLDE_ISCUSTOMER");
            entity.Property(e => e.CocldeIssupplier)
                .HasPrecision(1)
                .HasColumnName("COCLDE_ISSUPPLIER");
            entity.Property(e => e.CocldeQuery)
                .HasColumnType("LONG RAW")
                .HasColumnName("COCLDE_QUERY");
            entity.Property(e => e.CocldeTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("COCLDE_TCREATION");
            entity.Property(e => e.CocldeTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("COCLDE_TUPDATE");

            entity.HasOne(d => d.CocldeCompanyclass).WithMany(p => p.JCompanyclassdefelemCocldeCompanyclasses)
                .HasForeignKey(d => d.CocldeCompanyclassId)
                .HasConstraintName("FK_DEFCOCLASS_COCLDEFELEM");

            entity.HasOne(d => d.CocldeIncompanyclass).WithMany(p => p.JCompanyclassdefelemCocldeIncompanyclasses)
                .HasForeignKey(d => d.CocldeIncompanyclassId)
                .HasConstraintName("FK_COCLASS_COCLDEFELEM");
        });

        modelBuilder.Entity<JCompanyclassmember>(entity =>
        {
            entity.HasKey(e => e.CoclmId).HasName("PK_COMPANYCLASSMEMBER");

            entity.ToTable("J_COMPANYCLASSMEMBER", "JITTOE");

            entity.HasIndex(e => e.CoclmCompanyclassId, "I_COCLASS_COCLMEMBER");

            entity.HasIndex(e => e.CoclmCompanyId, "I_COMPANY_COCLMEMBER");

            entity.HasIndex(e => new { e.CoclmCompanyId, e.CoclmCompanyclassId }, "UN_COCLM_KEY").IsUnique();

            entity.Property(e => e.CoclmId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("COCLM_ID");
            entity.Property(e => e.CoclmCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("COCLM_COMPANY_ID");
            entity.Property(e => e.CoclmCompanyclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("COCLM_COMPANYCLASS_ID");
            entity.Property(e => e.CoclmTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("COCLM_TCREATION");
            entity.Property(e => e.CoclmTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("COCLM_TUPDATE");

            entity.HasOne(d => d.CoclmCompany).WithMany(p => p.JCompanyclassmembers)
                .HasForeignKey(d => d.CoclmCompanyId)
                .HasConstraintName("FK_COMPANY_COCLMEMBER");

            entity.HasOne(d => d.CoclmCompanyclass).WithMany(p => p.JCompanyclassmembers)
                .HasForeignKey(d => d.CoclmCompanyclassId)
                .HasConstraintName("FK_COCLASS_COCLMEMBER");
        });

        modelBuilder.Entity<JCompanycounter>(entity =>
        {
            entity.HasKey(e => e.CocId).HasName("PK_COMPANYCOUNTER");

            entity.ToTable("J_COMPANYCOUNTER", "JITTOE");

            entity.HasIndex(e => e.CocCompanyId, "I_COMPANY_COMPANYCOUNTER");

            entity.HasIndex(e => e.CocCounterId, "I_COUNTER_COMPANYCOUNTER");

            entity.HasIndex(e => new { e.CocCompanyId, e.CocCounterId }, "UN_COC_COMPANYCOUNTER").IsUnique();

            entity.Property(e => e.CocId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("COC_ID");
            entity.Property(e => e.CocCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("COC_COMPANY_ID");
            entity.Property(e => e.CocCounterId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("COC_COUNTER_ID");
            entity.Property(e => e.CocTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("COC_TCREATION");

            entity.HasOne(d => d.CocCompany).WithMany(p => p.JCompanycounters)
                .HasForeignKey(d => d.CocCompanyId)
                .HasConstraintName("FK_COMPANY_COMPANYCOUNTER");

            entity.HasOne(d => d.CocCounter).WithMany(p => p.JCompanycounters)
                .HasForeignKey(d => d.CocCounterId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COUNTER_COMPANYCOUNTER");
        });

        modelBuilder.Entity<JComponentdef>(entity =>
        {
            entity.HasKey(e => e.CodId).HasName("PK_COMPONENTDEF");

            entity.ToTable("J_COMPONENTDEF", "JITTOE");

            entity.HasIndex(e => e.CodConfigdefId, "I_CONFIGDEF_COMPONENTDEF");

            entity.HasIndex(e => e.CodKey, "UN_COD_KEY").IsUnique();

            entity.Property(e => e.CodId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("COD_ID");
            entity.Property(e => e.CodConfigdefId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("COD_CONFIGDEF_ID");
            entity.Property(e => e.CodDescr)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("COD_DESCR");
            entity.Property(e => e.CodKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("COD_KEY");
            entity.Property(e => e.CodTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("COD_TCREATION");
            entity.Property(e => e.CodTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("COD_TUPDATE");

            entity.HasOne(d => d.CodConfigdef).WithMany(p => p.JComponentdefs)
                .HasForeignKey(d => d.CodConfigdefId)
                .HasConstraintName("FK_CONFIGDEF_COMPONENTDEF");
        });

        modelBuilder.Entity<JComponentdefpropertyset>(entity =>
        {
            entity.HasKey(e => e.CodpsId).HasName("PK_COMPONENTDEFPROPERTYSET");

            entity.ToTable("J_COMPONENTDEFPROPERTYSET", "JITTOE");

            entity.HasIndex(e => e.CodpsComponentdefId, "I_COMPONENTDEF_CDSET");

            entity.HasIndex(e => e.CodpsPropertysetId, "I_PROPERTYSET_CDSET");

            entity.HasIndex(e => new { e.CodpsComponentdefId, e.CodpsPropertysetId }, "UN_CODPS_KEY").IsUnique();

            entity.Property(e => e.CodpsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CODPS_ID");
            entity.Property(e => e.CodpsComponentdefId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CODPS_COMPONENTDEF_ID");
            entity.Property(e => e.CodpsPropertysetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CODPS_PROPERTYSET_ID");
            entity.Property(e => e.CodpsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CODPS_TCREATION");

            entity.HasOne(d => d.CodpsComponentdef).WithMany(p => p.JComponentdefpropertysets)
                .HasForeignKey(d => d.CodpsComponentdefId)
                .HasConstraintName("FK_COMPONENTDEF_CDSET");

            entity.HasOne(d => d.CodpsPropertyset).WithMany(p => p.JComponentdefpropertysets)
                .HasForeignKey(d => d.CodpsPropertysetId)
                .HasConstraintName("FK_PROPERTYSET_CDSET");
        });

        modelBuilder.Entity<JConfigdef>(entity =>
        {
            entity.HasKey(e => e.CdId).HasName("PK_CONFIGDEF");

            entity.ToTable("J_CONFIGDEF", "JITTOE");

            entity.HasIndex(e => e.CdBaseId, "I_CONFIGDEF_CONFIGDEF");

            entity.HasIndex(e => e.CdKey, "UN_CD_KEY").IsUnique();

            entity.Property(e => e.CdId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CD_ID");
            entity.Property(e => e.CdBaseId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CD_BASE_ID");
            entity.Property(e => e.CdData)
                .HasColumnType("LONG RAW")
                .HasColumnName("CD_DATA");
            entity.Property(e => e.CdDatasize)
                .HasPrecision(9)
                .HasColumnName("CD_DATASIZE");
            entity.Property(e => e.CdDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CD_DESCR");
            entity.Property(e => e.CdFilename)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("CD_FILENAME");
            entity.Property(e => e.CdKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("CD_KEY");
            entity.Property(e => e.CdMajorversion)
                .HasPrecision(3)
                .HasDefaultValueSql("0 ")
                .HasColumnName("CD_MAJORVERSION");
            entity.Property(e => e.CdMinorversion)
                .HasPrecision(3)
                .HasDefaultValueSql("0 ")
                .HasColumnName("CD_MINORVERSION");
            entity.Property(e => e.CdName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("CD_NAME");
            entity.Property(e => e.CdTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CD_TCREATION");
            entity.Property(e => e.CdTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CD_TUPDATE");
            entity.Property(e => e.CdType)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("'Standard'  ")
                .HasColumnName("CD_TYPE");

            entity.HasOne(d => d.CdBase).WithMany(p => p.InverseCdBase)
                .HasForeignKey(d => d.CdBaseId)
                .HasConstraintName("FK_CONFIGDEF_CONFIGDEF");
        });

        modelBuilder.Entity<JContainer>(entity =>
        {
            entity.HasKey(e => e.CtId).HasName("PK_CONTAINER");

            entity.ToTable("J_CONTAINER", "JITTOE");

            entity.HasIndex(e => e.CtContainerusageId, "I_CONTAINERUSAGE_CONTAINER");

            entity.HasIndex(e => e.CtContractId, "I_CONTRACT_CONTAINER");

            entity.HasIndex(e => new { e.CtNo, e.CtContainersetId }, "I_CT_NO");

            entity.HasIndex(e => new { e.CtOtherno, e.CtContainersetId }, "I_CT_OTHERNO");

            entity.HasIndex(e => new { e.CtContainersetId, e.CtStatus }, "I_CT_STATUS");

            entity.HasIndex(e => new { e.CtTcreation, e.CtNo }, "I_CT_TCREATION");

            entity.HasIndex(e => e.CtLocationId, "I_LOCATION_CONTAINER");

            entity.HasIndex(e => e.CtOrderId, "I_ORDER_CONTAINER");

            entity.HasIndex(e => e.CtProdunitId, "I_PRODUNIT_CONTAINER");

            entity.HasIndex(e => e.CtRootcontainerId, "I_ROOTCONTAINER_CONTAINER");

            entity.HasIndex(e => e.CtStockId, "I_STOCK_CONTAINER");

            entity.HasIndex(e => new { e.CtTempno, e.CtDeletionid }, "UN_CT_TEMPNO").IsUnique();

            entity.Property(e => e.CtId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CT_ID");
            entity.Property(e => e.CtAltno)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CT_ALTNO");
            entity.Property(e => e.CtContainersetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CT_CONTAINERSET_ID");
            entity.Property(e => e.CtContainerusageId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CT_CONTAINERUSAGE_ID");
            entity.Property(e => e.CtContractId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CT_CONTRACT_ID");
            entity.Property(e => e.CtDeletionid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CT_DELETIONID");
            entity.Property(e => e.CtLocationId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CT_LOCATION_ID");
            entity.Property(e => e.CtNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CT_NO");
            entity.Property(e => e.CtOrderId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CT_ORDER_ID");
            entity.Property(e => e.CtOtherno)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CT_OTHERNO");
            entity.Property(e => e.CtProdunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CT_PRODUNIT_ID");
            entity.Property(e => e.CtQualityclass)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CT_QUALITYCLASS");
            entity.Property(e => e.CtRootcontainerId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CT_ROOTCONTAINER_ID");
            entity.Property(e => e.CtStatus)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("CT_STATUS");
            entity.Property(e => e.CtStockId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CT_STOCK_ID");
            entity.Property(e => e.CtTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CT_TCREATION");
            entity.Property(e => e.CtTdeletion)
                .HasColumnType("DATE")
                .HasColumnName("CT_TDELETION");
            entity.Property(e => e.CtTempno)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CT_TEMPNO");
            entity.Property(e => e.CtTimeverified)
                .HasColumnType("DATE")
                .HasColumnName("CT_TIMEVERIFIED");
            entity.Property(e => e.CtTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CT_TUPDATE");

            entity.HasOne(d => d.CtContainerset).WithMany(p => p.JContainers)
                .HasForeignKey(d => d.CtContainersetId)
                .HasConstraintName("FK_CONTAINERSET_CONTAINER");

            entity.HasOne(d => d.CtContainerusage).WithMany(p => p.JContainers)
                .HasForeignKey(d => d.CtContainerusageId)
                .HasConstraintName("FK_CONTAINERUSAGE_CONTAINER");

            entity.HasOne(d => d.CtContract).WithMany(p => p.JContainers)
                .HasForeignKey(d => d.CtContractId)
                .HasConstraintName("FK_CONTRACT_CONTAINER");

            entity.HasOne(d => d.CtLocation).WithMany(p => p.JContainers)
                .HasForeignKey(d => d.CtLocationId)
                .HasConstraintName("FK_LOCATION_CONTAINER");

            entity.HasOne(d => d.CtOrder).WithMany(p => p.JContainers)
                .HasForeignKey(d => d.CtOrderId)
                .HasConstraintName("FK_ORDER_CONTAINER");

            entity.HasOne(d => d.CtProdunit).WithMany(p => p.JContainers)
                .HasForeignKey(d => d.CtProdunitId)
                .HasConstraintName("FK_PRODUNIT_CONTAINER");

            entity.HasOne(d => d.CtRootcontainer).WithMany(p => p.InverseCtRootcontainer)
                .HasForeignKey(d => d.CtRootcontainerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ROOTCONTAINER_CONTAINER");

            entity.HasOne(d => d.CtStock).WithMany(p => p.JContainers)
                .HasForeignKey(d => d.CtStockId)
                .HasConstraintName("FK_STOCK_CONTAINER");
        });

        modelBuilder.Entity<JContainerbuffer>(entity =>
        {
            entity.HasKey(e => e.CtbId).HasName("PK_CONTAINERBUFFER");

            entity.ToTable("J_CONTAINERBUFFER", "JITTOE");

            entity.HasIndex(e => e.CtbCompanyId, "I_COMPANY_CONTAINERBUFFER");

            entity.HasIndex(e => e.CtbKey, "UN_CTB_KEY").IsUnique();

            entity.Property(e => e.CtbId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTB_ID");
            entity.Property(e => e.CtbCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTB_COMPANY_ID");
            entity.Property(e => e.CtbDescr)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("CTB_DESCR");
            entity.Property(e => e.CtbKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("CTB_KEY");
            entity.Property(e => e.CtbMaxentries)
                .HasPrecision(5)
                .HasDefaultValueSql("0  ")
                .HasColumnName("CTB_MAXENTRIES");
            entity.Property(e => e.CtbMaxentryageinminutes)
                .HasPrecision(9)
                .HasDefaultValueSql("0  ")
                .HasColumnName("CTB_MAXENTRYAGEINMINUTES");
            entity.Property(e => e.CtbTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTB_TCREATION");
            entity.Property(e => e.CtbTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTB_TUPDATE");

            entity.HasOne(d => d.CtbCompany).WithMany(p => p.JContainerbuffers)
                .HasForeignKey(d => d.CtbCompanyId)
                .HasConstraintName("FK_COMPANY_CONTAINERBUFFER");
        });

        modelBuilder.Entity<JContainerbufferclass>(entity =>
        {
            entity.HasKey(e => e.CtbcId).HasName("PK_CONTAINERBUFFERCLASS");

            entity.ToTable("J_CONTAINERBUFFERCLASS", "JITTOE");

            entity.HasIndex(e => e.CtbcCompanyId, "I_COMPANY_CBCLASS");

            entity.HasIndex(e => e.CtbcKey, "UN_CTBC_KEY").IsUnique();

            entity.Property(e => e.CtbcId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTBC_ID");
            entity.Property(e => e.CtbcCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTBC_COMPANY_ID");
            entity.Property(e => e.CtbcDescr)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("CTBC_DESCR");
            entity.Property(e => e.CtbcKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("CTBC_KEY");
            entity.Property(e => e.CtbcTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTBC_TCREATION");
            entity.Property(e => e.CtbcTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTBC_TUPDATE");
            entity.Property(e => e.CtbcUniquecontainers)
                .HasPrecision(1)
                .HasColumnName("CTBC_UNIQUECONTAINERS");

            entity.HasOne(d => d.CtbcCompany).WithMany(p => p.JContainerbufferclasses)
                .HasForeignKey(d => d.CtbcCompanyId)
                .HasConstraintName("FK_COMPANY_CBCLASS");
        });

        modelBuilder.Entity<JContainerbufferclassm>(entity =>
        {
            entity.HasKey(e => e.CtbcmId).HasName("PK_CONTAINERBUFFERCLASSM");

            entity.ToTable("J_CONTAINERBUFFERCLASSM", "JITTOE");

            entity.HasIndex(e => e.CtbcmContainerbufferclassId, "I_CBC_CBCMEMBER");

            entity.HasIndex(e => e.CtbcmContainerbufferId, "I_CONTAINERBUFFER_CBCMEMBER");

            entity.HasIndex(e => new { e.CtbcmContainerbufferId, e.CtbcmContainerbufferclassId }, "UN_CTBCM_KEY").IsUnique();

            entity.Property(e => e.CtbcmId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTBCM_ID");
            entity.Property(e => e.CtbcmContainerbufferId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTBCM_CONTAINERBUFFER_ID");
            entity.Property(e => e.CtbcmContainerbufferclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTBCM_CONTAINERBUFFERCLASS_ID");
            entity.Property(e => e.CtbcmTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTBCM_TCREATION");
            entity.Property(e => e.CtbcmTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTBCM_TUPDATE");

            entity.HasOne(d => d.CtbcmContainerbuffer).WithMany(p => p.JContainerbufferclassms)
                .HasForeignKey(d => d.CtbcmContainerbufferId)
                .HasConstraintName("FK_CONTAINERBUFFER_CBCMEMBER");

            entity.HasOne(d => d.CtbcmContainerbufferclass).WithMany(p => p.JContainerbufferclassms)
                .HasForeignKey(d => d.CtbcmContainerbufferclassId)
                .HasConstraintName("FK_CBC_CBCMEMBER");
        });

        modelBuilder.Entity<JContainerbufferentry>(entity =>
        {
            entity.HasKey(e => e.CtbeId).HasName("PK_CONTAINERBUFFERENTRY");

            entity.ToTable("J_CONTAINERBUFFERENTRY", "JITTOE");

            entity.HasIndex(e => e.CtbeContainerbufferId, "I_CONTAINERBUFFER_CBENTRY");

            entity.HasIndex(e => e.CtbeContainerId, "I_CONTAINER_CBENTRY");

            entity.HasIndex(e => new { e.CtbeContainerbufferId, e.CtbeContainerId }, "UN_CTBE_KEY").IsUnique();

            entity.Property(e => e.CtbeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTBE_ID");
            entity.Property(e => e.CtbeContainerId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTBE_CONTAINER_ID");
            entity.Property(e => e.CtbeContainerbufferId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTBE_CONTAINERBUFFER_ID");
            entity.Property(e => e.CtbeTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTBE_TCREATION");
            entity.Property(e => e.CtbeTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTBE_TUPDATE");

            entity.HasOne(d => d.CtbeContainer).WithMany(p => p.JContainerbufferentries)
                .HasForeignKey(d => d.CtbeContainerId)
                .HasConstraintName("FK_CONTAINER_CBENTRY");

            entity.HasOne(d => d.CtbeContainerbuffer).WithMany(p => p.JContainerbufferentries)
                .HasForeignKey(d => d.CtbeContainerbufferId)
                .HasConstraintName("FK_CONTAINERBUFFER_CBENTRY");
        });

        modelBuilder.Entity<JContainercontainer>(entity =>
        {
            entity.HasKey(e => e.CtecId).HasName("PK_CONTAINERCONTAINER");

            entity.ToTable("J_CONTAINERCONTAINER", "JITTOE");

            entity.HasIndex(e => e.CtecContainerId, "I_CONTAINERCONTAINER_CONT");

            entity.HasIndex(e => e.CtecContainerentryId, "I_CONTAINERENTRY_CONTCONT");

            entity.Property(e => e.CtecId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTEC_ID");
            entity.Property(e => e.CtecContainerId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTEC_CONTAINER_ID");
            entity.Property(e => e.CtecContainerentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTEC_CONTAINERENTRY_ID");
            entity.Property(e => e.CtecTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTEC_TCREATION");
            entity.Property(e => e.CtecTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTEC_TUPDATE");

            entity.HasOne(d => d.CtecContainer).WithMany(p => p.JContainercontainers)
                .HasForeignKey(d => d.CtecContainerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTAINERCONTAINER_CONT");

            entity.HasOne(d => d.CtecContainerentry).WithMany(p => p.JContainercontainers)
                .HasForeignKey(d => d.CtecContainerentryId)
                .HasConstraintName("FK_CONTAINERENTRY_CONTCONT");
        });

        modelBuilder.Entity<JContainerentry>(entity =>
        {
            entity.HasKey(e => e.CteId).HasName("PK_CONTAINERENTRY");

            entity.ToTable("J_CONTAINERENTRY", "JITTOE");

            entity.HasIndex(e => e.CteContainerId, "I_CONTAINER_CONTAINERENTRY");

            entity.HasIndex(e => new { e.CteContainerId, e.CteIndex, e.CteDeletionid }, "UN_CTE_CONTAINER_INDEX").IsUnique();

            entity.HasIndex(e => new { e.CteContainerId, e.CtePos, e.CteDeletionid }, "UN_CTE_CONTAINER_POS").IsUnique();

            entity.Property(e => e.CteId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTE_ID");
            entity.Property(e => e.CteContainerId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTE_CONTAINER_ID");
            entity.Property(e => e.CteDeletionid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTE_DELETIONID");
            entity.Property(e => e.CteIndex)
                .HasPrecision(5)
                .HasColumnName("CTE_INDEX");
            entity.Property(e => e.CtePos)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CTE_POS");
            entity.Property(e => e.CteTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTE_TCREATION");
            entity.Property(e => e.CteTdeletion)
                .HasColumnType("DATE")
                .HasColumnName("CTE_TDELETION");
            entity.Property(e => e.CteTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTE_TUPDATE");

            entity.HasOne(d => d.CteContainer).WithMany(p => p.JContainerentries)
                .HasForeignKey(d => d.CteContainerId)
                .HasConstraintName("FK_CONTAINER_CONTAINERENTRY");
        });

        modelBuilder.Entity<JContainerevent>(entity =>
        {
            entity.HasKey(e => e.CtevId).HasName("PK_CONTAINEREVENT");

            entity.ToTable("J_CONTAINEREVENT", "JITTOE");

            entity.HasIndex(e => e.CtevContainerId, "I_CONTAINER_CONTEVENT");

            entity.HasIndex(e => e.CtevOrderId, "I_ORDER_CONTEVENT");

            entity.HasIndex(e => e.CtevProdunitId, "I_PRODUNIT_CONTEVENT");

            entity.HasIndex(e => e.CtevStockId, "I_STOCK_CONTEVENT");

            entity.HasIndex(e => e.CtevTransitionId, "I_TRANSITION_CONTEVENT");

            entity.Property(e => e.CtevId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTEV_ID");
            entity.Property(e => e.CtevContainerId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTEV_CONTAINER_ID");
            entity.Property(e => e.CtevOrderId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTEV_ORDER_ID");
            entity.Property(e => e.CtevProdunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTEV_PRODUNIT_ID");
            entity.Property(e => e.CtevQualityclass)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CTEV_QUALITYCLASS");
            entity.Property(e => e.CtevStatus)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("CTEV_STATUS");
            entity.Property(e => e.CtevStockId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTEV_STOCK_ID");
            entity.Property(e => e.CtevTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTEV_TCREATION");
            entity.Property(e => e.CtevTransitionId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTEV_TRANSITION_ID");

            entity.HasOne(d => d.CtevContainer).WithMany(p => p.JContainerevents)
                .HasForeignKey(d => d.CtevContainerId)
                .HasConstraintName("FK_CONTAINER_CONTEVENT");

            entity.HasOne(d => d.CtevOrder).WithMany(p => p.JContainerevents)
                .HasForeignKey(d => d.CtevOrderId)
                .HasConstraintName("FK_ORDER_CONTEVENT");

            entity.HasOne(d => d.CtevProdunit).WithMany(p => p.JContainerevents)
                .HasForeignKey(d => d.CtevProdunitId)
                .HasConstraintName("FK_PRODUNIT_CONTEVENT");

            entity.HasOne(d => d.CtevStock).WithMany(p => p.JContainerevents)
                .HasForeignKey(d => d.CtevStockId)
                .HasConstraintName("FK_STOCK_CONTEVENT");

            entity.HasOne(d => d.CtevTransition).WithMany(p => p.JContainerevents)
                .HasForeignKey(d => d.CtevTransitionId)
                .HasConstraintName("FK_TRANSITION_CONTEVENT");
        });

        modelBuilder.Entity<JContainerevententry>(entity =>
        {
            entity.HasKey(e => e.CteveId).HasName("PK_CONTAINEREVENTENTRY");

            entity.ToTable("J_CONTAINEREVENTENTRY", "JITTOE");

            entity.HasIndex(e => e.CteveContainereventId, "I_CONTAINEREVENT_CEENTRY");

            entity.HasIndex(e => e.CteveSubjectId, "I_SUBJECT_CEENTRY");

            entity.Property(e => e.CteveId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTEVE_ID");
            entity.Property(e => e.CteveAmount)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("CTEVE_AMOUNT");
            entity.Property(e => e.CteveContainereventId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTEVE_CONTAINEREVENT_ID");
            entity.Property(e => e.CteveIndex)
                .HasPrecision(5)
                .HasColumnName("CTEVE_INDEX");
            entity.Property(e => e.CtevePos)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CTEVE_POS");
            entity.Property(e => e.CteveSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTEVE_SUBJECT_ID");
            entity.Property(e => e.CteveTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTEVE_TCREATION");

            entity.HasOne(d => d.CteveContainerevent).WithMany(p => p.JContainerevententries)
                .HasForeignKey(d => d.CteveContainereventId)
                .HasConstraintName("FK_CONTAINEREVENT_CEENTRY");

            entity.HasOne(d => d.CteveSubject).WithMany(p => p.JContainerevententries)
                .HasForeignKey(d => d.CteveSubjectId)
                .HasConstraintName("FK_SUBJECT_CEENTRY");
        });

        modelBuilder.Entity<JContainerinfo>(entity =>
        {
            entity.HasKey(e => e.CtiId).HasName("PK_CONTAINERINFO");

            entity.ToTable("J_CONTAINERINFO", "JITTOE");

            entity.HasIndex(e => e.CtiContainerId, "I_CONTAINER_CONTAINERINFO");

            entity.HasIndex(e => new { e.CtiContainerId, e.CtiType, e.CtiKey }, "UN_CTI_INFO").IsUnique();

            entity.Property(e => e.CtiId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTI_ID");
            entity.Property(e => e.CtiContainerId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTI_CONTAINER_ID");
            entity.Property(e => e.CtiDecimalvalue)
                .HasColumnType("NUMBER(16,6)")
                .HasColumnName("CTI_DECIMALVALUE");
            entity.Property(e => e.CtiKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("CTI_KEY");
            entity.Property(e => e.CtiStringvalue)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("CTI_STRINGVALUE");
            entity.Property(e => e.CtiTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTI_TCREATION");
            entity.Property(e => e.CtiTimevalue)
                .HasColumnType("DATE")
                .HasColumnName("CTI_TIMEVALUE");
            entity.Property(e => e.CtiTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTI_TUPDATE");
            entity.Property(e => e.CtiType)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasColumnName("CTI_TYPE");

            entity.HasOne(d => d.CtiContainer).WithMany(p => p.JContainerinfos)
                .HasForeignKey(d => d.CtiContainerId)
                .HasConstraintName("FK_CONTAINER_CONTAINERINFO");
        });

        modelBuilder.Entity<JContainerinv>(entity =>
        {
            entity.HasKey(e => e.CtinvId).HasName("PK_CONTAINERINV");

            entity.ToTable("J_CONTAINERINV", "JITTOE");

            entity.Property(e => e.CtinvId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTINV_ID");
            entity.Property(e => e.CtinvDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CTINV_DESCR");
            entity.Property(e => e.CtinvState)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("CTINV_STATE");
            entity.Property(e => e.CtinvTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTINV_TCREATION");
            entity.Property(e => e.CtinvTimeended)
                .HasColumnType("DATE")
                .HasColumnName("CTINV_TIMEENDED");
            entity.Property(e => e.CtinvTimestarted)
                .HasColumnType("DATE")
                .HasColumnName("CTINV_TIMESTARTED");
            entity.Property(e => e.CtinvTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTINV_TUPDATE");
        });

        modelBuilder.Entity<JContainerinvcontainerset>(entity =>
        {
            entity.HasKey(e => e.CtictsId).HasName("PK_CONTAINERINVCONTAINERSET");

            entity.ToTable("J_CONTAINERINVCONTAINERSET", "JITTOE");

            entity.HasIndex(e => e.CtictsContainerinvId, "I_CONTAINERINV_CINVCS");

            entity.HasIndex(e => e.CtictsContainersetId, "I_CONTAINERSET_CINVCS1");

            entity.HasIndex(e => e.CtictsInvcontainersetId, "I_CONTAINERSET_CINVCS2");

            entity.HasIndex(e => new { e.CtictsContainerinvId, e.CtictsContainersetId }, "UN_CTICTS_KEY").IsUnique();

            entity.Property(e => e.CtictsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTICTS_ID");
            entity.Property(e => e.CtictsContainerinvId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTICTS_CONTAINERINV_ID");
            entity.Property(e => e.CtictsContainersetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTICTS_CONTAINERSET_ID");
            entity.Property(e => e.CtictsInvcontainersetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTICTS_INVCONTAINERSET_ID");
            entity.Property(e => e.CtictsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTICTS_TCREATION");
            entity.Property(e => e.CtictsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTICTS_TUPDATE");

            entity.HasOne(d => d.CtictsContainerinv).WithMany(p => p.JContainerinvcontainersets)
                .HasForeignKey(d => d.CtictsContainerinvId)
                .HasConstraintName("FK_CONTAINERINV_CINVCS");

            entity.HasOne(d => d.CtictsContainerset).WithMany(p => p.JContainerinvcontainersetCtictsContainersets)
                .HasForeignKey(d => d.CtictsContainersetId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTAINERSET_CINVCS1");

            entity.HasOne(d => d.CtictsInvcontainerset).WithMany(p => p.JContainerinvcontainersetCtictsInvcontainersets)
                .HasForeignKey(d => d.CtictsInvcontainersetId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTAINERSET_CINVCS2");
        });

        modelBuilder.Entity<JContainerinvsubject>(entity =>
        {
            entity.HasKey(e => e.CtisId).HasName("PK_CONTAINERINVSUBJECT");

            entity.ToTable("J_CONTAINERINVSUBJECT", "JITTOE");

            entity.HasIndex(e => e.CtisContainerinvId, "I_CONTAINERINV_CINVS");

            entity.HasIndex(e => e.CtisSubjectId, "I_SUBJECT_CINVS");

            entity.HasIndex(e => new { e.CtisContainerinvId, e.CtisSubjectId }, "UN_CTIS_KEY").IsUnique();

            entity.Property(e => e.CtisId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTIS_ID");
            entity.Property(e => e.CtisContainerinvId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTIS_CONTAINERINV_ID");
            entity.Property(e => e.CtisSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTIS_SUBJECT_ID");
            entity.Property(e => e.CtisTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTIS_TCREATION");
            entity.Property(e => e.CtisTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTIS_TUPDATE");

            entity.HasOne(d => d.CtisContainerinv).WithMany(p => p.JContainerinvsubjects)
                .HasForeignKey(d => d.CtisContainerinvId)
                .HasConstraintName("FK_CONTAINERINV_CINVS");

            entity.HasOne(d => d.CtisSubject).WithMany(p => p.JContainerinvsubjects)
                .HasForeignKey(d => d.CtisSubjectId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SUBJECT_CINVS");
        });

        modelBuilder.Entity<JContainermapcfg>(entity =>
        {
            entity.HasKey(e => e.CtmcId).HasName("PK_CONTAINERMAPCFG");

            entity.ToTable("J_CONTAINERMAPCFG", "JITTOE");

            entity.HasIndex(e => e.CtmcContainermaptypeId, "I_CMAPTYPE_CMAPCFG");

            entity.HasIndex(e => e.CtmcContractId, "I_CONTRACT_CMAPCFG");

            entity.HasIndex(e => e.CtmcContainersetId, "I_CS_CMAPCFG");

            entity.HasIndex(e => e.CtmcSourcecontainersetId, "I_SOURCECS_CMAPCFG");

            entity.HasIndex(e => e.CtmcStockId, "I_STOCK_CMAPCFG");

            entity.HasIndex(e => e.CtmcSubjectattrId, "I_SUBJECTATTR_CMAPCFG");

            entity.HasIndex(e => e.CtmcSubjecttypeId, "I_SUBJECTTYPE_CMAPCFG");

            entity.HasIndex(e => e.CtmcSubjectId, "I_SUBJECT_CMAPCFG");

            entity.HasIndex(e => e.CtmcTolocationId, "I_TOLOCATION_CMAPCFG");

            entity.Property(e => e.CtmcId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTMC_ID");
            entity.Property(e => e.CtmcAttrvalues)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("CTMC_ATTRVALUES");
            entity.Property(e => e.CtmcContainermaptypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTMC_CONTAINERMAPTYPE_ID");
            entity.Property(e => e.CtmcContainersetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTMC_CONTAINERSET_ID");
            entity.Property(e => e.CtmcContractId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTMC_CONTRACT_ID");
            entity.Property(e => e.CtmcDescr)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("CTMC_DESCR");
            entity.Property(e => e.CtmcPriorityinscore)
                .HasPrecision(3)
                .HasDefaultValueSql("0  ")
                .HasColumnName("CTMC_PRIORITYINSCORE");
            entity.Property(e => e.CtmcSourcecontainersetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTMC_SOURCECONTAINERSET_ID");
            entity.Property(e => e.CtmcStockId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTMC_STOCK_ID");
            entity.Property(e => e.CtmcSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTMC_SUBJECT_ID");
            entity.Property(e => e.CtmcSubjectattrId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTMC_SUBJECTATTR_ID");
            entity.Property(e => e.CtmcSubjecttypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTMC_SUBJECTTYPE_ID");
            entity.Property(e => e.CtmcTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTMC_TCREATION");
            entity.Property(e => e.CtmcTolocationId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTMC_TOLOCATION_ID");
            entity.Property(e => e.CtmcTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTMC_TUPDATE");

            entity.HasOne(d => d.CtmcContainermaptype).WithMany(p => p.JContainermapcfgs)
                .HasForeignKey(d => d.CtmcContainermaptypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CMAPTYPE_CMAPCFG");

            entity.HasOne(d => d.CtmcContainerset).WithMany(p => p.JContainermapcfgCtmcContainersets)
                .HasForeignKey(d => d.CtmcContainersetId)
                .HasConstraintName("FK_CS_CMAPCFG");

            entity.HasOne(d => d.CtmcContract).WithMany(p => p.JContainermapcfgs)
                .HasForeignKey(d => d.CtmcContractId)
                .HasConstraintName("FK_CONTRACT_CMAPCFG");

            entity.HasOne(d => d.CtmcSourcecontainerset).WithMany(p => p.JContainermapcfgCtmcSourcecontainersets)
                .HasForeignKey(d => d.CtmcSourcecontainersetId)
                .HasConstraintName("FK_SOURCECS_CMAPCFG");

            entity.HasOne(d => d.CtmcStock).WithMany(p => p.JContainermapcfgs)
                .HasForeignKey(d => d.CtmcStockId)
                .HasConstraintName("FK_STOCK_CMAPCFG");

            entity.HasOne(d => d.CtmcSubject).WithMany(p => p.JContainermapcfgs)
                .HasForeignKey(d => d.CtmcSubjectId)
                .HasConstraintName("FK_SUBJECT_CMAPCFG");

            entity.HasOne(d => d.CtmcSubjectattr).WithMany(p => p.JContainermapcfgs)
                .HasForeignKey(d => d.CtmcSubjectattrId)
                .HasConstraintName("FK_SUBJECTATTR_CMAPCFG");

            entity.HasOne(d => d.CtmcSubjecttype).WithMany(p => p.JContainermapcfgs)
                .HasForeignKey(d => d.CtmcSubjecttypeId)
                .HasConstraintName("FK_SUBJECTTYPE_CMAPCFG");

            entity.HasOne(d => d.CtmcTolocation).WithMany(p => p.JContainermapcfgs)
                .HasForeignKey(d => d.CtmcTolocationId)
                .HasConstraintName("FK_TOLOCATION_CMAPCFG");
        });

        modelBuilder.Entity<JContainermaptype>(entity =>
        {
            entity.HasKey(e => e.CtmtId).HasName("PK_CONTAINERMAPTYPE");

            entity.ToTable("J_CONTAINERMAPTYPE", "JITTOE");

            entity.HasIndex(e => e.CtmtContainermaptypesetId, "I_CMAPTYPESET_CMAPTYPE");

            entity.HasIndex(e => e.CtmtKey, "UN_CTMT_KEY").IsUnique();

            entity.Property(e => e.CtmtId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTMT_ID");
            entity.Property(e => e.CtmtContainermaptypesetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTMT_CONTAINERMAPTYPESET_ID");
            entity.Property(e => e.CtmtDescr)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("CTMT_DESCR");
            entity.Property(e => e.CtmtDomain)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasDefaultValueSql("'ContainerEntry'  ")
                .HasColumnName("CTMT_DOMAIN");
            entity.Property(e => e.CtmtKeepsourcestructure)
                .HasPrecision(1)
                .HasColumnName("CTMT_KEEPSOURCESTRUCTURE");
            entity.Property(e => e.CtmtKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("CTMT_KEY");
            entity.Property(e => e.CtmtTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTMT_TCREATION");
            entity.Property(e => e.CtmtTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTMT_TUPDATE");

            entity.HasOne(d => d.CtmtContainermaptypeset).WithMany(p => p.JContainermaptypes)
                .HasForeignKey(d => d.CtmtContainermaptypesetId)
                .HasConstraintName("FK_CMAPTYPESET_CMAPTYPE");
        });

        modelBuilder.Entity<JContainermaptypeset>(entity =>
        {
            entity.HasKey(e => e.CtmtsId).HasName("PK_CONTAINERMAPTYPESET");

            entity.ToTable("J_CONTAINERMAPTYPESET", "JITTOE");

            entity.HasIndex(e => e.CtmtsCompanyId, "I_COMPANY_CMAPTYPESET");

            entity.HasIndex(e => e.CtmtsKey, "UN_CTMTS_KEY").IsUnique();

            entity.Property(e => e.CtmtsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTMTS_ID");
            entity.Property(e => e.CtmtsCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTMTS_COMPANY_ID");
            entity.Property(e => e.CtmtsDescr)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("CTMTS_DESCR");
            entity.Property(e => e.CtmtsKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("CTMTS_KEY");
            entity.Property(e => e.CtmtsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTMTS_TCREATION");
            entity.Property(e => e.CtmtsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTMTS_TUPDATE");

            entity.HasOne(d => d.CtmtsCompany).WithMany(p => p.JContainermaptypesets)
                .HasForeignKey(d => d.CtmtsCompanyId)
                .HasConstraintName("FK_COMPANY_CMAPTYPESET");
        });

        modelBuilder.Entity<JContainerposimage>(entity =>
        {
            entity.HasKey(e => e.CtpiId).HasName("PK_CONTAINERPOSIMAGE");

            entity.ToTable("J_CONTAINERPOSIMAGE", "JITTOE");

            entity.HasIndex(e => e.CtpiContainerusageId, "I_CONTUSAGE_CONTPOSIMAGE");

            entity.HasIndex(e => e.CtpiImageId, "I_IMAGE_CONTPOSIMAGE");

            entity.HasIndex(e => new { e.CtpiContainerusageId, e.CtpiIndex }, "UN_CTPI_INDEX_USAGE").IsUnique();

            entity.Property(e => e.CtpiId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTPI_ID");
            entity.Property(e => e.CtpiContainerusageId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTPI_CONTAINERUSAGE_ID");
            entity.Property(e => e.CtpiImageId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTPI_IMAGE_ID");
            entity.Property(e => e.CtpiIndex)
                .HasPrecision(4)
                .HasColumnName("CTPI_INDEX");
            entity.Property(e => e.CtpiTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTPI_TCREATION");
            entity.Property(e => e.CtpiTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTPI_TUPDATE");

            entity.HasOne(d => d.CtpiContainerusage).WithMany(p => p.JContainerposimages)
                .HasForeignKey(d => d.CtpiContainerusageId)
                .HasConstraintName("FK_CONTUSAGE_CONTPOSIMAGE");

            entity.HasOne(d => d.CtpiImage).WithMany(p => p.JContainerposimages)
                .HasForeignKey(d => d.CtpiImageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IMAGE_CONTPOSIMAGE");
        });

        modelBuilder.Entity<JContainerposimageregion>(entity =>
        {
            entity.HasKey(e => e.CtpirId).HasName("PK_CONTAINERPOSIMAGEREGION");

            entity.ToTable("J_CONTAINERPOSIMAGEREGION", "JITTOE");

            entity.HasIndex(e => e.CtpirContainerusageId, "I_CONTUSAGE_CONTPOSIREGION");

            entity.HasIndex(e => e.CtpirImageregionId, "I_IREGION_CONTPOSIREGION");

            entity.HasIndex(e => new { e.CtpirContainerusageId, e.CtpirIndex }, "UN_CTPIR_INDEX_USAGE").IsUnique();

            entity.Property(e => e.CtpirId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTPIR_ID");
            entity.Property(e => e.CtpirContainerusageId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTPIR_CONTAINERUSAGE_ID");
            entity.Property(e => e.CtpirImageregionId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTPIR_IMAGEREGION_ID");
            entity.Property(e => e.CtpirIndex)
                .HasPrecision(4)
                .HasColumnName("CTPIR_INDEX");
            entity.Property(e => e.CtpirTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTPIR_TCREATION");
            entity.Property(e => e.CtpirTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTPIR_TUPDATE");

            entity.HasOne(d => d.CtpirContainerusage).WithMany(p => p.JContainerposimageregions)
                .HasForeignKey(d => d.CtpirContainerusageId)
                .HasConstraintName("FK_CONTUSAGE_CONTPOSIREGION");

            entity.HasOne(d => d.CtpirImageregion).WithMany(p => p.JContainerposimageregions)
                .HasForeignKey(d => d.CtpirImageregionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IREGION_CONTPOSIREGION");
        });

        modelBuilder.Entity<JContainerposname>(entity =>
        {
            entity.HasKey(e => e.CtpnId).HasName("PK_CONTAINERPOSNAME");

            entity.ToTable("J_CONTAINERPOSNAME", "JITTOE");

            entity.HasIndex(e => e.CtpnContainerusageId, "I_CONTUSAGE_CONTPOSNAME");

            entity.HasIndex(e => new { e.CtpnContainerusageId, e.CtpnIndex }, "UN_CTPN_INDEX_USAGE").IsUnique();

            entity.HasIndex(e => new { e.CtpnContainerusageId, e.CtpnName }, "UN_CTPN_NAME_USAGE").IsUnique();

            entity.Property(e => e.CtpnId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTPN_ID");
            entity.Property(e => e.CtpnContainerusageId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTPN_CONTAINERUSAGE_ID");
            entity.Property(e => e.CtpnIndex)
                .HasPrecision(4)
                .HasColumnName("CTPN_INDEX");
            entity.Property(e => e.CtpnName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CTPN_NAME");
            entity.Property(e => e.CtpnTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTPN_TCREATION");
            entity.Property(e => e.CtpnTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTPN_TUPDATE");

            entity.HasOne(d => d.CtpnContainerusage).WithMany(p => p.JContainerposnames)
                .HasForeignKey(d => d.CtpnContainerusageId)
                .HasConstraintName("FK_CONTUSAGE_CONTPOSNAME");
        });

        modelBuilder.Entity<JContainerposorder>(entity =>
        {
            entity.HasKey(e => e.CtpoId).HasName("PK_CONTAINERPOSORDER");

            entity.ToTable("J_CONTAINERPOSORDER", "JITTOE");

            entity.HasIndex(e => e.CtpoContainerusageId, "I_CONTUSAGE_CONTPOSORDER");

            entity.HasIndex(e => new { e.CtpoContainerusageId, e.CtpoType, e.CtpoIndex }, "UN_CTPO_INDEX_USAGE").IsUnique();

            entity.HasIndex(e => new { e.CtpoContainerusageId, e.CtpoType, e.CtpoOrderindex }, "UN_CTPO_ORDERINDEX_USAGE").IsUnique();

            entity.Property(e => e.CtpoId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTPO_ID");
            entity.Property(e => e.CtpoContainerusageId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTPO_CONTAINERUSAGE_ID");
            entity.Property(e => e.CtpoIndex)
                .HasPrecision(4)
                .HasColumnName("CTPO_INDEX");
            entity.Property(e => e.CtpoOrderindex)
                .HasPrecision(4)
                .HasColumnName("CTPO_ORDERINDEX");
            entity.Property(e => e.CtpoTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTPO_TCREATION");
            entity.Property(e => e.CtpoTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTPO_TUPDATE");
            entity.Property(e => e.CtpoType)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValueSql("'Fill'  ")
                .HasColumnName("CTPO_TYPE");

            entity.HasOne(d => d.CtpoContainerusage).WithMany(p => p.JContainerposorders)
                .HasForeignKey(d => d.CtpoContainerusageId)
                .HasConstraintName("FK_CONTUSAGE_CONTPOSORDER");
        });

        modelBuilder.Entity<JContainerposorderoption>(entity =>
        {
            entity.HasKey(e => e.CtpooId).HasName("PK_CONTAINERPOSORDEROPTIONS");

            entity.ToTable("J_CONTAINERPOSORDEROPTIONS", "JITTOE");

            entity.HasIndex(e => e.CtpooContainerusageId, "I_CONTUSAGE_CONTPOOPTS");

            entity.HasIndex(e => new { e.CtpooContainerusageId, e.CtpooType }, "UN_CTPOO_CPOO_TYPE").IsUnique();

            entity.Property(e => e.CtpooId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTPOO_ID");
            entity.Property(e => e.CtpooContainerusageId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTPOO_CONTAINERUSAGE_ID");
            entity.Property(e => e.CtpooEnabled)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("1  ")
                .HasColumnName("CTPOO_ENABLED");
            entity.Property(e => e.CtpooTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTPOO_TCREATION");
            entity.Property(e => e.CtpooType)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("CTPOO_TYPE");

            entity.HasOne(d => d.CtpooContainerusage).WithMany(p => p.JContainerposorderoptions)
                .HasForeignKey(d => d.CtpooContainerusageId)
                .HasConstraintName("FK_CONTUSAGE_CONTPOOPTS");
        });

        modelBuilder.Entity<JContainerrule>(entity =>
        {
            entity.HasKey(e => e.CtrId).HasName("PK_CONTAINERRULE");

            entity.ToTable("J_CONTAINERRULE", "JITTOE");

            entity.HasIndex(e => e.CtrContainerusageId, "I_CONTUSAGE_CONTRULE");

            entity.HasIndex(e => e.CtrSubjectclassId, "I_SUBJECTCLASS_CONTRULE");

            entity.Property(e => e.CtrId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTR_ID");
            entity.Property(e => e.CtrColumnrange)
                .HasPrecision(4)
                .HasColumnName("CTR_COLUMNRANGE");
            entity.Property(e => e.CtrColumnstart)
                .HasPrecision(4)
                .HasColumnName("CTR_COLUMNSTART");
            entity.Property(e => e.CtrContainerusageId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTR_CONTAINERUSAGE_ID");
            entity.Property(e => e.CtrGroup)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CTR_GROUP");
            entity.Property(e => e.CtrRowrange)
                .HasPrecision(4)
                .HasColumnName("CTR_ROWRANGE");
            entity.Property(e => e.CtrRowstart)
                .HasPrecision(4)
                .HasColumnName("CTR_ROWSTART");
            entity.Property(e => e.CtrSpan)
                .HasPrecision(1)
                .HasColumnName("CTR_SPAN");
            entity.Property(e => e.CtrSubjectclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTR_SUBJECTCLASS_ID");
            entity.Property(e => e.CtrTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTR_TCREATION");
            entity.Property(e => e.CtrTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTR_TUPDATE");
            entity.Property(e => e.CtrUnused)
                .HasPrecision(1)
                .HasColumnName("CTR_UNUSED");

            entity.HasOne(d => d.CtrContainerusage).WithMany(p => p.JContainerrules)
                .HasForeignKey(d => d.CtrContainerusageId)
                .HasConstraintName("FK_CONTUSAGE_CONTRULE");

            entity.HasOne(d => d.CtrSubjectclass).WithMany(p => p.JContainerrules)
                .HasForeignKey(d => d.CtrSubjectclassId)
                .HasConstraintName("FK_SUBJECTCLASS_CONTRULE");
        });

        modelBuilder.Entity<JContainerset>(entity =>
        {
            entity.HasKey(e => e.CtsId).HasName("PK_CONTAINERSET");

            entity.ToTable("J_CONTAINERSET", "JITTOE");

            entity.HasIndex(e => e.CtsAltcounterId, "I_ALTCOUNTER_CONTAINERSET");

            entity.HasIndex(e => e.CtsCompanyId, "I_COMPANY_CONTAINERSET");

            entity.HasIndex(e => e.CtsParentId, "I_CONTAINERSET_CONTAINERSET");

            entity.HasIndex(e => e.CtsContainertypeId, "I_CONTAINERTYPE_CONTAINERSET");

            entity.HasIndex(e => e.CtsContainerusageId, "I_CONTUSAGE_CONTAINERSET");

            entity.HasIndex(e => e.CtsCounterId, "I_COUNTER_CONTAINERSET");

            entity.HasIndex(e => e.CtsContainertypeclassId, "I_CTTCLASS_CONTAINERSET");

            entity.HasIndex(e => e.CtsDoccfgId, "I_DOCCFG_CONTAINERSET");

            entity.HasIndex(e => e.CtsEdicfgId, "I_EDICFG_CONTAINERSET");

            entity.HasIndex(e => e.CtsOthercounterId, "I_OTHERCOUNTER_CONTAINERSET");

            entity.HasIndex(e => e.CtsProdplanId, "I_PRODPLAN_CONTAINERSET");

            entity.HasIndex(e => e.CtsScriptdefId, "I_SCRIPTDEF_CONTAINERSET");

            entity.HasIndex(e => e.CtsStockId, "I_STOCK_CONTAINERSET");

            entity.HasIndex(e => e.CtsKey, "UN_CTS_KEY").IsUnique();

            entity.Property(e => e.CtsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTS_ID");
            entity.Property(e => e.CtsAltcounterId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTS_ALTCOUNTER_ID");
            entity.Property(e => e.CtsAltsheettype)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CTS_ALTSHEETTYPE");
            entity.Property(e => e.CtsCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTS_COMPANY_ID");
            entity.Property(e => e.CtsContainertypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTS_CONTAINERTYPE_ID");
            entity.Property(e => e.CtsContainertypeclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTS_CONTAINERTYPECLASS_ID");
            entity.Property(e => e.CtsContainerusageId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTS_CONTAINERUSAGE_ID");
            entity.Property(e => e.CtsCounterId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTS_COUNTER_ID");
            entity.Property(e => e.CtsDeliverymode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CTS_DELIVERYMODE");
            entity.Property(e => e.CtsDescr)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("CTS_DESCR");
            entity.Property(e => e.CtsDoccfgId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTS_DOCCFG_ID");
            entity.Property(e => e.CtsEdicfgId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTS_EDICFG_ID");
            entity.Property(e => e.CtsHasevents)
                .HasPrecision(1)
                .HasColumnName("CTS_HASEVENTS");
            entity.Property(e => e.CtsHassnapshots)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("0  ")
                .HasColumnName("CTS_HASSNAPSHOTS");
            entity.Property(e => e.CtsInventory)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("0  ")
                .HasColumnName("CTS_INVENTORY");
            entity.Property(e => e.CtsKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("CTS_KEY");
            entity.Property(e => e.CtsLabeltype)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CTS_LABELTYPE");
            entity.Property(e => e.CtsLoadingmode)
                .HasMaxLength(19)
                .IsUnicode(false)
                .HasColumnName("CTS_LOADINGMODE");
            entity.Property(e => e.CtsLoadingparams)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("CTS_LOADINGPARAMS");
            entity.Property(e => e.CtsOthercounterId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTS_OTHERCOUNTER_ID");
            entity.Property(e => e.CtsParentId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTS_PARENT_ID");
            entity.Property(e => e.CtsProdplanId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTS_PRODPLAN_ID");
            entity.Property(e => e.CtsScriptdefId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTS_SCRIPTDEF_ID");
            entity.Property(e => e.CtsSheettype)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CTS_SHEETTYPE");
            entity.Property(e => e.CtsShortdescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CTS_SHORTDESCR");
            entity.Property(e => e.CtsStockId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTS_STOCK_ID");
            entity.Property(e => e.CtsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTS_TCREATION");
            entity.Property(e => e.CtsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTS_TUPDATE");
            entity.Property(e => e.CtsUniquenos)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("0  ")
                .HasColumnName("CTS_UNIQUENOS");
            entity.Property(e => e.CtsVerificationmode)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("CTS_VERIFICATIONMODE");

            entity.HasOne(d => d.CtsAltcounter).WithMany(p => p.JContainersetCtsAltcounters)
                .HasForeignKey(d => d.CtsAltcounterId)
                .HasConstraintName("FK_ALTCOUNTER_CONTAINERSET");

            entity.HasOne(d => d.CtsCompany).WithMany(p => p.JContainersets)
                .HasForeignKey(d => d.CtsCompanyId)
                .HasConstraintName("FK_COMPANY_CONTAINERSET");

            entity.HasOne(d => d.CtsContainertype).WithMany(p => p.JContainersets)
                .HasForeignKey(d => d.CtsContainertypeId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_CONTAINERTYPE_CONTAINERSET");

            entity.HasOne(d => d.CtsContainertypeclass).WithMany(p => p.JContainersets)
                .HasForeignKey(d => d.CtsContainertypeclassId)
                .HasConstraintName("FK_CTTCLASS_CONTAINERSET");

            entity.HasOne(d => d.CtsContainerusage).WithMany(p => p.JContainersets)
                .HasForeignKey(d => d.CtsContainerusageId)
                .HasConstraintName("FK_CONTUSAGE_CONTAINERSET");

            entity.HasOne(d => d.CtsCounter).WithMany(p => p.JContainersetCtsCounters)
                .HasForeignKey(d => d.CtsCounterId)
                .HasConstraintName("FK_COUNTER_CONTAINERSET");

            entity.HasOne(d => d.CtsDoccfg).WithMany(p => p.JContainersets)
                .HasForeignKey(d => d.CtsDoccfgId)
                .HasConstraintName("FK_DOCCFG_CONTAINERSET");

            entity.HasOne(d => d.CtsEdicfg).WithMany(p => p.JContainersets)
                .HasForeignKey(d => d.CtsEdicfgId)
                .HasConstraintName("FK_EDICFG_CONTAINERSET");

            entity.HasOne(d => d.CtsOthercounter).WithMany(p => p.JContainersetCtsOthercounters)
                .HasForeignKey(d => d.CtsOthercounterId)
                .HasConstraintName("FK_OTHERCOUNTER_CONTAINERSET");

            entity.HasOne(d => d.CtsParent).WithMany(p => p.InverseCtsParent)
                .HasForeignKey(d => d.CtsParentId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_CONTAINERSET_CONTAINERSET");

            entity.HasOne(d => d.CtsProdplan).WithMany(p => p.JContainersets)
                .HasForeignKey(d => d.CtsProdplanId)
                .HasConstraintName("FK_PRODPLAN_CONTAINERSET");

            entity.HasOne(d => d.CtsScriptdef).WithMany(p => p.JContainersets)
                .HasForeignKey(d => d.CtsScriptdefId)
                .HasConstraintName("FK_SCRIPTDEF_CONTAINERSET");

            entity.HasOne(d => d.CtsStock).WithMany(p => p.JContainersets)
                .HasForeignKey(d => d.CtsStockId)
                .HasConstraintName("FK_STOCK_CONTAINERSET");
        });

        modelBuilder.Entity<JContainersetclass>(entity =>
        {
            entity.HasKey(e => e.CtscId).HasName("PK_CONTAINERSETCLASS");

            entity.ToTable("J_CONTAINERSETCLASS", "JITTOE");

            entity.HasIndex(e => e.CtscCompanyId, "I_COMPANY_CSCLASS");

            entity.HasIndex(e => e.CtscKey, "UN_CTSC_KEY").IsUnique();

            entity.Property(e => e.CtscId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTSC_ID");
            entity.Property(e => e.CtscCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTSC_COMPANY_ID");
            entity.Property(e => e.CtscDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CTSC_DESCR");
            entity.Property(e => e.CtscKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("CTSC_KEY");
            entity.Property(e => e.CtscTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTSC_TCREATION");
            entity.Property(e => e.CtscTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTSC_TUPDATE");

            entity.HasOne(d => d.CtscCompany).WithMany(p => p.JContainersetclasses)
                .HasForeignKey(d => d.CtscCompanyId)
                .HasConstraintName("FK_COMPANY_CSCLASS");
        });

        modelBuilder.Entity<JContainersetclassmember>(entity =>
        {
            entity.HasKey(e => e.CtscmId).HasName("PK_CONTAINERSETCLASSMEMBER");

            entity.ToTable("J_CONTAINERSETCLASSMEMBER", "JITTOE");

            entity.HasIndex(e => e.CtscmContainersetId, "I_CONTAINERSET_CSCMEMBER");

            entity.HasIndex(e => e.CtscmContainersetclassId, "I_CSCLASS_CSCMEMBER");

            entity.HasIndex(e => new { e.CtscmContainersetId, e.CtscmContainersetclassId }, "UN_CTSCM_KEY").IsUnique();

            entity.Property(e => e.CtscmId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTSCM_ID");
            entity.Property(e => e.CtscmContainersetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTSCM_CONTAINERSET_ID");
            entity.Property(e => e.CtscmContainersetclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTSCM_CONTAINERSETCLASS_ID");
            entity.Property(e => e.CtscmTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTSCM_TCREATION");
            entity.Property(e => e.CtscmTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTSCM_TUPDATE");

            entity.HasOne(d => d.CtscmContainerset).WithMany(p => p.JContainersetclassmembers)
                .HasForeignKey(d => d.CtscmContainersetId)
                .HasConstraintName("FK_CONTAINERSET_CSCMEMBER");

            entity.HasOne(d => d.CtscmContainersetclass).WithMany(p => p.JContainersetclassmembers)
                .HasForeignKey(d => d.CtscmContainersetclassId)
                .HasConstraintName("FK_CSCLASS_CSCMEMBER");
        });

        modelBuilder.Entity<JContainersetcmaptype>(entity =>
        {
            entity.HasKey(e => e.CtscmtId).HasName("PK_CONTAINERSETCMAPTYPE");

            entity.ToTable("J_CONTAINERSETCMAPTYPE", "JITTOE");

            entity.HasIndex(e => e.CtscmtContainermaptypeId, "I_CMAPTYPE_CSCMAPTYPE");

            entity.HasIndex(e => e.CtscmtContainersetId, "I_CONTAINERSET_CSCMAPTYPE");

            entity.HasIndex(e => new { e.CtscmtContainersetId, e.CtscmtContainermaptypeId }, "UN_CTSCMT_KEY").IsUnique();

            entity.Property(e => e.CtscmtId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTSCMT_ID");
            entity.Property(e => e.CtscmtContainermaptypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTSCMT_CONTAINERMAPTYPE_ID");
            entity.Property(e => e.CtscmtContainersetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTSCMT_CONTAINERSET_ID");
            entity.Property(e => e.CtscmtTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTSCMT_TCREATION");
            entity.Property(e => e.CtscmtTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTSCMT_TUPDATE");

            entity.HasOne(d => d.CtscmtContainermaptype).WithMany(p => p.JContainersetcmaptypes)
                .HasForeignKey(d => d.CtscmtContainermaptypeId)
                .HasConstraintName("FK_CMAPTYPE_CSCMAPTYPE");

            entity.HasOne(d => d.CtscmtContainerset).WithMany(p => p.JContainersetcmaptypes)
                .HasForeignKey(d => d.CtscmtContainersetId)
                .HasConstraintName("FK_CONTAINERSET_CSCMAPTYPE");
        });

        modelBuilder.Entity<JContainersetinfo>(entity =>
        {
            entity.HasKey(e => e.CtsiId).HasName("PK_CONTAINERSETINFO");

            entity.ToTable("J_CONTAINERSETINFO", "JITTOE");

            entity.HasIndex(e => e.CtsiContainersetId, "I_CONTAINERSET_CSINFO");

            entity.HasIndex(e => e.CtsiRefcontainersetId, "I_REFCONTAINERSET_CSINFO");

            entity.HasIndex(e => new { e.CtsiContainersetId, e.CtsiType, e.CtsiKey1, e.CtsiKey2, e.CtsiKey3 }, "UN_CTSI_INFO").IsUnique();

            entity.Property(e => e.CtsiId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTSI_ID");
            entity.Property(e => e.CtsiContainersetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTSI_CONTAINERSET_ID");
            entity.Property(e => e.CtsiDescr)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("CTSI_DESCR");
            entity.Property(e => e.CtsiKey1)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CTSI_KEY1");
            entity.Property(e => e.CtsiKey2)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CTSI_KEY2");
            entity.Property(e => e.CtsiKey3)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CTSI_KEY3");
            entity.Property(e => e.CtsiRefcontainersetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTSI_REFCONTAINERSET_ID");
            entity.Property(e => e.CtsiStringvalue)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("CTSI_STRINGVALUE");
            entity.Property(e => e.CtsiTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTSI_TCREATION");
            entity.Property(e => e.CtsiTimevalue)
                .HasColumnType("DATE")
                .HasColumnName("CTSI_TIMEVALUE");
            entity.Property(e => e.CtsiTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTSI_TUPDATE");
            entity.Property(e => e.CtsiType)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasColumnName("CTSI_TYPE");

            entity.HasOne(d => d.CtsiContainerset).WithMany(p => p.JContainersetinfoCtsiContainersets)
                .HasForeignKey(d => d.CtsiContainersetId)
                .HasConstraintName("FK_CONTAINERSET_CSINFO");

            entity.HasOne(d => d.CtsiRefcontainerset).WithMany(p => p.JContainersetinfoCtsiRefcontainersets)
                .HasForeignKey(d => d.CtsiRefcontainersetId)
                .HasConstraintName("FK_REFCONTAINERSET_CSINFO");
        });

        modelBuilder.Entity<JContainersetloc>(entity =>
        {
            entity.HasKey(e => e.CtslId).HasName("PK_CONTAINERSETLOC");

            entity.ToTable("J_CONTAINERSETLOC", "JITTOE");

            entity.HasIndex(e => e.CtslContainersetId, "I_CONTAINERSET_CSLOC");

            entity.HasIndex(e => e.CtslContractId, "I_CONTRACT_CSLOC");

            entity.HasIndex(e => e.CtslLocationId, "I_LOCATION_CSLOC");

            entity.Property(e => e.CtslId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTSL_ID");
            entity.Property(e => e.CtslContainersetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTSL_CONTAINERSET_ID");
            entity.Property(e => e.CtslContractId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTSL_CONTRACT_ID");
            entity.Property(e => e.CtslIsdefault)
                .HasPrecision(1)
                .HasColumnName("CTSL_ISDEFAULT");
            entity.Property(e => e.CtslLocationId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTSL_LOCATION_ID");
            entity.Property(e => e.CtslTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTSL_TCREATION");
            entity.Property(e => e.CtslTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTSL_TUPDATE");

            entity.HasOne(d => d.CtslContainerset).WithMany(p => p.JContainersetlocs)
                .HasForeignKey(d => d.CtslContainersetId)
                .HasConstraintName("FK_CONTAINERSET_CSLOC");

            entity.HasOne(d => d.CtslContract).WithMany(p => p.JContainersetlocs)
                .HasForeignKey(d => d.CtslContractId)
                .HasConstraintName("FK_CONTRACT_CSLOC");

            entity.HasOne(d => d.CtslLocation).WithMany(p => p.JContainersetlocs)
                .HasForeignKey(d => d.CtslLocationId)
                .HasConstraintName("FK_LOCATION_CSLOC");
        });

        modelBuilder.Entity<JContainersubject>(entity =>
        {
            entity.HasKey(e => e.CtesId).HasName("PK_CONTAINERSUBJECT");

            entity.ToTable("J_CONTAINERSUBJECT", "JITTOE");

            entity.HasIndex(e => e.CtesContainerentryId, "I_CONTAINERENTRY_CONTSUBJ");

            entity.HasIndex(e => e.CtesOrderentryId, "I_ORDERENTRY_CONTSUBJECT");

            entity.HasIndex(e => e.CtesSubjectId, "I_SUBJECT_CONTAINERSUBJECT");

            entity.HasIndex(e => e.CtesUnitofmeasureId, "I_UNITOFMEASURE_CONTSUBJECT");

            entity.Property(e => e.CtesId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTES_ID");
            entity.Property(e => e.CtesAmount)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("CTES_AMOUNT");
            entity.Property(e => e.CtesContainerentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTES_CONTAINERENTRY_ID");
            entity.Property(e => e.CtesOrderentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTES_ORDERENTRY_ID");
            entity.Property(e => e.CtesSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTES_SUBJECT_ID");
            entity.Property(e => e.CtesTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTES_TCREATION");
            entity.Property(e => e.CtesTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTES_TUPDATE");
            entity.Property(e => e.CtesUnitofmeasureId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTES_UNITOFMEASURE_ID");

            entity.HasOne(d => d.CtesContainerentry).WithMany(p => p.JContainersubjects)
                .HasForeignKey(d => d.CtesContainerentryId)
                .HasConstraintName("FK_CONTAINERENTRY_CONTSUBJ");

            entity.HasOne(d => d.CtesOrderentry).WithMany(p => p.JContainersubjects)
                .HasForeignKey(d => d.CtesOrderentryId)
                .HasConstraintName("FK_ORDERENTRY_CONTSUBJECT");

            entity.HasOne(d => d.CtesSubject).WithMany(p => p.JContainersubjects)
                .HasForeignKey(d => d.CtesSubjectId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SUBJECT_CONTAINERSUBJECT");

            entity.HasOne(d => d.CtesUnitofmeasure).WithMany(p => p.JContainersubjects)
                .HasForeignKey(d => d.CtesUnitofmeasureId)
                .HasConstraintName("FK_UNITOFMEASURE_CONTSUBJECT");
        });

        modelBuilder.Entity<JContainersubjectmark>(entity =>
        {
            entity.HasKey(e => e.CtesmId).HasName("PK_CONTAINERSUBJECTMARK");

            entity.ToTable("J_CONTAINERSUBJECTMARK", "JITTOE");

            entity.HasIndex(e => e.CtesmTourcontainerId, "I_TOURCONTAINER_CSMARK");

            entity.HasIndex(e => e.CtesmContainersubjectId, "UN_CTESM_CONTAINERSUBJECT").IsUnique();

            entity.Property(e => e.CtesmId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTESM_ID");
            entity.Property(e => e.CtesmContainersubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTESM_CONTAINERSUBJECT_ID");
            entity.Property(e => e.CtesmTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTESM_TCREATION");
            entity.Property(e => e.CtesmTourcontainerId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTESM_TOURCONTAINER_ID");
            entity.Property(e => e.CtesmTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTESM_TUPDATE");

            entity.HasOne(d => d.CtesmContainersubject).WithOne(p => p.JContainersubjectmark)
                .HasForeignKey<JContainersubjectmark>(d => d.CtesmContainersubjectId)
                .HasConstraintName("FK_CSUBJECT_CSMARK");

            entity.HasOne(d => d.CtesmTourcontainer).WithMany(p => p.JContainersubjectmarks)
                .HasForeignKey(d => d.CtesmTourcontainerId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_TOURCONTAINER_CSMARK");
        });

        modelBuilder.Entity<JContainertype>(entity =>
        {
            entity.HasKey(e => e.CttId).HasName("PK_CONTAINERTYPE");

            entity.ToTable("J_CONTAINERTYPE", "JITTOE");

            entity.HasIndex(e => e.CttContainertypesetId, "I_CONTTYPESET_CONT");

            entity.HasIndex(e => e.CttDimuomId, "I_DIMUOM_CONTAINERTYPE");

            entity.HasIndex(e => e.CttSubjectId, "I_SUBJECT_CONTAINERTYPE");

            entity.HasIndex(e => e.CttWeightuomId, "I_WEIGHTUOM_CONTAINERTYPE");

            entity.HasIndex(e => e.CttKey, "UN_CTT_KEY").IsUnique();

            entity.Property(e => e.CttId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTT_ID");
            entity.Property(e => e.CttContainertypesetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTT_CONTAINERTYPESET_ID");
            entity.Property(e => e.CttDescr)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("CTT_DESCR");
            entity.Property(e => e.CttDimuomId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTT_DIMUOM_ID");
            entity.Property(e => e.CttDimx)
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("CTT_DIMX");
            entity.Property(e => e.CttDimy)
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("CTT_DIMY");
            entity.Property(e => e.CttDimz)
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("CTT_DIMZ");
            entity.Property(e => e.CttExpendable)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("0  ")
                .HasColumnName("CTT_EXPENDABLE");
            entity.Property(e => e.CttIconfile)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CTT_ICONFILE");
            entity.Property(e => e.CttKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("CTT_KEY");
            entity.Property(e => e.CttShortdescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CTT_SHORTDESCR");
            entity.Property(e => e.CttSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTT_SUBJECT_ID");
            entity.Property(e => e.CttTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTT_TCREATION");
            entity.Property(e => e.CttTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTT_TUPDATE");
            entity.Property(e => e.CttWeight)
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("CTT_WEIGHT");
            entity.Property(e => e.CttWeightuomId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTT_WEIGHTUOM_ID");

            entity.HasOne(d => d.CttContainertypeset).WithMany(p => p.JContainertypes)
                .HasForeignKey(d => d.CttContainertypesetId)
                .HasConstraintName("FK_CONTTYPESET_CONT");

            entity.HasOne(d => d.CttDimuom).WithMany(p => p.JContainertypeCttDimuoms)
                .HasForeignKey(d => d.CttDimuomId)
                .HasConstraintName("FK_DIMUOM_CONTAINERTYPE");

            entity.HasOne(d => d.CttSubject).WithMany(p => p.JContainertypes)
                .HasForeignKey(d => d.CttSubjectId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SUBJECT_CONTAINERTYPE");

            entity.HasOne(d => d.CttWeightuom).WithMany(p => p.JContainertypeCttWeightuoms)
                .HasForeignKey(d => d.CttWeightuomId)
                .HasConstraintName("FK_WEIGHTUOM_CONTAINERTYPE");
        });

        modelBuilder.Entity<JContainertypeclass>(entity =>
        {
            entity.HasKey(e => e.CttcId).HasName("PK_CONTAINERTYPECLASS");

            entity.ToTable("J_CONTAINERTYPECLASS", "JITTOE");

            entity.HasIndex(e => e.CttcCompanyId, "I_COMPANY_CTTCLASS");

            entity.HasIndex(e => e.CttcContainertypesetId, "I_CTTSET_CTTCLASS");

            entity.HasIndex(e => e.CttcSubjectclassId, "I_SUBJECTCLASS_CTTCLASS");

            entity.HasIndex(e => e.CttcKey, "UN_CTTC_KEY").IsUnique();

            entity.Property(e => e.CttcId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTTC_ID");
            entity.Property(e => e.CttcCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTTC_COMPANY_ID");
            entity.Property(e => e.CttcContainertypesetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTTC_CONTAINERTYPESET_ID");
            entity.Property(e => e.CttcDeftype)
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasColumnName("CTTC_DEFTYPE");
            entity.Property(e => e.CttcDescr)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("CTTC_DESCR");
            entity.Property(e => e.CttcKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("CTTC_KEY");
            entity.Property(e => e.CttcQuery)
                .HasColumnType("LONG RAW")
                .HasColumnName("CTTC_QUERY");
            entity.Property(e => e.CttcSubjectclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTTC_SUBJECTCLASS_ID");
            entity.Property(e => e.CttcTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTTC_TCREATION");
            entity.Property(e => e.CttcTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTTC_TUPDATE");

            entity.HasOne(d => d.CttcCompany).WithMany(p => p.JContainertypeclasses)
                .HasForeignKey(d => d.CttcCompanyId)
                .HasConstraintName("FK_COMPANY_CTTCLASS");

            entity.HasOne(d => d.CttcContainertypeset).WithMany(p => p.JContainertypeclasses)
                .HasForeignKey(d => d.CttcContainertypesetId)
                .HasConstraintName("FK_CTTSET_CTTCLASS");

            entity.HasOne(d => d.CttcSubjectclass).WithMany(p => p.JContainertypeclasses)
                .HasForeignKey(d => d.CttcSubjectclassId)
                .HasConstraintName("FK_SUBJECTCLASS_CTTCLASS");
        });

        modelBuilder.Entity<JContainertypeclassm>(entity =>
        {
            entity.HasKey(e => e.CttcmId).HasName("PK_CONTAINERTYPECLASSM");

            entity.ToTable("J_CONTAINERTYPECLASSM", "JITTOE");

            entity.HasIndex(e => e.CttcmContainertypeclassId, "I_CTTCLASS_CTTCLASSMEMBER");

            entity.HasIndex(e => e.CttcmContainertypeId, "I_CTT_CTTCLASSMEMBER");

            entity.HasIndex(e => new { e.CttcmContainertypeId, e.CttcmContainertypeclassId }, "UN_CTTCM_KEY").IsUnique();

            entity.Property(e => e.CttcmId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTTCM_ID");
            entity.Property(e => e.CttcmContainertypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTTCM_CONTAINERTYPE_ID");
            entity.Property(e => e.CttcmContainertypeclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTTCM_CONTAINERTYPECLASS_ID");
            entity.Property(e => e.CttcmTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTTCM_TCREATION");
            entity.Property(e => e.CttcmTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTTCM_TUPDATE");

            entity.HasOne(d => d.CttcmContainertype).WithMany(p => p.JContainertypeclassms)
                .HasForeignKey(d => d.CttcmContainertypeId)
                .HasConstraintName("FK_CTT_CTTCLASSMEMBER");

            entity.HasOne(d => d.CttcmContainertypeclass).WithMany(p => p.JContainertypeclassms)
                .HasForeignKey(d => d.CttcmContainertypeclassId)
                .HasConstraintName("FK_CTTCLASS_CTTCLASSMEMBER");
        });

        modelBuilder.Entity<JContainertypeset>(entity =>
        {
            entity.HasKey(e => e.CttsId).HasName("PK_CONTAINERTYPESET");

            entity.ToTable("J_CONTAINERTYPESET", "JITTOE");

            entity.HasIndex(e => e.CttsCompanyId, "I_COMPANY_CONTTYPESET");

            entity.HasIndex(e => e.CttsKey, "UN_CTTS_KEY").IsUnique();

            entity.Property(e => e.CttsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTTS_ID");
            entity.Property(e => e.CttsCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTTS_COMPANY_ID");
            entity.Property(e => e.CttsDescr)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("CTTS_DESCR");
            entity.Property(e => e.CttsKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("CTTS_KEY");
            entity.Property(e => e.CttsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTTS_TCREATION");
            entity.Property(e => e.CttsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTTS_TUPDATE");

            entity.HasOne(d => d.CttsCompany).WithMany(p => p.JContainertypesets)
                .HasForeignKey(d => d.CttsCompanyId)
                .HasConstraintName("FK_COMPANY_CONTTYPESET");
        });

        modelBuilder.Entity<JContainerusage>(entity =>
        {
            entity.HasKey(e => e.CtuId).HasName("PK_CONTAINERUSAGE");

            entity.ToTable("J_CONTAINERUSAGE", "JITTOE");

            entity.HasIndex(e => e.CtuContainertypeId, "I_CONTAINERTYPE_CONTUSAGE");

            entity.HasIndex(e => e.CtuImageId, "I_IMAGE_CONTUSAGE");

            entity.HasIndex(e => e.CtuSubjectclassId, "I_SUBJECTCLASS_CONTUSAGE");

            entity.HasIndex(e => new { e.CtuKey, e.CtuInvalidid }, "UN_CTU_KEY").IsUnique();

            entity.Property(e => e.CtuId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTU_ID");
            entity.Property(e => e.CtuChomogeneous)
                .HasPrecision(1)
                .HasColumnName("CTU_CHOMOGENEOUS");
            entity.Property(e => e.CtuColumns)
                .HasPrecision(3)
                .HasDefaultValueSql("'1'")
                .HasColumnName("CTU_COLUMNS");
            entity.Property(e => e.CtuContainermultiple)
                .HasPrecision(4)
                .HasColumnName("CTU_CONTAINERMULTIPLE");
            entity.Property(e => e.CtuContainertypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTU_CONTAINERTYPE_ID");
            entity.Property(e => e.CtuDepth)
                .HasPrecision(3)
                .HasDefaultValueSql("1  ")
                .HasColumnName("CTU_DEPTH");
            entity.Property(e => e.CtuDescr)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("CTU_DESCR");
            entity.Property(e => e.CtuElemexpression)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasDefaultValueSql("'None'  ")
                .HasColumnName("CTU_ELEMEXPRESSION");
            entity.Property(e => e.CtuHoldscontainers)
                .HasPrecision(1)
                .HasColumnName("CTU_HOLDSCONTAINERS");
            entity.Property(e => e.CtuHoldspackingmaterial)
                .HasPrecision(1)
                .HasColumnName("CTU_HOLDSPACKINGMATERIAL");
            entity.Property(e => e.CtuHoldssubjects)
                .HasPrecision(1)
                .HasColumnName("CTU_HOLDSSUBJECTS");
            entity.Property(e => e.CtuHomogeneous)
                .HasPrecision(1)
                .HasColumnName("CTU_HOMOGENEOUS");
            entity.Property(e => e.CtuHomogeneouscontainers)
                .HasPrecision(1)
                .HasColumnName("CTU_HOMOGENEOUSCONTAINERS");
            entity.Property(e => e.CtuHomogeneousentries)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("0  ")
                .HasColumnName("CTU_HOMOGENEOUSENTRIES");
            entity.Property(e => e.CtuImageId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTU_IMAGE_ID");
            entity.Property(e => e.CtuInvalidid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTU_INVALIDID");
            entity.Property(e => e.CtuKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("CTU_KEY");
            entity.Property(e => e.CtuMaxamount)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("CTU_MAXAMOUNT");
            entity.Property(e => e.CtuMaxcontainers)
                .HasPrecision(4)
                .HasColumnName("CTU_MAXCONTAINERS");
            entity.Property(e => e.CtuMaxentries)
                .HasPrecision(4)
                .HasColumnName("CTU_MAXENTRIES");
            entity.Property(e => e.CtuNegativeallowed)
                .HasPrecision(1)
                .HasColumnName("CTU_NEGATIVEALLOWED");
            entity.Property(e => e.CtuOrderconstraint)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("CTU_ORDERCONSTRAINT");
            entity.Property(e => e.CtuPosimages)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("0 ")
                .HasColumnName("CTU_POSIMAGES");
            entity.Property(e => e.CtuPosnamemap)
                .HasPrecision(1)
                .HasColumnName("CTU_POSNAMEMAP");
            entity.Property(e => e.CtuPosordermaptype)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("CTU_POSORDERMAPTYPE");
            entity.Property(e => e.CtuState)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasDefaultValueSql("'Available'  ")
                .HasColumnName("CTU_STATE");
            entity.Property(e => e.CtuSubjectclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTU_SUBJECTCLASS_ID");
            entity.Property(e => e.CtuSwapcolumns)
                .HasPrecision(1)
                .HasColumnName("CTU_SWAPCOLUMNS");
            entity.Property(e => e.CtuSwaprows)
                .HasPrecision(1)
                .HasColumnName("CTU_SWAPROWS");
            entity.Property(e => e.CtuTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTU_TCREATION");
            entity.Property(e => e.CtuTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTU_TUPDATE");
            entity.Property(e => e.CtuTvalidfrom)
                .HasColumnType("DATE")
                .HasColumnName("CTU_TVALIDFROM");
            entity.Property(e => e.CtuTvaliduntil)
                .HasColumnType("DATE")
                .HasColumnName("CTU_TVALIDUNTIL");

            entity.HasOne(d => d.CtuContainertype).WithMany(p => p.JContainerusages)
                .HasForeignKey(d => d.CtuContainertypeId)
                .HasConstraintName("FK_CONTAINERTYPE_CONTUSAGE");

            entity.HasOne(d => d.CtuImage).WithMany(p => p.JContainerusages)
                .HasForeignKey(d => d.CtuImageId)
                .HasConstraintName("FK_IMAGE_CONTUSAGE");

            entity.HasOne(d => d.CtuSubjectclass).WithMany(p => p.JContainerusages)
                .HasForeignKey(d => d.CtuSubjectclassId)
                .HasConstraintName("FK_SUBJECTCLASS_CONTUSAGE");
        });

        modelBuilder.Entity<JContainerusageelem>(entity =>
        {
            entity.HasKey(e => e.CtueId).HasName("PK_CONTAINERUSAGEELEM");

            entity.ToTable("J_CONTAINERUSAGEELEM", "JITTOE");

            entity.HasIndex(e => e.CtueContainerusageId, "I_CONTUSAGE_CONTUSAGEELEM");

            entity.HasIndex(e => e.CtueSubjectId, "I_SUBJECT_CONTUSAGEELEM");

            entity.Property(e => e.CtueId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTUE_ID");
            entity.Property(e => e.CtueContainerusageId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTUE_CONTAINERUSAGE_ID");
            entity.Property(e => e.CtueMaxamount)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("CTUE_MAXAMOUNT");
            entity.Property(e => e.CtueSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTUE_SUBJECT_ID");
            entity.Property(e => e.CtueTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTUE_TCREATION");
            entity.Property(e => e.CtueTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CTUE_TUPDATE");

            entity.HasOne(d => d.CtueContainerusage).WithMany(p => p.JContainerusageelems)
                .HasForeignKey(d => d.CtueContainerusageId)
                .HasConstraintName("FK_CONTUSAGE_CONTUSAGEELEM");

            entity.HasOne(d => d.CtueSubject).WithMany(p => p.JContainerusageelems)
                .HasForeignKey(d => d.CtueSubjectId)
                .HasConstraintName("FK_SUBJECT_CONTUSAGEELEM");
        });

        modelBuilder.Entity<JContract>(entity =>
        {
            entity.HasKey(e => e.CId).HasName("PK_CONTRACT");

            entity.ToTable("J_CONTRACT", "JITTOE");

            entity.HasIndex(e => e.CAutosubjectclassId, "I_AUTOSUBJECTCLASS_CONTRACT");

            entity.HasIndex(e => e.CDoccfgId, "I_DOCCFG_CONTRACT");

            entity.HasIndex(e => e.CEdicfgId, "I_EDICFG_CONTRACT");

            entity.HasIndex(e => e.CEntrynocounterId, "I_ENTRYNOCOUNTER_CONTRACT");

            entity.HasIndex(e => e.CNotenocounterId, "I_NOTENOCOUNTER_CONTRACT");

            entity.HasIndex(e => e.COthercompanyId, "I_OTHERCOMPANY_CONTRACT");

            entity.HasIndex(e => e.COwncompanyId, "I_OWNCOMPANY_CONTRACT");

            entity.HasIndex(e => e.CKey, "UN_C_KEY").IsUnique();

            entity.Property(e => e.CId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("C_ID");
            entity.Property(e => e.CAutosubjectclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("C_AUTOSUBJECTCLASS_ID");
            entity.Property(e => e.CDescr)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("C_DESCR");
            entity.Property(e => e.CDoccfgId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("C_DOCCFG_ID");
            entity.Property(e => e.CEdicfgId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("C_EDICFG_ID");
            entity.Property(e => e.CEntrymaptype)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("C_ENTRYMAPTYPE");
            entity.Property(e => e.CEntrynocounterId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("C_ENTRYNOCOUNTER_ID");
            entity.Property(e => e.CEntrystrategy)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("'Standard'  ")
                .HasColumnName("C_ENTRYSTRATEGY");
            entity.Property(e => e.CKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("C_KEY");
            entity.Property(e => e.CKind)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("C_KIND");
            entity.Property(e => e.CNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("C_NO");
            entity.Property(e => e.CNotenocounterId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("C_NOTENOCOUNTER_ID");
            entity.Property(e => e.CNotestrategy)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("C_NOTESTRATEGY");
            entity.Property(e => e.COthercompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("C_OTHERCOMPANY_ID");
            entity.Property(e => e.COthernoinother)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("C_OTHERNOINOTHER");
            entity.Property(e => e.COwncompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("C_OWNCOMPANY_ID");
            entity.Property(e => e.COwnnoinother)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("C_OWNNOINOTHER");
            entity.Property(e => e.CPartialorders)
                .HasPrecision(1)
                .HasColumnName("C_PARTIALORDERS");
            entity.Property(e => e.CTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("C_TCREATION");
            entity.Property(e => e.CTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("C_TUPDATE");
            entity.Property(e => e.CUsetransportstockcfg)
                .HasPrecision(1)
                .HasColumnName("C_USETRANSPORTSTOCKCFG");

            entity.HasOne(d => d.CAutosubjectclass).WithMany(p => p.JContracts)
                .HasForeignKey(d => d.CAutosubjectclassId)
                .HasConstraintName("FK_AUTOSUBJECTCLASS_CONTRACT");

            entity.HasOne(d => d.CDoccfg).WithMany(p => p.JContracts)
                .HasForeignKey(d => d.CDoccfgId)
                .HasConstraintName("FK_DOCCFG_CONTRACT");

            entity.HasOne(d => d.CEdicfg).WithMany(p => p.JContracts)
                .HasForeignKey(d => d.CEdicfgId)
                .HasConstraintName("FK_EDICFG_CONTRACT");

            entity.HasOne(d => d.CEntrynocounter).WithMany(p => p.JContractCEntrynocounters)
                .HasForeignKey(d => d.CEntrynocounterId)
                .HasConstraintName("FK_ENTRYNOCOUNTER_CONTRACT");

            entity.HasOne(d => d.CNotenocounter).WithMany(p => p.JContractCNotenocounters)
                .HasForeignKey(d => d.CNotenocounterId)
                .HasConstraintName("FK_NOTENOCOUNTER_CONTRACT");

            entity.HasOne(d => d.COthercompany).WithMany(p => p.JContractCOthercompanies)
                .HasForeignKey(d => d.COthercompanyId)
                .HasConstraintName("FK_OTHERCOMPANY_CONTRACT");

            entity.HasOne(d => d.COwncompany).WithMany(p => p.JContractCOwncompanies)
                .HasForeignKey(d => d.COwncompanyId)
                .HasConstraintName("FK_OWNCOMPANY_CONTRACT");
        });

        modelBuilder.Entity<JContractclass>(entity =>
        {
            entity.HasKey(e => e.CclId).HasName("PK_CONTRACTCLASS");

            entity.ToTable("J_CONTRACTCLASS", "JITTOE");

            entity.HasIndex(e => e.CclCompanyId, "I_COMPANY_CCLASS");

            entity.HasIndex(e => e.CclKey, "UN_CCL_KEY").IsUnique();

            entity.Property(e => e.CclId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CCL_ID");
            entity.Property(e => e.CclCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CCL_COMPANY_ID");
            entity.Property(e => e.CclDeftype)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("'Enumeration'  ")
                .HasColumnName("CCL_DEFTYPE");
            entity.Property(e => e.CclDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CCL_DESCR");
            entity.Property(e => e.CclKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("CCL_KEY");
            entity.Property(e => e.CclTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CCL_TCREATION");
            entity.Property(e => e.CclTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CCL_TUPDATE");

            entity.HasOne(d => d.CclCompany).WithMany(p => p.JContractclasses)
                .HasForeignKey(d => d.CclCompanyId)
                .HasConstraintName("FK_COMPANY_CCLASS");
        });

        modelBuilder.Entity<JContractclassdefelem>(entity =>
        {
            entity.HasKey(e => e.CcldeId).HasName("PK_CONTRACTCLASSDEFELEM");

            entity.ToTable("J_CONTRACTCLASSDEFELEM", "JITTOE");

            entity.HasIndex(e => e.CcldeIncontractclassId, "I_CCLASS_CCLDEFELEM");

            entity.HasIndex(e => e.CcldeOthercompanyclassId, "I_COMPANYCLASS_CCLDEFELEM");

            entity.HasIndex(e => e.CcldeContractclassId, "I_DEFCCLASS_CCLDEFELEM");

            entity.Property(e => e.CcldeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CCLDE_ID");
            entity.Property(e => e.CcldeContractclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CCLDE_CONTRACTCLASS_ID");
            entity.Property(e => e.CcldeContractkind)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("CCLDE_CONTRACTKIND");
            entity.Property(e => e.CcldeIncontractclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CCLDE_INCONTRACTCLASS_ID");
            entity.Property(e => e.CcldeOthercompanyclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CCLDE_OTHERCOMPANYCLASS_ID");
            entity.Property(e => e.CcldeQuery)
                .HasColumnType("LONG RAW")
                .HasColumnName("CCLDE_QUERY");
            entity.Property(e => e.CcldeTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CCLDE_TCREATION");
            entity.Property(e => e.CcldeTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CCLDE_TUPDATE");

            entity.HasOne(d => d.CcldeContractclass).WithMany(p => p.JContractclassdefelemCcldeContractclasses)
                .HasForeignKey(d => d.CcldeContractclassId)
                .HasConstraintName("FK_DEFCCLASS_CCLDEFELEM");

            entity.HasOne(d => d.CcldeIncontractclass).WithMany(p => p.JContractclassdefelemCcldeIncontractclasses)
                .HasForeignKey(d => d.CcldeIncontractclassId)
                .HasConstraintName("FK_CCLASS_CCLDEFELEM");

            entity.HasOne(d => d.CcldeOthercompanyclass).WithMany(p => p.JContractclassdefelems)
                .HasForeignKey(d => d.CcldeOthercompanyclassId)
                .HasConstraintName("FK_COMPANYCLASS_CCLDEFELEM");
        });

        modelBuilder.Entity<JContractclassmember>(entity =>
        {
            entity.HasKey(e => e.CclmId).HasName("PK_CONTRACTCLASSMEMBER");

            entity.ToTable("J_CONTRACTCLASSMEMBER", "JITTOE");

            entity.HasIndex(e => e.CclmContractclassId, "I_CCLASS_CCMEMBER");

            entity.HasIndex(e => e.CclmContractId, "I_CONTRACT_CCMEMBER");

            entity.HasIndex(e => new { e.CclmContractId, e.CclmContractclassId }, "UN_CCLM_KEY").IsUnique();

            entity.Property(e => e.CclmId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CCLM_ID");
            entity.Property(e => e.CclmContractId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CCLM_CONTRACT_ID");
            entity.Property(e => e.CclmContractclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CCLM_CONTRACTCLASS_ID");
            entity.Property(e => e.CclmTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CCLM_TCREATION");
            entity.Property(e => e.CclmTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CCLM_TUPDATE");

            entity.HasOne(d => d.CclmContract).WithMany(p => p.JContractclassmembers)
                .HasForeignKey(d => d.CclmContractId)
                .HasConstraintName("FK_CONTRACT_CCMEMBER");

            entity.HasOne(d => d.CclmContractclass).WithMany(p => p.JContractclassmembers)
                .HasForeignKey(d => d.CclmContractclassId)
                .HasConstraintName("FK_CCLASS_CCMEMBER");
        });

        modelBuilder.Entity<JContractcounter>(entity =>
        {
            entity.HasKey(e => e.CcnId).HasName("PK_CONTRACTCOUNTER");

            entity.ToTable("J_CONTRACTCOUNTER", "JITTOE");

            entity.HasIndex(e => e.CcnContractId, "I_CONTRACT_CONTRACTCOUNTER");

            entity.HasIndex(e => e.CcnCounterId, "I_COUNTER_CONTRACTCOUNTER");

            entity.HasIndex(e => new { e.CcnContractId, e.CcnType, e.CcnKey1, e.CcnKey2, e.CcnKey3 }, "UN_CCN_COUNTER").IsUnique();

            entity.Property(e => e.CcnId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CCN_ID");
            entity.Property(e => e.CcnContractId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CCN_CONTRACT_ID");
            entity.Property(e => e.CcnCounterId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CCN_COUNTER_ID");
            entity.Property(e => e.CcnDescr)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("CCN_DESCR");
            entity.Property(e => e.CcnKey1)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("CCN_KEY1");
            entity.Property(e => e.CcnKey2)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("CCN_KEY2");
            entity.Property(e => e.CcnKey3)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("CCN_KEY3");
            entity.Property(e => e.CcnTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CCN_TCREATION");
            entity.Property(e => e.CcnTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CCN_TUPDATE");
            entity.Property(e => e.CcnType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CCN_TYPE");

            entity.HasOne(d => d.CcnContract).WithMany(p => p.JContractcounters)
                .HasForeignKey(d => d.CcnContractId)
                .HasConstraintName("FK_CONTRACT_CONTRACTCOUNTER");

            entity.HasOne(d => d.CcnCounter).WithMany(p => p.JContractcounters)
                .HasForeignKey(d => d.CcnCounterId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COUNTER_CONTRACTCOUNTER");
        });

        modelBuilder.Entity<JContractcumulative>(entity =>
        {
            entity.HasKey(e => e.CcId).HasName("PK_CONTRACTCUMULATIVE");

            entity.ToTable("J_CONTRACTCUMULATIVE", "JITTOE");

            entity.HasIndex(e => e.CcContractId, "I_CONTRACT_CCUM");

            entity.HasIndex(e => e.CcTolocationId, "I_LOCATION_CCUM");

            entity.HasIndex(e => e.CcContractorderId, "I_ORDER_CCUM");

            entity.HasIndex(e => e.CcOthersubjectId, "I_OTHERSUBJECT_CCUM");

            entity.HasIndex(e => new { e.CcOwnsubjectId, e.CcHistoryid }, "I_OWNSUBJECT_CCUM");

            entity.HasIndex(e => e.CcTransitionId, "I_TRANSITION_CCUM");

            entity.HasIndex(e => e.CcUnitofmeasureId, "I_UNITOFMEASURE_CCUM");

            entity.Property(e => e.CcId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CC_ID");
            entity.Property(e => e.CcAltquantity)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("CC_ALTQUANTITY");
            entity.Property(e => e.CcAltquantityoffset)
                .HasDefaultValueSql("0  ")
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("CC_ALTQUANTITYOFFSET");
            entity.Property(e => e.CcAltquantityresettime)
                .HasColumnType("DATE")
                .HasColumnName("CC_ALTQUANTITYRESETTIME");
            entity.Property(e => e.CcContractId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CC_CONTRACT_ID");
            entity.Property(e => e.CcContractorderId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CC_CONTRACTORDER_ID");
            entity.Property(e => e.CcHistoryid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CC_HISTORYID");
            entity.Property(e => e.CcHistoryrefid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CC_HISTORYREFID");
            entity.Property(e => e.CcLastnoteno)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CC_LASTNOTENO");
            entity.Property(e => e.CcLastnotequantity)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("CC_LASTNOTEQUANTITY");
            entity.Property(e => e.CcLastnotetime)
                .HasColumnType("DATE")
                .HasColumnName("CC_LASTNOTETIME");
            entity.Property(e => e.CcOthersubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CC_OTHERSUBJECT_ID");
            entity.Property(e => e.CcOwnsubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CC_OWNSUBJECT_ID");
            entity.Property(e => e.CcQualifier)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("CC_QUALIFIER");
            entity.Property(e => e.CcQuantity)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("CC_QUANTITY");
            entity.Property(e => e.CcQuantityresettime)
                .HasColumnType("DATE")
                .HasColumnName("CC_QUANTITYRESETTIME");
            entity.Property(e => e.CcTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CC_TCREATION");
            entity.Property(e => e.CcTolocationId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CC_TOLOCATION_ID");
            entity.Property(e => e.CcTransitionId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CC_TRANSITION_ID");
            entity.Property(e => e.CcTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CC_TUPDATE");
            entity.Property(e => e.CcType)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("CC_TYPE");
            entity.Property(e => e.CcUnitofmeasureId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CC_UNITOFMEASURE_ID");

            entity.HasOne(d => d.CcContract).WithMany(p => p.JContractcumulatives)
                .HasForeignKey(d => d.CcContractId)
                .HasConstraintName("FK_CONTRACT_CCUM");

            entity.HasOne(d => d.CcContractorder).WithMany(p => p.JContractcumulatives)
                .HasForeignKey(d => d.CcContractorderId)
                .HasConstraintName("FK_ORDER_CCUM");

            entity.HasOne(d => d.CcOthersubject).WithMany(p => p.JContractcumulativeCcOthersubjects)
                .HasForeignKey(d => d.CcOthersubjectId)
                .HasConstraintName("FK_OTHERSUBJECT_CCUM");

            entity.HasOne(d => d.CcOwnsubject).WithMany(p => p.JContractcumulativeCcOwnsubjects)
                .HasForeignKey(d => d.CcOwnsubjectId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OWNSUBJECT_CCUM");

            entity.HasOne(d => d.CcTolocation).WithMany(p => p.JContractcumulatives)
                .HasForeignKey(d => d.CcTolocationId)
                .HasConstraintName("FK_LOCATION_CCUM");

            entity.HasOne(d => d.CcTransition).WithMany(p => p.JContractcumulatives)
                .HasForeignKey(d => d.CcTransitionId)
                .HasConstraintName("FK_TRANSITION_CCUM");

            entity.HasOne(d => d.CcUnitofmeasure).WithMany(p => p.JContractcumulatives)
                .HasForeignKey(d => d.CcUnitofmeasureId)
                .HasConstraintName("FK_UNITOFMEASURE_CCUM");
        });

        modelBuilder.Entity<JContractentry>(entity =>
        {
            entity.HasKey(e => e.CeId).HasName("PK_CONTRACTENTRY");

            entity.ToTable("J_CONTRACTENTRY", "JITTOE");

            entity.HasIndex(e => e.CeContractId, "I_CONTRACT");

            entity.HasIndex(e => e.CeTolocationId, "I_LOCATION_CONTRACTENTRY");

            entity.HasIndex(e => e.CeContractorderId, "I_ORDER_CONTRACTENTRY");

            entity.HasIndex(e => e.CeOthersubjectId, "I_OTHERSUBJECT_CONTRACTENTRY");

            entity.HasIndex(e => e.CeOwnsubjectId, "I_OWNSUBJECT_CONTRACTENTRY");

            entity.HasIndex(e => e.CeUnitofmeasureId, "I_UNITOFMEASURE_CONTRACTENTRY");

            entity.HasIndex(e => new { e.CeContractId, e.CeNo, e.CeHistoryid }, "UN_CE_NO").IsUnique();

            entity.Property(e => e.CeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CE_ID");
            entity.Property(e => e.CeContractId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CE_CONTRACT_ID");
            entity.Property(e => e.CeContractorderId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CE_CONTRACTORDER_ID");
            entity.Property(e => e.CeHistoryid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CE_HISTORYID");
            entity.Property(e => e.CeHistoryrefid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CE_HISTORYREFID");
            entity.Property(e => e.CeIgnoreedi)
                .HasPrecision(1)
                .HasColumnName("CE_IGNOREEDI");
            entity.Property(e => e.CeInfo1)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("CE_INFO1");
            entity.Property(e => e.CeInfo2)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("CE_INFO2");
            entity.Property(e => e.CeInfo3)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("CE_INFO3");
            entity.Property(e => e.CeNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CE_NO");
            entity.Property(e => e.CeOthersubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CE_OTHERSUBJECT_ID");
            entity.Property(e => e.CeOwnsubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CE_OWNSUBJECT_ID");
            entity.Property(e => e.CeTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CE_TCREATION");
            entity.Property(e => e.CeTolocationId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CE_TOLOCATION_ID");
            entity.Property(e => e.CeTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CE_TUPDATE");
            entity.Property(e => e.CeUnitofmeasureId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CE_UNITOFMEASURE_ID");

            entity.HasOne(d => d.CeContract).WithMany(p => p.JContractentries)
                .HasForeignKey(d => d.CeContractId)
                .HasConstraintName("FK_CONTRACT");

            entity.HasOne(d => d.CeContractorder).WithMany(p => p.JContractentries)
                .HasForeignKey(d => d.CeContractorderId)
                .HasConstraintName("FK_ORDER_CONTRACTENTRY");

            entity.HasOne(d => d.CeOthersubject).WithMany(p => p.JContractentryCeOthersubjects)
                .HasForeignKey(d => d.CeOthersubjectId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OTHERSUBJECT_CONTRACTENTRY");

            entity.HasOne(d => d.CeOwnsubject).WithMany(p => p.JContractentryCeOwnsubjects)
                .HasForeignKey(d => d.CeOwnsubjectId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OWNSUBJECT_CONTRACTENTRY");

            entity.HasOne(d => d.CeTolocation).WithMany(p => p.JContractentries)
                .HasForeignKey(d => d.CeTolocationId)
                .HasConstraintName("FK_LOCATION_CONTRACTENTRY");

            entity.HasOne(d => d.CeUnitofmeasure).WithMany(p => p.JContractentries)
                .HasForeignKey(d => d.CeUnitofmeasureId)
                .HasConstraintName("FK_UNITOFMEASURE_CONTRACTENTRY");
        });

        modelBuilder.Entity<JContractinfo>(entity =>
        {
            entity.HasKey(e => e.CiId).HasName("PK_CONTRACTINFO");

            entity.ToTable("J_CONTRACTINFO", "JITTOE");

            entity.HasIndex(e => e.CiAddressId, "I_ADDRESS_CONTRACTINFO");

            entity.HasIndex(e => e.CiContractId, "I_CONTRACT_CONTRACTINFO");

            entity.HasIndex(e => e.CiErpentityId, "I_ERPENTITY_CONTRACTINFO");

            entity.HasIndex(e => new { e.CiContractId, e.CiType, e.CiKey1, e.CiKey2, e.CiKey3 }, "UN_CI_INFO").IsUnique();

            entity.Property(e => e.CiId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CI_ID");
            entity.Property(e => e.CiAddressId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CI_ADDRESS_ID");
            entity.Property(e => e.CiContractId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CI_CONTRACT_ID");
            entity.Property(e => e.CiErpentityId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CI_ERPENTITY_ID");
            entity.Property(e => e.CiIntvalue)
                .HasPrecision(10)
                .HasColumnName("CI_INTVALUE");
            entity.Property(e => e.CiKey1)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("CI_KEY1");
            entity.Property(e => e.CiKey2)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("CI_KEY2");
            entity.Property(e => e.CiKey3)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("CI_KEY3");
            entity.Property(e => e.CiStringvalue)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("CI_STRINGVALUE");
            entity.Property(e => e.CiTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CI_TCREATION");
            entity.Property(e => e.CiTimevalue)
                .HasColumnType("DATE")
                .HasColumnName("CI_TIMEVALUE");
            entity.Property(e => e.CiTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CI_TUPDATE");
            entity.Property(e => e.CiType)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("CI_TYPE");

            entity.HasOne(d => d.CiAddress).WithMany(p => p.JContractinfos)
                .HasForeignKey(d => d.CiAddressId)
                .HasConstraintName("FK_ADDRESS_CONTRACTINFO");

            entity.HasOne(d => d.CiContract).WithMany(p => p.JContractinfos)
                .HasForeignKey(d => d.CiContractId)
                .HasConstraintName("FK_CONTRACT_CONTRACTINFO");

            entity.HasOne(d => d.CiErpentity).WithMany(p => p.JContractinfos)
                .HasForeignKey(d => d.CiErpentityId)
                .HasConstraintName("FK_ERPENTITY_CONTRACTINFO");
        });

        modelBuilder.Entity<JContractnote>(entity =>
        {
            entity.HasKey(e => e.CnoId).HasName("PK_CONTRACTNOTE");

            entity.ToTable("J_CONTRACTNOTE", "JITTOE");

            entity.HasIndex(e => e.CnoContractId, "I_CONTRACT_NOTE");

            entity.HasIndex(e => new { e.CnoContractId, e.CnoNo }, "UN_CNO_NO").IsUnique();

            entity.Property(e => e.CnoId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CNO_ID");
            entity.Property(e => e.CnoContractId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CNO_CONTRACT_ID");
            entity.Property(e => e.CnoDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CNO_DESCR");
            entity.Property(e => e.CnoNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CNO_NO");
            entity.Property(e => e.CnoTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CNO_TCREATION");
            entity.Property(e => e.CnoTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CNO_TUPDATE");

            entity.HasOne(d => d.CnoContract).WithMany(p => p.JContractnotes)
                .HasForeignKey(d => d.CnoContractId)
                .HasConstraintName("FK_CONTRACT_NOTE");
        });

        modelBuilder.Entity<JContractnoteentry>(entity =>
        {
            entity.HasKey(e => e.CnoeId).HasName("PK_CONTRACTNOTEENTRY");

            entity.ToTable("J_CONTRACTNOTEENTRY", "JITTOE");

            entity.HasIndex(e => e.CnoeContractnoteId, "I_CONTRACTNOTE_CNENTRY");

            entity.HasIndex(e => e.CnoeOrderentryId, "I_ORDERENTRY_CNENTRY");

            entity.Property(e => e.CnoeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CNOE_ID");
            entity.Property(e => e.CnoeContractnoteId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CNOE_CONTRACTNOTE_ID");
            entity.Property(e => e.CnoeOrderentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CNOE_ORDERENTRY_ID");
            entity.Property(e => e.CnoeTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CNOE_TCREATION");
            entity.Property(e => e.CnoeTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CNOE_TUPDATE");

            entity.HasOne(d => d.CnoeContractnote).WithMany(p => p.JContractnoteentries)
                .HasForeignKey(d => d.CnoeContractnoteId)
                .HasConstraintName("FK_CONTRACTNOTE_CNENTRY");

            entity.HasOne(d => d.CnoeOrderentry).WithMany(p => p.JContractnoteentries)
                .HasForeignKey(d => d.CnoeOrderentryId)
                .HasConstraintName("FK_ORDERENTRY_CNENTRY");
        });

        modelBuilder.Entity<JConvdef>(entity =>
        {
            entity.HasKey(e => e.CvdId).HasName("PK_CONVDEF");

            entity.ToTable("J_CONVDEF", "JITTOE");

            entity.HasIndex(e => e.CvdConfigdefId, "I_CONFIGDEF_CONVDEF");

            entity.HasIndex(e => e.CvdKey, "UN_CVD_KEY").IsUnique();

            entity.Property(e => e.CvdId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CVD_ID");
            entity.Property(e => e.CvdConfigdefId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CVD_CONFIGDEF_ID");
            entity.Property(e => e.CvdDescr)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("CVD_DESCR");
            entity.Property(e => e.CvdKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("CVD_KEY");
            entity.Property(e => e.CvdOpexport)
                .HasPrecision(1)
                .HasColumnName("CVD_OPEXPORT");
            entity.Property(e => e.CvdOpimport)
                .HasPrecision(1)
                .HasColumnName("CVD_OPIMPORT");
            entity.Property(e => e.CvdTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CVD_TCREATION");
            entity.Property(e => e.CvdTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CVD_TUPDATE");

            entity.HasOne(d => d.CvdConfigdef).WithMany(p => p.JConvdefs)
                .HasForeignKey(d => d.CvdConfigdefId)
                .HasConstraintName("FK_CONFIGDEF_CONVDEF");
        });

        modelBuilder.Entity<JConvdefclass>(entity =>
        {
            entity.HasKey(e => e.CvdcId).HasName("PK_CONVDEFCLASS");

            entity.ToTable("J_CONVDEFCLASS", "JITTOE");

            entity.HasIndex(e => e.CvdcKey, "UN_CVDC_KEY").IsUnique();

            entity.Property(e => e.CvdcId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CVDC_ID");
            entity.Property(e => e.CvdcDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CVDC_DESCR");
            entity.Property(e => e.CvdcKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("CVDC_KEY");
            entity.Property(e => e.CvdcTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CVDC_TCREATION");
            entity.Property(e => e.CvdcTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CVDC_TUPDATE");
        });

        modelBuilder.Entity<JConvdefclassmember>(entity =>
        {
            entity.HasKey(e => e.CvdcmId).HasName("PK_CONVDEFCLASSMEMBER");

            entity.ToTable("J_CONVDEFCLASSMEMBER", "JITTOE");

            entity.HasIndex(e => e.CvdcmConvdefId, "I_CONVDEF_CVDCMEMBER");

            entity.HasIndex(e => e.CvdcmConvdefclassId, "I_CVDCLASS_CVDCMEMBER");

            entity.HasIndex(e => new { e.CvdcmConvdefId, e.CvdcmConvdefclassId }, "UN_CVDCM_KEY").IsUnique();

            entity.Property(e => e.CvdcmId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CVDCM_ID");
            entity.Property(e => e.CvdcmConvdefId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CVDCM_CONVDEF_ID");
            entity.Property(e => e.CvdcmConvdefclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CVDCM_CONVDEFCLASS_ID");
            entity.Property(e => e.CvdcmTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CVDCM_TCREATION");
            entity.Property(e => e.CvdcmTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CVDCM_TUPDATE");

            entity.HasOne(d => d.CvdcmConvdef).WithMany(p => p.JConvdefclassmembers)
                .HasForeignKey(d => d.CvdcmConvdefId)
                .HasConstraintName("FK_CONVDEF_CVDCMEMBER");

            entity.HasOne(d => d.CvdcmConvdefclass).WithMany(p => p.JConvdefclassmembers)
                .HasForeignKey(d => d.CvdcmConvdefclassId)
                .HasConstraintName("FK_CVDCLASS_CVDCMEMBER");
        });

        modelBuilder.Entity<JCounter>(entity =>
        {
            entity.HasKey(e => e.CnId).HasName("PK_COUNTER");

            entity.ToTable("J_COUNTER", "JITTOE");

            entity.HasIndex(e => e.CnCountersetId, "I_COUNTERSET_COUNTER");

            entity.HasIndex(e => e.CnKey, "UN_CN_KEY").IsUnique();

            entity.Property(e => e.CnId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CN_ID");
            entity.Property(e => e.CnAutoreset)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasDefaultValueSql("'Never'  ")
                .HasColumnName("CN_AUTORESET");
            entity.Property(e => e.CnCountersetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CN_COUNTERSET_ID");
            entity.Property(e => e.CnCyclic)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("1  ")
                .HasColumnName("CN_CYCLIC");
            entity.Property(e => e.CnDescr)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("CN_DESCR");
            entity.Property(e => e.CnEncoding)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CN_ENCODING");
            entity.Property(e => e.CnFormat)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CN_FORMAT");
            entity.Property(e => e.CnIncrement)
                .HasPrecision(9)
                .HasDefaultValueSql("1")
                .HasColumnName("CN_INCREMENT");
            entity.Property(e => e.CnIsinitial)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("0  ")
                .HasColumnName("CN_ISINITIAL");
            entity.Property(e => e.CnKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("CN_KEY");
            entity.Property(e => e.CnLastsequenceno)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CN_LASTSEQUENCENO");
            entity.Property(e => e.CnLastvalue)
                .HasPrecision(9)
                .HasDefaultValueSql("1\n")
                .HasColumnName("CN_LASTVALUE");
            entity.Property(e => e.CnLastvaluetime)
                .HasColumnType("DATE")
                .HasColumnName("CN_LASTVALUETIME");
            entity.Property(e => e.CnMaxvalue)
                .HasPrecision(9)
                .HasColumnName("CN_MAXVALUE");
            entity.Property(e => e.CnMinvalue)
                .HasPrecision(9)
                .HasDefaultValueSql("1")
                .HasColumnName("CN_MINVALUE");
            entity.Property(e => e.CnSequencename)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("CN_SEQUENCENAME");
            entity.Property(e => e.CnSkipmodulo)
                .HasPrecision(9)
                .HasDefaultValueSql("0")
                .HasColumnName("CN_SKIPMODULO");
            entity.Property(e => e.CnTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CN_TCREATION");
            entity.Property(e => e.CnTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CN_TUPDATE");
            entity.Property(e => e.CnUsesequence)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("0  ")
                .HasColumnName("CN_USESEQUENCE");

            entity.HasOne(d => d.CnCounterset).WithMany(p => p.JCounters)
                .HasForeignKey(d => d.CnCountersetId)
                .HasConstraintName("FK_COUNTERSET_COUNTER");
        });

        modelBuilder.Entity<JCounterset>(entity =>
        {
            entity.HasKey(e => e.CnsId).HasName("PK_COUNTERSET");

            entity.ToTable("J_COUNTERSET", "JITTOE");

            entity.HasIndex(e => e.CnsCompanyId, "I_COMPANY_COUNTERSET");

            entity.HasIndex(e => e.CnsKey, "UN_CNS_KEY").IsUnique();

            entity.Property(e => e.CnsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CNS_ID");
            entity.Property(e => e.CnsCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CNS_COMPANY_ID");
            entity.Property(e => e.CnsDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CNS_DESCR");
            entity.Property(e => e.CnsKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("CNS_KEY");
            entity.Property(e => e.CnsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CNS_TCREATION");
            entity.Property(e => e.CnsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CNS_TUPDATE");

            entity.HasOne(d => d.CnsCompany).WithMany(p => p.JCountersets)
                .HasForeignKey(d => d.CnsCompanyId)
                .HasConstraintName("FK_COMPANY_COUNTERSET");
        });

        modelBuilder.Entity<JCposimage>(entity =>
        {
            entity.HasKey(e => e.OlsId).HasName("PK_CPOSIMAGE");

            entity.ToTable("J_CPOSIMAGE", "JITTOE");

            entity.HasIndex(e => e.OlsObjectlogId, "I_OL_CPOSIMAGE");

            entity.Property(e => e.OlsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_ID");
            entity.Property(e => e.CtpiContainerusageId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTPI_CONTAINERUSAGE_ID");
            entity.Property(e => e.CtpiImageId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTPI_IMAGE_ID");
            entity.Property(e => e.CtpiIndex)
                .HasPrecision(4)
                .HasColumnName("CTPI_INDEX");
            entity.Property(e => e.OlsObjectlogId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_OBJECTLOG_ID");

            entity.HasOne(d => d.OlsObjectlog).WithMany(p => p.JCposimages)
                .HasForeignKey(d => d.OlsObjectlogId)
                .HasConstraintName("FK_OL_CPOSIMAGE");
        });

        modelBuilder.Entity<JCposimageregion>(entity =>
        {
            entity.HasKey(e => e.OlsId).HasName("PK_CPOSIMAGEREGION");

            entity.ToTable("J_CPOSIMAGEREGION", "JITTOE");

            entity.HasIndex(e => e.OlsObjectlogId, "I_OL_CPOSIMAGEREGION");

            entity.Property(e => e.OlsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_ID");
            entity.Property(e => e.CtpirContainerusageId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTPIR_CONTAINERUSAGE_ID");
            entity.Property(e => e.CtpirImageregionId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTPIR_IMAGEREGION_ID");
            entity.Property(e => e.CtpirIndex)
                .HasPrecision(4)
                .HasColumnName("CTPIR_INDEX");
            entity.Property(e => e.OlsObjectlogId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_OBJECTLOG_ID");

            entity.HasOne(d => d.OlsObjectlog).WithMany(p => p.JCposimageregions)
                .HasForeignKey(d => d.OlsObjectlogId)
                .HasConstraintName("FK_OL_CPOSIMAGEREGION");
        });

        modelBuilder.Entity<JCposname>(entity =>
        {
            entity.HasKey(e => e.OlsId).HasName("PK_CPOSNAME");

            entity.ToTable("J_CPOSNAME", "JITTOE");

            entity.HasIndex(e => e.OlsObjectlogId, "I_OL_CPOSNAME");

            entity.Property(e => e.OlsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_ID");
            entity.Property(e => e.CtpnContainerusageId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTPN_CONTAINERUSAGE_ID");
            entity.Property(e => e.CtpnIndex)
                .HasPrecision(4)
                .HasColumnName("CTPN_INDEX");
            entity.Property(e => e.CtpnName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CTPN_NAME");
            entity.Property(e => e.OlsObjectlogId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_OBJECTLOG_ID");

            entity.HasOne(d => d.OlsObjectlog).WithMany(p => p.JCposnames)
                .HasForeignKey(d => d.OlsObjectlogId)
                .HasConstraintName("FK_OL_CPOSNAME");
        });

        modelBuilder.Entity<JCposorder>(entity =>
        {
            entity.HasKey(e => e.OlsId).HasName("PK_CPOSORDER");

            entity.ToTable("J_CPOSORDER", "JITTOE");

            entity.HasIndex(e => e.OlsObjectlogId, "I_OL_CPOSORDER");

            entity.Property(e => e.OlsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_ID");
            entity.Property(e => e.CtpoContainerusageId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTPO_CONTAINERUSAGE_ID");
            entity.Property(e => e.CtpoIndex)
                .HasPrecision(4)
                .HasColumnName("CTPO_INDEX");
            entity.Property(e => e.CtpoOrderindex)
                .HasPrecision(4)
                .HasColumnName("CTPO_ORDERINDEX");
            entity.Property(e => e.CtpoType)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValueSql("'Fill'  ")
                .HasColumnName("CTPO_TYPE");
            entity.Property(e => e.OlsObjectlogId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_OBJECTLOG_ID");

            entity.HasOne(d => d.OlsObjectlog).WithMany(p => p.JCposorders)
                .HasForeignKey(d => d.OlsObjectlogId)
                .HasConstraintName("FK_OL_CPOSORDER");
        });

        modelBuilder.Entity<JCreditnote>(entity =>
        {
            entity.HasKey(e => e.CrnId).HasName("PK_CREDITNOTE");

            entity.ToTable("J_CREDITNOTE", "JITTOE");

            entity.HasIndex(e => e.CrnCustomercompanyId, "I_COMPANY_CREDITNOTE");

            entity.HasIndex(e => e.CrnCreditnotesetId, "I_CREDITNOTESET_CREDITNOTE");

            entity.HasIndex(e => new { e.CrnCreditnotesetId, e.CrnCustomercompanyId, e.CrnNo }, "UN_CRN_NO").IsUnique();

            entity.Property(e => e.CrnId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CRN_ID");
            entity.Property(e => e.CrnCreditnotesetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CRN_CREDITNOTESET_ID");
            entity.Property(e => e.CrnCurrency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CRN_CURRENCY");
            entity.Property(e => e.CrnCustomercompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CRN_CUSTOMERCOMPANY_ID");
            entity.Property(e => e.CrnNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CRN_NO");
            entity.Property(e => e.CrnTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CRN_TCREATION");
            entity.Property(e => e.CrnTotalamount)
                .HasColumnType("NUMBER(13,2)")
                .HasColumnName("CRN_TOTALAMOUNT");
            entity.Property(e => e.CrnTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CRN_TUPDATE");

            entity.HasOne(d => d.CrnCreditnoteset).WithMany(p => p.JCreditnotes)
                .HasForeignKey(d => d.CrnCreditnotesetId)
                .HasConstraintName("FK_CREDITNOTESET_CREDITNOTE");

            entity.HasOne(d => d.CrnCustomercompany).WithMany(p => p.JCreditnotes)
                .HasForeignKey(d => d.CrnCustomercompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPANY_CREDITNOTE");
        });

        modelBuilder.Entity<JCreditnoteentry>(entity =>
        {
            entity.HasKey(e => e.CrneId).HasName("PK_CREDITNOTEENTRY");

            entity.ToTable("J_CREDITNOTEENTRY", "JITTOE");

            entity.HasIndex(e => e.CrneCreditnoteId, "I_CREDITNOTE_CNENTRY");

            entity.HasIndex(e => e.CrneDeliverynoteId, "I_DELIVNOTE_CREDITNOTEENTRY");

            entity.HasIndex(e => e.CrneOwnsubjectId, "I_SUBJECT_CREDITNOTEENTRY");

            entity.Property(e => e.CrneId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CRNE_ID");
            entity.Property(e => e.CrneAmount)
                .HasColumnType("NUMBER(13,2)")
                .HasColumnName("CRNE_AMOUNT");
            entity.Property(e => e.CrneCreditnoteId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CRNE_CREDITNOTE_ID");
            entity.Property(e => e.CrneCurrency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CRNE_CURRENCY");
            entity.Property(e => e.CrneCustomersubjectno)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CRNE_CUSTOMERSUBJECTNO");
            entity.Property(e => e.CrneDeliverynoteId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CRNE_DELIVERYNOTE_ID");
            entity.Property(e => e.CrneDeliverynoteno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CRNE_DELIVERYNOTENO");
            entity.Property(e => e.CrneDocumentdate)
                .HasColumnType("DATE")
                .HasColumnName("CRNE_DOCUMENTDATE");
            entity.Property(e => e.CrneOwnsubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CRNE_OWNSUBJECT_ID");
            entity.Property(e => e.CrnePartprice)
                .HasColumnType("NUMBER(13,2)")
                .HasColumnName("CRNE_PARTPRICE");
            entity.Property(e => e.CrnePurchaseorderno)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("CRNE_PURCHASEORDERNO");
            entity.Property(e => e.CrneQuantity)
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("CRNE_QUANTITY");
            entity.Property(e => e.CrneTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CRNE_TCREATION");

            entity.HasOne(d => d.CrneCreditnote).WithMany(p => p.JCreditnoteentries)
                .HasForeignKey(d => d.CrneCreditnoteId)
                .HasConstraintName("FK_CREDITNOTE_CNENTRY");

            entity.HasOne(d => d.CrneDeliverynote).WithMany(p => p.JCreditnoteentries)
                .HasForeignKey(d => d.CrneDeliverynoteId)
                .HasConstraintName("FK_DELIVNOTE_CREDITNOTEENTRY");

            entity.HasOne(d => d.CrneOwnsubject).WithMany(p => p.JCreditnoteentries)
                .HasForeignKey(d => d.CrneOwnsubjectId)
                .HasConstraintName("FK_SUBJECT_CREDITNOTEENTRY");
        });

        modelBuilder.Entity<JCreditnoteset>(entity =>
        {
            entity.HasKey(e => e.CrnsId).HasName("PK_CREDITNOTESET");

            entity.ToTable("J_CREDITNOTESET", "JITTOE");

            entity.HasIndex(e => e.CrnsCompanyId, "I_COMPANY_CREDITNOTESET");

            entity.HasIndex(e => e.CrnsKey, "UN_CRNS_KEY").IsUnique();

            entity.Property(e => e.CrnsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CRNS_ID");
            entity.Property(e => e.CrnsCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CRNS_COMPANY_ID");
            entity.Property(e => e.CrnsDescr)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("CRNS_DESCR");
            entity.Property(e => e.CrnsKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("CRNS_KEY");
            entity.Property(e => e.CrnsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CRNS_TCREATION");
            entity.Property(e => e.CrnsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("CRNS_TUPDATE");

            entity.HasOne(d => d.CrnsCompany).WithMany(p => p.JCreditnotesets)
                .HasForeignKey(d => d.CrnsCompanyId)
                .HasConstraintName("FK_COMPANY_CREDITNOTESET");
        });

        modelBuilder.Entity<JCsclass>(entity =>
        {
            entity.HasKey(e => e.OlsId).HasName("PK_CSCLASS");

            entity.ToTable("J_CSCLASS", "JITTOE");

            entity.HasIndex(e => e.OlsObjectlogId, "I_OL_CSCLASS");

            entity.Property(e => e.OlsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_ID");
            entity.Property(e => e.CtscCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTSC_COMPANY_ID");
            entity.Property(e => e.CtscDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CTSC_DESCR");
            entity.Property(e => e.CtscKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("CTSC_KEY");
            entity.Property(e => e.OlsObjectlogId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_OBJECTLOG_ID");

            entity.HasOne(d => d.OlsObjectlog).WithMany(p => p.JCsclasses)
                .HasForeignKey(d => d.OlsObjectlogId)
                .HasConstraintName("FK_OL_CSCLASS");
        });

        modelBuilder.Entity<JCsclassmember>(entity =>
        {
            entity.HasKey(e => e.OlsId).HasName("PK_CSCLASSMEMBER");

            entity.ToTable("J_CSCLASSMEMBER", "JITTOE");

            entity.HasIndex(e => e.OlsObjectlogId, "I_OL_CSCLASSMEMBER");

            entity.Property(e => e.OlsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_ID");
            entity.Property(e => e.CtscmContainersetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTSCM_CONTAINERSET_ID");
            entity.Property(e => e.CtscmContainersetclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTSCM_CONTAINERSETCLASS_ID");
            entity.Property(e => e.OlsObjectlogId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_OBJECTLOG_ID");

            entity.HasOne(d => d.OlsObjectlog).WithMany(p => p.JCsclassmembers)
                .HasForeignKey(d => d.OlsObjectlogId)
                .HasConstraintName("FK_OL_CSCLASSMEMBER");
        });

        modelBuilder.Entity<JCusageelem>(entity =>
        {
            entity.HasKey(e => e.OlsId).HasName("PK_CUSAGEELEM");

            entity.ToTable("J_CUSAGEELEM", "JITTOE");

            entity.HasIndex(e => e.OlsObjectlogId, "I_OL_CUSAGEELEM");

            entity.Property(e => e.OlsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_ID");
            entity.Property(e => e.CtueContainerusageId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTUE_CONTAINERUSAGE_ID");
            entity.Property(e => e.CtueMaxamount)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("CTUE_MAXAMOUNT");
            entity.Property(e => e.CtueSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTUE_SUBJECT_ID");
            entity.Property(e => e.OlsObjectlogId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_OBJECTLOG_ID");

            entity.HasOne(d => d.OlsObjectlog).WithMany(p => p.JCusageelems)
                .HasForeignKey(d => d.OlsObjectlogId)
                .HasConstraintName("FK_OL_CUSAGEELEM");
        });

        modelBuilder.Entity<JDashboard>(entity =>
        {
            entity.HasKey(e => e.DboId).HasName("PK_DASHBOARD");

            entity.ToTable("J_DASHBOARD", "JITTOE");

            entity.HasIndex(e => e.DboDashboardsetId, "I_DBOSET_DBO");

            entity.HasIndex(e => e.DboKey, "UN_DBO_KEY").IsUnique();

            entity.Property(e => e.DboId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DBO_ID");
            entity.Property(e => e.DboDashboardsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DBO_DASHBOARDSET_ID");
            entity.Property(e => e.DboDescr)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DBO_DESCR");
            entity.Property(e => e.DboHeight)
                .HasPrecision(5)
                .HasDefaultValueSql("800  ")
                .HasColumnName("DBO_HEIGHT");
            entity.Property(e => e.DboKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("DBO_KEY");
            entity.Property(e => e.DboTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("DBO_TCREATION");
            entity.Property(e => e.DboTitle)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("DBO_TITLE");
            entity.Property(e => e.DboTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("DBO_TUPDATE");
            entity.Property(e => e.DboWidth)
                .HasPrecision(5)
                .HasDefaultValueSql("1200  ")
                .HasColumnName("DBO_WIDTH");
            entity.Property(e => e.DboXmldata)
                .HasColumnType("LONG RAW")
                .HasColumnName("DBO_XMLDATA");
            entity.Property(e => e.DboXmldatasize)
                .HasPrecision(9)
                .HasDefaultValueSql("0  ")
                .HasColumnName("DBO_XMLDATASIZE");

            entity.HasOne(d => d.DboDashboardset).WithMany(p => p.JDashboards)
                .HasForeignKey(d => d.DboDashboardsetId)
                .HasConstraintName("FK_DBOSET_DBO");
        });

        modelBuilder.Entity<JDashboarddataprovider>(entity =>
        {
            entity.HasKey(e => e.DbodpId).HasName("PK_DASHBOARDDATAPROVIDER");

            entity.ToTable("J_DASHBOARDDATAPROVIDER", "JITTOE");

            entity.HasIndex(e => e.DbodpConfigdefId, "I_CONFIGDEF_DBODPROV");

            entity.HasIndex(e => e.DbodpDbdatasourceId, "I_DBODBDATASOURCE_DBODPROV");

            entity.HasIndex(e => e.DbodpKey, "UN_DBODP_KEY").IsUnique();

            entity.Property(e => e.DbodpId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DBODP_ID");
            entity.Property(e => e.DbodpConfigdefId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DBODP_CONFIGDEF_ID");
            entity.Property(e => e.DbodpDatasourcetype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DBODP_DATASOURCETYPE");
            entity.Property(e => e.DbodpDbdatasourceId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DBODP_DBDATASOURCE_ID");
            entity.Property(e => e.DbodpDescr)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DBODP_DESCR");
            entity.Property(e => e.DbodpKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("DBODP_KEY");
            entity.Property(e => e.DbodpPath)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("DBODP_PATH");
            entity.Property(e => e.DbodpTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("DBODP_TCREATION");
            entity.Property(e => e.DbodpTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("DBODP_TUPDATE");
            entity.Property(e => e.DbodpUrl)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("DBODP_URL");

            entity.HasOne(d => d.DbodpConfigdef).WithMany(p => p.JDashboarddataproviders)
                .HasForeignKey(d => d.DbodpConfigdefId)
                .HasConstraintName("FK_CONFIGDEF_DBODPROV");

            entity.HasOne(d => d.DbodpDbdatasource).WithMany(p => p.JDashboarddataproviders)
                .HasForeignKey(d => d.DbodpDbdatasourceId)
                .HasConstraintName("FK_DBODBDATASOURCE_DBODPROV");
        });

        modelBuilder.Entity<JDashboarddbdatasource>(entity =>
        {
            entity.HasKey(e => e.DboddsId).HasName("PK_DASHBOARDDBDATASOURCE");

            entity.ToTable("J_DASHBOARDDBDATASOURCE", "JITTOE");

            entity.HasIndex(e => e.DboddsKey, "UN_DBODDS_KEY").IsUnique();

            entity.Property(e => e.DboddsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DBODDS_ID");
            entity.Property(e => e.DboddsDatabasetype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("DBODDS_DATABASETYPE");
            entity.Property(e => e.DboddsDescr)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DBODDS_DESCR");
            entity.Property(e => e.DboddsDriverclass)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DBODDS_DRIVERCLASS");
            entity.Property(e => e.DboddsKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("DBODDS_KEY");
            entity.Property(e => e.DboddsName)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DBODDS_NAME");
            entity.Property(e => e.DboddsPassword)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DBODDS_PASSWORD");
            entity.Property(e => e.DboddsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("DBODDS_TCREATION");
            entity.Property(e => e.DboddsTestquery)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DBODDS_TESTQUERY");
            entity.Property(e => e.DboddsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("DBODDS_TUPDATE");
            entity.Property(e => e.DboddsUrl)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DBODDS_URL");
        });

        modelBuilder.Entity<JDashboardinfo>(entity =>
        {
            entity.HasKey(e => e.DboiId).HasName("PK_DASHBOARDINFO");

            entity.ToTable("J_DASHBOARDINFO", "JITTOE");

            entity.HasIndex(e => e.DboiDashboardId, "I_DASHBOARD_DBOINFO");

            entity.HasIndex(e => new { e.DboiDashboardId, e.DboiType, e.DboiKey1, e.DboiKey2, e.DboiKey3 }, "UN_DBOI_INFO").IsUnique();

            entity.Property(e => e.DboiId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DBOI_ID");
            entity.Property(e => e.DboiDashboardId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DBOI_DASHBOARD_ID");
            entity.Property(e => e.DboiDescr)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DBOI_DESCR");
            entity.Property(e => e.DboiKey1)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("DBOI_KEY1");
            entity.Property(e => e.DboiKey2)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("DBOI_KEY2");
            entity.Property(e => e.DboiKey3)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("DBOI_KEY3");
            entity.Property(e => e.DboiStringvalue)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("DBOI_STRINGVALUE");
            entity.Property(e => e.DboiTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("DBOI_TCREATION");
            entity.Property(e => e.DboiTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("DBOI_TUPDATE");
            entity.Property(e => e.DboiType)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("DBOI_TYPE");

            entity.HasOne(d => d.DboiDashboard).WithMany(p => p.JDashboardinfos)
                .HasForeignKey(d => d.DboiDashboardId)
                .HasConstraintName("FK_DASHBOARD_DBOINFO");
        });

        modelBuilder.Entity<JDashboardpanel>(entity =>
        {
            entity.HasKey(e => e.DbopId).HasName("PK_DASHBOARDPANEL");

            entity.ToTable("J_DASHBOARDPANEL", "JITTOE");

            entity.HasIndex(e => e.DbopDashboardId, "I_DASHBOARD_DBODPANEL");

            entity.HasIndex(e => e.DbopDashboardpaneldefId, "I_DBOPANELDEF_DBOPANEL");

            entity.Property(e => e.DbopId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DBOP_ID");
            entity.Property(e => e.DbopDashboardId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DBOP_DASHBOARD_ID");
            entity.Property(e => e.DbopDashboardpaneldefId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DBOP_DASHBOARDPANELDEF_ID");
            entity.Property(e => e.DbopHeight)
                .HasPrecision(5)
                .HasDefaultValueSql("200  ")
                .HasColumnName("DBOP_HEIGHT");
            entity.Property(e => e.DbopLeft)
                .HasPrecision(5)
                .HasDefaultValueSql("0  ")
                .HasColumnName("DBOP_LEFT");
            entity.Property(e => e.DbopTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("DBOP_TCREATION");
            entity.Property(e => e.DbopTop)
                .HasPrecision(5)
                .HasDefaultValueSql("0  ")
                .HasColumnName("DBOP_TOP");
            entity.Property(e => e.DbopTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("DBOP_TUPDATE");
            entity.Property(e => e.DbopWidth)
                .HasPrecision(5)
                .HasDefaultValueSql("200  ")
                .HasColumnName("DBOP_WIDTH");

            entity.HasOne(d => d.DbopDashboard).WithMany(p => p.JDashboardpanels)
                .HasForeignKey(d => d.DbopDashboardId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DASHBOARD_DBODPANEL");

            entity.HasOne(d => d.DbopDashboardpaneldef).WithMany(p => p.JDashboardpanels)
                .HasForeignKey(d => d.DbopDashboardpaneldefId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DBOPANELDEF_DBOPANEL");
        });

        modelBuilder.Entity<JDashboardpaneldef>(entity =>
        {
            entity.HasKey(e => e.DbopdId).HasName("PK_DASHBOARDPANELDEF");

            entity.ToTable("J_DASHBOARDPANELDEF", "JITTOE");

            entity.HasIndex(e => e.DbopdDataproviderId, "I_DBODPROV_DBOPANELDEF");

            entity.HasIndex(e => e.DbopdDashboardpaneldefsetId, "I_DBOPDEFSET_DBOPDEF");

            entity.HasIndex(e => e.DbopdKey, "UN_DBOPD_KEY").IsUnique();

            entity.Property(e => e.DbopdId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DBOPD_ID");
            entity.Property(e => e.DbopdDashboardpaneldefsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DBOPD_DASHBOARDPANELDEFSET_ID");
            entity.Property(e => e.DbopdDashboardpaneltype)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("DBOPD_DASHBOARDPANELTYPE");
            entity.Property(e => e.DbopdDataproviderId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DBOPD_DATAPROVIDER_ID");
            entity.Property(e => e.DbopdDescr)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DBOPD_DESCR");
            entity.Property(e => e.DbopdKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("DBOPD_KEY");
            entity.Property(e => e.DbopdTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("DBOPD_TCREATION");
            entity.Property(e => e.DbopdTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("DBOPD_TUPDATE");
            entity.Property(e => e.DbopdXmldata)
                .HasColumnType("LONG RAW")
                .HasColumnName("DBOPD_XMLDATA");
            entity.Property(e => e.DbopdXmldatasize)
                .HasPrecision(9)
                .HasDefaultValueSql("0  ")
                .HasColumnName("DBOPD_XMLDATASIZE");

            entity.HasOne(d => d.DbopdDashboardpaneldefset).WithMany(p => p.JDashboardpaneldefs)
                .HasForeignKey(d => d.DbopdDashboardpaneldefsetId)
                .HasConstraintName("FK_DBOPDEFSET_DBOPDEF");

            entity.HasOne(d => d.DbopdDataprovider).WithMany(p => p.JDashboardpaneldefs)
                .HasForeignKey(d => d.DbopdDataproviderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DBODPROV_DBOPANELDEF");
        });

        modelBuilder.Entity<JDashboardpaneldefset>(entity =>
        {
            entity.HasKey(e => e.DbopdsId).HasName("PK_DASHBOARDPANELDEFSET");

            entity.ToTable("J_DASHBOARDPANELDEFSET", "JITTOE");

            entity.HasIndex(e => e.DbopdsKey, "UN_DBOPDS_KEY").IsUnique();

            entity.Property(e => e.DbopdsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DBOPDS_ID");
            entity.Property(e => e.DbopdsDescr)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DBOPDS_DESCR");
            entity.Property(e => e.DbopdsKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("DBOPDS_KEY");
            entity.Property(e => e.DbopdsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("DBOPDS_TCREATION");
            entity.Property(e => e.DbopdsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("DBOPDS_TUPDATE");
        });

        modelBuilder.Entity<JDashboardset>(entity =>
        {
            entity.HasKey(e => e.DbosId).HasName("PK_DASHBOARDSET");

            entity.ToTable("J_DASHBOARDSET", "JITTOE");

            entity.HasIndex(e => e.DbosKey, "UN_DBOS_KEY").IsUnique();

            entity.Property(e => e.DbosId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DBOS_ID");
            entity.Property(e => e.DbosDescr)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DBOS_DESCR");
            entity.Property(e => e.DbosKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("DBOS_KEY");
            entity.Property(e => e.DbosTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("DBOS_TCREATION");
            entity.Property(e => e.DbosTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("DBOS_TUPDATE");
        });

        modelBuilder.Entity<JDatabaseobjectsize>(entity =>
        {
            entity.HasKey(e => e.DosId).HasName("PK_DATABASEOBJECTSIZE");

            entity.ToTable("J_DATABASEOBJECTSIZE", "JITTOE");

            entity.HasIndex(e => new { e.DosStatusdate, e.DosObjectname }, "UN_DOS_DATEOBJECT").IsUnique();

            entity.Property(e => e.DosId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DOS_ID");
            entity.Property(e => e.DosBlocks)
                .HasPrecision(13)
                .HasColumnName("DOS_BLOCKS");
            entity.Property(e => e.DosBytes)
                .HasPrecision(13)
                .HasColumnName("DOS_BYTES");
            entity.Property(e => e.DosObjectname)
                .HasMaxLength(81)
                .IsUnicode(false)
                .HasColumnName("DOS_OBJECTNAME");
            entity.Property(e => e.DosStatusdate)
                .HasColumnType("DATE")
                .HasColumnName("DOS_STATUSDATE");
            entity.Property(e => e.DosTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("DOS_TCREATION");
        });

        modelBuilder.Entity<JDelivery>(entity =>
        {
            entity.HasKey(e => e.DlId).HasName("PK_DELIVERY");

            entity.ToTable("J_DELIVERY", "JITTOE");

            entity.HasIndex(e => e.DlCarrierId, "I_COMPANYCARRIER_DELIVERY");

            entity.HasIndex(e => e.DlCompanyId, "I_COMPANY_DELIVERY");

            entity.HasIndex(e => e.DlDoccfgId, "I_DOCCFG_DELIVERY");

            entity.Property(e => e.DlId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DL_ID");
            entity.Property(e => e.DlCarrierId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DL_CARRIER_ID");
            entity.Property(e => e.DlCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DL_COMPANY_ID");
            entity.Property(e => e.DlDescriptortype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValueSql("'Actual'  ")
                .HasColumnName("DL_DESCRIPTORTYPE");
            entity.Property(e => e.DlDoccfgId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DL_DOCCFG_ID");
            entity.Property(e => e.DlEstimatedarrivaltime)
                .HasColumnType("DATE")
                .HasColumnName("DL_ESTIMATEDARRIVALTIME");
            entity.Property(e => e.DlOpen)
                .HasPrecision(1)
                .HasColumnName("DL_OPEN");
            entity.Property(e => e.DlTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("DL_TCREATION");
            entity.Property(e => e.DlTimedelivered)
                .HasColumnType("DATE")
                .HasColumnName("DL_TIMEDELIVERED");
            entity.Property(e => e.DlTransportmedia)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("DL_TRANSPORTMEDIA");
            entity.Property(e => e.DlTransporttime)
                .HasColumnType("DATE")
                .HasColumnName("DL_TRANSPORTTIME");
            entity.Property(e => e.DlTransporttype)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("DL_TRANSPORTTYPE");

            entity.HasOne(d => d.DlCarrier).WithMany(p => p.JDeliveryDlCarriers)
                .HasForeignKey(d => d.DlCarrierId)
                .HasConstraintName("FK_COMPANYCARRIER_DELIVERY");

            entity.HasOne(d => d.DlCompany).WithMany(p => p.JDeliveryDlCompanies)
                .HasForeignKey(d => d.DlCompanyId)
                .HasConstraintName("FK_COMPANY_DELIVERY");

            entity.HasOne(d => d.DlDoccfg).WithMany(p => p.JDeliveries)
                .HasForeignKey(d => d.DlDoccfgId)
                .HasConstraintName("FK_DOCCFG_DELIVERY");
        });

        modelBuilder.Entity<JDeliveryentry>(entity =>
        {
            entity.HasKey(e => e.DleId).HasName("PK_DELIVERYENTRY");

            entity.ToTable("J_DELIVERYENTRY", "JITTOE");

            entity.HasIndex(e => e.DleContractId, "I_CONTRACT_DELIVERYENTRY");

            entity.HasIndex(e => e.DleDeliveryId, "I_DELIVERY_DELIVERYENTRY");

            entity.HasIndex(e => new { e.DleContractId, e.DleNo, e.DleDescriptortype }, "UN_DLE_NO").IsUnique();

            entity.Property(e => e.DleId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DLE_ID");
            entity.Property(e => e.DleContractId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DLE_CONTRACT_ID");
            entity.Property(e => e.DleDeliveryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DLE_DELIVERY_ID");
            entity.Property(e => e.DleDescriptortype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValueSql("'Actual'  ")
                .HasColumnName("DLE_DESCRIPTORTYPE");
            entity.Property(e => e.DleKeyincontract)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("DLE_KEYINCONTRACT");
            entity.Property(e => e.DleNo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DLE_NO");
            entity.Property(e => e.DleTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("DLE_TCREATION");

            entity.HasOne(d => d.DleContract).WithMany(p => p.JDeliveryentries)
                .HasForeignKey(d => d.DleContractId)
                .HasConstraintName("FK_CONTRACT_DELIVERYENTRY");

            entity.HasOne(d => d.DleDelivery).WithMany(p => p.JDeliveryentries)
                .HasForeignKey(d => d.DleDeliveryId)
                .HasConstraintName("FK_DELIVERY_DELIVERYENTRY");
        });

        modelBuilder.Entity<JDeliveryinfo>(entity =>
        {
            entity.HasKey(e => e.DliId).HasName("PK_DELIVERYINFO");

            entity.ToTable("J_DELIVERYINFO", "JITTOE");

            entity.HasIndex(e => e.DliDeliveryId, "I_DELIVERY_DELIVERYINFO");

            entity.HasIndex(e => new { e.DliDeliveryId, e.DliType, e.DliKey }, "UN_DLI_INFO").IsUnique();

            entity.Property(e => e.DliId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DLI_ID");
            entity.Property(e => e.DliDeliveryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DLI_DELIVERY_ID");
            entity.Property(e => e.DliKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DLI_KEY");
            entity.Property(e => e.DliStringvalue)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DLI_STRINGVALUE");
            entity.Property(e => e.DliTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("DLI_TCREATION");
            entity.Property(e => e.DliTimevalue)
                .HasColumnType("DATE")
                .HasColumnName("DLI_TIMEVALUE");
            entity.Property(e => e.DliTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("DLI_TUPDATE");
            entity.Property(e => e.DliType)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("DLI_TYPE");

            entity.HasOne(d => d.DliDelivery).WithMany(p => p.JDeliveryinfos)
                .HasForeignKey(d => d.DliDeliveryId)
                .HasConstraintName("FK_DELIVERY_DELIVERYINFO");
        });

        modelBuilder.Entity<JDeliverynote>(entity =>
        {
            entity.HasKey(e => e.DlnId).HasName("PK_DELIVERYNOTE");

            entity.ToTable("J_DELIVERYNOTE", "JITTOE");

            entity.HasIndex(e => e.DlnDeliveryentryId, "I_DELIVENTRY_DELIVNOTE");

            entity.HasIndex(e => e.DlnLocationId, "I_LOCATION_DELIVERYNOTE");

            entity.HasIndex(e => new { e.DlnDeliveryentryId, e.DlnNo }, "UN_DLN_NO").IsUnique();

            entity.Property(e => e.DlnId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DLN_ID");
            entity.Property(e => e.DlnDeliveryentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DLN_DELIVERYENTRY_ID");
            entity.Property(e => e.DlnErpno)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DLN_ERPNO");
            entity.Property(e => e.DlnKeyinlocation)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("DLN_KEYINLOCATION");
            entity.Property(e => e.DlnLocationId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DLN_LOCATION_ID");
            entity.Property(e => e.DlnNo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DLN_NO");
            entity.Property(e => e.DlnReceipttimestamp)
                .HasColumnType("DATE")
                .HasColumnName("DLN_RECEIPTTIMESTAMP");
            entity.Property(e => e.DlnTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("DLN_TCREATION");

            entity.HasOne(d => d.DlnDeliveryentry).WithMany(p => p.JDeliverynotes)
                .HasForeignKey(d => d.DlnDeliveryentryId)
                .HasConstraintName("FK_DELIVENTRY_DELIVNOTE");

            entity.HasOne(d => d.DlnLocation).WithMany(p => p.JDeliverynotes)
                .HasForeignKey(d => d.DlnLocationId)
                .HasConstraintName("FK_LOCATION_DELIVERYNOTE");
        });

        modelBuilder.Entity<JDeliverynotecontainer>(entity =>
        {
            entity.HasKey(e => e.DlncId).HasName("PK_DELIVERYNOTECONTAINER");

            entity.ToTable("J_DELIVERYNOTECONTAINER", "JITTOE");

            entity.HasIndex(e => e.DlncContainerId, "I_CONTAINER_DELIVNOTECONT");

            entity.HasIndex(e => e.DlncDeliverynoteId, "I_DELIVERYNOTE_DELIVNOTECONT");

            entity.Property(e => e.DlncId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DLNC_ID");
            entity.Property(e => e.DlncContainerId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DLNC_CONTAINER_ID");
            entity.Property(e => e.DlncDeliverynoteId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DLNC_DELIVERYNOTE_ID");
            entity.Property(e => e.DlncTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("DLNC_TCREATION");

            entity.HasOne(d => d.DlncContainer).WithMany(p => p.JDeliverynotecontainers)
                .HasForeignKey(d => d.DlncContainerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTAINER_DELIVNOTECONT");

            entity.HasOne(d => d.DlncDeliverynote).WithMany(p => p.JDeliverynotecontainers)
                .HasForeignKey(d => d.DlncDeliverynoteId)
                .HasConstraintName("FK_DELIVERYNOTE_DELIVNOTECONT");
        });

        modelBuilder.Entity<JDeliverynoteentry>(entity =>
        {
            entity.HasKey(e => e.DlneId).HasName("PK_DELIVERYNOTEENTRY");

            entity.ToTable("J_DELIVERYNOTEENTRY", "JITTOE");

            entity.HasIndex(e => e.DlneDeliverynoteId, "I_DELIVERYNOTE_DNENTRY");

            entity.HasIndex(e => e.DlneContractorderId, "I_ORDER_DNENTRY");

            entity.HasIndex(e => e.DlneOthersubjectId, "I_OTHERSUBJECT_DNENTRY");

            entity.HasIndex(e => e.DlneSubjectId, "I_SUBJECT_DNENTRY");

            entity.Property(e => e.DlneId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DLNE_ID");
            entity.Property(e => e.DlneAmount)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("DLNE_AMOUNT");
            entity.Property(e => e.DlneContractorderId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DLNE_CONTRACTORDER_ID");
            entity.Property(e => e.DlneCumulatedamount)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("DLNE_CUMULATEDAMOUNT");
            entity.Property(e => e.DlneDeliverynoteId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DLNE_DELIVERYNOTE_ID");
            entity.Property(e => e.DlneIsinternal)
                .HasPrecision(1)
                .HasColumnName("DLNE_ISINTERNAL");
            entity.Property(e => e.DlneIspackage)
                .HasPrecision(1)
                .HasColumnName("DLNE_ISPACKAGE");
            entity.Property(e => e.DlneNo)
                .HasPrecision(8)
                .HasColumnName("DLNE_NO");
            entity.Property(e => e.DlneOthersubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DLNE_OTHERSUBJECT_ID");
            entity.Property(e => e.DlneSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DLNE_SUBJECT_ID");
            entity.Property(e => e.DlneTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("DLNE_TCREATION");
            entity.Property(e => e.DlneTotalamount)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("DLNE_TOTALAMOUNT");

            entity.HasOne(d => d.DlneContractorder).WithMany(p => p.JDeliverynoteentries)
                .HasForeignKey(d => d.DlneContractorderId)
                .HasConstraintName("FK_ORDER_DNENTRY");

            entity.HasOne(d => d.DlneDeliverynote).WithMany(p => p.JDeliverynoteentries)
                .HasForeignKey(d => d.DlneDeliverynoteId)
                .HasConstraintName("FK_DELIVERYNOTE_DNENTRY");

            entity.HasOne(d => d.DlneOthersubject).WithMany(p => p.JDeliverynoteentryDlneOthersubjects)
                .HasForeignKey(d => d.DlneOthersubjectId)
                .HasConstraintName("FK_OTHERSUBJECT_DNENTRY");

            entity.HasOne(d => d.DlneSubject).WithMany(p => p.JDeliverynoteentryDlneSubjects)
                .HasForeignKey(d => d.DlneSubjectId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SUBJECT_DNENTRY");
        });

        modelBuilder.Entity<JDeliverynoteentryorder>(entity =>
        {
            entity.HasKey(e => e.DlneoId).HasName("PK_DELIVERYNOTEENTRYORDER");

            entity.ToTable("J_DELIVERYNOTEENTRYORDER", "JITTOE");

            entity.HasIndex(e => e.DlneoDeliverynoteentryId, "I_DNOTEENTRY_DNOTEENTRYORDER");

            entity.HasIndex(e => e.DlneoDeliverynoteorderId, "I_DNOTEORDER_DNOTEENTRYORDER");

            entity.HasIndex(e => e.DlneoOrderentryId, "I_ORDERENTRY_DNOTEENTRYORDER");

            entity.HasIndex(e => new { e.DlneoDeliverynoteentryId, e.DlneoDeliverynoteorderId, e.DlneoOrderentryId }, "UN_DLNEO_ENTRYORDER").IsUnique();

            entity.Property(e => e.DlneoId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DLNEO_ID");
            entity.Property(e => e.DlneoAmount)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("DLNEO_AMOUNT");
            entity.Property(e => e.DlneoDeliverynoteentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DLNEO_DELIVERYNOTEENTRY_ID");
            entity.Property(e => e.DlneoDeliverynoteorderId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DLNEO_DELIVERYNOTEORDER_ID");
            entity.Property(e => e.DlneoOrderentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DLNEO_ORDERENTRY_ID");
            entity.Property(e => e.DlneoTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("DLNEO_TCREATION");

            entity.HasOne(d => d.DlneoDeliverynoteentry).WithMany(p => p.JDeliverynoteentryorders)
                .HasForeignKey(d => d.DlneoDeliverynoteentryId)
                .HasConstraintName("FK_DNOTEENTRY_DNOTEENTRYORDER");

            entity.HasOne(d => d.DlneoDeliverynoteorder).WithMany(p => p.JDeliverynoteentryorders)
                .HasForeignKey(d => d.DlneoDeliverynoteorderId)
                .HasConstraintName("FK_DNOTEORDER_DNOTEENTRYORDER");

            entity.HasOne(d => d.DlneoOrderentry).WithMany(p => p.JDeliverynoteentryorders)
                .HasForeignKey(d => d.DlneoOrderentryId)
                .HasConstraintName("FK_ORDERENTRY_DNOTEENTRYORDER");
        });

        modelBuilder.Entity<JDeliverynoteinfo>(entity =>
        {
            entity.HasKey(e => e.DlniId).HasName("PK_DELIVERYNOTEINFO");

            entity.ToTable("J_DELIVERYNOTEINFO", "JITTOE");

            entity.HasIndex(e => e.DlniDeliverynoteId, "I_DLN_DLNINFO");

            entity.HasIndex(e => new { e.DlniDeliverynoteId, e.DlniType, e.DlniKey1, e.DlniKey2, e.DlniKey3 }, "UN_DLNI_INFO").IsUnique();

            entity.Property(e => e.DlniId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DLNI_ID");
            entity.Property(e => e.DlniDeliverynoteId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DLNI_DELIVERYNOTE_ID");
            entity.Property(e => e.DlniKey1)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DLNI_KEY1");
            entity.Property(e => e.DlniKey2)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DLNI_KEY2");
            entity.Property(e => e.DlniKey3)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DLNI_KEY3");
            entity.Property(e => e.DlniStringvalue)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DLNI_STRINGVALUE");
            entity.Property(e => e.DlniTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("DLNI_TCREATION");
            entity.Property(e => e.DlniTimevalue)
                .HasColumnType("DATE")
                .HasColumnName("DLNI_TIMEVALUE");
            entity.Property(e => e.DlniTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("DLNI_TUPDATE");
            entity.Property(e => e.DlniType)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("DLNI_TYPE");

            entity.HasOne(d => d.DlniDeliverynote).WithMany(p => p.JDeliverynoteinfos)
                .HasForeignKey(d => d.DlniDeliverynoteId)
                .HasConstraintName("FK_DLN_DLNINFO");
        });

        modelBuilder.Entity<JDeliverynoteorder>(entity =>
        {
            entity.HasKey(e => e.DlnoId).HasName("PK_DELIVERYNOTEORDER");

            entity.ToTable("J_DELIVERYNOTEORDER", "JITTOE");

            entity.HasIndex(e => e.DlnoDeliverynoteId, "I_DELIVERYNOTE_DELIVNOTEORDER");

            entity.HasIndex(e => e.DlnoOrderId, "I_ORDER_DELIVERYNOTEORDER");

            entity.Property(e => e.DlnoId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DLNO_ID");
            entity.Property(e => e.DlnoDeliverynoteId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DLNO_DELIVERYNOTE_ID");
            entity.Property(e => e.DlnoOrderId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DLNO_ORDER_ID");
            entity.Property(e => e.DlnoOrderno)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DLNO_ORDERNO");
            entity.Property(e => e.DlnoTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("DLNO_TCREATION");

            entity.HasOne(d => d.DlnoDeliverynote).WithMany(p => p.JDeliverynoteorders)
                .HasForeignKey(d => d.DlnoDeliverynoteId)
                .HasConstraintName("FK_DELIVERYNOTE_DELIVNOTEORDER");

            entity.HasOne(d => d.DlnoOrder).WithMany(p => p.JDeliverynoteorders)
                .HasForeignKey(d => d.DlnoOrderId)
                .HasConstraintName("FK_ORDER_DELIVERYNOTEORDER");
        });

        modelBuilder.Entity<JDemand>(entity =>
        {
            entity.HasKey(e => e.DId).HasName("PK_DEMAND");

            entity.ToTable("J_DEMAND", "JITTOE");

            entity.HasIndex(e => e.DCategoryId, "I_DEMANDCATEGORY_DEMAND");

            entity.HasIndex(e => e.DOrderentryId, "I_ORDERENTRY_DEMAND");

            entity.HasIndex(e => e.DOrderId, "I_ORDER_DEMAND");

            entity.HasIndex(e => e.DOthersubjectId, "I_OTHERSUBJECT_DEMAND");

            entity.HasIndex(e => e.DSubjectId, "I_SUBJECT_DEMAND");

            entity.Property(e => e.DId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("D_ID");
            entity.Property(e => e.DAmount)
                .HasPrecision(13)
                .HasColumnName("D_AMOUNT");
            entity.Property(e => e.DCategoryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("D_CATEGORY_ID");
            entity.Property(e => e.DOrderId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("D_ORDER_ID");
            entity.Property(e => e.DOrderentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("D_ORDERENTRY_ID");
            entity.Property(e => e.DOthersubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("D_OTHERSUBJECT_ID");
            entity.Property(e => e.DSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("D_SUBJECT_ID");
            entity.Property(e => e.DTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("D_TCREATION");
            entity.Property(e => e.DTimestamp)
                .HasColumnType("DATE")
                .HasColumnName("D_TIMESTAMP");
            entity.Property(e => e.DUntiltimestamp)
                .HasColumnType("DATE")
                .HasColumnName("D_UNTILTIMESTAMP");

            entity.HasOne(d => d.DCategory).WithMany(p => p.JDemands)
                .HasForeignKey(d => d.DCategoryId)
                .HasConstraintName("FK_DEMANDCATEGORY_DEMAND");

            entity.HasOne(d => d.DOrder).WithMany(p => p.JDemands)
                .HasForeignKey(d => d.DOrderId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_ORDER_DEMAND");

            entity.HasOne(d => d.DOrderentry).WithMany(p => p.JDemands)
                .HasForeignKey(d => d.DOrderentryId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_ORDERENTRY_DEMAND");

            entity.HasOne(d => d.DOthersubject).WithMany(p => p.JDemandDOthersubjects)
                .HasForeignKey(d => d.DOthersubjectId)
                .HasConstraintName("FK_OTHERSUBJECT_DEMAND");

            entity.HasOne(d => d.DSubject).WithMany(p => p.JDemandDSubjects)
                .HasForeignKey(d => d.DSubjectId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SUBJECT_DEMAND");
        });

        modelBuilder.Entity<JDemandcategory>(entity =>
        {
            entity.HasKey(e => e.DcId).HasName("PK_DEMANDCATEGORY");

            entity.ToTable("J_DEMANDCATEGORY", "JITTOE");

            entity.HasIndex(e => e.DcCompanyId, "I_COMPANY_DEMAND");

            entity.HasIndex(e => e.DcKey, "UN_DC_KEY").IsUnique();

            entity.Property(e => e.DcId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DC_ID");
            entity.Property(e => e.DcCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DC_COMPANY_ID");
            entity.Property(e => e.DcDescr)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DC_DESCR");
            entity.Property(e => e.DcKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("DC_KEY");
            entity.Property(e => e.DcTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("DC_TCREATION");
            entity.Property(e => e.DcTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("DC_TUPDATE");

            entity.HasOne(d => d.DcCompany).WithMany(p => p.JDemandcategories)
                .HasForeignKey(d => d.DcCompanyId)
                .HasConstraintName("FK_COMPANY_DEMAND");
        });

        modelBuilder.Entity<JDemandcategoryinfo>(entity =>
        {
            entity.HasKey(e => e.DciId).HasName("PK_DEMANDCATEGORYINFO");

            entity.ToTable("J_DEMANDCATEGORYINFO", "JITTOE");

            entity.HasIndex(e => e.DciDemandcategoryId, "I_DEMANDCATEGORY_DCINFO");

            entity.HasIndex(e => new { e.DciDemandcategoryId, e.DciType, e.DciKey }, "UN_DCI_INFO").IsUnique();

            entity.Property(e => e.DciId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DCI_ID");
            entity.Property(e => e.DciDemandcategoryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DCI_DEMANDCATEGORY_ID");
            entity.Property(e => e.DciIntvalue)
                .HasPrecision(10)
                .HasDefaultValueSql("0  ")
                .HasColumnName("DCI_INTVALUE");
            entity.Property(e => e.DciKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DCI_KEY");
            entity.Property(e => e.DciStringvalue)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasColumnName("DCI_STRINGVALUE");
            entity.Property(e => e.DciTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("DCI_TCREATION");
            entity.Property(e => e.DciTimevalue)
                .HasColumnType("DATE")
                .HasColumnName("DCI_TIMEVALUE");
            entity.Property(e => e.DciTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("DCI_TUPDATE");
            entity.Property(e => e.DciType)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("DCI_TYPE");

            entity.HasOne(d => d.DciDemandcategory).WithMany(p => p.JDemandcategoryinfos)
                .HasForeignKey(d => d.DciDemandcategoryId)
                .HasConstraintName("FK_DEMANDCATEGORY_DCINFO");
        });

        modelBuilder.Entity<JDestlocationCarrier>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("J_DESTLOCATION_CARRIER", "JITTOE");

            entity.HasIndex(e => e.DestlocationId, "I_DESTLOCATION_CARRIER_1");

            entity.HasIndex(e => e.CarrierId, "I_DESTLOCATION_CARRIER_2");

            entity.HasIndex(e => new { e.DestlocationId, e.CarrierId }, "UN_DESTLOCATION_CARRIER").IsUnique();

            entity.Property(e => e.CarrierId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CARRIER_ID");
            entity.Property(e => e.DestlocationId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DESTLOCATION_ID");
            entity.Property(e => e.Tcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TCREATION");

            entity.HasOne(d => d.Carrier).WithMany()
                .HasForeignKey(d => d.CarrierId)
                .HasConstraintName("FK_DESTLOCATION_CARRIER_2");

            entity.HasOne(d => d.Destlocation).WithMany()
                .HasForeignKey(d => d.DestlocationId)
                .HasConstraintName("FK_DESTLOCATION_CARRIER_1");
        });

        modelBuilder.Entity<JDnoteentryDnoteorder>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("J_DNOTEENTRY_DNOTEORDER", "JITTOE");

            entity.HasIndex(e => e.EntryId, "I_DNOTEENTRY_DNOTEORDER_1");

            entity.HasIndex(e => e.OrderId, "I_DNOTEENTRY_DNOTEORDER_2");

            entity.HasIndex(e => new { e.EntryId, e.OrderId }, "UN_DNOTEENTRY_DNOTEORDER").IsUnique();

            entity.Property(e => e.EntryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ENTRY_ID");
            entity.Property(e => e.OrderId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ORDER_ID");
            entity.Property(e => e.Tcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TCREATION");

            entity.HasOne(d => d.Entry).WithMany()
                .HasForeignKey(d => d.EntryId)
                .HasConstraintName("FK_DNOTEENTRY_DNOTEORDER_1");

            entity.HasOne(d => d.Order).WithMany()
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK_DNOTEENTRY_DNOTEORDER_2");
        });

        modelBuilder.Entity<JDoccfg>(entity =>
        {
            entity.HasKey(e => e.DcfId).HasName("PK_DOCCFG");

            entity.ToTable("J_DOCCFG", "JITTOE");

            entity.HasIndex(e => e.DcfCompanyId, "I_COMPANY_DOCCFG");

            entity.HasIndex(e => e.DcfKey, "UN_DCF_KEY").IsUnique();

            entity.Property(e => e.DcfId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DCF_ID");
            entity.Property(e => e.DcfCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DCF_COMPANY_ID");
            entity.Property(e => e.DcfDescr)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DCF_DESCR");
            entity.Property(e => e.DcfKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("DCF_KEY");
            entity.Property(e => e.DcfTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("DCF_TCREATION");
            entity.Property(e => e.DcfTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("DCF_TUPDATE");

            entity.HasOne(d => d.DcfCompany).WithMany(p => p.JDoccfgs)
                .HasForeignKey(d => d.DcfCompanyId)
                .HasConstraintName("FK_COMPANY_DOCCFG");
        });

        modelBuilder.Entity<JDoccfgitem>(entity =>
        {
            entity.HasKey(e => e.DcfiId).HasName("PK_DOCCFGITEM");

            entity.ToTable("J_DOCCFGITEM", "JITTOE");

            entity.HasIndex(e => e.DcfiDoccfgId, "I_DOCCFGITEM_DOCCFG");

            entity.HasIndex(e => e.DcfiDocdefId, "I_DOCDEF_DOCCFGITEM");

            entity.HasIndex(e => e.DcfiPrintitemId, "I_PRINTITEM_DOCCFGITEM");

            entity.HasIndex(e => e.DcfiKey, "UN_DCFI_KEY").IsUnique();

            entity.Property(e => e.DcfiId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DCFI_ID");
            entity.Property(e => e.DcfiDoccfgId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DCFI_DOCCFG_ID");
            entity.Property(e => e.DcfiDocdefId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DCFI_DOCDEF_ID");
            entity.Property(e => e.DcfiEnabled)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("1  ")
                .HasColumnName("DCFI_ENABLED");
            entity.Property(e => e.DcfiKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("DCFI_KEY");
            entity.Property(e => e.DcfiPrintitemId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DCFI_PRINTITEM_ID");
            entity.Property(e => e.DcfiRole)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DCFI_ROLE");
            entity.Property(e => e.DcfiTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("DCFI_TCREATION");
            entity.Property(e => e.DcfiTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("DCFI_TUPDATE");

            entity.HasOne(d => d.DcfiDoccfg).WithMany(p => p.JDoccfgitems)
                .HasForeignKey(d => d.DcfiDoccfgId)
                .HasConstraintName("FK_DOCCFGITEM_DOCCFG");

            entity.HasOne(d => d.DcfiDocdef).WithMany(p => p.JDoccfgitems)
                .HasForeignKey(d => d.DcfiDocdefId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DOCDEF_DOCCFGITEM");

            entity.HasOne(d => d.DcfiPrintitem).WithMany(p => p.JDoccfgitems)
                .HasForeignKey(d => d.DcfiPrintitemId)
                .HasConstraintName("FK_PRINTITEM_DOCCFGITEM");
        });

        modelBuilder.Entity<JDocdef>(entity =>
        {
            entity.HasKey(e => e.DdId).HasName("PK_DOCDEF");

            entity.ToTable("J_DOCDEF", "JITTOE");

            entity.HasIndex(e => e.DdCompanyId, "I_COMPANY_DOCDEF");

            entity.HasIndex(e => e.DdConfigdefId, "I_CONFIGDEF_DOCDEF");

            entity.HasIndex(e => e.DdImageId, "I_IMAGE_DOCDEF");

            entity.HasIndex(e => e.DdPrintitemId, "I_PRINTITEM_DOCDEF");

            entity.HasIndex(e => e.DdKey, "UN_DD_KEY").IsUnique();

            entity.Property(e => e.DdId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DD_ID");
            entity.Property(e => e.DdCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DD_COMPANY_ID");
            entity.Property(e => e.DdConfigdefId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DD_CONFIGDEF_ID");
            entity.Property(e => e.DdConfiguration)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DD_CONFIGURATION");
            entity.Property(e => e.DdDescr)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DD_DESCR");
            entity.Property(e => e.DdDoctype)
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasColumnName("DD_DOCTYPE");
            entity.Property(e => e.DdDriver)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DD_DRIVER");
            entity.Property(e => e.DdImageId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DD_IMAGE_ID");
            entity.Property(e => e.DdKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DD_KEY");
            entity.Property(e => e.DdParams)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DD_PARAMS");
            entity.Property(e => e.DdPrintitemId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DD_PRINTITEM_ID");
            entity.Property(e => e.DdTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("DD_TCREATION");
            entity.Property(e => e.DdTemplate)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DD_TEMPLATE");
            entity.Property(e => e.DdTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("DD_TUPDATE");

            entity.HasOne(d => d.DdCompany).WithMany(p => p.JDocdefs)
                .HasForeignKey(d => d.DdCompanyId)
                .HasConstraintName("FK_COMPANY_DOCDEF");

            entity.HasOne(d => d.DdConfigdef).WithMany(p => p.JDocdefs)
                .HasForeignKey(d => d.DdConfigdefId)
                .HasConstraintName("FK_CONFIGDEF_DOCDEF");

            entity.HasOne(d => d.DdImage).WithMany(p => p.JDocdefs)
                .HasForeignKey(d => d.DdImageId)
                .HasConstraintName("FK_IMAGE_DOCDEF");

            entity.HasOne(d => d.DdPrintitem).WithMany(p => p.JDocdefs)
                .HasForeignKey(d => d.DdPrintitemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRINTITEM_DOCDEF");
        });

        modelBuilder.Entity<JDocdefpropertyset>(entity =>
        {
            entity.HasKey(e => e.DdpsId).HasName("PK_DOCDEFPROPERTYSET");

            entity.ToTable("J_DOCDEFPROPERTYSET", "JITTOE");

            entity.HasIndex(e => e.DdpsDocdefId, "I_DOCDEF_DDPSET");

            entity.HasIndex(e => e.DdpsPropertysetId, "I_PROPERTYSET_DDPSET");

            entity.HasIndex(e => new { e.DdpsDocdefId, e.DdpsPropertysetId }, "UN_DDPS_KEY").IsUnique();

            entity.Property(e => e.DdpsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DDPS_ID");
            entity.Property(e => e.DdpsDocdefId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DDPS_DOCDEF_ID");
            entity.Property(e => e.DdpsPropertysetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DDPS_PROPERTYSET_ID");
            entity.Property(e => e.DdpsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("DDPS_TCREATION");

            entity.HasOne(d => d.DdpsDocdef).WithMany(p => p.JDocdefpropertysets)
                .HasForeignKey(d => d.DdpsDocdefId)
                .HasConstraintName("FK_DOCDEF_DDPSET");

            entity.HasOne(d => d.DdpsPropertyset).WithMany(p => p.JDocdefpropertysets)
                .HasForeignKey(d => d.DdpsPropertysetId)
                .HasConstraintName("FK_PROPERTYSET_DDPSET");
        });

        modelBuilder.Entity<JEdicfg>(entity =>
        {
            entity.HasKey(e => e.EcId).HasName("PK_EDICFG");

            entity.ToTable("J_EDICFG", "JITTOE");

            entity.HasIndex(e => e.EcCompanyId, "I_COMPANY_EDICFG");

            entity.HasIndex(e => e.EcKey, "UN_EC_KEY").IsUnique();

            entity.Property(e => e.EcId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("EC_ID");
            entity.Property(e => e.EcCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("EC_COMPANY_ID");
            entity.Property(e => e.EcDescr)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EC_DESCR");
            entity.Property(e => e.EcDosendedi1)
                .HasPrecision(1)
                .HasColumnName("EC_DOSENDEDI1");
            entity.Property(e => e.EcDosendedi2)
                .HasPrecision(1)
                .HasColumnName("EC_DOSENDEDI2");
            entity.Property(e => e.EcDosendedi3)
                .HasPrecision(1)
                .HasColumnName("EC_DOSENDEDI3");
            entity.Property(e => e.EcDosendedi4)
                .HasPrecision(1)
                .HasColumnName("EC_DOSENDEDI4");
            entity.Property(e => e.EcEdiconfiguration1)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("EC_EDICONFIGURATION1");
            entity.Property(e => e.EcEdiconfiguration2)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("EC_EDICONFIGURATION2");
            entity.Property(e => e.EcEdiconfiguration3)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("EC_EDICONFIGURATION3");
            entity.Property(e => e.EcEdiconfiguration4)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("EC_EDICONFIGURATION4");
            entity.Property(e => e.EcEdirole1)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("EC_EDIROLE1");
            entity.Property(e => e.EcEdirole2)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("EC_EDIROLE2");
            entity.Property(e => e.EcEdirole3)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("EC_EDIROLE3");
            entity.Property(e => e.EcEdirole4)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("EC_EDIROLE4");
            entity.Property(e => e.EcKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("EC_KEY");
            entity.Property(e => e.EcTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("EC_TCREATION");
            entity.Property(e => e.EcTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("EC_TUPDATE");

            entity.HasOne(d => d.EcCompany).WithMany(p => p.JEdicfgs)
                .HasForeignKey(d => d.EcCompanyId)
                .HasConstraintName("FK_COMPANY_EDICFG");
        });

        modelBuilder.Entity<JEdicfgitem>(entity =>
        {
            entity.HasKey(e => e.EcfiId).HasName("PK_EDICFGITEM");

            entity.ToTable("J_EDICFGITEM", "JITTOE");

            entity.HasIndex(e => e.EcfiEdicfgId, "I_EDICFGITEM_EDICFG");

            entity.HasIndex(e => e.EcfiEdidefId, "I_EDIDEF_EDICFGITEM");

            entity.HasIndex(e => e.EcfiConnectionId, "I_TRANSFERCONN_EDICFGITEM");

            entity.HasIndex(e => e.EcfiKey, "UN_ECFI_KEY").IsUnique();

            entity.Property(e => e.EcfiId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ECFI_ID");
            entity.Property(e => e.EcfiConnectionId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ECFI_CONNECTION_ID");
            entity.Property(e => e.EcfiEdicfgId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ECFI_EDICFG_ID");
            entity.Property(e => e.EcfiEdidefId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ECFI_EDIDEF_ID");
            entity.Property(e => e.EcfiEnabled)
                .HasPrecision(1)
                .HasColumnName("ECFI_ENABLED");
            entity.Property(e => e.EcfiKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("ECFI_KEY");
            entity.Property(e => e.EcfiRole)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ECFI_ROLE");
            entity.Property(e => e.EcfiTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("ECFI_TCREATION");
            entity.Property(e => e.EcfiTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("ECFI_TUPDATE");

            entity.HasOne(d => d.EcfiConnection).WithMany(p => p.JEdicfgitems)
                .HasForeignKey(d => d.EcfiConnectionId)
                .HasConstraintName("FK_TRANSFERCONN_EDICFGITEM");

            entity.HasOne(d => d.EcfiEdicfg).WithMany(p => p.JEdicfgitems)
                .HasForeignKey(d => d.EcfiEdicfgId)
                .HasConstraintName("FK_EDICFGITEM_EDICFG");

            entity.HasOne(d => d.EcfiEdidef).WithMany(p => p.JEdicfgitems)
                .HasForeignKey(d => d.EcfiEdidefId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EDIDEF_EDICFGITEM");
        });

        modelBuilder.Entity<JEdidef>(entity =>
        {
            entity.HasKey(e => e.EdId).HasName("PK_EDIDEF");

            entity.ToTable("J_EDIDEF", "JITTOE");

            entity.HasIndex(e => e.EdCompanyId, "I_COMPANY_EDIDEF");

            entity.HasIndex(e => e.EdConfigdefId, "I_CONFIGDEF_EDIDEF");

            entity.HasIndex(e => e.EdConnectionId, "I_TRANSFERCONN_EDIDEF");

            entity.HasIndex(e => e.EdKey, "UN_ED_KEY").IsUnique();

            entity.Property(e => e.EdId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ED_ID");
            entity.Property(e => e.EdCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ED_COMPANY_ID");
            entity.Property(e => e.EdConfigdefId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ED_CONFIGDEF_ID");
            entity.Property(e => e.EdConfiguration)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("ED_CONFIGURATION");
            entity.Property(e => e.EdConnectionId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ED_CONNECTION_ID");
            entity.Property(e => e.EdDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ED_DESCR");
            entity.Property(e => e.EdDriver)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ED_DRIVER");
            entity.Property(e => e.EdEditype)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasColumnName("ED_EDITYPE");
            entity.Property(e => e.EdKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("ED_KEY");
            entity.Property(e => e.EdParams)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("ED_PARAMS");
            entity.Property(e => e.EdTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("ED_TCREATION");
            entity.Property(e => e.EdTemplate)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ED_TEMPLATE");
            entity.Property(e => e.EdTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("ED_TUPDATE");

            entity.HasOne(d => d.EdCompany).WithMany(p => p.JEdidefs)
                .HasForeignKey(d => d.EdCompanyId)
                .HasConstraintName("FK_COMPANY_EDIDEF");

            entity.HasOne(d => d.EdConfigdef).WithMany(p => p.JEdidefs)
                .HasForeignKey(d => d.EdConfigdefId)
                .HasConstraintName("FK_CONFIGDEF_EDIDEF");

            entity.HasOne(d => d.EdConnection).WithMany(p => p.JEdidefs)
                .HasForeignKey(d => d.EdConnectionId)
                .HasConstraintName("FK_TRANSFERCONN_EDIDEF");
        });

        modelBuilder.Entity<JEdidefpropertyset>(entity =>
        {
            entity.HasKey(e => e.EdpsId).HasName("PK_EDIDEFPROPERTYSET");

            entity.ToTable("J_EDIDEFPROPERTYSET", "JITTOE");

            entity.HasIndex(e => e.EdpsEdidefId, "I_EDIDEF_EPSET");

            entity.HasIndex(e => e.EdpsPropertysetId, "I_PROPERTYSET_EPSET");

            entity.HasIndex(e => new { e.EdpsEdidefId, e.EdpsPropertysetId }, "UN_EDPS_KEY").IsUnique();

            entity.Property(e => e.EdpsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("EDPS_ID");
            entity.Property(e => e.EdpsEdidefId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("EDPS_EDIDEF_ID");
            entity.Property(e => e.EdpsPropertysetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("EDPS_PROPERTYSET_ID");
            entity.Property(e => e.EdpsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("EDPS_TCREATION");

            entity.HasOne(d => d.EdpsEdidef).WithMany(p => p.JEdidefpropertysets)
                .HasForeignKey(d => d.EdpsEdidefId)
                .HasConstraintName("FK_EDIDEF_EPSET");

            entity.HasOne(d => d.EdpsPropertyset).WithMany(p => p.JEdidefpropertysets)
                .HasForeignKey(d => d.EdpsPropertysetId)
                .HasConstraintName("FK_PROPERTYSET_EPSET");
        });

        modelBuilder.Entity<JErpentity>(entity =>
        {
            entity.HasKey(e => e.EeId).HasName("PK_ERPENTITY");

            entity.ToTable("J_ERPENTITY", "JITTOE");

            entity.HasIndex(e => e.EeErpentitysetId, "I_ERPENTITYSET_ERPENTITY");

            entity.HasIndex(e => e.EeErpentitytypeId, "I_ERPENTITYTYPE_ERPENTITY");

            entity.HasIndex(e => e.EeKey, "UN_EE_KEY").IsUnique();

            entity.HasIndex(e => new { e.EeErpentitytypeId, e.EeName }, "UN_EE_NAME").IsUnique();

            entity.Property(e => e.EeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("EE_ID");
            entity.Property(e => e.EeDescr)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("EE_DESCR");
            entity.Property(e => e.EeErpentitysetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("EE_ERPENTITYSET_ID");
            entity.Property(e => e.EeErpentitytypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("EE_ERPENTITYTYPE_ID");
            entity.Property(e => e.EeKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("EE_KEY");
            entity.Property(e => e.EeName)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("EE_NAME");
            entity.Property(e => e.EeTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("EE_TCREATION");
            entity.Property(e => e.EeTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("EE_TUPDATE");
            entity.Property(e => e.EeValue)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasColumnName("EE_VALUE");

            entity.HasOne(d => d.EeErpentityset).WithMany(p => p.JErpentities)
                .HasForeignKey(d => d.EeErpentitysetId)
                .HasConstraintName("FK_ERPENTITYSET_ERPENTITY");

            entity.HasOne(d => d.EeErpentitytype).WithMany(p => p.JErpentities)
                .HasForeignKey(d => d.EeErpentitytypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ERPENTITYTYPE_ERPENTITY");
        });

        modelBuilder.Entity<JErpentityset>(entity =>
        {
            entity.HasKey(e => e.EesId).HasName("PK_ERPENTITYSET");

            entity.ToTable("J_ERPENTITYSET", "JITTOE");

            entity.HasIndex(e => e.EesKey, "UN_EES_KEY").IsUnique();

            entity.Property(e => e.EesId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("EES_ID");
            entity.Property(e => e.EesDescr)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("EES_DESCR");
            entity.Property(e => e.EesKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("EES_KEY");
            entity.Property(e => e.EesTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("EES_TCREATION");
            entity.Property(e => e.EesTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("EES_TUPDATE");
        });

        modelBuilder.Entity<JErpentitytype>(entity =>
        {
            entity.HasKey(e => e.EetId).HasName("PK_ERPENTITYTYPE");

            entity.ToTable("J_ERPENTITYTYPE", "JITTOE");

            entity.HasIndex(e => e.EetErpentitytypesetId, "I_ERPETYPESET_ERPETYPE");

            entity.HasIndex(e => e.EetKey, "UN_EET_KEY").IsUnique();

            entity.Property(e => e.EetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("EET_ID");
            entity.Property(e => e.EetDescr)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("EET_DESCR");
            entity.Property(e => e.EetErpentitytypesetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("EET_ERPENTITYTYPESET_ID");
            entity.Property(e => e.EetKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("EET_KEY");
            entity.Property(e => e.EetTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("EET_TCREATION");
            entity.Property(e => e.EetTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("EET_TUPDATE");

            entity.HasOne(d => d.EetErpentitytypeset).WithMany(p => p.JErpentitytypes)
                .HasForeignKey(d => d.EetErpentitytypesetId)
                .HasConstraintName("FK_ERPETYPESET_ERPETYPE");
        });

        modelBuilder.Entity<JErpentitytypeset>(entity =>
        {
            entity.HasKey(e => e.EetsId).HasName("PK_ERPENTITYTYPESET");

            entity.ToTable("J_ERPENTITYTYPESET", "JITTOE");

            entity.HasIndex(e => e.EetsKey, "UN_EETS_KEY").IsUnique();

            entity.Property(e => e.EetsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("EETS_ID");
            entity.Property(e => e.EetsDescr)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("EETS_DESCR");
            entity.Property(e => e.EetsKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("EETS_KEY");
            entity.Property(e => e.EetsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("EETS_TCREATION");
            entity.Property(e => e.EetsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("EETS_TUPDATE");
        });

        modelBuilder.Entity<JErptranshist>(entity =>
        {
            entity.HasKey(e => e.EthId).HasName("PK_ERPTRANSHIST");

            entity.ToTable("J_ERPTRANSHIST", "JITTOE");

            entity.HasIndex(e => e.EthCompanyId, "I_COMPANY_ERPTRANSHIST");

            entity.Property(e => e.EthId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ETH_ID");
            entity.Property(e => e.EthCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ETH_COMPANY_ID");
            entity.Property(e => e.EthDate)
                .HasColumnType("DATE")
                .HasColumnName("ETH_DATE");
            entity.Property(e => e.EthLoc)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("ETH_LOC");
            entity.Property(e => e.EthNumber)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ETH_NUMBER");
            entity.Property(e => e.EthPart)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ETH_PART");
            entity.Property(e => e.EthRemarks)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("ETH_REMARKS");
            entity.Property(e => e.EthTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("ETH_TCREATION");
            entity.Property(e => e.EthType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ETH_TYPE");

            entity.HasOne(d => d.EthCompany).WithMany(p => p.JErptranshists)
                .HasForeignKey(d => d.EthCompanyId)
                .HasConstraintName("FK_COMPANY_ERPTRANSHIST");
        });

        modelBuilder.Entity<JFailuredetail>(entity =>
        {
            entity.HasKey(e => e.FdId).HasName("PK_FAILUREDETAIL");

            entity.ToTable("J_FAILUREDETAIL", "JITTOE");

            entity.HasIndex(e => e.FdFdetailsetId, "I_FDETAILSET_FDETAIL");

            entity.HasIndex(e => new { e.FdFdetailsetId, e.FdCode }, "UN_FD_CODE").IsUnique();

            entity.Property(e => e.FdId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("FD_ID");
            entity.Property(e => e.FdCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FD_CODE");
            entity.Property(e => e.FdDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FD_DESCR");
            entity.Property(e => e.FdFdetailsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("FD_FDETAILSET_ID");
            entity.Property(e => e.FdTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("FD_TCREATION");

            entity.HasOne(d => d.FdFdetailset).WithMany(p => p.JFailuredetails)
                .HasForeignKey(d => d.FdFdetailsetId)
                .HasConstraintName("FK_FDETAILSET_FDETAIL");
        });

        modelBuilder.Entity<JFailuredetailset>(entity =>
        {
            entity.HasKey(e => e.FdsId).HasName("PK_FAILUREDETAILSET");

            entity.ToTable("J_FAILUREDETAILSET", "JITTOE");

            entity.HasIndex(e => e.FdsCompanyId, "I_COMPANY_FAILUREDETAILSET");

            entity.HasIndex(e => e.FdsKey, "UN_FDS_KEY").IsUnique();

            entity.Property(e => e.FdsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("FDS_ID");
            entity.Property(e => e.FdsCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("FDS_COMPANY_ID");
            entity.Property(e => e.FdsDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FDS_DESCR");
            entity.Property(e => e.FdsKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("FDS_KEY");
            entity.Property(e => e.FdsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("FDS_TCREATION");
            entity.Property(e => e.FdsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("FDS_TUPDATE");

            entity.HasOne(d => d.FdsCompany).WithMany(p => p.JFailuredetailsets)
                .HasForeignKey(d => d.FdsCompanyId)
                .HasConstraintName("FK_COMPANY_FAILUREDETAILSET");
        });

        modelBuilder.Entity<JFailurereason>(entity =>
        {
            entity.HasKey(e => e.FrId).HasName("PK_FAILUREREASON");

            entity.ToTable("J_FAILUREREASON", "JITTOE");

            entity.HasIndex(e => e.FrFdetailsetId, "I_FDETAILSET_FREASON");

            entity.HasIndex(e => e.FrFreasonsetId, "I_FREASONSET_FREASON");

            entity.HasIndex(e => new { e.FrFreasonsetId, e.FrCode, e.FrInvalidid }, "UN_FR_CODE").IsUnique();

            entity.HasIndex(e => new { e.FrKey, e.FrInvalidid }, "UN_FR_KEY").IsUnique();

            entity.Property(e => e.FrId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("FR_ID");
            entity.Property(e => e.FrCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FR_CODE");
            entity.Property(e => e.FrDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FR_DESCR");
            entity.Property(e => e.FrFdetailsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("FR_FDETAILSET_ID");
            entity.Property(e => e.FrFreasonsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("FR_FREASONSET_ID");
            entity.Property(e => e.FrInvalidid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("FR_INVALIDID");
            entity.Property(e => e.FrKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("FR_KEY");
            entity.Property(e => e.FrQualityclass)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FR_QUALITYCLASS");
            entity.Property(e => e.FrTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("FR_TCREATION");
            entity.Property(e => e.FrTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("FR_TUPDATE");
            entity.Property(e => e.FrTvalidfrom)
                .HasColumnType("DATE")
                .HasColumnName("FR_TVALIDFROM");
            entity.Property(e => e.FrTvaliduntil)
                .HasColumnType("DATE")
                .HasColumnName("FR_TVALIDUNTIL");

            entity.HasOne(d => d.FrFdetailset).WithMany(p => p.JFailurereasons)
                .HasForeignKey(d => d.FrFdetailsetId)
                .HasConstraintName("FK_FDETAILSET_FREASON");

            entity.HasOne(d => d.FrFreasonset).WithMany(p => p.JFailurereasons)
                .HasForeignKey(d => d.FrFreasonsetId)
                .HasConstraintName("FK_FREASONSET_FREASON");
        });

        modelBuilder.Entity<JFailurereasonclass>(entity =>
        {
            entity.HasKey(e => e.FrcId).HasName("PK_FAILUREREASONCLASS");

            entity.ToTable("J_FAILUREREASONCLASS", "JITTOE");

            entity.HasIndex(e => e.FrcCompanyId, "I_COMPANY_FRCLASS");

            entity.HasIndex(e => e.FrcKey, "UN_FRC_KEY").IsUnique();

            entity.Property(e => e.FrcId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("FRC_ID");
            entity.Property(e => e.FrcCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("FRC_COMPANY_ID");
            entity.Property(e => e.FrcDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FRC_DESCR");
            entity.Property(e => e.FrcKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("FRC_KEY");
            entity.Property(e => e.FrcTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("FRC_TCREATION");
            entity.Property(e => e.FrcTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("FRC_TUPDATE");

            entity.HasOne(d => d.FrcCompany).WithMany(p => p.JFailurereasonclasses)
                .HasForeignKey(d => d.FrcCompanyId)
                .HasConstraintName("FK_COMPANY_FRCLASS");
        });

        modelBuilder.Entity<JFailurereasonclassmember>(entity =>
        {
            entity.HasKey(e => e.FrcmId).HasName("PK_FAILUREREASONCLASSMEMBER");

            entity.ToTable("J_FAILUREREASONCLASSMEMBER", "JITTOE");

            entity.HasIndex(e => e.FrcmFailurereasonId, "I_FAILUREREASON_FRCMEMBER");

            entity.HasIndex(e => e.FrcmFailurereasonclassId, "I_FRC_FRCMEMBER");

            entity.HasIndex(e => new { e.FrcmFailurereasonId, e.FrcmFailurereasonclassId }, "UN_FRCM_KEY").IsUnique();

            entity.Property(e => e.FrcmId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("FRCM_ID");
            entity.Property(e => e.FrcmFailurereasonId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("FRCM_FAILUREREASON_ID");
            entity.Property(e => e.FrcmFailurereasonclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("FRCM_FAILUREREASONCLASS_ID");
            entity.Property(e => e.FrcmTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("FRCM_TCREATION");
            entity.Property(e => e.FrcmTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("FRCM_TUPDATE");

            entity.HasOne(d => d.FrcmFailurereason).WithMany(p => p.JFailurereasonclassmembers)
                .HasForeignKey(d => d.FrcmFailurereasonId)
                .HasConstraintName("FK_FAILUREREASON_FRCMEMBER");

            entity.HasOne(d => d.FrcmFailurereasonclass).WithMany(p => p.JFailurereasonclassmembers)
                .HasForeignKey(d => d.FrcmFailurereasonclassId)
                .HasConstraintName("FK_FRC_FRCMEMBER");
        });

        modelBuilder.Entity<JFailurereasonset>(entity =>
        {
            entity.HasKey(e => e.FrsId).HasName("PK_FAILUREREASONSET");

            entity.ToTable("J_FAILUREREASONSET", "JITTOE");

            entity.HasIndex(e => e.FrsCompanyId, "I_COMPANY_FREASONSET");

            entity.HasIndex(e => e.FrsKey, "UN_FRS_KEY").IsUnique();

            entity.Property(e => e.FrsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("FRS_ID");
            entity.Property(e => e.FrsCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("FRS_COMPANY_ID");
            entity.Property(e => e.FrsDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FRS_DESCR");
            entity.Property(e => e.FrsKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("FRS_KEY");
            entity.Property(e => e.FrsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("FRS_TCREATION");
            entity.Property(e => e.FrsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("FRS_TUPDATE");

            entity.HasOne(d => d.FrsCompany).WithMany(p => p.JFailurereasonsets)
                .HasForeignKey(d => d.FrsCompanyId)
                .HasConstraintName("FK_COMPANY_FREASONSET");
        });

        modelBuilder.Entity<JFile>(entity =>
        {
            entity.HasKey(e => e.FiId).HasName("PK_FILE");

            entity.ToTable("J_FILE", "JITTOE");

            entity.HasIndex(e => e.FiFilesetId, "I_FILESET_FILE");

            entity.HasIndex(e => new { e.FiKey, e.FiDeletionid }, "UN_FI_KEY").IsUnique();

            entity.Property(e => e.FiId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("FI_ID");
            entity.Property(e => e.FiData)
                .HasColumnType("LONG RAW")
                .HasColumnName("FI_DATA");
            entity.Property(e => e.FiDatasize)
                .HasPrecision(9)
                .HasColumnName("FI_DATASIZE");
            entity.Property(e => e.FiDeletionid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("FI_DELETIONID");
            entity.Property(e => e.FiDescr)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("FI_DESCR");
            entity.Property(e => e.FiEncoding)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FI_ENCODING");
            entity.Property(e => e.FiFilename)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("FI_FILENAME");
            entity.Property(e => e.FiFilesetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("FI_FILESET_ID");
            entity.Property(e => e.FiKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("FI_KEY");
            entity.Property(e => e.FiTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("FI_TCREATION");
            entity.Property(e => e.FiTdeletion)
                .HasColumnType("DATE")
                .HasColumnName("FI_TDELETION");
            entity.Property(e => e.FiTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("FI_TUPDATE");

            entity.HasOne(d => d.FiFileset).WithMany(p => p.JFiles)
                .HasForeignKey(d => d.FiFilesetId)
                .HasConstraintName("FK_FILESET_FILE");
        });

        modelBuilder.Entity<JFileset>(entity =>
        {
            entity.HasKey(e => e.FisId).HasName("PK_FILESET");

            entity.ToTable("J_FILESET", "JITTOE");

            entity.HasIndex(e => e.FisKey, "UN_FIS_KEY").IsUnique();

            entity.Property(e => e.FisId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("FIS_ID");
            entity.Property(e => e.FisDescr)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("FIS_DESCR");
            entity.Property(e => e.FisKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("FIS_KEY");
            entity.Property(e => e.FisTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("FIS_TCREATION");
            entity.Property(e => e.FisTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("FIS_TUPDATE");
        });

        modelBuilder.Entity<JFreasongroup>(entity =>
        {
            entity.HasKey(e => e.FrgId).HasName("PK_FREASONGROUP");

            entity.ToTable("J_FREASONGROUP", "JITTOE");

            entity.HasIndex(e => e.FrgCompanyId, "I_COMPANY_FREASONGOUP");

            entity.HasIndex(e => e.FrgFreasonsetId, "I_FREASONSET_FREASONGROUP");

            entity.HasIndex(e => new { e.FrgKey, e.FrgInvalidid }, "UN_FRG_KEY").IsUnique();

            entity.Property(e => e.FrgId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("FRG_ID");
            entity.Property(e => e.FrgCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("FRG_COMPANY_ID");
            entity.Property(e => e.FrgDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FRG_DESCR");
            entity.Property(e => e.FrgFreasonsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("FRG_FREASONSET_ID");
            entity.Property(e => e.FrgHoldsgroups)
                .HasPrecision(1)
                .HasColumnName("FRG_HOLDSGROUPS");
            entity.Property(e => e.FrgHoldsreasons)
                .HasPrecision(1)
                .HasColumnName("FRG_HOLDSREASONS");
            entity.Property(e => e.FrgInvalidid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("FRG_INVALIDID");
            entity.Property(e => e.FrgKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("FRG_KEY");
            entity.Property(e => e.FrgTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("FRG_TCREATION");
            entity.Property(e => e.FrgTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("FRG_TUPDATE");
            entity.Property(e => e.FrgTvalidfrom)
                .HasColumnType("DATE")
                .HasColumnName("FRG_TVALIDFROM");
            entity.Property(e => e.FrgTvaliduntil)
                .HasColumnType("DATE")
                .HasColumnName("FRG_TVALIDUNTIL");

            entity.HasOne(d => d.FrgCompany).WithMany(p => p.JFreasongroups)
                .HasForeignKey(d => d.FrgCompanyId)
                .HasConstraintName("FK_COMPANY_FREASONGOUP");

            entity.HasOne(d => d.FrgFreasonset).WithMany(p => p.JFreasongroups)
                .HasForeignKey(d => d.FrgFreasonsetId)
                .HasConstraintName("FK_FREASONSET_FREASONGROUP");
        });

        modelBuilder.Entity<JFreasongroupgmember>(entity =>
        {
            entity.HasKey(e => e.FrggmId).HasName("PK_FREASONGROUPGMEMBER");

            entity.ToTable("J_FREASONGROUPGMEMBER", "JITTOE");

            entity.HasIndex(e => e.FrggmFreasongroupId, "I_FRGROUP_FRGGMEMBER");

            entity.HasIndex(e => e.FrggmMemberfreasongroupId, "I_MEMBERFRGROUP_FRGGMEMBER");

            entity.HasIndex(e => new { e.FrggmFreasongroupId, e.FrggmMemberfreasongroupId }, "UN_FRGGM_KEY").IsUnique();

            entity.Property(e => e.FrggmId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("FRGGM_ID");
            entity.Property(e => e.FrggmFreasongroupId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("FRGGM_FREASONGROUP_ID");
            entity.Property(e => e.FrggmMemberfreasongroupId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("FRGGM_MEMBERFREASONGROUP_ID");
            entity.Property(e => e.FrggmTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("FRGGM_TCREATION");
            entity.Property(e => e.FrggmTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("FRGGM_TUPDATE");

            entity.HasOne(d => d.FrggmFreasongroup).WithMany(p => p.JFreasongroupgmemberFrggmFreasongroups)
                .HasForeignKey(d => d.FrggmFreasongroupId)
                .HasConstraintName("FK_FRGROUP_FRGGMEMBER");

            entity.HasOne(d => d.FrggmMemberfreasongroup).WithMany(p => p.JFreasongroupgmemberFrggmMemberfreasongroups)
                .HasForeignKey(d => d.FrggmMemberfreasongroupId)
                .HasConstraintName("FK_MEMBERFRGROUP_FRGGMEMBER");
        });

        modelBuilder.Entity<JFreasongroupmember>(entity =>
        {
            entity.HasKey(e => e.FrgmId).HasName("PK_FREASONGROUPMEMBER");

            entity.ToTable("J_FREASONGROUPMEMBER", "JITTOE");

            entity.HasIndex(e => e.FrgmFailurereasonId, "I_FAILUREREASON_FRGMEMBER");

            entity.HasIndex(e => e.FrgmFreasongroupId, "I_FRG_FRGMEMBER");

            entity.HasIndex(e => new { e.FrgmFailurereasonId, e.FrgmFreasongroupId }, "UN_FRGM_KEY").IsUnique();

            entity.Property(e => e.FrgmId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("FRGM_ID");
            entity.Property(e => e.FrgmFailurereasonId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("FRGM_FAILUREREASON_ID");
            entity.Property(e => e.FrgmFreasongroupId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("FRGM_FREASONGROUP_ID");
            entity.Property(e => e.FrgmTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("FRGM_TCREATION");
            entity.Property(e => e.FrgmTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("FRGM_TUPDATE");

            entity.HasOne(d => d.FrgmFailurereason).WithMany(p => p.JFreasongroupmembers)
                .HasForeignKey(d => d.FrgmFailurereasonId)
                .HasConstraintName("FK_FAILUREREASON_FRGMEMBER");

            entity.HasOne(d => d.FrgmFreasongroup).WithMany(p => p.JFreasongroupmembers)
                .HasForeignKey(d => d.FrgmFreasongroupId)
                .HasConstraintName("FK_FRG_FRGMEMBER");
        });

        modelBuilder.Entity<JGroup>(entity =>
        {
            entity.HasKey(e => e.GId).HasName("PK_GROUP");

            entity.ToTable("J_GROUP", "JITTOE");

            entity.HasIndex(e => e.GGroupsetId, "I_GROUPSET_GROUP");

            entity.HasIndex(e => e.GShortname, "UN_G_SHORTNAME").IsUnique();

            entity.Property(e => e.GId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("G_ID");
            entity.Property(e => e.GDescr)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("G_DESCR");
            entity.Property(e => e.GGroupsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("G_GROUPSET_ID");
            entity.Property(e => e.GShortname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("G_SHORTNAME");
            entity.Property(e => e.GTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("G_TCREATION");
            entity.Property(e => e.GTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("G_TUPDATE");

            entity.HasOne(d => d.GGroupset).WithMany(p => p.JGroups)
                .HasForeignKey(d => d.GGroupsetId)
                .HasConstraintName("FK_GROUPSET_GROUP");
        });

        modelBuilder.Entity<JGroupmember>(entity =>
        {
            entity.HasKey(e => e.GmId).HasName("PK_GROUPMEMBER");

            entity.ToTable("J_GROUPMEMBER", "JITTOE");

            entity.HasIndex(e => e.GmGroupId, "I_GROUP_GROUPMEMBER");

            entity.HasIndex(e => e.GmUserId, "I_USER_GROUPMEMBER");

            entity.HasIndex(e => new { e.GmGroupId, e.GmUserId }, "UN_GM_GROUP_MEMBER").IsUnique();

            entity.Property(e => e.GmId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("GM_ID");
            entity.Property(e => e.GmGroupId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("GM_GROUP_ID");
            entity.Property(e => e.GmTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("GM_TCREATION");
            entity.Property(e => e.GmUserId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("GM_USER_ID");

            entity.HasOne(d => d.GmGroup).WithMany(p => p.JGroupmembers)
                .HasForeignKey(d => d.GmGroupId)
                .HasConstraintName("FK_GROUP_GROUPMEMBER");

            entity.HasOne(d => d.GmUser).WithMany(p => p.JGroupmembers)
                .HasForeignKey(d => d.GmUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_USER_GROUPMEMBER");
        });

        modelBuilder.Entity<JGroupset>(entity =>
        {
            entity.HasKey(e => e.GsId).HasName("PK_GROUPSET");

            entity.ToTable("J_GROUPSET", "JITTOE");

            entity.HasIndex(e => e.GsCompanyId, "I_COMPANY_GROUPSET");

            entity.HasIndex(e => e.GsKey, "UN_GS_KEY").IsUnique();

            entity.Property(e => e.GsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("GS_ID");
            entity.Property(e => e.GsCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("GS_COMPANY_ID");
            entity.Property(e => e.GsDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("GS_DESCR");
            entity.Property(e => e.GsKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("GS_KEY");
            entity.Property(e => e.GsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("GS_TCREATION");
            entity.Property(e => e.GsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("GS_TUPDATE");

            entity.HasOne(d => d.GsCompany).WithMany(p => p.JGroupsets)
                .HasForeignKey(d => d.GsCompanyId)
                .HasConstraintName("FK_COMPANY_GROUPSET");
        });

        modelBuilder.Entity<JHelpkey>(entity =>
        {
            entity.HasKey(e => e.HkId).HasName("PK_HELPKEY");

            entity.ToTable("J_HELPKEY", "JITTOE");

            entity.HasIndex(e => e.HkHelpkeysetId, "I_HELPKEYSET_HELPKEY");

            entity.HasIndex(e => e.HkKey, "UN_HK_KEY").IsUnique();

            entity.Property(e => e.HkId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("HK_ID");
            entity.Property(e => e.HkDescr)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("HK_DESCR");
            entity.Property(e => e.HkEnabled)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("1  ")
                .HasColumnName("HK_ENABLED");
            entity.Property(e => e.HkHelpkeysetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("HK_HELPKEYSET_ID");
            entity.Property(e => e.HkKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("HK_KEY");
            entity.Property(e => e.HkTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("HK_TCREATION");
            entity.Property(e => e.HkTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("HK_TUPDATE");

            entity.HasOne(d => d.HkHelpkeyset).WithMany(p => p.JHelpkeys)
                .HasForeignKey(d => d.HkHelpkeysetId)
                .HasConstraintName("FK_HELPKEYSET_HELPKEY");
        });

        modelBuilder.Entity<JHelpkeyset>(entity =>
        {
            entity.HasKey(e => e.HksId).HasName("PK_HELPKEYSET");

            entity.ToTable("J_HELPKEYSET", "JITTOE");

            entity.HasIndex(e => e.HksKey, "UN_HKS_KEY").IsUnique();

            entity.Property(e => e.HksId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("HKS_ID");
            entity.Property(e => e.HksDescr)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("HKS_DESCR");
            entity.Property(e => e.HksKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("HKS_KEY");
            entity.Property(e => e.HksTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("HKS_TCREATION");
            entity.Property(e => e.HksTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("HKS_TUPDATE");
        });

        modelBuilder.Entity<JHelpmap>(entity =>
        {
            entity.HasKey(e => e.HmId).HasName("PK_HELPMAP");

            entity.ToTable("J_HELPMAP", "JITTOE");

            entity.HasIndex(e => e.HmKey, "UN_HM_KEY").IsUnique();

            entity.Property(e => e.HmId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("HM_ID");
            entity.Property(e => e.HmDescr)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("HM_DESCR");
            entity.Property(e => e.HmKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("HM_KEY");
            entity.Property(e => e.HmTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("HM_TCREATION");
            entity.Property(e => e.HmTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("HM_TUPDATE");
        });

        modelBuilder.Entity<JHelpmapentry>(entity =>
        {
            entity.HasKey(e => e.HmeId).HasName("PK_HELPMAPENTRY");

            entity.ToTable("J_HELPMAPENTRY", "JITTOE");

            entity.HasIndex(e => e.HmeHelpkeyId, "I_HELPKEY_HMENTRY");

            entity.HasIndex(e => e.HmeHelpmapId, "I_HELPMAP_HMENTRY");

            entity.HasIndex(e => e.HmeHelpproviderId, "I_HELPPROVIDER_HMENTRY");

            entity.HasIndex(e => new { e.HmeHelpmapId, e.HmeHelpkeyId }, "UN_HME_KEY").IsUnique();

            entity.Property(e => e.HmeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("HME_ID");
            entity.Property(e => e.HmeHelpkeyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("HME_HELPKEY_ID");
            entity.Property(e => e.HmeHelpmapId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("HME_HELPMAP_ID");
            entity.Property(e => e.HmeHelpproviderId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("HME_HELPPROVIDER_ID");
            entity.Property(e => e.HmeTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("HME_TCREATION");
            entity.Property(e => e.HmeTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("HME_TUPDATE");
            entity.Property(e => e.HmeUrl)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("HME_URL");

            entity.HasOne(d => d.HmeHelpkey).WithMany(p => p.JHelpmapentries)
                .HasForeignKey(d => d.HmeHelpkeyId)
                .HasConstraintName("FK_HELPKEY_HMENTRY");

            entity.HasOne(d => d.HmeHelpmap).WithMany(p => p.JHelpmapentries)
                .HasForeignKey(d => d.HmeHelpmapId)
                .HasConstraintName("FK_HELPMAP_HMENTRY");

            entity.HasOne(d => d.HmeHelpprovider).WithMany(p => p.JHelpmapentries)
                .HasForeignKey(d => d.HmeHelpproviderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HELPPROVIDER_HMENTRY");
        });

        modelBuilder.Entity<JHelpprovider>(entity =>
        {
            entity.HasKey(e => e.HpId).HasName("PK_HELPPROVIDER");

            entity.ToTable("J_HELPPROVIDER", "JITTOE");

            entity.HasIndex(e => e.HpHelpprovidersetId, "I_HELPPSET_HELPPROVIDER");

            entity.HasIndex(e => e.HpKey, "UN_HP_KEY").IsUnique();

            entity.Property(e => e.HpId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("HP_ID");
            entity.Property(e => e.HpDescr)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("HP_DESCR");
            entity.Property(e => e.HpHelpprovidersetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("HP_HELPPROVIDERSET_ID");
            entity.Property(e => e.HpKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("HP_KEY");
            entity.Property(e => e.HpTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("HP_TCREATION");
            entity.Property(e => e.HpTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("HP_TUPDATE");
            entity.Property(e => e.HpUrl)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("HP_URL");

            entity.HasOne(d => d.HpHelpproviderset).WithMany(p => p.JHelpproviders)
                .HasForeignKey(d => d.HpHelpprovidersetId)
                .HasConstraintName("FK_HELPPSET_HELPPROVIDER");
        });

        modelBuilder.Entity<JHelpproviderset>(entity =>
        {
            entity.HasKey(e => e.HpsId).HasName("PK_HELPPROVIDERSET");

            entity.ToTable("J_HELPPROVIDERSET", "JITTOE");

            entity.HasIndex(e => e.HpsKey, "UN_HPS_KEY").IsUnique();

            entity.Property(e => e.HpsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("HPS_ID");
            entity.Property(e => e.HpsDescr)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("HPS_DESCR");
            entity.Property(e => e.HpsKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("HPS_KEY");
            entity.Property(e => e.HpsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("HPS_TCREATION");
            entity.Property(e => e.HpsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("HPS_TUPDATE");
        });

        modelBuilder.Entity<JImage>(entity =>
        {
            entity.HasKey(e => e.ImId).HasName("PK_IMAGE");

            entity.ToTable("J_IMAGE", "JITTOE");

            entity.HasIndex(e => e.ImImagesetId, "I_IMAGESET_IMAGE");

            entity.HasIndex(e => new { e.ImKey, e.ImDeletionid }, "UN_IM_KEY").IsUnique();

            entity.Property(e => e.ImId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("IM_ID");
            entity.Property(e => e.ImData)
                .HasColumnType("LONG RAW")
                .HasColumnName("IM_DATA");
            entity.Property(e => e.ImDatasize)
                .HasPrecision(9)
                .HasColumnName("IM_DATASIZE");
            entity.Property(e => e.ImDeletionid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("IM_DELETIONID");
            entity.Property(e => e.ImDescr)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("IM_DESCR");
            entity.Property(e => e.ImEncoding)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IM_ENCODING");
            entity.Property(e => e.ImFilename)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IM_FILENAME");
            entity.Property(e => e.ImImagesetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("IM_IMAGESET_ID");
            entity.Property(e => e.ImKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("IM_KEY");
            entity.Property(e => e.ImTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("IM_TCREATION");
            entity.Property(e => e.ImTdeletion)
                .HasColumnType("DATE")
                .HasColumnName("IM_TDELETION");
            entity.Property(e => e.ImTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("IM_TUPDATE");

            entity.HasOne(d => d.ImImageset).WithMany(p => p.JImages)
                .HasForeignKey(d => d.ImImagesetId)
                .HasConstraintName("FK_IMAGESET_IMAGE");
        });

        modelBuilder.Entity<JImagepoint>(entity =>
        {
            entity.HasKey(e => e.ImpId).HasName("PK_IMAGEPOINT");

            entity.ToTable("J_IMAGEPOINT", "JITTOE");

            entity.HasIndex(e => e.ImpImageregionId, "I_IREGION_IPOINT");

            entity.Property(e => e.ImpId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("IMP_ID");
            entity.Property(e => e.ImpImageregionId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("IMP_IMAGEREGION_ID");
            entity.Property(e => e.ImpTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("IMP_TCREATION");
            entity.Property(e => e.ImpX)
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("IMP_X");
            entity.Property(e => e.ImpY)
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("IMP_Y");

            entity.HasOne(d => d.ImpImageregion).WithMany(p => p.JImagepoints)
                .HasForeignKey(d => d.ImpImageregionId)
                .HasConstraintName("FK_IREGION_IPOINT");
        });

        modelBuilder.Entity<JImageregion>(entity =>
        {
            entity.HasKey(e => e.ImrId).HasName("PK_IMAGEREGION");

            entity.ToTable("J_IMAGEREGION", "JITTOE");

            entity.HasIndex(e => e.ImrImageId, "I_IMAGE_IREGION");

            entity.HasIndex(e => e.ImrImageregionmapId, "I_IREGIONMAP_IREGION");

            entity.HasIndex(e => new { e.ImrImageregionmapId, e.ImrCode }, "UN_IMR_CODE").IsUnique();

            entity.Property(e => e.ImrId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("IMR_ID");
            entity.Property(e => e.ImrBordercolor)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("IMR_BORDERCOLOR");
            entity.Property(e => e.ImrCode)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("IMR_CODE");
            entity.Property(e => e.ImrDescr)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("IMR_DESCR");
            entity.Property(e => e.ImrImageId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("IMR_IMAGE_ID");
            entity.Property(e => e.ImrImageregionmapId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("IMR_IMAGEREGIONMAP_ID");
            entity.Property(e => e.ImrTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("IMR_TCREATION");
            entity.Property(e => e.ImrType)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasDefaultValueSql("'Rectangle'  ")
                .HasColumnName("IMR_TYPE");

            entity.HasOne(d => d.ImrImage).WithMany(p => p.JImageregions)
                .HasForeignKey(d => d.ImrImageId)
                .HasConstraintName("FK_IMAGE_IREGION");

            entity.HasOne(d => d.ImrImageregionmap).WithMany(p => p.JImageregions)
                .HasForeignKey(d => d.ImrImageregionmapId)
                .HasConstraintName("FK_IREGIONMAP_IREGION");
        });

        modelBuilder.Entity<JImageregionmap>(entity =>
        {
            entity.HasKey(e => e.ImrmId).HasName("PK_IMAGEREGIONMAP");

            entity.ToTable("J_IMAGEREGIONMAP", "JITTOE");

            entity.HasIndex(e => e.ImrmImageId, "I_IMAGE_IREGIONMAP");

            entity.Property(e => e.ImrmId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("IMRM_ID");
            entity.Property(e => e.ImrmImageId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("IMRM_IMAGE_ID");
            entity.Property(e => e.ImrmTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("IMRM_TCREATION");
            entity.Property(e => e.ImrmTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("IMRM_TUPDATE");
            entity.Property(e => e.ImrmType)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("IMRM_TYPE");

            entity.HasOne(d => d.ImrmImage).WithMany(p => p.JImageregionmaps)
                .HasForeignKey(d => d.ImrmImageId)
                .HasConstraintName("FK_IMAGE_IREGIONMAP");
        });

        modelBuilder.Entity<JImageset>(entity =>
        {
            entity.HasKey(e => e.ImsId).HasName("PK_IMAGESET");

            entity.ToTable("J_IMAGESET", "JITTOE");

            entity.HasIndex(e => e.ImsKey, "UN_IMS_KEY").IsUnique();

            entity.Property(e => e.ImsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("IMS_ID");
            entity.Property(e => e.ImsDescr)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("IMS_DESCR");
            entity.Property(e => e.ImsKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("IMS_KEY");
            entity.Property(e => e.ImsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("IMS_TCREATION");
            entity.Property(e => e.ImsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("IMS_TUPDATE");
        });

        modelBuilder.Entity<JImagesetclass>(entity =>
        {
            entity.HasKey(e => e.ImscId).HasName("PK_IMAGESETCLASS");

            entity.ToTable("J_IMAGESETCLASS", "JITTOE");

            entity.HasIndex(e => e.ImscKey, "UN_IMSC_KEY").IsUnique();

            entity.Property(e => e.ImscId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("IMSC_ID");
            entity.Property(e => e.ImscDescr)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("IMSC_DESCR");
            entity.Property(e => e.ImscKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("IMSC_KEY");
            entity.Property(e => e.ImscTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("IMSC_TCREATION");
            entity.Property(e => e.ImscTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("IMSC_TUPDATE");
        });

        modelBuilder.Entity<JImagesetclassmember>(entity =>
        {
            entity.HasKey(e => e.ImscmId).HasName("PK_IMAGESETCLASSMEMBER");

            entity.ToTable("J_IMAGESETCLASSMEMBER", "JITTOE");

            entity.HasIndex(e => e.ImscmImagesetclassId, "I_IMAGESETCLASS_IMSCMEMBER");

            entity.HasIndex(e => e.ImscmImagesetId, "I_IMAGESET_IMSCMEMBER");

            entity.HasIndex(e => new { e.ImscmImagesetId, e.ImscmImagesetclassId }, "UN_IMSCM_KEY").IsUnique();

            entity.Property(e => e.ImscmId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("IMSCM_ID");
            entity.Property(e => e.ImscmImagesetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("IMSCM_IMAGESET_ID");
            entity.Property(e => e.ImscmImagesetclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("IMSCM_IMAGESETCLASS_ID");
            entity.Property(e => e.ImscmTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("IMSCM_TCREATION");
            entity.Property(e => e.ImscmTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("IMSCM_TUPDATE");

            entity.HasOne(d => d.ImscmImageset).WithMany(p => p.JImagesetclassmembers)
                .HasForeignKey(d => d.ImscmImagesetId)
                .HasConstraintName("FK_IMAGESET_IMSCMEMBER");

            entity.HasOne(d => d.ImscmImagesetclass).WithMany(p => p.JImagesetclassmembers)
                .HasForeignKey(d => d.ImscmImagesetclassId)
                .HasConstraintName("FK_IMAGESETCLASS_IMSCMEMBER");
        });

        modelBuilder.Entity<JInfotemplate>(entity =>
        {
            entity.HasKey(e => e.InfotId).HasName("PK_INFOTEMPLATE");

            entity.ToTable("J_INFOTEMPLATE", "JITTOE");

            entity.HasIndex(e => e.InfotConfigdefId, "I_CONFIGDEF_INFOTEMPLATE");

            entity.HasIndex(e => new { e.InfotInfoclassname, e.InfotKey }, "UN_INFOT_KEY").IsUnique();

            entity.Property(e => e.InfotId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("INFOT_ID");
            entity.Property(e => e.InfotConfigdefId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("INFOT_CONFIGDEF_ID");
            entity.Property(e => e.InfotDescr)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("INFOT_DESCR");
            entity.Property(e => e.InfotInfoclassname)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("INFOT_INFOCLASSNAME");
            entity.Property(e => e.InfotKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("INFOT_KEY");
            entity.Property(e => e.InfotOwner)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("INFOT_OWNER");
            entity.Property(e => e.InfotTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("INFOT_TCREATION");
            entity.Property(e => e.InfotTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("INFOT_TUPDATE");

            entity.HasOne(d => d.InfotConfigdef).WithMany(p => p.JInfotemplates)
                .HasForeignKey(d => d.InfotConfigdefId)
                .HasConstraintName("FK_CONFIGDEF_INFOTEMPLATE");
        });

        modelBuilder.Entity<JKpi>(entity =>
        {
            entity.HasKey(e => e.KpiId).HasName("PK_KPI");

            entity.ToTable("J_KPI", "JITTOE");

            entity.HasIndex(e => e.KpiConfigdefId, "I_CONFIGDEF_KPI");

            entity.HasIndex(e => e.KpiDbdatasourceId, "I_DBODBDATASOURCE_KPI");

            entity.HasIndex(e => e.KpiKpisetId, "I_KPISET_KPI");

            entity.HasIndex(e => e.KpiKey, "UN_KPI_KEY").IsUnique();

            entity.Property(e => e.KpiId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("KPI_ID");
            entity.Property(e => e.KpiComputationtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("KPI_COMPUTATIONTYPE");
            entity.Property(e => e.KpiConfigdefId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("KPI_CONFIGDEF_ID");
            entity.Property(e => e.KpiDbdatasourceId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("KPI_DBDATASOURCE_ID");
            entity.Property(e => e.KpiDescr)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("KPI_DESCR");
            entity.Property(e => e.KpiEnabled)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("1  ")
                .HasColumnName("KPI_ENABLED");
            entity.Property(e => e.KpiKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("KPI_KEY");
            entity.Property(e => e.KpiKpisetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("KPI_KPISET_ID");
            entity.Property(e => e.KpiTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("KPI_TCREATION");
            entity.Property(e => e.KpiTimecomputed)
                .HasColumnType("DATE")
                .HasColumnName("KPI_TIMECOMPUTED");
            entity.Property(e => e.KpiTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("KPI_TUPDATE");

            entity.HasOne(d => d.KpiConfigdef).WithMany(p => p.JKpis)
                .HasForeignKey(d => d.KpiConfigdefId)
                .HasConstraintName("FK_CONFIGDEF_KPI");

            entity.HasOne(d => d.KpiDbdatasource).WithMany(p => p.JKpis)
                .HasForeignKey(d => d.KpiDbdatasourceId)
                .HasConstraintName("FK_DBODBDATASOURCE_KPI");

            entity.HasOne(d => d.KpiKpiset).WithMany(p => p.JKpis)
                .HasForeignKey(d => d.KpiKpisetId)
                .HasConstraintName("FK_KPISET_KPI");
        });

        modelBuilder.Entity<JKpicol>(entity =>
        {
            entity.HasKey(e => e.KpicId).HasName("PK_KPICOL");

            entity.ToTable("J_KPICOL", "JITTOE");

            entity.HasIndex(e => e.KpicKpiId, "I_KPI_KPICOL");

            entity.HasIndex(e => new { e.KpicIndex, e.KpicKpiId }, "UN_KPIC_INDEX").IsUnique();

            entity.Property(e => e.KpicId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("KPIC_ID");
            entity.Property(e => e.KpicDescr)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("KPIC_DESCR");
            entity.Property(e => e.KpicIndex)
                .HasPrecision(2)
                .HasColumnName("KPIC_INDEX");
            entity.Property(e => e.KpicKpiId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("KPIC_KPI_ID");
            entity.Property(e => e.KpicLabel)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("KPIC_LABEL");
            entity.Property(e => e.KpicTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("KPIC_TCREATION");
            entity.Property(e => e.KpicTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("KPIC_TUPDATE");
            entity.Property(e => e.KpicValuetype)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("KPIC_VALUETYPE");

            entity.HasOne(d => d.KpicKpi).WithMany(p => p.JKpicols)
                .HasForeignKey(d => d.KpicKpiId)
                .HasConstraintName("FK_KPI_KPICOL");
        });

        modelBuilder.Entity<JKpiset>(entity =>
        {
            entity.HasKey(e => e.KpisId).HasName("PK_KPISET");

            entity.ToTable("J_KPISET", "JITTOE");

            entity.HasIndex(e => e.KpisKey, "UN_KPIS_KEY").IsUnique();

            entity.Property(e => e.KpisId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("KPIS_ID");
            entity.Property(e => e.KpisDescr)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("KPIS_DESCR");
            entity.Property(e => e.KpisKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("KPIS_KEY");
            entity.Property(e => e.KpisTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("KPIS_TCREATION");
            entity.Property(e => e.KpisTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("KPIS_TUPDATE");
        });

        modelBuilder.Entity<JKpivalue>(entity =>
        {
            entity.HasKey(e => e.KpivId).HasName("PK_KPIVALUE");

            entity.ToTable("J_KPIVALUE", "JITTOE");

            entity.HasIndex(e => e.KpivKpicolId, "I_KPICOL_KPIVALUE");

            entity.HasIndex(e => e.KpivKpiId, "I_KPI_KPIVALUE");

            entity.Property(e => e.KpivId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("KPIV_ID");
            entity.Property(e => e.KpivDecimalvalue)
                .HasColumnType("NUMBER(16,6)")
                .HasColumnName("KPIV_DECIMALVALUE");
            entity.Property(e => e.KpivIntvalue)
                .HasPrecision(10)
                .HasColumnName("KPIV_INTVALUE");
            entity.Property(e => e.KpivKpiId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("KPIV_KPI_ID");
            entity.Property(e => e.KpivKpicolId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("KPIV_KPICOL_ID");
            entity.Property(e => e.KpivRowindex)
                .HasPrecision(5)
                .HasColumnName("KPIV_ROWINDEX");
            entity.Property(e => e.KpivStringvalue)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasColumnName("KPIV_STRINGVALUE");
            entity.Property(e => e.KpivStyleclass)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("KPIV_STYLECLASS");
            entity.Property(e => e.KpivTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("KPIV_TCREATION");
            entity.Property(e => e.KpivTimevalue)
                .HasColumnType("DATE")
                .HasColumnName("KPIV_TIMEVALUE");
            entity.Property(e => e.KpivTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("KPIV_TUPDATE");

            entity.HasOne(d => d.KpivKpi).WithMany(p => p.JKpivalues)
                .HasForeignKey(d => d.KpivKpiId)
                .HasConstraintName("FK_KPI_KPIVALUE");

            entity.HasOne(d => d.KpivKpicol).WithMany(p => p.JKpivalues)
                .HasForeignKey(d => d.KpivKpicolId)
                .HasConstraintName("FK_KPICOL_KPIVALUE");
        });

        modelBuilder.Entity<JLanguage>(entity =>
        {
            entity.HasKey(e => e.LngId).HasName("PK_LANGUAGE");

            entity.ToTable("J_LANGUAGE", "JITTOE");

            entity.HasIndex(e => e.LngKey, "UN_LNG_KEY").IsUnique();

            entity.Property(e => e.LngId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("LNG_ID");
            entity.Property(e => e.LngKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("LNG_KEY");
            entity.Property(e => e.LngTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("LNG_TCREATION");
        });

        modelBuilder.Entity<JLoadercontrol>(entity =>
        {
            entity.HasKey(e => e.LocId).HasName("PK_LOADERCONTROL");

            entity.ToTable("J_LOADERCONTROL", "JITTOE");

            entity.HasIndex(e => e.LocToursetId, "I_TOURSET_LOADERCONTROL");

            entity.HasIndex(e => e.LocKey, "UN_LOC_KEY").IsUnique();

            entity.Property(e => e.LocId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("LOC_ID");
            entity.Property(e => e.LocCycle)
                .HasPrecision(9)
                .HasColumnName("LOC_CYCLE");
            entity.Property(e => e.LocCyclecomment)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("LOC_CYCLECOMMENT");
            entity.Property(e => e.LocDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("LOC_DESCR");
            entity.Property(e => e.LocDonecontainercount)
                .HasPrecision(6)
                .HasColumnName("LOC_DONECONTAINERCOUNT");
            entity.Property(e => e.LocKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("LOC_KEY");
            entity.Property(e => e.LocTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("LOC_TCREATION");
            entity.Property(e => e.LocToursetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("LOC_TOURSET_ID");
            entity.Property(e => e.LocTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("LOC_TUPDATE");

            entity.HasOne(d => d.LocTourset).WithMany(p => p.JLoadercontrols)
                .HasForeignKey(d => d.LocToursetId)
                .HasConstraintName("FK_TOURSET_LOADERCONTROL");
        });

        modelBuilder.Entity<JLoaderevent>(entity =>
        {
            entity.HasKey(e => e.LoeId).HasName("PK_LOADEREVENT");

            entity.ToTable("J_LOADEREVENT", "JITTOE");

            entity.HasIndex(e => e.LoeContainerId, "I_CONTAINER_LOADEREVENT");

            entity.HasIndex(e => e.LoeLoadercontrolId, "I_LOADERCTRL_LOADEREVENT");

            entity.Property(e => e.LoeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("LOE_ID");
            entity.Property(e => e.LoeContainerId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("LOE_CONTAINER_ID");
            entity.Property(e => e.LoeCycle)
                .HasPrecision(9)
                .HasColumnName("LOE_CYCLE");
            entity.Property(e => e.LoeLoadercontrolId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("LOE_LOADERCONTROL_ID");
            entity.Property(e => e.LoeMessage)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("LOE_MESSAGE");
            entity.Property(e => e.LoeMessagecode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("LOE_MESSAGECODE");
            entity.Property(e => e.LoeTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("LOE_TCREATION");
            entity.Property(e => e.LoeType)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("LOE_TYPE");

            entity.HasOne(d => d.LoeContainer).WithMany(p => p.JLoaderevents)
                .HasForeignKey(d => d.LoeContainerId)
                .HasConstraintName("FK_CONTAINER_LOADEREVENT");

            entity.HasOne(d => d.LoeLoadercontrol).WithMany(p => p.JLoaderevents)
                .HasForeignKey(d => d.LoeLoadercontrolId)
                .HasConstraintName("FK_LOADERCTRL_LOADEREVENT");
        });

        modelBuilder.Entity<JLoaderparam>(entity =>
        {
            entity.HasKey(e => e.LopId).HasName("PK_LOADERPARAMS");

            entity.ToTable("J_LOADERPARAMS", "JITTOE");

            entity.HasIndex(e => e.LopOffsetcalendarId, "I_CALENDAR_LOADERPARAMS");

            entity.HasIndex(e => e.LopContainersetclassId, "I_CCLASS_LOADERPARAMS");

            entity.HasIndex(e => e.LopLoadercontrolId, "I_LOADERCTRL_LOADERPARAMS");

            entity.HasIndex(e => e.LopLoadereventId, "I_LOADEREVENT_LOADERPARAMS");

            entity.HasIndex(e => new { e.LopLoadercontrolId, e.LopType }, "UN_LOP_TYPE").IsUnique();

            entity.Property(e => e.LopId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("LOP_ID");
            entity.Property(e => e.LopContainercount)
                .HasPrecision(6)
                .HasColumnName("LOP_CONTAINERCOUNT");
            entity.Property(e => e.LopContainersetclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("LOP_CONTAINERSETCLASS_ID");
            entity.Property(e => e.LopLoadercontrolId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("LOP_LOADERCONTROL_ID");
            entity.Property(e => e.LopLoadereventId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("LOP_LOADEREVENT_ID");
            entity.Property(e => e.LopLoadermode)
                .HasMaxLength(23)
                .IsUnicode(false)
                .HasColumnName("LOP_LOADERMODE");
            entity.Property(e => e.LopOffsetcalendarId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("LOP_OFFSETCALENDAR_ID");
            entity.Property(e => e.LopOffsetinmin)
                .HasPrecision(6)
                .HasColumnName("LOP_OFFSETINMIN");
            entity.Property(e => e.LopReftime)
                .HasColumnType("DATE")
                .HasColumnName("LOP_REFTIME");
            entity.Property(e => e.LopTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("LOP_TCREATION");
            entity.Property(e => e.LopTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("LOP_TUPDATE");
            entity.Property(e => e.LopType)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("LOP_TYPE");

            entity.HasOne(d => d.LopContainersetclass).WithMany(p => p.JLoaderparams)
                .HasForeignKey(d => d.LopContainersetclassId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CCLASS_LOADERPARAMS");

            entity.HasOne(d => d.LopLoadercontrol).WithMany(p => p.JLoaderparams)
                .HasForeignKey(d => d.LopLoadercontrolId)
                .HasConstraintName("FK_LOADERCTRL_LOADERPARAMS");

            entity.HasOne(d => d.LopLoaderevent).WithMany(p => p.JLoaderparams)
                .HasForeignKey(d => d.LopLoadereventId)
                .HasConstraintName("FK_LOADEREVENT_LOADERPARAMS");

            entity.HasOne(d => d.LopOffsetcalendar).WithMany(p => p.JLoaderparams)
                .HasForeignKey(d => d.LopOffsetcalendarId)
                .HasConstraintName("FK_CALENDAR_LOADERPARAMS");
        });

        modelBuilder.Entity<JLoadplanentry>(entity =>
        {
            entity.HasKey(e => e.LpeId).HasName("PK_LOADPLANENTRY");

            entity.ToTable("J_LOADPLANENTRY", "JITTOE");

            entity.HasIndex(e => e.LpeDeliverynoteId, "I_DELIVERYNOTE_LPENTRY");

            entity.HasIndex(e => e.LpeOrderentryId, "I_ORDERENTRY_LPENTRY");

            entity.HasIndex(e => e.LpeSubjectId, "I_SUBJECT_LPENTRY");

            entity.HasIndex(e => e.LpeTourId, "I_TOUR_LPENTRY");

            entity.Property(e => e.LpeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("LPE_ID");
            entity.Property(e => e.LpeDeliverynoteId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("LPE_DELIVERYNOTE_ID");
            entity.Property(e => e.LpeOrderentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("LPE_ORDERENTRY_ID");
            entity.Property(e => e.LpeQuantity)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("LPE_QUANTITY");
            entity.Property(e => e.LpeSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("LPE_SUBJECT_ID");
            entity.Property(e => e.LpeTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("LPE_TCREATION");
            entity.Property(e => e.LpeTourId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("LPE_TOUR_ID");
            entity.Property(e => e.LpeTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("LPE_TUPDATE");

            entity.HasOne(d => d.LpeDeliverynote).WithMany(p => p.JLoadplanentries)
                .HasForeignKey(d => d.LpeDeliverynoteId)
                .HasConstraintName("FK_DELIVERYNOTE_LPENTRY");

            entity.HasOne(d => d.LpeOrderentry).WithMany(p => p.JLoadplanentries)
                .HasForeignKey(d => d.LpeOrderentryId)
                .HasConstraintName("FK_ORDERENTRY_LPENTRY");

            entity.HasOne(d => d.LpeSubject).WithMany(p => p.JLoadplanentries)
                .HasForeignKey(d => d.LpeSubjectId)
                .HasConstraintName("FK_SUBJECT_LPENTRY");

            entity.HasOne(d => d.LpeTour).WithMany(p => p.JLoadplanentries)
                .HasForeignKey(d => d.LpeTourId)
                .HasConstraintName("FK_TOUR_LPENTRY");
        });

        modelBuilder.Entity<JLoadplanentryinfo>(entity =>
        {
            entity.HasKey(e => e.LpeiId).HasName("PK_LOADPLANENTRYINFO");

            entity.ToTable("J_LOADPLANENTRYINFO", "JITTOE");

            entity.HasIndex(e => e.LpeiLoadplanentryId, "I_LPENTRY_LPENTRYINFO");

            entity.HasIndex(e => new { e.LpeiLoadplanentryId, e.LpeiType, e.LpeiKey1 }, "UN_LPEI_INFO").IsUnique();

            entity.Property(e => e.LpeiId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("LPEI_ID");
            entity.Property(e => e.LpeiKey1)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("LPEI_KEY1");
            entity.Property(e => e.LpeiLoadplanentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("LPEI_LOADPLANENTRY_ID");
            entity.Property(e => e.LpeiStringvalue)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("LPEI_STRINGVALUE");
            entity.Property(e => e.LpeiTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("LPEI_TCREATION");
            entity.Property(e => e.LpeiTimevalue)
                .HasColumnType("DATE")
                .HasColumnName("LPEI_TIMEVALUE");
            entity.Property(e => e.LpeiType)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("LPEI_TYPE");

            entity.HasOne(d => d.LpeiLoadplanentry).WithMany(p => p.JLoadplanentryinfos)
                .HasForeignKey(d => d.LpeiLoadplanentryId)
                .HasConstraintName("FK_LPENTRY_LPENTRYINFO");
        });

        modelBuilder.Entity<JLocation>(entity =>
        {
            entity.HasKey(e => e.LId).HasName("PK_LOCATION");

            entity.ToTable("J_LOCATION", "JITTOE");

            entity.HasIndex(e => e.LAddressId, "I_ADDRESS_LOCATION");

            entity.HasIndex(e => e.LCompanyId, "I_COMPANY_LOCATION");

            entity.HasIndex(e => e.LKey, "UN_L_KEY").IsUnique();

            entity.Property(e => e.LId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("L_ID");
            entity.Property(e => e.LAddressId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("L_ADDRESS_ID");
            entity.Property(e => e.LCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("L_COMPANY_ID");
            entity.Property(e => e.LDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("L_DESCR");
            entity.Property(e => e.LKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("L_KEY");
            entity.Property(e => e.LLoadingpoint)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("L_LOADINGPOINT");
            entity.Property(e => e.LSite)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("L_SITE");
            entity.Property(e => e.LTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("L_TCREATION");
            entity.Property(e => e.LTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("L_TUPDATE");
            entity.Property(e => e.LType)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("L_TYPE");
            entity.Property(e => e.LUsagepoint)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("L_USAGEPOINT");

            entity.HasOne(d => d.LAddress).WithMany(p => p.JLocations)
                .HasForeignKey(d => d.LAddressId)
                .HasConstraintName("FK_ADDRESS_LOCATION");

            entity.HasOne(d => d.LCompany).WithMany(p => p.JLocations)
                .HasForeignKey(d => d.LCompanyId)
                .HasConstraintName("FK_COMPANY_LOCATION");
        });

        modelBuilder.Entity<JLocationTour>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("J_LOCATION_TOUR", "JITTOE");

            entity.HasIndex(e => e.LocationId, "I_LOCATION_TOUR_1");

            entity.HasIndex(e => e.TourId, "I_LOCATION_TOUR_2");

            entity.HasIndex(e => new { e.LocationId, e.TourId }, "UN_LOCATION_TOUR").IsUnique();

            entity.Property(e => e.LocationId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("LOCATION_ID");
            entity.Property(e => e.Tcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TCREATION");
            entity.Property(e => e.TourId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TOUR_ID");

            entity.HasOne(d => d.Location).WithMany()
                .HasForeignKey(d => d.LocationId)
                .HasConstraintName("FK_LOCATION_TOUR_1");

            entity.HasOne(d => d.Tour).WithMany()
                .HasForeignKey(d => d.TourId)
                .HasConstraintName("FK_LOCATION_TOUR_2");
        });

        modelBuilder.Entity<JLocationTtemplate>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("J_LOCATION_TTEMPLATE", "JITTOE");

            entity.HasIndex(e => e.LocationId, "I_LOCATION_TTEMPLATE_1");

            entity.HasIndex(e => e.TourtemplateId, "I_LOCATION_TTEMPLATE_2");

            entity.HasIndex(e => new { e.LocationId, e.TourtemplateId }, "UN_LOCATION_TTEMPLATE").IsUnique();

            entity.Property(e => e.LocationId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("LOCATION_ID");
            entity.Property(e => e.Tcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TCREATION");
            entity.Property(e => e.TourtemplateId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TOURTEMPLATE_ID");

            entity.HasOne(d => d.Location).WithMany()
                .HasForeignKey(d => d.LocationId)
                .HasConstraintName("FK_LOCATION_TTEMPLATE_1");

            entity.HasOne(d => d.Tourtemplate).WithMany()
                .HasForeignKey(d => d.TourtemplateId)
                .HasConstraintName("FK_LOCATION_TTEMPLATE_2");
        });

        modelBuilder.Entity<JLocationclass>(entity =>
        {
            entity.HasKey(e => e.LcId).HasName("PK_LOCATIONCLASS");

            entity.ToTable("J_LOCATIONCLASS", "JITTOE");

            entity.HasIndex(e => e.LcCompanyId, "I_COMPANY_LOCATIONCLASS");

            entity.HasIndex(e => e.LcKey, "UN_LC_KEY").IsUnique();

            entity.Property(e => e.LcId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("LC_ID");
            entity.Property(e => e.LcCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("LC_COMPANY_ID");
            entity.Property(e => e.LcDescr)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("LC_DESCR");
            entity.Property(e => e.LcKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("LC_KEY");
            entity.Property(e => e.LcTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("LC_TCREATION");
            entity.Property(e => e.LcTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("LC_TUPDATE");

            entity.HasOne(d => d.LcCompany).WithMany(p => p.JLocationclasses)
                .HasForeignKey(d => d.LcCompanyId)
                .HasConstraintName("FK_COMPANY_LOCATIONCLASS");
        });

        modelBuilder.Entity<JLocationclassmember>(entity =>
        {
            entity.HasKey(e => e.LcmId).HasName("PK_LOCATIONCLASSMEMBER");

            entity.ToTable("J_LOCATIONCLASSMEMBER", "JITTOE");

            entity.HasIndex(e => e.LcmLocationclassId, "I_LOCATIONCLASS_LCMEMBER");

            entity.HasIndex(e => e.LcmLocationId, "I_LOCATION_LCMEMBER");

            entity.HasIndex(e => new { e.LcmLocationId, e.LcmLocationclassId }, "UN_LCM_KEY").IsUnique();

            entity.Property(e => e.LcmId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("LCM_ID");
            entity.Property(e => e.LcmLocationId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("LCM_LOCATION_ID");
            entity.Property(e => e.LcmLocationclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("LCM_LOCATIONCLASS_ID");
            entity.Property(e => e.LcmTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("LCM_TCREATION");
            entity.Property(e => e.LcmTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("LCM_TUPDATE");

            entity.HasOne(d => d.LcmLocation).WithMany(p => p.JLocationclassmembers)
                .HasForeignKey(d => d.LcmLocationId)
                .HasConstraintName("FK_LOCATION_LCMEMBER");

            entity.HasOne(d => d.LcmLocationclass).WithMany(p => p.JLocationclassmembers)
                .HasForeignKey(d => d.LcmLocationclassId)
                .HasConstraintName("FK_LOCATIONCLASS_LCMEMBER");
        });

        modelBuilder.Entity<JLocationinfo>(entity =>
        {
            entity.HasKey(e => e.LiId).HasName("PK_LOCATIONINFO");

            entity.ToTable("J_LOCATIONINFO", "JITTOE");

            entity.HasIndex(e => e.LiLocationId, "I_LOCATION_LINFO");

            entity.HasIndex(e => e.LiReflocationId, "I_REFLOCATION_LINFO");

            entity.HasIndex(e => new { e.LiLocationId, e.LiType, e.LiReflocationId, e.LiKey1, e.LiKey2, e.LiKey3 }, "UN_LI_INFO").IsUnique();

            entity.Property(e => e.LiId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("LI_ID");
            entity.Property(e => e.LiKey1)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("LI_KEY1");
            entity.Property(e => e.LiKey2)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("LI_KEY2");
            entity.Property(e => e.LiKey3)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("LI_KEY3");
            entity.Property(e => e.LiLocationId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("LI_LOCATION_ID");
            entity.Property(e => e.LiReflocationId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("LI_REFLOCATION_ID");
            entity.Property(e => e.LiStringvalue)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("LI_STRINGVALUE");
            entity.Property(e => e.LiTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("LI_TCREATION");
            entity.Property(e => e.LiTimevalue)
                .HasColumnType("DATE")
                .HasColumnName("LI_TIMEVALUE");
            entity.Property(e => e.LiTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("LI_TUPDATE");
            entity.Property(e => e.LiType)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("LI_TYPE");

            entity.HasOne(d => d.LiLocation).WithMany(p => p.JLocationinfoLiLocations)
                .HasForeignKey(d => d.LiLocationId)
                .HasConstraintName("FK_LOCATION_LINFO");

            entity.HasOne(d => d.LiReflocation).WithMany(p => p.JLocationinfoLiReflocations)
                .HasForeignKey(d => d.LiReflocationId)
                .HasConstraintName("FK_REFLOCATION_LINFO");
        });

        modelBuilder.Entity<JLock>(entity =>
        {
            entity.HasKey(e => e.LockId).HasName("PK_LOCK");

            entity.ToTable("J_LOCK", "JITTOE");

            entity.HasIndex(e => e.LockCompanyId, "I_COMPANY_LOCK");

            entity.HasIndex(e => e.LockKey, "UN_LOCK_KEY").IsUnique();

            entity.Property(e => e.LockId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("LOCK_ID");
            entity.Property(e => e.LockCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("LOCK_COMPANY_ID");
            entity.Property(e => e.LockDescr)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("LOCK_DESCR");
            entity.Property(e => e.LockKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("LOCK_KEY");
            entity.Property(e => e.LockLockexpectedtime)
                .HasColumnType("DATE")
                .HasColumnName("LOCK_LOCKEXPECTEDTIME");
            entity.Property(e => e.LockLockexpectedtimeoutinsec)
                .HasPrecision(5)
                .HasDefaultValueSql("0  ")
                .HasColumnName("LOCK_LOCKEXPECTEDTIMEOUTINSEC");
            entity.Property(e => e.LockOwnername)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("LOCK_OWNERNAME");
            entity.Property(e => e.LockOwnerprocessid)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("LOCK_OWNERPROCESSID");
            entity.Property(e => e.LockTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("LOCK_TCREATION");

            entity.HasOne(d => d.LockCompany).WithMany(p => p.JLocks)
                .HasForeignKey(d => d.LockCompanyId)
                .HasConstraintName("FK_COMPANY_LOCK");
        });

        modelBuilder.Entity<JLog>(entity =>
        {
            entity.HasKey(e => e.LogId).HasName("PK_LOG");

            entity.ToTable("J_LOG", "JITTOE");

            entity.HasIndex(e => e.LogLogsetId, "I_LOGSET_LOG");

            entity.HasIndex(e => new { e.LogKey, e.LogInvalidid }, "UN_LOG_KEY").IsUnique();

            entity.Property(e => e.LogId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("LOG_ID");
            entity.Property(e => e.LogDescr)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("LOG_DESCR");
            entity.Property(e => e.LogInvalidid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("LOG_INVALIDID");
            entity.Property(e => e.LogKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("LOG_KEY");
            entity.Property(e => e.LogLogsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("LOG_LOGSET_ID");
            entity.Property(e => e.LogTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("LOG_TCREATION");
            entity.Property(e => e.LogTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("LOG_TUPDATE");
            entity.Property(e => e.LogTvalidfrom)
                .HasColumnType("DATE")
                .HasColumnName("LOG_TVALIDFROM");
            entity.Property(e => e.LogTvaliduntil)
                .HasColumnType("DATE")
                .HasColumnName("LOG_TVALIDUNTIL");

            entity.HasOne(d => d.LogLogset).WithMany(p => p.JLogs)
                .HasForeignKey(d => d.LogLogsetId)
                .HasConstraintName("FK_LOGSET_LOG");
        });

        modelBuilder.Entity<JLogadviceinfo>(entity =>
        {
            entity.HasKey(e => e.OlsId).HasName("PK_LOGADVICEINFO");

            entity.ToTable("J_LOGADVICEINFO", "JITTOE");

            entity.HasIndex(e => e.OlsObjectlogId, "I_OL_LOGADVICEINFO");

            entity.Property(e => e.OlsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_ID");
            entity.Property(e => e.AdviAdviceId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ADVI_ADVICE_ID");
            entity.Property(e => e.AdviImageId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ADVI_IMAGE_ID");
            entity.Property(e => e.AdviIntvalue)
                .HasPrecision(10)
                .HasColumnName("ADVI_INTVALUE");
            entity.Property(e => e.AdviKey1)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("ADVI_KEY1");
            entity.Property(e => e.AdviKey2)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("ADVI_KEY2");
            entity.Property(e => e.AdviKey3)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("ADVI_KEY3");
            entity.Property(e => e.AdviStringvalue)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("ADVI_STRINGVALUE");
            entity.Property(e => e.AdviTimevalue)
                .HasColumnType("DATE")
                .HasColumnName("ADVI_TIMEVALUE");
            entity.Property(e => e.AdviType)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("ADVI_TYPE");
            entity.Property(e => e.OlsObjectlogId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_OBJECTLOG_ID");

            entity.HasOne(d => d.OlsObjectlog).WithMany(p => p.JLogadviceinfos)
                .HasForeignKey(d => d.OlsObjectlogId)
                .HasConstraintName("FK_OL_LOGADVICEINFO");
        });

        modelBuilder.Entity<JLogalert>(entity =>
        {
            entity.HasKey(e => e.OlsId).HasName("PK_LOGALERT");

            entity.ToTable("J_LOGALERT", "JITTOE");

            entity.HasIndex(e => e.OlsObjectlogId, "I_OL_LOGALERT");

            entity.Property(e => e.OlsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_ID");
            entity.Property(e => e.AlAlertsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("AL_ALERTSET_ID");
            entity.Property(e => e.AlAlertstateId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("AL_ALERTSTATE_ID");
            entity.Property(e => e.AlAlerttypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("AL_ALERTTYPE_ID");
            entity.Property(e => e.AlApplication)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("AL_APPLICATION");
            entity.Property(e => e.AlContext)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("AL_CONTEXT");
            entity.Property(e => e.AlDescr)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("AL_DESCR");
            entity.Property(e => e.AlInfo1)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("AL_INFO1");
            entity.Property(e => e.AlInfo2)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("AL_INFO2");
            entity.Property(e => e.AlInfo3)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("AL_INFO3");
            entity.Property(e => e.AlKeyintype)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("AL_KEYINTYPE");
            entity.Property(e => e.AlLevel)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("AL_LEVEL");
            entity.Property(e => e.AlMessage)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("AL_MESSAGE");
            entity.Property(e => e.AlMessagecode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AL_MESSAGECODE");
            entity.Property(e => e.AlMsgseverity)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("AL_MSGSEVERITY");
            entity.Property(e => e.AlNrofsuspensions)
                .HasPrecision(5)
                .HasDefaultValueSql("0  ")
                .HasColumnName("AL_NROFSUSPENSIONS");
            entity.Property(e => e.AlTimeconfirmed)
                .HasColumnType("DATE")
                .HasColumnName("AL_TIMECONFIRMED");
            entity.Property(e => e.AlTimeescalated)
                .HasColumnType("DATE")
                .HasColumnName("AL_TIMEESCALATED");
            entity.Property(e => e.AlTimemsg)
                .HasColumnType("DATE")
                .HasColumnName("AL_TIMEMSG");
            entity.Property(e => e.AlTimeset)
                .HasColumnType("DATE")
                .HasColumnName("AL_TIMESET");
            entity.Property(e => e.AlTimesuspendeduntil)
                .HasColumnType("DATE")
                .HasColumnName("AL_TIMESUSPENDEDUNTIL");
            entity.Property(e => e.OlsObjectlogId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_OBJECTLOG_ID");

            entity.HasOne(d => d.OlsObjectlog).WithMany(p => p.JLogalerts)
                .HasForeignKey(d => d.OlsObjectlogId)
                .HasConstraintName("FK_OL_LOGALERT");
        });

        modelBuilder.Entity<JLogattrsubject>(entity =>
        {
            entity.HasKey(e => e.OlsaId).HasName("PK_LOGATTRSUBJECT");

            entity.ToTable("J_LOGATTRSUBJECT", "JITTOE");

            entity.HasIndex(e => e.OlsaLogsubjectId, "I_LOGSUBJECT_LOGATTRSUBJECT");

            entity.Property(e => e.OlsaId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLSA_ID");
            entity.Property(e => e.OlsaLogsubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLSA_LOGSUBJECT_ID");
            entity.Property(e => e.OlsaName)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("OLSA_NAME");
            entity.Property(e => e.OlsaValue)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasColumnName("OLSA_VALUE");

            entity.HasOne(d => d.OlsaLogsubject).WithMany(p => p.JLogattrsubjects)
                .HasForeignKey(d => d.OlsaLogsubjectId)
                .HasConstraintName("FK_LOGSUBJECT_LOGATTRSUBJECT");
        });

        modelBuilder.Entity<JLogcontainer>(entity =>
        {
            entity.HasKey(e => e.OlsId).HasName("PK_LOGCONTAINER");

            entity.ToTable("J_LOGCONTAINER", "JITTOE");

            entity.HasIndex(e => e.OlsObjectlogId, "I_OL_LOGCONTAINER");

            entity.Property(e => e.OlsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_ID");
            entity.Property(e => e.CtAltno)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CT_ALTNO");
            entity.Property(e => e.CtContainersetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CT_CONTAINERSET_ID");
            entity.Property(e => e.CtContainerusageId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CT_CONTAINERUSAGE_ID");
            entity.Property(e => e.CtContractId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CT_CONTRACT_ID");
            entity.Property(e => e.CtLocationId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CT_LOCATION_ID");
            entity.Property(e => e.CtNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CT_NO");
            entity.Property(e => e.CtOrderId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CT_ORDER_ID");
            entity.Property(e => e.CtOtherno)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CT_OTHERNO");
            entity.Property(e => e.CtProdunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CT_PRODUNIT_ID");
            entity.Property(e => e.CtQualityclass)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CT_QUALITYCLASS");
            entity.Property(e => e.CtRootcontainerId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CT_ROOTCONTAINER_ID");
            entity.Property(e => e.CtStatus)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("CT_STATUS");
            entity.Property(e => e.CtStockId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CT_STOCK_ID");
            entity.Property(e => e.CtTempno)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CT_TEMPNO");
            entity.Property(e => e.CtTimeverified)
                .HasColumnType("DATE")
                .HasColumnName("CT_TIMEVERIFIED");
            entity.Property(e => e.OlsObjectlogId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_OBJECTLOG_ID");

            entity.HasOne(d => d.OlsObjectlog).WithMany(p => p.JLogcontainers)
                .HasForeignKey(d => d.OlsObjectlogId)
                .HasConstraintName("FK_OL_LOGCONTAINER");
        });

        modelBuilder.Entity<JLogcontainerentry>(entity =>
        {
            entity.HasKey(e => e.OlsId).HasName("PK_LOGCONTAINERENTRY");

            entity.ToTable("J_LOGCONTAINERENTRY", "JITTOE");

            entity.HasIndex(e => e.OlsObjectlogId, "I_OL_LOGCONTAINERENTRY");

            entity.Property(e => e.OlsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_ID");
            entity.Property(e => e.CteContainerId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTE_CONTAINER_ID");
            entity.Property(e => e.CteIndex)
                .HasPrecision(5)
                .HasColumnName("CTE_INDEX");
            entity.Property(e => e.CtePos)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CTE_POS");
            entity.Property(e => e.OlsObjectlogId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_OBJECTLOG_ID");

            entity.HasOne(d => d.OlsObjectlog).WithMany(p => p.JLogcontainerentries)
                .HasForeignKey(d => d.OlsObjectlogId)
                .HasConstraintName("FK_OL_LOGCONTAINERENTRY");
        });

        modelBuilder.Entity<JLogcontainerrule>(entity =>
        {
            entity.HasKey(e => e.OlsId).HasName("PK_LOGCONTAINERRULE");

            entity.ToTable("J_LOGCONTAINERRULE", "JITTOE");

            entity.HasIndex(e => e.OlsObjectlogId, "I_OL_LOGCONTAINERRULE");

            entity.Property(e => e.OlsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_ID");
            entity.Property(e => e.CtrColumnrange)
                .HasPrecision(4)
                .HasColumnName("CTR_COLUMNRANGE");
            entity.Property(e => e.CtrColumnstart)
                .HasPrecision(4)
                .HasColumnName("CTR_COLUMNSTART");
            entity.Property(e => e.CtrContainerusageId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTR_CONTAINERUSAGE_ID");
            entity.Property(e => e.CtrGroup)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CTR_GROUP");
            entity.Property(e => e.CtrRowrange)
                .HasPrecision(4)
                .HasColumnName("CTR_ROWRANGE");
            entity.Property(e => e.CtrRowstart)
                .HasPrecision(4)
                .HasColumnName("CTR_ROWSTART");
            entity.Property(e => e.CtrSpan)
                .HasPrecision(1)
                .HasColumnName("CTR_SPAN");
            entity.Property(e => e.CtrSubjectclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTR_SUBJECTCLASS_ID");
            entity.Property(e => e.CtrUnused)
                .HasPrecision(1)
                .HasColumnName("CTR_UNUSED");
            entity.Property(e => e.OlsObjectlogId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_OBJECTLOG_ID");

            entity.HasOne(d => d.OlsObjectlog).WithMany(p => p.JLogcontainerrules)
                .HasForeignKey(d => d.OlsObjectlogId)
                .HasConstraintName("FK_OL_LOGCONTAINERRULE");
        });

        modelBuilder.Entity<JLogcontainerset>(entity =>
        {
            entity.HasKey(e => e.OlsId).HasName("PK_LOGCONTAINERSET");

            entity.ToTable("J_LOGCONTAINERSET", "JITTOE");

            entity.HasIndex(e => e.OlsObjectlogId, "I_OL_LOGCONTAINERSET");

            entity.Property(e => e.OlsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_ID");
            entity.Property(e => e.CtsAltcounterId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTS_ALTCOUNTER_ID");
            entity.Property(e => e.CtsAltsheettype)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CTS_ALTSHEETTYPE");
            entity.Property(e => e.CtsCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTS_COMPANY_ID");
            entity.Property(e => e.CtsContainertypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTS_CONTAINERTYPE_ID");
            entity.Property(e => e.CtsContainertypeclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTS_CONTAINERTYPECLASS_ID");
            entity.Property(e => e.CtsContainerusageId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTS_CONTAINERUSAGE_ID");
            entity.Property(e => e.CtsCounterId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTS_COUNTER_ID");
            entity.Property(e => e.CtsDeliverymode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CTS_DELIVERYMODE");
            entity.Property(e => e.CtsDescr)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("CTS_DESCR");
            entity.Property(e => e.CtsDoccfgId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTS_DOCCFG_ID");
            entity.Property(e => e.CtsEdicfgId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTS_EDICFG_ID");
            entity.Property(e => e.CtsHasevents)
                .HasPrecision(1)
                .HasColumnName("CTS_HASEVENTS");
            entity.Property(e => e.CtsHassnapshots)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("0  ")
                .HasColumnName("CTS_HASSNAPSHOTS");
            entity.Property(e => e.CtsInventory)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("0  ")
                .HasColumnName("CTS_INVENTORY");
            entity.Property(e => e.CtsKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("CTS_KEY");
            entity.Property(e => e.CtsLabeltype)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CTS_LABELTYPE");
            entity.Property(e => e.CtsLoadingmode)
                .HasMaxLength(19)
                .IsUnicode(false)
                .HasColumnName("CTS_LOADINGMODE");
            entity.Property(e => e.CtsLoadingparams)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("CTS_LOADINGPARAMS");
            entity.Property(e => e.CtsOthercounterId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTS_OTHERCOUNTER_ID");
            entity.Property(e => e.CtsParentId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTS_PARENT_ID");
            entity.Property(e => e.CtsProdplanId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTS_PRODPLAN_ID");
            entity.Property(e => e.CtsScriptdefId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTS_SCRIPTDEF_ID");
            entity.Property(e => e.CtsSheettype)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CTS_SHEETTYPE");
            entity.Property(e => e.CtsShortdescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CTS_SHORTDESCR");
            entity.Property(e => e.CtsStockId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTS_STOCK_ID");
            entity.Property(e => e.CtsUniquenos)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("0  ")
                .HasColumnName("CTS_UNIQUENOS");
            entity.Property(e => e.CtsVerificationmode)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("CTS_VERIFICATIONMODE");
            entity.Property(e => e.OlsObjectlogId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_OBJECTLOG_ID");

            entity.HasOne(d => d.OlsObjectlog).WithMany(p => p.JLogcontainersets)
                .HasForeignKey(d => d.OlsObjectlogId)
                .HasConstraintName("FK_OL_LOGCONTAINERSET");
        });

        modelBuilder.Entity<JLogcontainersetinfo>(entity =>
        {
            entity.HasKey(e => e.OlsId).HasName("PK_LOGCONTAINERSETINFO");

            entity.ToTable("J_LOGCONTAINERSETINFO", "JITTOE");

            entity.HasIndex(e => e.OlsObjectlogId, "I_OL_LOGCONTAINERSETINFO");

            entity.Property(e => e.OlsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_ID");
            entity.Property(e => e.CtsiContainersetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTSI_CONTAINERSET_ID");
            entity.Property(e => e.CtsiDescr)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("CTSI_DESCR");
            entity.Property(e => e.CtsiKey1)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CTSI_KEY1");
            entity.Property(e => e.CtsiKey2)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CTSI_KEY2");
            entity.Property(e => e.CtsiKey3)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CTSI_KEY3");
            entity.Property(e => e.CtsiRefcontainersetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTSI_REFCONTAINERSET_ID");
            entity.Property(e => e.CtsiStringvalue)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("CTSI_STRINGVALUE");
            entity.Property(e => e.CtsiTimevalue)
                .HasColumnType("DATE")
                .HasColumnName("CTSI_TIMEVALUE");
            entity.Property(e => e.CtsiType)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasColumnName("CTSI_TYPE");
            entity.Property(e => e.OlsObjectlogId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_OBJECTLOG_ID");

            entity.HasOne(d => d.OlsObjectlog).WithMany(p => p.JLogcontainersetinfos)
                .HasForeignKey(d => d.OlsObjectlogId)
                .HasConstraintName("FK_OL_LOGCONTAINERSETINFO");
        });

        modelBuilder.Entity<JLogcontainersetloc>(entity =>
        {
            entity.HasKey(e => e.OlsId).HasName("PK_LOGCONTAINERSETLOC");

            entity.ToTable("J_LOGCONTAINERSETLOC", "JITTOE");

            entity.HasIndex(e => e.OlsObjectlogId, "I_OL_LOGCONTAINERSETLOC");

            entity.Property(e => e.OlsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_ID");
            entity.Property(e => e.CtslContainersetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTSL_CONTAINERSET_ID");
            entity.Property(e => e.CtslContractId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTSL_CONTRACT_ID");
            entity.Property(e => e.CtslIsdefault)
                .HasPrecision(1)
                .HasColumnName("CTSL_ISDEFAULT");
            entity.Property(e => e.CtslLocationId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTSL_LOCATION_ID");
            entity.Property(e => e.OlsObjectlogId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_OBJECTLOG_ID");

            entity.HasOne(d => d.OlsObjectlog).WithMany(p => p.JLogcontainersetlocs)
                .HasForeignKey(d => d.OlsObjectlogId)
                .HasConstraintName("FK_OL_LOGCONTAINERSETLOC");
        });

        modelBuilder.Entity<JLogcontainersubject>(entity =>
        {
            entity.HasKey(e => e.OlsId).HasName("PK_LOGCONTAINERSUBJECT");

            entity.ToTable("J_LOGCONTAINERSUBJECT", "JITTOE");

            entity.HasIndex(e => e.OlsObjectlogId, "I_OL_LOGCONTAINERSUBJECT");

            entity.Property(e => e.OlsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_ID");
            entity.Property(e => e.CtesAmount)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("CTES_AMOUNT");
            entity.Property(e => e.CtesContainerentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTES_CONTAINERENTRY_ID");
            entity.Property(e => e.CtesOrderentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTES_ORDERENTRY_ID");
            entity.Property(e => e.CtesSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTES_SUBJECT_ID");
            entity.Property(e => e.CtesUnitofmeasureId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTES_UNITOFMEASURE_ID");
            entity.Property(e => e.OlsObjectlogId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_OBJECTLOG_ID");

            entity.HasOne(d => d.OlsObjectlog).WithMany(p => p.JLogcontainersubjects)
                .HasForeignKey(d => d.OlsObjectlogId)
                .HasConstraintName("FK_OL_LOGCONTAINERSUBJECT");
        });

        modelBuilder.Entity<JLogcontainertype>(entity =>
        {
            entity.HasKey(e => e.OlsId).HasName("PK_LOGCONTAINERTYPE");

            entity.ToTable("J_LOGCONTAINERTYPE", "JITTOE");

            entity.HasIndex(e => e.OlsObjectlogId, "I_OL_LOGCONTAINERTYPE");

            entity.Property(e => e.OlsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_ID");
            entity.Property(e => e.CttContainertypesetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTT_CONTAINERTYPESET_ID");
            entity.Property(e => e.CttDescr)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("CTT_DESCR");
            entity.Property(e => e.CttDimuomId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTT_DIMUOM_ID");
            entity.Property(e => e.CttDimx)
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("CTT_DIMX");
            entity.Property(e => e.CttDimy)
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("CTT_DIMY");
            entity.Property(e => e.CttDimz)
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("CTT_DIMZ");
            entity.Property(e => e.CttExpendable)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("0  ")
                .HasColumnName("CTT_EXPENDABLE");
            entity.Property(e => e.CttIconfile)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CTT_ICONFILE");
            entity.Property(e => e.CttKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("CTT_KEY");
            entity.Property(e => e.CttShortdescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CTT_SHORTDESCR");
            entity.Property(e => e.CttSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTT_SUBJECT_ID");
            entity.Property(e => e.CttWeight)
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("CTT_WEIGHT");
            entity.Property(e => e.CttWeightuomId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTT_WEIGHTUOM_ID");
            entity.Property(e => e.OlsObjectlogId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_OBJECTLOG_ID");

            entity.HasOne(d => d.OlsObjectlog).WithMany(p => p.JLogcontainertypes)
                .HasForeignKey(d => d.OlsObjectlogId)
                .HasConstraintName("FK_OL_LOGCONTAINERTYPE");
        });

        modelBuilder.Entity<JLogcontainerusage>(entity =>
        {
            entity.HasKey(e => e.OlsId).HasName("PK_LOGCONTAINERUSAGE");

            entity.ToTable("J_LOGCONTAINERUSAGE", "JITTOE");

            entity.HasIndex(e => e.OlsObjectlogId, "I_OL_LOGCONTAINERUSAGE");

            entity.Property(e => e.OlsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_ID");
            entity.Property(e => e.CtuChomogeneous)
                .HasPrecision(1)
                .HasColumnName("CTU_CHOMOGENEOUS");
            entity.Property(e => e.CtuColumns)
                .HasPrecision(3)
                .HasColumnName("CTU_COLUMNS");
            entity.Property(e => e.CtuContainermultiple)
                .HasPrecision(4)
                .HasColumnName("CTU_CONTAINERMULTIPLE");
            entity.Property(e => e.CtuContainertypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTU_CONTAINERTYPE_ID");
            entity.Property(e => e.CtuDepth)
                .HasPrecision(3)
                .HasDefaultValueSql("1  ")
                .HasColumnName("CTU_DEPTH");
            entity.Property(e => e.CtuDescr)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("CTU_DESCR");
            entity.Property(e => e.CtuElemexpression)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasDefaultValueSql("'None'  ")
                .HasColumnName("CTU_ELEMEXPRESSION");
            entity.Property(e => e.CtuHoldscontainers)
                .HasPrecision(1)
                .HasColumnName("CTU_HOLDSCONTAINERS");
            entity.Property(e => e.CtuHoldspackingmaterial)
                .HasPrecision(1)
                .HasColumnName("CTU_HOLDSPACKINGMATERIAL");
            entity.Property(e => e.CtuHoldssubjects)
                .HasPrecision(1)
                .HasColumnName("CTU_HOLDSSUBJECTS");
            entity.Property(e => e.CtuHomogeneous)
                .HasPrecision(1)
                .HasColumnName("CTU_HOMOGENEOUS");
            entity.Property(e => e.CtuHomogeneouscontainers)
                .HasPrecision(1)
                .HasColumnName("CTU_HOMOGENEOUSCONTAINERS");
            entity.Property(e => e.CtuHomogeneousentries)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("0  ")
                .HasColumnName("CTU_HOMOGENEOUSENTRIES");
            entity.Property(e => e.CtuImageId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTU_IMAGE_ID");
            entity.Property(e => e.CtuInvalidid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTU_INVALIDID");
            entity.Property(e => e.CtuKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("CTU_KEY");
            entity.Property(e => e.CtuMaxamount)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("CTU_MAXAMOUNT");
            entity.Property(e => e.CtuMaxcontainers)
                .HasPrecision(4)
                .HasColumnName("CTU_MAXCONTAINERS");
            entity.Property(e => e.CtuMaxentries)
                .HasPrecision(4)
                .HasColumnName("CTU_MAXENTRIES");
            entity.Property(e => e.CtuNegativeallowed)
                .HasPrecision(1)
                .HasColumnName("CTU_NEGATIVEALLOWED");
            entity.Property(e => e.CtuOrderconstraint)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("CTU_ORDERCONSTRAINT");
            entity.Property(e => e.CtuPosimages)
                .HasPrecision(1)
                .HasColumnName("CTU_POSIMAGES");
            entity.Property(e => e.CtuPosnamemap)
                .HasPrecision(1)
                .HasColumnName("CTU_POSNAMEMAP");
            entity.Property(e => e.CtuPosordermaptype)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("CTU_POSORDERMAPTYPE");
            entity.Property(e => e.CtuState)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasDefaultValueSql("'Available'  ")
                .HasColumnName("CTU_STATE");
            entity.Property(e => e.CtuSubjectclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CTU_SUBJECTCLASS_ID");
            entity.Property(e => e.CtuSwapcolumns)
                .HasPrecision(1)
                .HasColumnName("CTU_SWAPCOLUMNS");
            entity.Property(e => e.CtuSwaprows)
                .HasPrecision(1)
                .HasColumnName("CTU_SWAPROWS");
            entity.Property(e => e.CtuTvalidfrom)
                .HasColumnType("DATE")
                .HasColumnName("CTU_TVALIDFROM");
            entity.Property(e => e.CtuTvaliduntil)
                .HasColumnType("DATE")
                .HasColumnName("CTU_TVALIDUNTIL");
            entity.Property(e => e.OlsObjectlogId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_OBJECTLOG_ID");

            entity.HasOne(d => d.OlsObjectlog).WithMany(p => p.JLogcontainerusages)
                .HasForeignKey(d => d.OlsObjectlogId)
                .HasConstraintName("FK_OL_LOGCONTAINERUSAGE");
        });

        modelBuilder.Entity<JLogcontractinfo>(entity =>
        {
            entity.HasKey(e => e.OlsId).HasName("PK_LOGCONTRACTINFO");

            entity.ToTable("J_LOGCONTRACTINFO", "JITTOE");

            entity.HasIndex(e => e.OlsObjectlogId, "I_OL_LOGCONTRACTINFO");

            entity.Property(e => e.OlsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_ID");
            entity.Property(e => e.CiAddressId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CI_ADDRESS_ID");
            entity.Property(e => e.CiContractId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CI_CONTRACT_ID");
            entity.Property(e => e.CiErpentityId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("CI_ERPENTITY_ID");
            entity.Property(e => e.CiIntvalue)
                .HasPrecision(10)
                .HasColumnName("CI_INTVALUE");
            entity.Property(e => e.CiKey1)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("CI_KEY1");
            entity.Property(e => e.CiKey2)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("CI_KEY2");
            entity.Property(e => e.CiKey3)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("CI_KEY3");
            entity.Property(e => e.CiStringvalue)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("CI_STRINGVALUE");
            entity.Property(e => e.CiTimevalue)
                .HasColumnType("DATE")
                .HasColumnName("CI_TIMEVALUE");
            entity.Property(e => e.CiType)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("CI_TYPE");
            entity.Property(e => e.OlsObjectlogId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_OBJECTLOG_ID");

            entity.HasOne(d => d.OlsObjectlog).WithMany(p => p.JLogcontractinfos)
                .HasForeignKey(d => d.OlsObjectlogId)
                .HasConstraintName("FK_OL_LOGCONTRACTINFO");
        });

        modelBuilder.Entity<JLogentry>(entity =>
        {
            entity.HasKey(e => e.LogeId).HasName("PK_LOGENTRY");

            entity.ToTable("J_LOGENTRY", "JITTOE");

            entity.HasIndex(e => e.LogeLogId, "I_LOG_LOGENTRY");

            entity.HasIndex(e => e.LogeSessionId, "I_SESSION_LOGENTRY");

            entity.HasIndex(e => e.LogeTransitionId, "I_TRANSITION_LOGENTRY");

            entity.Property(e => e.LogeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("LOGE_ID");
            entity.Property(e => e.LogeApplication)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("LOGE_APPLICATION");
            entity.Property(e => e.LogeContext)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("LOGE_CONTEXT");
            entity.Property(e => e.LogeLogId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("LOGE_LOG_ID");
            entity.Property(e => e.LogeMessage)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("LOGE_MESSAGE");
            entity.Property(e => e.LogeMessagecode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("LOGE_MESSAGECODE");
            entity.Property(e => e.LogeMsgseverity)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("LOGE_MSGSEVERITY");
            entity.Property(e => e.LogeSessionId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("LOGE_SESSION_ID");
            entity.Property(e => e.LogeTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("LOGE_TCREATION");
            entity.Property(e => e.LogeTransitionId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("LOGE_TRANSITION_ID");

            entity.HasOne(d => d.LogeLog).WithMany(p => p.JLogentries)
                .HasForeignKey(d => d.LogeLogId)
                .HasConstraintName("FK_LOG_LOGENTRY");

            entity.HasOne(d => d.LogeSession).WithMany(p => p.JLogentries)
                .HasForeignKey(d => d.LogeSessionId)
                .HasConstraintName("FK_SESSION_LOGENTRY");

            entity.HasOne(d => d.LogeTransition).WithMany(p => p.JLogentries)
                .HasForeignKey(d => d.LogeTransitionId)
                .HasConstraintName("FK_TRANSITION_LOGENTRY");
        });

        modelBuilder.Entity<JLogentryinfo>(entity =>
        {
            entity.HasKey(e => e.LogeiId).HasName("PK_LOGENTRYINFO");

            entity.ToTable("J_LOGENTRYINFO", "JITTOE");

            entity.HasIndex(e => e.LogeiLogentryId, "I_LOGENTRY_LEINFO");

            entity.HasIndex(e => new { e.LogeiLogentryId, e.LogeiType, e.LogeiKey1 }, "UN_LOGEI_INFO").IsUnique();

            entity.Property(e => e.LogeiId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("LOGEI_ID");
            entity.Property(e => e.LogeiKey1)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("LOGEI_KEY1");
            entity.Property(e => e.LogeiLogentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("LOGEI_LOGENTRY_ID");
            entity.Property(e => e.LogeiStringvalue)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("LOGEI_STRINGVALUE");
            entity.Property(e => e.LogeiTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("LOGEI_TCREATION");
            entity.Property(e => e.LogeiTimevalue)
                .HasColumnType("DATE")
                .HasColumnName("LOGEI_TIMEVALUE");
            entity.Property(e => e.LogeiType)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("LOGEI_TYPE");

            entity.HasOne(d => d.LogeiLogentry).WithMany(p => p.JLogentryinfos)
                .HasForeignKey(d => d.LogeiLogentryId)
                .HasConstraintName("FK_LOGENTRY_LEINFO");
        });

        modelBuilder.Entity<JLoggroupmember>(entity =>
        {
            entity.HasKey(e => e.OlsId).HasName("PK_LOGGROUPMEMBER");

            entity.ToTable("J_LOGGROUPMEMBER", "JITTOE");

            entity.HasIndex(e => e.OlsObjectlogId, "I_OL_LOGGROUPMEMBER");

            entity.Property(e => e.OlsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_ID");
            entity.Property(e => e.GmGroupId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("GM_GROUP_ID");
            entity.Property(e => e.GmUserId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("GM_USER_ID");
            entity.Property(e => e.OlsObjectlogId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_OBJECTLOG_ID");

            entity.HasOne(d => d.OlsObjectlog).WithMany(p => p.JLoggroupmembers)
                .HasForeignKey(d => d.OlsObjectlogId)
                .HasConstraintName("FK_OL_LOGGROUPMEMBER");
        });

        modelBuilder.Entity<JLoginpolicy>(entity =>
        {
            entity.HasKey(e => e.LpId).HasName("PK_LOGINPOLICY");

            entity.ToTable("J_LOGINPOLICY", "JITTOE");

            entity.HasIndex(e => e.LpCompanyId, "I_COMPANY_LOGINPOLICY");

            entity.HasIndex(e => e.LpKey, "UN_LP_KEY").IsUnique();

            entity.Property(e => e.LpId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("LP_ID");
            entity.Property(e => e.LpCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("LP_COMPANY_ID");
            entity.Property(e => e.LpDescr)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("LP_DESCR");
            entity.Property(e => e.LpKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("LP_KEY");
            entity.Property(e => e.LpTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("LP_TCREATION");
            entity.Property(e => e.LpTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("LP_TUPDATE");

            entity.HasOne(d => d.LpCompany).WithMany(p => p.JLoginpolicies)
                .HasForeignKey(d => d.LpCompanyId)
                .HasConstraintName("FK_COMPANY_LOGINPOLICY");
        });

        modelBuilder.Entity<JLoginpolicyitem>(entity =>
        {
            entity.HasKey(e => e.LpiId).HasName("PK_LOGINPOLICYITEM");

            entity.ToTable("J_LOGINPOLICYITEM", "JITTOE");

            entity.HasIndex(e => e.LpiCodetableId, "I_CODETABLE_LPOLICYITEM");

            entity.HasIndex(e => e.LpiLoginpolicyId, "I_LPOLICY_LPOLICYITEM");

            entity.HasIndex(e => e.LpiUsersetId, "I_USERSET_LPOLICYITEM");

            entity.HasIndex(e => e.LpiUserId, "I_USER_LPOLICYITEM");

            entity.HasIndex(e => new { e.LpiLoginpolicyId, e.LpiUsersetId, e.LpiUserId, e.LpiType, e.LpiKey }, "UN_LPI_ITEM").IsUnique();

            entity.Property(e => e.LpiId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("LPI_ID");
            entity.Property(e => e.LpiCodetableId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("LPI_CODETABLE_ID");
            entity.Property(e => e.LpiKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("LPI_KEY");
            entity.Property(e => e.LpiLoginpolicyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("LPI_LOGINPOLICY_ID");
            entity.Property(e => e.LpiStringvalue)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("LPI_STRINGVALUE");
            entity.Property(e => e.LpiTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("LPI_TCREATION");
            entity.Property(e => e.LpiTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("LPI_TUPDATE");
            entity.Property(e => e.LpiType)
                .HasMaxLength(29)
                .IsUnicode(false)
                .HasColumnName("LPI_TYPE");
            entity.Property(e => e.LpiUserId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("LPI_USER_ID");
            entity.Property(e => e.LpiUsersetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("LPI_USERSET_ID");

            entity.HasOne(d => d.LpiCodetable).WithMany(p => p.JLoginpolicyitems)
                .HasForeignKey(d => d.LpiCodetableId)
                .HasConstraintName("FK_CODETABLE_LPOLICYITEM");

            entity.HasOne(d => d.LpiLoginpolicy).WithMany(p => p.JLoginpolicyitems)
                .HasForeignKey(d => d.LpiLoginpolicyId)
                .HasConstraintName("FK_LPOLICY_LPOLICYITEM");

            entity.HasOne(d => d.LpiUser).WithMany(p => p.JLoginpolicyitems)
                .HasForeignKey(d => d.LpiUserId)
                .HasConstraintName("FK_USER_LPOLICYITEM");

            entity.HasOne(d => d.LpiUserset).WithMany(p => p.JLoginpolicyitems)
                .HasForeignKey(d => d.LpiUsersetId)
                .HasConstraintName("FK_USERSET_LPOLICYITEM");
        });

        modelBuilder.Entity<JLogprodjob>(entity =>
        {
            entity.HasKey(e => e.OlsId).HasName("PK_LOGPRODJOB");

            entity.ToTable("J_LOGPRODJOB", "JITTOE");

            entity.HasIndex(e => e.OlsObjectlogId, "I_OL_LOGPRODJOB");

            entity.Property(e => e.OlsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_ID");
            entity.Property(e => e.OlsObjectlogId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_OBJECTLOG_ID");
            entity.Property(e => e.PjAltseqno)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("PJ_ALTSEQNO");
            entity.Property(e => e.PjCommcontrolId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJ_COMMCONTROL_ID");
            entity.Property(e => e.PjContainerId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJ_CONTAINER_ID");
            entity.Property(e => e.PjDescr)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PJ_DESCR");
            entity.Property(e => e.PjDeststockId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJ_DESTSTOCK_ID");
            entity.Property(e => e.PjDeststocklocId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJ_DESTSTOCKLOC_ID");
            entity.Property(e => e.PjGroup)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PJ_GROUP");
            entity.Property(e => e.PjNo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("PJ_NO");
            entity.Property(e => e.PjOrderId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJ_ORDER_ID");
            entity.Property(e => e.PjPaintplanentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJ_PAINTPLANENTRY_ID");
            entity.Property(e => e.PjParentId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJ_PARENT_ID");
            entity.Property(e => e.PjProdjobsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJ_PRODJOBSET_ID");
            entity.Property(e => e.PjProdreplenishmentcfgId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJ_PRODREPLENISHMENTCFG_ID");
            entity.Property(e => e.PjProdstepId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJ_PRODSTEP_ID");
            entity.Property(e => e.PjProdunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJ_PRODUNIT_ID");
            entity.Property(e => e.PjQualifier1)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("PJ_QUALIFIER1");
            entity.Property(e => e.PjQualifier2)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("PJ_QUALIFIER2");
            entity.Property(e => e.PjQualifier3)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("PJ_QUALIFIER3");
            entity.Property(e => e.PjRetries)
                .HasPrecision(6)
                .HasColumnName("PJ_RETRIES");
            entity.Property(e => e.PjRetryreason)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("PJ_RETRYREASON");
            entity.Property(e => e.PjScheduledtime)
                .HasColumnType("DATE")
                .HasColumnName("PJ_SCHEDULEDTIME");
            entity.Property(e => e.PjSeqno)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("PJ_SEQNO");
            entity.Property(e => e.PjSourcestocklocId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJ_SOURCESTOCKLOC_ID");
            entity.Property(e => e.PjStartseq)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJ_STARTSEQ");
            entity.Property(e => e.PjState)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("PJ_STATE");
            entity.Property(e => e.PjStrategy)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("PJ_STRATEGY");
            entity.Property(e => e.PjWorkflowjobId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJ_WORKFLOWJOB_ID");
            entity.Property(e => e.PjWorkflowtaskId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJ_WORKFLOWTASK_ID");

            entity.HasOne(d => d.OlsObjectlog).WithMany(p => p.JLogprodjobs)
                .HasForeignKey(d => d.OlsObjectlogId)
                .HasConstraintName("FK_OL_LOGPRODJOB");
        });

        modelBuilder.Entity<JLogprodstepinfo>(entity =>
        {
            entity.HasKey(e => e.OlsId).HasName("PK_LOGPRODSTEPINFO");

            entity.ToTable("J_LOGPRODSTEPINFO", "JITTOE");

            entity.HasIndex(e => e.OlsObjectlogId, "I_OL_LOGPRODSTEPINFO");

            entity.Property(e => e.OlsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_ID");
            entity.Property(e => e.OlsObjectlogId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_OBJECTLOG_ID");
            entity.Property(e => e.PrsiErpentityId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRSI_ERPENTITY_ID");
            entity.Property(e => e.PrsiKey1)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("PRSI_KEY1");
            entity.Property(e => e.PrsiKey2)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("PRSI_KEY2");
            entity.Property(e => e.PrsiKey3)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("PRSI_KEY3");
            entity.Property(e => e.PrsiProdstepId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRSI_PRODSTEP_ID");
            entity.Property(e => e.PrsiStringvalue)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("PRSI_STRINGVALUE");
            entity.Property(e => e.PrsiTimevalue)
                .HasColumnType("DATE")
                .HasColumnName("PRSI_TIMEVALUE");
            entity.Property(e => e.PrsiType)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("PRSI_TYPE");

            entity.HasOne(d => d.OlsObjectlog).WithMany(p => p.JLogprodstepinfos)
                .HasForeignKey(d => d.OlsObjectlogId)
                .HasConstraintName("FK_OL_LOGPRODSTEPINFO");
        });

        modelBuilder.Entity<JLogprodunitinfo>(entity =>
        {
            entity.HasKey(e => e.OlsId).HasName("PK_LOGPRODUNITINFO");

            entity.ToTable("J_LOGPRODUNITINFO", "JITTOE");

            entity.HasIndex(e => e.OlsObjectlogId, "I_OL_LOGPRODUNITINFO");

            entity.Property(e => e.OlsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_ID");
            entity.Property(e => e.OlsObjectlogId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_OBJECTLOG_ID");
            entity.Property(e => e.PuiErpentityId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PUI_ERPENTITY_ID");
            entity.Property(e => e.PuiImageId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PUI_IMAGE_ID");
            entity.Property(e => e.PuiIntvalue)
                .HasPrecision(10)
                .HasColumnName("PUI_INTVALUE");
            entity.Property(e => e.PuiKey1)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("PUI_KEY1");
            entity.Property(e => e.PuiKey2)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("PUI_KEY2");
            entity.Property(e => e.PuiKey3)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("PUI_KEY3");
            entity.Property(e => e.PuiProdunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PUI_PRODUNIT_ID");
            entity.Property(e => e.PuiStringvalue)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("PUI_STRINGVALUE");
            entity.Property(e => e.PuiTimevalue)
                .HasColumnType("DATE")
                .HasColumnName("PUI_TIMEVALUE");
            entity.Property(e => e.PuiType)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("PUI_TYPE");

            entity.HasOne(d => d.OlsObjectlog).WithMany(p => p.JLogprodunitinfos)
                .HasForeignKey(d => d.OlsObjectlogId)
                .HasConstraintName("FK_OL_LOGPRODUNITINFO");
        });

        modelBuilder.Entity<JLogproperty>(entity =>
        {
            entity.HasKey(e => e.OlsId).HasName("PK_LOGPROPERTY");

            entity.ToTable("J_LOGPROPERTY", "JITTOE");

            entity.HasIndex(e => e.OlsObjectlogId, "I_OBJECTLOG_LOGPROPERTY");

            entity.Property(e => e.OlsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_ID");
            entity.Property(e => e.OlsObjectlogId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_OBJECTLOG_ID");
            entity.Property(e => e.ProDescr)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("PRO_DESCR");
            entity.Property(e => e.ProEnabled)
                .HasPrecision(1)
                .HasColumnName("PRO_ENABLED");
            entity.Property(e => e.ProKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PRO_KEY");
            entity.Property(e => e.ProLength)
                .HasPrecision(4)
                .HasColumnName("PRO_LENGTH");
            entity.Property(e => e.ProName)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("PRO_NAME");
            entity.Property(e => e.ProOwner)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("PRO_OWNER");
            entity.Property(e => e.ProPropertysetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRO_PROPERTYSET_ID");
            entity.Property(e => e.ProValue)
                .HasMaxLength(3072)
                .IsUnicode(false)
                .HasColumnName("PRO_VALUE");
            entity.Property(e => e.ProValuetype)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("PRO_VALUETYPE");

            entity.HasOne(d => d.OlsObjectlog).WithMany(p => p.JLogproperties)
                .HasForeignKey(d => d.OlsObjectlogId)
                .HasConstraintName("FK_OBJECTLOG_LOGPROPERTY");
        });

        modelBuilder.Entity<JLogpropertyset>(entity =>
        {
            entity.HasKey(e => e.OlsId).HasName("PK_LOGPROPERTYSET");

            entity.ToTable("J_LOGPROPERTYSET", "JITTOE");

            entity.HasIndex(e => e.OlsObjectlogId, "I_OL_LOGPROPERTYSET");

            entity.Property(e => e.OlsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_ID");
            entity.Property(e => e.OlsObjectlogId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_OBJECTLOG_ID");
            entity.Property(e => e.ProsCheckoutdescr)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("PROS_CHECKOUTDESCR");
            entity.Property(e => e.ProsDescr)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("PROS_DESCR");
            entity.Property(e => e.ProsFilename)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("PROS_FILENAME");
            entity.Property(e => e.ProsKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("PROS_KEY");
            entity.Property(e => e.ProsTimecheckout)
                .HasColumnType("DATE")
                .HasColumnName("PROS_TIMECHECKOUT");
            entity.Property(e => e.ProsType)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("PROS_TYPE");

            entity.HasOne(d => d.OlsObjectlog).WithMany(p => p.JLogpropertysets)
                .HasForeignKey(d => d.OlsObjectlogId)
                .HasConstraintName("FK_OL_LOGPROPERTYSET");
        });

        modelBuilder.Entity<JLogserver>(entity =>
        {
            entity.HasKey(e => e.OlsId).HasName("PK_LOGSERVER");

            entity.ToTable("J_LOGSERVER", "JITTOE");

            entity.HasIndex(e => e.OlsObjectlogId, "I_OL_LOGSERVER");

            entity.Property(e => e.OlsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_ID");
            entity.Property(e => e.OlsObjectlogId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_OBJECTLOG_ID");
            entity.Property(e => e.SerDescr)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("SER_DESCR");
            entity.Property(e => e.SerKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SER_KEY");
            entity.Property(e => e.SerLogId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SER_LOG_ID");
            entity.Property(e => e.SerLogenabled)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("1  ")
                .HasColumnName("SER_LOGENABLED");
            entity.Property(e => e.SerUseridentpolicyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SER_USERIDENTPOLICY_ID");

            entity.HasOne(d => d.OlsObjectlog).WithMany(p => p.JLogservers)
                .HasForeignKey(d => d.OlsObjectlogId)
                .HasConstraintName("FK_OL_LOGSERVER");
        });

        modelBuilder.Entity<JLogservice>(entity =>
        {
            entity.HasKey(e => e.OlsId).HasName("PK_LOGSERVICE");

            entity.ToTable("J_LOGSERVICE", "JITTOE");

            entity.HasIndex(e => e.OlsObjectlogId, "I_OL_LOGSERVICE");

            entity.Property(e => e.OlsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_ID");
            entity.Property(e => e.OlsObjectlogId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_OBJECTLOG_ID");
            entity.Property(e => e.SvcEnabled)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("1  ")
                .HasColumnName("SVC_ENABLED");
            entity.Property(e => e.SvcServicedefId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SVC_SERVICEDEF_ID");
            entity.Property(e => e.SvcStationId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SVC_STATION_ID");

            entity.HasOne(d => d.OlsObjectlog).WithMany(p => p.JLogservices)
                .HasForeignKey(d => d.OlsObjectlogId)
                .HasConstraintName("FK_OL_LOGSERVICE");
        });

        modelBuilder.Entity<JLogservicedef>(entity =>
        {
            entity.HasKey(e => e.OlsId).HasName("PK_LOGSERVICEDEF");

            entity.ToTable("J_LOGSERVICEDEF", "JITTOE");

            entity.HasIndex(e => e.OlsObjectlogId, "I_OL_LOGSERVICEDEF");

            entity.Property(e => e.OlsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_ID");
            entity.Property(e => e.OlsObjectlogId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_OBJECTLOG_ID");
            entity.Property(e => e.SvcdConfigdefId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SVCD_CONFIGDEF_ID");
            entity.Property(e => e.SvcdDescr)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("SVCD_DESCR");
            entity.Property(e => e.SvcdDriver)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SVCD_DRIVER");
            entity.Property(e => e.SvcdKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SVCD_KEY");
            entity.Property(e => e.SvcdName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("SVCD_NAME");
            entity.Property(e => e.SvcdServerId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SVCD_SERVER_ID");

            entity.HasOne(d => d.OlsObjectlog).WithMany(p => p.JLogservicedefs)
                .HasForeignKey(d => d.OlsObjectlogId)
                .HasConstraintName("FK_OL_LOGSERVICEDEF");
        });

        modelBuilder.Entity<JLogservicedefpropertyset>(entity =>
        {
            entity.HasKey(e => e.OlsId).HasName("PK_LOGSERVICEDEFPROPERTYSET");

            entity.ToTable("J_LOGSERVICEDEFPROPERTYSET", "JITTOE");

            entity.HasIndex(e => e.OlsObjectlogId, "I_OL_LOGSERVICEDEFPROPERTYSET");

            entity.Property(e => e.OlsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_ID");
            entity.Property(e => e.OlsObjectlogId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_OBJECTLOG_ID");
            entity.Property(e => e.SvcdpsPropertysetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SVCDPS_PROPERTYSET_ID");
            entity.Property(e => e.SvcdpsServicedefId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SVCDPS_SERVICEDEF_ID");

            entity.HasOne(d => d.OlsObjectlog).WithMany(p => p.JLogservicedefpropertysets)
                .HasForeignKey(d => d.OlsObjectlogId)
                .HasConstraintName("FK_OL_LOGSERVICEDEFPROPERTYSET");
        });

        modelBuilder.Entity<JLogservicepropertyset>(entity =>
        {
            entity.HasKey(e => e.OlsId).HasName("PK_LOGSERVICEPROPERTYSET");

            entity.ToTable("J_LOGSERVICEPROPERTYSET", "JITTOE");

            entity.HasIndex(e => e.OlsObjectlogId, "I_OL_LOGSERVICEPROPERTYSET");

            entity.Property(e => e.OlsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_ID");
            entity.Property(e => e.OlsObjectlogId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_OBJECTLOG_ID");
            entity.Property(e => e.SvcpsPropertysetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SVCPS_PROPERTYSET_ID");
            entity.Property(e => e.SvcpsServiceId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SVCPS_SERVICE_ID");

            entity.HasOne(d => d.OlsObjectlog).WithMany(p => p.JLogservicepropertysets)
                .HasForeignKey(d => d.OlsObjectlogId)
                .HasConstraintName("FK_OL_LOGSERVICEPROPERTYSET");
        });

        modelBuilder.Entity<JLogset>(entity =>
        {
            entity.HasKey(e => e.LogsId).HasName("PK_LOGSET");

            entity.ToTable("J_LOGSET", "JITTOE");

            entity.HasIndex(e => e.LogsKey, "UN_LOGS_KEY").IsUnique();

            entity.Property(e => e.LogsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("LOGS_ID");
            entity.Property(e => e.LogsDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("LOGS_DESCR");
            entity.Property(e => e.LogsKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("LOGS_KEY");
            entity.Property(e => e.LogsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("LOGS_TCREATION");
            entity.Property(e => e.LogsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("LOGS_TUPDATE");
        });

        modelBuilder.Entity<JLogstation>(entity =>
        {
            entity.HasKey(e => e.OlsId).HasName("PK_LOGSTATION");

            entity.ToTable("J_LOGSTATION", "JITTOE");

            entity.HasIndex(e => e.OlsObjectlogId, "I_OL_LOGSTATION");

            entity.Property(e => e.OlsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_ID");
            entity.Property(e => e.OlsObjectlogId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_OBJECTLOG_ID");
            entity.Property(e => e.StatAccesspolicy)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasDefaultValueSql("'Shared'  ")
                .HasColumnName("STAT_ACCESSPOLICY");
            entity.Property(e => e.StatComment)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("STAT_COMMENT");
            entity.Property(e => e.StatDebugargs)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("STAT_DEBUGARGS");
            entity.Property(e => e.StatDebugpolicy)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasDefaultValueSql("'None'  ")
                .HasColumnName("STAT_DEBUGPOLICY");
            entity.Property(e => e.StatDebuguntiltime)
                .HasColumnType("DATE")
                .HasColumnName("STAT_DEBUGUNTILTIME");
            entity.Property(e => e.StatDescr)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("STAT_DESCR");
            entity.Property(e => e.StatEnabled)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("1  ")
                .HasColumnName("STAT_ENABLED");
            entity.Property(e => e.StatGroupId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STAT_GROUP_ID");
            entity.Property(e => e.StatKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("STAT_KEY");
            entity.Property(e => e.StatLogId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STAT_LOG_ID");
            entity.Property(e => e.StatLogenabled)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("1  ")
                .HasColumnName("STAT_LOGENABLED");
            entity.Property(e => e.StatLogintype)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("STAT_LOGINTYPE");
            entity.Property(e => e.StatName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("STAT_NAME");
            entity.Property(e => e.StatPrintpolicy)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("STAT_PRINTPOLICY");
            entity.Property(e => e.StatProdunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STAT_PRODUNIT_ID");
            entity.Property(e => e.StatProdunitclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STAT_PRODUNITCLASS_ID");
            entity.Property(e => e.StatQualificationclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STAT_QUALIFICATIONCLASS_ID");
            entity.Property(e => e.StatServerId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STAT_SERVER_ID");
            entity.Property(e => e.StatTanticketsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STAT_TANTICKETSET_ID");
            entity.Property(e => e.StatUseridentpolicyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STAT_USERIDENTPOLICY_ID");
            entity.Property(e => e.StatWorkplaceid)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("STAT_WORKPLACEID");

            entity.HasOne(d => d.OlsObjectlog).WithMany(p => p.JLogstations)
                .HasForeignKey(d => d.OlsObjectlogId)
                .HasConstraintName("FK_OL_LOGSTATION");
        });

        modelBuilder.Entity<JLogstockcfg>(entity =>
        {
            entity.HasKey(e => e.OlsId).HasName("PK_LOGSTOCKCFG");

            entity.ToTable("J_LOGSTOCKCFG", "JITTOE");

            entity.HasIndex(e => e.OlsObjectlogId, "I_OL_LOGSTOCKCFG");

            entity.Property(e => e.OlsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_ID");
            entity.Property(e => e.OlsObjectlogId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_OBJECTLOG_ID");
            entity.Property(e => e.StcfAttrvalues)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("STCF_ATTRVALUES");
            entity.Property(e => e.StcfContractId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STCF_CONTRACT_ID");
            entity.Property(e => e.StcfDescr)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("STCF_DESCR");
            entity.Property(e => e.StcfInfo1)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("STCF_INFO1");
            entity.Property(e => e.StcfInfo2)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("STCF_INFO2");
            entity.Property(e => e.StcfPriorityinscore)
                .HasPrecision(3)
                .HasDefaultValueSql("0  ")
                .HasColumnName("STCF_PRIORITYINSCORE");
            entity.Property(e => e.StcfProdstepId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STCF_PRODSTEP_ID");
            entity.Property(e => e.StcfProdunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STCF_PRODUNIT_ID");
            entity.Property(e => e.StcfQualityclass)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STCF_QUALITYCLASS");
            entity.Property(e => e.StcfRole)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("STCF_ROLE");
            entity.Property(e => e.StcfStockId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STCF_STOCK_ID");
            entity.Property(e => e.StcfStocklocId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STCF_STOCKLOC_ID");
            entity.Property(e => e.StcfStocklocclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STCF_STOCKLOCCLASS_ID");
            entity.Property(e => e.StcfStocklocstrategy)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasDefaultValueSql("'None'  ")
                .HasColumnName("STCF_STOCKLOCSTRATEGY");
            entity.Property(e => e.StcfSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STCF_SUBJECT_ID");
            entity.Property(e => e.StcfSubjectattrId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STCF_SUBJECTATTR_ID");
            entity.Property(e => e.StcfSubjectclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STCF_SUBJECTCLASS_ID");
            entity.Property(e => e.StcfSubjectcomptypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STCF_SUBJECTCOMPTYPE_ID");
            entity.Property(e => e.StcfSubjecttypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STCF_SUBJECTTYPE_ID");
            entity.Property(e => e.StcfTolocationId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STCF_TOLOCATION_ID");
            entity.Property(e => e.StcfTransitiontypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STCF_TRANSITIONTYPE_ID");

            entity.HasOne(d => d.OlsObjectlog).WithMany(p => p.JLogstockcfgs)
                .HasForeignKey(d => d.OlsObjectlogId)
                .HasConstraintName("FK_OL_LOGSTOCKCFG");
        });

        modelBuilder.Entity<JLogsubject>(entity =>
        {
            entity.HasKey(e => e.OlsId).HasName("PK_LOGSUBJECT");

            entity.ToTable("J_LOGSUBJECT", "JITTOE");

            entity.HasIndex(e => e.OlsObjectlogId, "I_OL_LOGSUBJECT");

            entity.Property(e => e.OlsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_ID");
            entity.Property(e => e.OlsObjectlogId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_OBJECTLOG_ID");
            entity.Property(e => e.SCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("S_COMPANY_ID");
            entity.Property(e => e.SDescr)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("S_DESCR");
            entity.Property(e => e.SEngineeringindex)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("S_ENGINEERINGINDEX");
            entity.Property(e => e.SNo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("S_NO");
            entity.Property(e => e.SSubjectstatusId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("S_SUBJECTSTATUS_ID");
            entity.Property(e => e.SSubjecttypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("S_SUBJECTTYPE_ID");
            entity.Property(e => e.SUnitofmeasureId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("S_UNITOFMEASURE_ID");

            entity.HasOne(d => d.OlsObjectlog).WithMany(p => p.JLogsubjects)
                .HasForeignKey(d => d.OlsObjectlogId)
                .HasConstraintName("FK_OL_LOGSUBJECT");
        });

        modelBuilder.Entity<JLogsubjectcomp>(entity =>
        {
            entity.HasKey(e => e.OlsId).HasName("PK_LOGSUBJECTCOMP");

            entity.ToTable("J_LOGSUBJECTCOMP", "JITTOE");

            entity.HasIndex(e => e.OlsObjectlogId, "I_OL_LOGSUBJECTCOMP");

            entity.Property(e => e.OlsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_ID");
            entity.Property(e => e.OlsObjectlogId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_OBJECTLOG_ID");
            entity.Property(e => e.ScInvalidid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SC_INVALIDID");
            entity.Property(e => e.ScProducedsubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SC_PRODUCEDSUBJECT_ID");
            entity.Property(e => e.ScSubjectcomptypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SC_SUBJECTCOMPTYPE_ID");
            entity.Property(e => e.ScTvalidfrom)
                .HasColumnType("DATE")
                .HasColumnName("SC_TVALIDFROM");
            entity.Property(e => e.ScTvaliduntil)
                .HasColumnType("DATE")
                .HasColumnName("SC_TVALIDUNTIL");

            entity.HasOne(d => d.OlsObjectlog).WithMany(p => p.JLogsubjectcomps)
                .HasForeignKey(d => d.OlsObjectlogId)
                .HasConstraintName("FK_OL_LOGSUBJECTCOMP");
        });

        modelBuilder.Entity<JLogsubjectcompelem>(entity =>
        {
            entity.HasKey(e => e.OlsId).HasName("PK_LOGSUBJECTCOMPELEM");

            entity.ToTable("J_LOGSUBJECTCOMPELEM", "JITTOE");

            entity.HasIndex(e => e.OlsObjectlogId, "I_OL_LOGSUBJECTCOMPELEM");

            entity.Property(e => e.OlsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_ID");
            entity.Property(e => e.OlsObjectlogId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_OBJECTLOG_ID");
            entity.Property(e => e.SceInfo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("SCE_INFO");
            entity.Property(e => e.SceInvalidid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SCE_INVALIDID");
            entity.Property(e => e.SceNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("SCE_NO");
            entity.Property(e => e.SceProdquantity)
                .HasDefaultValueSql("1\n")
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("SCE_PRODQUANTITY");
            entity.Property(e => e.SceProdstepId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SCE_PRODSTEP_ID");
            entity.Property(e => e.SceProdunitofmeasureId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SCE_PRODUNITOFMEASURE_ID");
            entity.Property(e => e.SceQuantity)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("SCE_QUANTITY");
            entity.Property(e => e.SceSubjectcompId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SCE_SUBJECTCOMP_ID");
            entity.Property(e => e.SceTvalidfrom)
                .HasColumnType("DATE")
                .HasColumnName("SCE_TVALIDFROM");
            entity.Property(e => e.SceTvaliduntil)
                .HasColumnType("DATE")
                .HasColumnName("SCE_TVALIDUNTIL");
            entity.Property(e => e.SceUnitofmeasureId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SCE_UNITOFMEASURE_ID");
            entity.Property(e => e.SceUsedsubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SCE_USEDSUBJECT_ID");

            entity.HasOne(d => d.OlsObjectlog).WithMany(p => p.JLogsubjectcompelems)
                .HasForeignKey(d => d.OlsObjectlogId)
                .HasConstraintName("FK_OL_LOGSUBJECTCOMPELEM");
        });

        modelBuilder.Entity<JLoguser>(entity =>
        {
            entity.HasKey(e => e.OlsId).HasName("PK_LOGUSER");

            entity.ToTable("J_LOGUSER", "JITTOE");

            entity.HasIndex(e => e.OlsObjectlogId, "I_OL_LOGUSER");

            entity.Property(e => e.OlsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_ID");
            entity.Property(e => e.OlsObjectlogId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_OBJECTLOG_ID");
            entity.Property(e => e.UAuthentication)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasDefaultValueSql("'Intern'  ")
                .HasColumnName("U_AUTHENTICATION");
            entity.Property(e => e.UCardid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("U_CARDID");
            entity.Property(e => e.UDefaultuserroleId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("U_DEFAULTUSERROLE_ID");
            entity.Property(e => e.UDescr)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("U_DESCR");
            entity.Property(e => e.UEmail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("U_EMAIL");
            entity.Property(e => e.UFirstname)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("U_FIRSTNAME");
            entity.Property(e => e.ULastname)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("U_LASTNAME");
            entity.Property(e => e.ULoginpolicyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("U_LOGINPOLICY_ID");
            entity.Property(e => e.UMenuId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("U_MENU_ID");
            entity.Property(e => e.UNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("U_NO");
            entity.Property(e => e.UPassword)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("U_PASSWORD");
            entity.Property(e => e.UShortname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("U_SHORTNAME");
            entity.Property(e => e.UTimelastlogin)
                .HasColumnType("DATE")
                .HasColumnName("U_TIMELASTLOGIN");
            entity.Property(e => e.UUsersetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("U_USERSET_ID");

            entity.HasOne(d => d.OlsObjectlog).WithMany(p => p.JLogusers)
                .HasForeignKey(d => d.OlsObjectlogId)
                .HasConstraintName("FK_OL_LOGUSER");
        });

        modelBuilder.Entity<JLoguserinfo>(entity =>
        {
            entity.HasKey(e => e.OlsId).HasName("PK_LOGUSERINFO");

            entity.ToTable("J_LOGUSERINFO", "JITTOE");

            entity.HasIndex(e => e.OlsObjectlogId, "I_OL_LOGUSERINFO");

            entity.Property(e => e.OlsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_ID");
            entity.Property(e => e.OlsObjectlogId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_OBJECTLOG_ID");
            entity.Property(e => e.UiKey1)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("UI_KEY1");
            entity.Property(e => e.UiKey2)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("UI_KEY2");
            entity.Property(e => e.UiKey3)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("UI_KEY3");
            entity.Property(e => e.UiStringvalue)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("UI_STRINGVALUE");
            entity.Property(e => e.UiTimevalue)
                .HasColumnType("DATE")
                .HasColumnName("UI_TIMEVALUE");
            entity.Property(e => e.UiType)
                .HasMaxLength(21)
                .IsUnicode(false)
                .HasColumnName("UI_TYPE");
            entity.Property(e => e.UiUserId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("UI_USER_ID");

            entity.HasOne(d => d.OlsObjectlog).WithMany(p => p.JLoguserinfos)
                .HasForeignKey(d => d.OlsObjectlogId)
                .HasConstraintName("FK_OL_LOGUSERINFO");
        });

        modelBuilder.Entity<JLoguserrole>(entity =>
        {
            entity.HasKey(e => e.OlsId).HasName("PK_LOGUSERROLE");

            entity.ToTable("J_LOGUSERROLE", "JITTOE");

            entity.HasIndex(e => e.OlsObjectlogId, "I_OL_LOGUSERROLE");

            entity.Property(e => e.OlsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_ID");
            entity.Property(e => e.OlsObjectlogId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLS_OBJECTLOG_ID");
            entity.Property(e => e.UrAccessrightsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("UR_ACCESSRIGHTSET_ID");
            entity.Property(e => e.UrAllowfilterassignment)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("0  ")
                .HasColumnName("UR_ALLOWFILTERASSIGNMENT");
            entity.Property(e => e.UrCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("UR_COMPANY_ID");
            entity.Property(e => e.UrDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UR_DESCR");
            entity.Property(e => e.UrGroupId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("UR_GROUP_ID");
            entity.Property(e => e.UrKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("UR_KEY");
            entity.Property(e => e.UrMenuId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("UR_MENU_ID");

            entity.HasOne(d => d.OlsObjectlog).WithMany(p => p.JLoguserroles)
                .HasForeignKey(d => d.OlsObjectlogId)
                .HasConstraintName("FK_OL_LOGUSERROLE");
        });

        modelBuilder.Entity<JMaintdef>(entity =>
        {
            entity.HasKey(e => e.MadId).HasName("PK_MAINTDEF");

            entity.ToTable("J_MAINTDEF", "JITTOE");

            entity.HasIndex(e => e.MadMaintdefsetId, "I_MAINTDEFSET_MAINTDEF");

            entity.HasIndex(e => e.MadProdtoolclassId, "I_PTCLASS_MAINTDEF");

            entity.HasIndex(e => e.MadProdunitclassId, "I_PUCLASS_MAINTDEF");

            entity.HasIndex(e => e.MadKey, "UN_MAD_KEY").IsUnique();

            entity.Property(e => e.MadId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MAD_ID");
            entity.Property(e => e.MadComputeestduration)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("0  ")
                .HasColumnName("MAD_COMPUTEESTDURATION");
            entity.Property(e => e.MadDescr)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("MAD_DESCR");
            entity.Property(e => e.MadEstdurationinmin)
                .HasPrecision(9)
                .HasColumnName("MAD_ESTDURATIONINMIN");
            entity.Property(e => e.MadKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("MAD_KEY");
            entity.Property(e => e.MadMaintdefsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MAD_MAINTDEFSET_ID");
            entity.Property(e => e.MadProdtoolclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MAD_PRODTOOLCLASS_ID");
            entity.Property(e => e.MadProdunitclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MAD_PRODUNITCLASS_ID");
            entity.Property(e => e.MadTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("MAD_TCREATION");
            entity.Property(e => e.MadTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("MAD_TUPDATE");
            entity.Property(e => e.MadType)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValueSql("'ProdUnit'  ")
                .HasColumnName("MAD_TYPE");

            entity.HasOne(d => d.MadMaintdefset).WithMany(p => p.JMaintdefs)
                .HasForeignKey(d => d.MadMaintdefsetId)
                .HasConstraintName("FK_MAINTDEFSET_MAINTDEF");

            entity.HasOne(d => d.MadProdtoolclass).WithMany(p => p.JMaintdefs)
                .HasForeignKey(d => d.MadProdtoolclassId)
                .HasConstraintName("FK_PTCLASS_MAINTDEF");

            entity.HasOne(d => d.MadProdunitclass).WithMany(p => p.JMaintdefs)
                .HasForeignKey(d => d.MadProdunitclassId)
                .HasConstraintName("FK_PUCLASS_MAINTDEF");
        });

        modelBuilder.Entity<JMaintdefclass>(entity =>
        {
            entity.HasKey(e => e.MadclId).HasName("PK_MAINTDEFCLASS");

            entity.ToTable("J_MAINTDEFCLASS", "JITTOE");

            entity.HasIndex(e => e.MadclCompanyId, "I_COMPANY_MAINTDEFCLASS");

            entity.HasIndex(e => e.MadclKey, "UN_MADCL_KEY").IsUnique();

            entity.Property(e => e.MadclId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MADCL_ID");
            entity.Property(e => e.MadclCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MADCL_COMPANY_ID");
            entity.Property(e => e.MadclDescr)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("MADCL_DESCR");
            entity.Property(e => e.MadclKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("MADCL_KEY");
            entity.Property(e => e.MadclTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("MADCL_TCREATION");
            entity.Property(e => e.MadclTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("MADCL_TUPDATE");

            entity.HasOne(d => d.MadclCompany).WithMany(p => p.JMaintdefclasses)
                .HasForeignKey(d => d.MadclCompanyId)
                .HasConstraintName("FK_COMPANY_MAINTDEFCLASS");
        });

        modelBuilder.Entity<JMaintdefclassmember>(entity =>
        {
            entity.HasKey(e => e.MadclmId).HasName("PK_MAINTDEFCLASSMEMBER");

            entity.ToTable("J_MAINTDEFCLASSMEMBER", "JITTOE");

            entity.HasIndex(e => e.MadclmMaintdefclassId, "I_MAINTDEFCLASS_MDCMEMBER");

            entity.HasIndex(e => e.MadclmMaintdefId, "I_MAINTDEF_MDCMEMBER");

            entity.HasIndex(e => new { e.MadclmMaintdefId, e.MadclmMaintdefclassId }, "UN_MADCLM_KEY").IsUnique();

            entity.Property(e => e.MadclmId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MADCLM_ID");
            entity.Property(e => e.MadclmMaintdefId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MADCLM_MAINTDEF_ID");
            entity.Property(e => e.MadclmMaintdefclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MADCLM_MAINTDEFCLASS_ID");
            entity.Property(e => e.MadclmTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("MADCLM_TCREATION");
            entity.Property(e => e.MadclmTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("MADCLM_TUPDATE");

            entity.HasOne(d => d.MadclmMaintdef).WithMany(p => p.JMaintdefclassmembers)
                .HasForeignKey(d => d.MadclmMaintdefId)
                .HasConstraintName("FK_MAINTDEF_MDCMEMBER");

            entity.HasOne(d => d.MadclmMaintdefclass).WithMany(p => p.JMaintdefclassmembers)
                .HasForeignKey(d => d.MadclmMaintdefclassId)
                .HasConstraintName("FK_MAINTDEFCLASS_MDCMEMBER");
        });

        modelBuilder.Entity<JMaintdefcond>(entity =>
        {
            entity.HasKey(e => e.MadcId).HasName("PK_MAINTDEFCOND");

            entity.ToTable("J_MAINTDEFCOND", "JITTOE");

            entity.HasIndex(e => e.MadcMaintdefId, "I_MAINTDEF_MAINTDEFCOND");

            entity.Property(e => e.MadcId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MADC_ID");
            entity.Property(e => e.MadcDescr)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("MADC_DESCR");
            entity.Property(e => e.MadcMaintdefId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MADC_MAINTDEF_ID");
            entity.Property(e => e.MadcMinutes)
                .HasPrecision(9)
                .HasDefaultValueSql("0  ")
                .HasColumnName("MADC_MINUTES");
            entity.Property(e => e.MadcNrofcycles)
                .HasPrecision(5)
                .HasDefaultValueSql("0  ")
                .HasColumnName("MADC_NROFCYCLES");
            entity.Property(e => e.MadcTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("MADC_TCREATION");
            entity.Property(e => e.MadcTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("MADC_TUPDATE");
            entity.Property(e => e.MadcType)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("MADC_TYPE");

            entity.HasOne(d => d.MadcMaintdef).WithMany(p => p.JMaintdefconds)
                .HasForeignKey(d => d.MadcMaintdefId)
                .HasConstraintName("FK_MAINTDEF_MAINTDEFCOND");
        });

        modelBuilder.Entity<JMaintdefinstr>(entity =>
        {
            entity.HasKey(e => e.MadiId).HasName("PK_MAINTDEFINSTR");

            entity.ToTable("J_MAINTDEFINSTR", "JITTOE");

            entity.HasIndex(e => e.MadiFileId, "I_FILE_MAINTDEFINSTR");

            entity.HasIndex(e => e.MadiMaintdefId, "I_MAINTDEF_MAINTDEFINSTR");

            entity.HasIndex(e => new { e.MadiMaintdefId, e.MadiPos }, "UN_MADI_POS").IsUnique();

            entity.Property(e => e.MadiId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MADI_ID");
            entity.Property(e => e.MadiDescr)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasColumnName("MADI_DESCR");
            entity.Property(e => e.MadiEstdurationinmin)
                .HasPrecision(9)
                .HasDefaultValueSql("0  ")
                .HasColumnName("MADI_ESTDURATIONINMIN");
            entity.Property(e => e.MadiFileId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MADI_FILE_ID");
            entity.Property(e => e.MadiInfo1)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("MADI_INFO1");
            entity.Property(e => e.MadiInfo2)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("MADI_INFO2");
            entity.Property(e => e.MadiMaintdefId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MADI_MAINTDEF_ID");
            entity.Property(e => e.MadiPos)
                .HasPrecision(4)
                .HasColumnName("MADI_POS");
            entity.Property(e => e.MadiTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("MADI_TCREATION");
            entity.Property(e => e.MadiTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("MADI_TUPDATE");

            entity.HasOne(d => d.MadiFile).WithMany(p => p.JMaintdefinstrs)
                .HasForeignKey(d => d.MadiFileId)
                .HasConstraintName("FK_FILE_MAINTDEFINSTR");

            entity.HasOne(d => d.MadiMaintdef).WithMany(p => p.JMaintdefinstrs)
                .HasForeignKey(d => d.MadiMaintdefId)
                .HasConstraintName("FK_MAINTDEF_MAINTDEFINSTR");
        });

        modelBuilder.Entity<JMaintdefmaterial>(entity =>
        {
            entity.HasKey(e => e.MadmId).HasName("PK_MAINTDEFMATERIAL");

            entity.ToTable("J_MAINTDEFMATERIAL", "JITTOE");

            entity.HasIndex(e => e.MadmMaintdefId, "I_MAINTDEF_MDMATERIAL");

            entity.HasIndex(e => e.MadmSubjectId, "I_SUBJECT_MDMATERIAL");

            entity.HasIndex(e => e.MadmUnitofmeasureId, "I_UNITOFMEASURE_MDMATERIAL");

            entity.Property(e => e.MadmId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MADM_ID");
            entity.Property(e => e.MadmMaintdefId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MADM_MAINTDEF_ID");
            entity.Property(e => e.MadmQuantity)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("MADM_QUANTITY");
            entity.Property(e => e.MadmSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MADM_SUBJECT_ID");
            entity.Property(e => e.MadmTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("MADM_TCREATION");
            entity.Property(e => e.MadmTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("MADM_TUPDATE");
            entity.Property(e => e.MadmUnitofmeasureId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MADM_UNITOFMEASURE_ID");

            entity.HasOne(d => d.MadmMaintdef).WithMany(p => p.JMaintdefmaterials)
                .HasForeignKey(d => d.MadmMaintdefId)
                .HasConstraintName("FK_MAINTDEF_MDMATERIAL");

            entity.HasOne(d => d.MadmSubject).WithMany(p => p.JMaintdefmaterials)
                .HasForeignKey(d => d.MadmSubjectId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SUBJECT_MDMATERIAL");

            entity.HasOne(d => d.MadmUnitofmeasure).WithMany(p => p.JMaintdefmaterials)
                .HasForeignKey(d => d.MadmUnitofmeasureId)
                .HasConstraintName("FK_UNITOFMEASURE_MDMATERIAL");
        });

        modelBuilder.Entity<JMaintdefprodtool>(entity =>
        {
            entity.HasKey(e => e.MadptId).HasName("PK_MAINTDEFPRODTOOL");

            entity.ToTable("J_MAINTDEFPRODTOOL", "JITTOE");

            entity.HasIndex(e => e.MadptMaintdefId, "I_MAINTDEF_MDPRODTOOL");

            entity.HasIndex(e => e.MadptProdtoolId, "I_PRODTOOL_MDPRODTOOL");

            entity.HasIndex(e => new { e.MadptMaintdefId, e.MadptProdtoolId }, "UN_MADPT_POS").IsUnique();

            entity.Property(e => e.MadptId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MADPT_ID");
            entity.Property(e => e.MadptMaintdefId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MADPT_MAINTDEF_ID");
            entity.Property(e => e.MadptProdtoolId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MADPT_PRODTOOL_ID");
            entity.Property(e => e.MadptTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("MADPT_TCREATION");
            entity.Property(e => e.MadptTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("MADPT_TUPDATE");

            entity.HasOne(d => d.MadptMaintdef).WithMany(p => p.JMaintdefprodtools)
                .HasForeignKey(d => d.MadptMaintdefId)
                .HasConstraintName("FK_MAINTDEF_MDPRODTOOL");
        });

        modelBuilder.Entity<JMaintdefprodunit>(entity =>
        {
            entity.HasKey(e => e.MadpuId).HasName("PK_MAINTDEFPRODUNIT");

            entity.ToTable("J_MAINTDEFPRODUNIT", "JITTOE");

            entity.HasIndex(e => e.MadpuMaintdefId, "I_MAINTDEF_MDPRODUNIT");

            entity.HasIndex(e => e.MadpuProdunitId, "I_PRODUNIT_MDPRODUNIT");

            entity.HasIndex(e => new { e.MadpuMaintdefId, e.MadpuProdunitId }, "UN_MADPU_POS").IsUnique();

            entity.Property(e => e.MadpuId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MADPU_ID");
            entity.Property(e => e.MadpuMaintdefId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MADPU_MAINTDEF_ID");
            entity.Property(e => e.MadpuProdunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MADPU_PRODUNIT_ID");
            entity.Property(e => e.MadpuTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("MADPU_TCREATION");
            entity.Property(e => e.MadpuTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("MADPU_TUPDATE");

            entity.HasOne(d => d.MadpuMaintdef).WithMany(p => p.JMaintdefprodunits)
                .HasForeignKey(d => d.MadpuMaintdefId)
                .HasConstraintName("FK_MAINTDEF_MDPRODUNIT");

            entity.HasOne(d => d.MadpuProdunit).WithMany(p => p.JMaintdefprodunits)
                .HasForeignKey(d => d.MadpuProdunitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUNIT_MDPRODUNIT");
        });

        modelBuilder.Entity<JMaintdefset>(entity =>
        {
            entity.HasKey(e => e.MadsId).HasName("PK_MAINTDEFSET");

            entity.ToTable("J_MAINTDEFSET", "JITTOE");

            entity.HasIndex(e => e.MadsCompanyId, "I_COMPANY_MAINTDEFSET");

            entity.HasIndex(e => e.MadsKey, "UN_MADS_KEY").IsUnique();

            entity.Property(e => e.MadsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MADS_ID");
            entity.Property(e => e.MadsCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MADS_COMPANY_ID");
            entity.Property(e => e.MadsDescr)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("MADS_DESCR");
            entity.Property(e => e.MadsKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("MADS_KEY");
            entity.Property(e => e.MadsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("MADS_TCREATION");
            entity.Property(e => e.MadsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("MADS_TUPDATE");

            entity.HasOne(d => d.MadsCompany).WithMany(p => p.JMaintdefsets)
                .HasForeignKey(d => d.MadsCompanyId)
                .HasConstraintName("FK_COMPANY_MAINTDEFSET");
        });

        modelBuilder.Entity<JMaintjob>(entity =>
        {
            entity.HasKey(e => e.MajId).HasName("PK_MAINTJOB");

            entity.ToTable("J_MAINTJOB", "JITTOE");

            entity.HasIndex(e => e.MajIssuermaintjobId, "I_ISSUERMAINTJOB_MAINTJOB");

            entity.HasIndex(e => e.MajMaintdefId, "I_MAINTDEF_MAINTJOB");

            entity.HasIndex(e => e.MajMaintjobsetId, "I_MAINTJOBSET_MAINTJOB");

            entity.HasIndex(e => e.MajMaintprovId, "I_MAINTPROV_MAINTJOB");

            entity.HasIndex(e => e.MajProdtoolId, "I_PRODTOOL_MAINTJOB");

            entity.HasIndex(e => e.MajProdunitId, "I_PRODUNIT_MAINTJOB");

            entity.HasIndex(e => e.MajKey, "UN_MAJ_KEY").IsUnique();

            entity.Property(e => e.MajId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MAJ_ID");
            entity.Property(e => e.MajCyclecount)
                .HasPrecision(10)
                .HasDefaultValueSql("0  ")
                .HasColumnName("MAJ_CYCLECOUNT");
            entity.Property(e => e.MajCyclecountresetdate)
                .HasColumnType("DATE")
                .HasColumnName("MAJ_CYCLECOUNTRESETDATE");
            entity.Property(e => e.MajDescr)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("MAJ_DESCR");
            entity.Property(e => e.MajDurationinmin)
                .HasPrecision(9)
                .HasDefaultValueSql("0  ")
                .HasColumnName("MAJ_DURATIONINMIN");
            entity.Property(e => e.MajIssuermaintjobId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MAJ_ISSUERMAINTJOB_ID");
            entity.Property(e => e.MajKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("MAJ_KEY");
            entity.Property(e => e.MajMaintdefId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MAJ_MAINTDEF_ID");
            entity.Property(e => e.MajMaintjobsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MAJ_MAINTJOBSET_ID");
            entity.Property(e => e.MajMaintprovId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MAJ_MAINTPROV_ID");
            entity.Property(e => e.MajPlanneddurationinmin)
                .HasPrecision(9)
                .HasColumnName("MAJ_PLANNEDDURATIONINMIN");
            entity.Property(e => e.MajPlannedstarttime)
                .HasColumnType("DATE")
                .HasColumnName("MAJ_PLANNEDSTARTTIME");
            entity.Property(e => e.MajProdtoolId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MAJ_PRODTOOL_ID");
            entity.Property(e => e.MajProdunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MAJ_PRODUNIT_ID");
            entity.Property(e => e.MajStarttime)
                .HasColumnType("DATE")
                .HasColumnName("MAJ_STARTTIME");
            entity.Property(e => e.MajState)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("MAJ_STATE");
            entity.Property(e => e.MajTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("MAJ_TCREATION");
            entity.Property(e => e.MajTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("MAJ_TUPDATE");

            entity.HasOne(d => d.MajIssuermaintjob).WithMany(p => p.InverseMajIssuermaintjob)
                .HasForeignKey(d => d.MajIssuermaintjobId)
                .HasConstraintName("FK_ISSUERMAINTJOB_MAINTJOB");

            entity.HasOne(d => d.MajMaintdef).WithMany(p => p.JMaintjobs)
                .HasForeignKey(d => d.MajMaintdefId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MAINTDEF_MAINTJOB");

            entity.HasOne(d => d.MajMaintjobset).WithMany(p => p.JMaintjobs)
                .HasForeignKey(d => d.MajMaintjobsetId)
                .HasConstraintName("FK_MAINTJOBSET_MAINTJOB");

            entity.HasOne(d => d.MajMaintprov).WithMany(p => p.JMaintjobs)
                .HasForeignKey(d => d.MajMaintprovId)
                .HasConstraintName("FK_MAINTPROV_MAINTJOB");

            entity.HasOne(d => d.MajProdtool).WithMany(p => p.JMaintjobs)
                .HasForeignKey(d => d.MajProdtoolId)
                .HasConstraintName("FK_PRODTOOL_MAINTJOB");

            entity.HasOne(d => d.MajProdunit).WithMany(p => p.JMaintjobs)
                .HasForeignKey(d => d.MajProdunitId)
                .HasConstraintName("FK_PRODUNIT_MAINTJOB");
        });

        modelBuilder.Entity<JMaintjobdatum>(entity =>
        {
            entity.HasKey(e => e.MajdId).HasName("PK_MAINTJOBDATA");

            entity.ToTable("J_MAINTJOBDATA", "JITTOE");

            entity.HasIndex(e => e.MajdFileId, "I_FILE_MAINTJOBDATA");

            entity.HasIndex(e => e.MajdImageId, "I_IMAGE_MAINTJOBDATA");

            entity.HasIndex(e => e.MajdMaintjobId, "I_MAINTJOB_MAINTJOBDATA");

            entity.Property(e => e.MajdId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MAJD_ID");
            entity.Property(e => e.MajdDeletionid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MAJD_DELETIONID");
            entity.Property(e => e.MajdFileId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MAJD_FILE_ID");
            entity.Property(e => e.MajdImageId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MAJD_IMAGE_ID");
            entity.Property(e => e.MajdKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("MAJD_KEY");
            entity.Property(e => e.MajdKind)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("MAJD_KIND");
            entity.Property(e => e.MajdMaintjobId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MAJD_MAINTJOB_ID");
            entity.Property(e => e.MajdTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("MAJD_TCREATION");
            entity.Property(e => e.MajdTdeletion)
                .HasColumnType("DATE")
                .HasColumnName("MAJD_TDELETION");
            entity.Property(e => e.MajdTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("MAJD_TUPDATE");
            entity.Property(e => e.MajdValue)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasColumnName("MAJD_VALUE");

            entity.HasOne(d => d.MajdFile).WithMany(p => p.JMaintjobdata)
                .HasForeignKey(d => d.MajdFileId)
                .HasConstraintName("FK_FILE_MAINTJOBDATA");

            entity.HasOne(d => d.MajdImage).WithMany(p => p.JMaintjobdata)
                .HasForeignKey(d => d.MajdImageId)
                .HasConstraintName("FK_IMAGE_MAINTJOBDATA");

            entity.HasOne(d => d.MajdMaintjob).WithMany(p => p.JMaintjobdata)
                .HasForeignKey(d => d.MajdMaintjobId)
                .HasConstraintName("FK_MAINTJOB_MAINTJOBDATA");
        });

        modelBuilder.Entity<JMaintjobmaterial>(entity =>
        {
            entity.HasKey(e => e.MajmId).HasName("PK_MAINTJOBMATERIAL");

            entity.ToTable("J_MAINTJOBMATERIAL", "JITTOE");

            entity.HasIndex(e => e.MajmMaintjobId, "I_MAINTJOB_MJMATERIAL");

            entity.HasIndex(e => e.MajmSubjectId, "I_SUBJECT_MJMATERIAL");

            entity.HasIndex(e => e.MajmUnitofmeasureId, "I_UNITOFMEASURE_MJMATERIAL");

            entity.Property(e => e.MajmId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MAJM_ID");
            entity.Property(e => e.MajmMaintjobId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MAJM_MAINTJOB_ID");
            entity.Property(e => e.MajmQuantity)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("MAJM_QUANTITY");
            entity.Property(e => e.MajmSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MAJM_SUBJECT_ID");
            entity.Property(e => e.MajmTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("MAJM_TCREATION");
            entity.Property(e => e.MajmTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("MAJM_TUPDATE");
            entity.Property(e => e.MajmUnitofmeasureId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MAJM_UNITOFMEASURE_ID");

            entity.HasOne(d => d.MajmMaintjob).WithMany(p => p.JMaintjobmaterials)
                .HasForeignKey(d => d.MajmMaintjobId)
                .HasConstraintName("FK_MAINTJOB_MJMATERIAL");

            entity.HasOne(d => d.MajmSubject).WithMany(p => p.JMaintjobmaterials)
                .HasForeignKey(d => d.MajmSubjectId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SUBJECT_MJMATERIAL");

            entity.HasOne(d => d.MajmUnitofmeasure).WithMany(p => p.JMaintjobmaterials)
                .HasForeignKey(d => d.MajmUnitofmeasureId)
                .HasConstraintName("FK_UNITOFMEASURE_MJMATERIAL");
        });

        modelBuilder.Entity<JMaintjobset>(entity =>
        {
            entity.HasKey(e => e.MajsId).HasName("PK_MAINTJOBSET");

            entity.ToTable("J_MAINTJOBSET", "JITTOE");

            entity.HasIndex(e => e.MajsCompanyId, "I_COMPANY_MAINTJOBSET");

            entity.HasIndex(e => e.MajsDoccfgId, "I_DOCCFG_MAINTJOBSET");

            entity.HasIndex(e => e.MajsKey, "UN_MAJS_KEY").IsUnique();

            entity.Property(e => e.MajsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MAJS_ID");
            entity.Property(e => e.MajsCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MAJS_COMPANY_ID");
            entity.Property(e => e.MajsDescr)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("MAJS_DESCR");
            entity.Property(e => e.MajsDoccfgId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MAJS_DOCCFG_ID");
            entity.Property(e => e.MajsKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("MAJS_KEY");
            entity.Property(e => e.MajsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("MAJS_TCREATION");
            entity.Property(e => e.MajsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("MAJS_TUPDATE");

            entity.HasOne(d => d.MajsCompany).WithMany(p => p.JMaintjobsets)
                .HasForeignKey(d => d.MajsCompanyId)
                .HasConstraintName("FK_COMPANY_MAINTJOBSET");

            entity.HasOne(d => d.MajsDoccfg).WithMany(p => p.JMaintjobsets)
                .HasForeignKey(d => d.MajsDoccfgId)
                .HasConstraintName("FK_DOCCFG_MAINTJOBSET");
        });

        modelBuilder.Entity<JMaintprov>(entity =>
        {
            entity.HasKey(e => e.MapId).HasName("PK_MAINTPROV");

            entity.ToTable("J_MAINTPROV", "JITTOE");

            entity.HasIndex(e => e.MapMaintprovsetId, "I_MAINTPROVSET_MAINTPROV");

            entity.HasIndex(e => e.MapUserId, "I_USER_MAINTPROV");

            entity.HasIndex(e => e.MapKey, "UN_MAP_KEY").IsUnique();

            entity.Property(e => e.MapId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MAP_ID");
            entity.Property(e => e.MapDescr)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("MAP_DESCR");
            entity.Property(e => e.MapKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("MAP_KEY");
            entity.Property(e => e.MapMaintprovsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MAP_MAINTPROVSET_ID");
            entity.Property(e => e.MapTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("MAP_TCREATION");
            entity.Property(e => e.MapTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("MAP_TUPDATE");
            entity.Property(e => e.MapUserId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MAP_USER_ID");

            entity.HasOne(d => d.MapMaintprovset).WithMany(p => p.JMaintprovs)
                .HasForeignKey(d => d.MapMaintprovsetId)
                .HasConstraintName("FK_MAINTPROVSET_MAINTPROV");

            entity.HasOne(d => d.MapUser).WithMany(p => p.JMaintprovs)
                .HasForeignKey(d => d.MapUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_USER_MAINTPROV");
        });

        modelBuilder.Entity<JMaintprovset>(entity =>
        {
            entity.HasKey(e => e.MapsId).HasName("PK_MAINTPROVSET");

            entity.ToTable("J_MAINTPROVSET", "JITTOE");

            entity.HasIndex(e => e.MapsCompanyId, "I_COMPANY_MAINTPROVSET");

            entity.HasIndex(e => e.MapsKey, "UN_MAPS_KEY").IsUnique();

            entity.Property(e => e.MapsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MAPS_ID");
            entity.Property(e => e.MapsCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MAPS_COMPANY_ID");
            entity.Property(e => e.MapsDescr)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("MAPS_DESCR");
            entity.Property(e => e.MapsKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("MAPS_KEY");
            entity.Property(e => e.MapsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("MAPS_TCREATION");
            entity.Property(e => e.MapsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("MAPS_TUPDATE");

            entity.HasOne(d => d.MapsCompany).WithMany(p => p.JMaintprovsets)
                .HasForeignKey(d => d.MapsCompanyId)
                .HasConstraintName("FK_COMPANY_MAINTPROVSET");
        });

        modelBuilder.Entity<JMeasurement>(entity =>
        {
            entity.HasKey(e => e.MeId).HasName("PK_MEASUREMENT");

            entity.ToTable("J_MEASUREMENT", "JITTOE");

            entity.HasIndex(e => e.MeMeasurementsetId, "I_MSET_MEASUREMENT");

            entity.HasIndex(e => e.MePartId, "I_PART_MEASUREMENT");

            entity.HasIndex(e => e.MeProdunitId, "I_PRODUNIT_MEASUREMENT");

            entity.HasIndex(e => e.MeSubjectId, "I_SUBJECT_MEASUREMENT");

            entity.HasIndex(e => e.MeUomId, "I_UOM_MEASUREMENT");

            entity.Property(e => e.MeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ME_ID");
            entity.Property(e => e.MeInfo1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ME_INFO1");
            entity.Property(e => e.MeInfo2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ME_INFO2");
            entity.Property(e => e.MeMeasurementsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ME_MEASUREMENTSET_ID");
            entity.Property(e => e.MePartId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ME_PART_ID");
            entity.Property(e => e.MeProdunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ME_PRODUNIT_ID");
            entity.Property(e => e.MeSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ME_SUBJECT_ID");
            entity.Property(e => e.MeTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("ME_TCREATION");
            entity.Property(e => e.MeType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ME_TYPE");
            entity.Property(e => e.MeUomId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ME_UOM_ID");
            entity.Property(e => e.MeValue)
                .HasColumnType("NUMBER(16,6)")
                .HasColumnName("ME_VALUE");

            entity.HasOne(d => d.MeMeasurementset).WithMany(p => p.JMeasurements)
                .HasForeignKey(d => d.MeMeasurementsetId)
                .HasConstraintName("FK_MSET_MEASUREMENT");

            entity.HasOne(d => d.MePart).WithMany(p => p.JMeasurements)
                .HasForeignKey(d => d.MePartId)
                .HasConstraintName("FK_PART_MEASUREMENT");

            entity.HasOne(d => d.MeProdunit).WithMany(p => p.JMeasurements)
                .HasForeignKey(d => d.MeProdunitId)
                .HasConstraintName("FK_PRODUNIT_MEASUREMENT");

            entity.HasOne(d => d.MeSubject).WithMany(p => p.JMeasurements)
                .HasForeignKey(d => d.MeSubjectId)
                .HasConstraintName("FK_SUBJECT_MEASUREMENT");

            entity.HasOne(d => d.MeUom).WithMany(p => p.JMeasurements)
                .HasForeignKey(d => d.MeUomId)
                .HasConstraintName("FK_UOM_MEASUREMENT");
        });

        modelBuilder.Entity<JMeasurementset>(entity =>
        {
            entity.HasKey(e => e.MesId).HasName("PK_MEASUREMENTSET");

            entity.ToTable("J_MEASUREMENTSET", "JITTOE");

            entity.HasIndex(e => e.MesCompanyId, "I_COMPANY_MEASUREMENTSET");

            entity.HasIndex(e => e.MesKey, "UN_MES_KEY").IsUnique();

            entity.Property(e => e.MesId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MES_ID");
            entity.Property(e => e.MesCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MES_COMPANY_ID");
            entity.Property(e => e.MesDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MES_DESCR");
            entity.Property(e => e.MesKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("MES_KEY");
            entity.Property(e => e.MesTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("MES_TCREATION");
            entity.Property(e => e.MesTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("MES_TUPDATE");

            entity.HasOne(d => d.MesCompany).WithMany(p => p.JMeasurementsets)
                .HasForeignKey(d => d.MesCompanyId)
                .HasConstraintName("FK_COMPANY_MEASUREMENTSET");
        });

        modelBuilder.Entity<JMenu>(entity =>
        {
            entity.HasKey(e => e.MId).HasName("PK_MENU");

            entity.ToTable("J_MENU", "JITTOE");

            entity.HasIndex(e => e.MCompanyId, "I_COMPANY_MENU");

            entity.HasIndex(e => new { e.MCompanyId, e.MShortname }, "UN_M_COMPANY_SHORTNAME").IsUnique();

            entity.Property(e => e.MId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("M_ID");
            entity.Property(e => e.MCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("M_COMPANY_ID");
            entity.Property(e => e.MDescr)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("M_DESCR");
            entity.Property(e => e.MKind)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("M_KIND");
            entity.Property(e => e.MShortname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("M_SHORTNAME");
            entity.Property(e => e.MTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("M_TCREATION");
            entity.Property(e => e.MTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("M_TUPDATE");

            entity.HasOne(d => d.MCompany).WithMany(p => p.JMenus)
                .HasForeignKey(d => d.MCompanyId)
                .HasConstraintName("FK_COMPANY_MENU");
        });

        modelBuilder.Entity<JMenuitem>(entity =>
        {
            entity.HasKey(e => e.MiId).HasName("PK_MENUITEM");

            entity.ToTable("J_MENUITEM", "JITTOE");

            entity.HasIndex(e => e.MiSubmenuId, "I_MENUITEM_MENU");

            entity.HasIndex(e => e.MiToolId, "I_MENUITEM_TOOL");

            entity.HasIndex(e => e.MiMenuId, "I_MENU_MENUITEM");

            entity.HasIndex(e => new { e.MiMenuId, e.MiPosno }, "UN_MI_MENU_POSNO").IsUnique();

            entity.Property(e => e.MiId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MI_ID");
            entity.Property(e => e.MiDescr)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("MI_DESCR");
            entity.Property(e => e.MiIconfile)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MI_ICONFILE");
            entity.Property(e => e.MiKind)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("MI_KIND");
            entity.Property(e => e.MiMenuId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MI_MENU_ID");
            entity.Property(e => e.MiPosno)
                .HasPrecision(3)
                .HasColumnName("MI_POSNO");
            entity.Property(e => e.MiSubmenuId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MI_SUBMENU_ID");
            entity.Property(e => e.MiTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("MI_TCREATION");
            entity.Property(e => e.MiToolId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MI_TOOL_ID");
            entity.Property(e => e.MiTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("MI_TUPDATE");

            entity.HasOne(d => d.MiMenu).WithMany(p => p.JMenuitemMiMenus)
                .HasForeignKey(d => d.MiMenuId)
                .HasConstraintName("FK_MENU_MENUITEM");

            entity.HasOne(d => d.MiSubmenu).WithMany(p => p.JMenuitemMiSubmenus)
                .HasForeignKey(d => d.MiSubmenuId)
                .HasConstraintName("FK_MENUITEM_MENU");

            entity.HasOne(d => d.MiTool).WithMany(p => p.JMenuitems)
                .HasForeignKey(d => d.MiToolId)
                .HasConstraintName("FK_MENUITEM_TOOL");
        });

        modelBuilder.Entity<JMergerobjectinstr>(entity =>
        {
            entity.HasKey(e => e.MoiId).HasName("PK_MERGEROBJECTINSTR");

            entity.ToTable("J_MERGEROBJECTINSTR", "JITTOE");

            entity.Property(e => e.MoiId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MOI_ID");
            entity.Property(e => e.MoiObjectclassname)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("MOI_OBJECTCLASSNAME");
            entity.Property(e => e.MoiObjectid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MOI_OBJECTID");
            entity.Property(e => e.MoiTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("MOI_TCREATION");
            entity.Property(e => e.MoiType)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("MOI_TYPE");
        });

        modelBuilder.Entity<JMergerresult>(entity =>
        {
            entity.HasKey(e => e.MrId).HasName("PK_MERGERRESULT");

            entity.ToTable("J_MERGERRESULT", "JITTOE");

            entity.HasIndex(e => new { e.MrKey, e.MrDeletionid }, "UN_MR_KEY").IsUnique();

            entity.Property(e => e.MrId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MR_ID");
            entity.Property(e => e.MrDeletionid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MR_DELETIONID");
            entity.Property(e => e.MrDescr)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("MR_DESCR");
            entity.Property(e => e.MrErrormessage)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasColumnName("MR_ERRORMESSAGE");
            entity.Property(e => e.MrKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("MR_KEY");
            entity.Property(e => e.MrTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("MR_TCREATION");
            entity.Property(e => e.MrTdeletion)
                .HasColumnType("DATE")
                .HasColumnName("MR_TDELETION");
            entity.Property(e => e.MrTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("MR_TUPDATE");
            entity.Property(e => e.MrType)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValueSql("'None'  ")
                .HasColumnName("MR_TYPE");
        });

        modelBuilder.Entity<JMergerresultitem>(entity =>
        {
            entity.HasKey(e => e.MriId).HasName("PK_MERGERRESULTITEM");

            entity.ToTable("J_MERGERRESULTITEM", "JITTOE");

            entity.HasIndex(e => e.MriMergerresultId, "I_MRRESULT_MRRESULTITEM");

            entity.Property(e => e.MriId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MRI_ID");
            entity.Property(e => e.MriAction)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MRI_ACTION");
            entity.Property(e => e.MriDescr)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("MRI_DESCR");
            entity.Property(e => e.MriKey1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MRI_KEY1");
            entity.Property(e => e.MriKey2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MRI_KEY2");
            entity.Property(e => e.MriKind)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MRI_KIND");
            entity.Property(e => e.MriMergerresultId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MRI_MERGERRESULT_ID");
            entity.Property(e => e.MriTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("MRI_TCREATION");
            entity.Property(e => e.MriTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("MRI_TUPDATE");
            entity.Property(e => e.MriValuenew)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasColumnName("MRI_VALUENEW");
            entity.Property(e => e.MriValueold)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasColumnName("MRI_VALUEOLD");

            entity.HasOne(d => d.MriMergerresult).WithMany(p => p.JMergerresultitems)
                .HasForeignKey(d => d.MriMergerresultId)
                .HasConstraintName("FK_MRRESULT_MRRESULTITEM");
        });

        modelBuilder.Entity<JMessagecfg>(entity =>
        {
            entity.HasKey(e => e.MsgcId).HasName("PK_MESSAGECFG");

            entity.ToTable("J_MESSAGECFG", "JITTOE");

            entity.HasIndex(e => e.MsgcAlertsetId, "I_ALERTSET_MESSAGECFG");

            entity.HasIndex(e => e.MsgcAlerttypeId, "I_ALERTTYPE_MESSAGECFG");

            entity.HasIndex(e => e.MsgcMessagecommandId, "I_COMMAND_MESSAGECFG");

            entity.HasIndex(e => e.MsgcGroupbccId, "I_GROUPBCC_MESSAGECFG");

            entity.HasIndex(e => e.MsgcGroupccId, "I_GROUPCC_MESSAGECFG");

            entity.HasIndex(e => e.MsgcGrouptoId, "I_GROUPTO_MESSAGECFG");

            entity.HasIndex(e => e.MsgcLogId, "I_LOG_MESSAGECFG");

            entity.HasIndex(e => e.MsgcMessagecfgsetId, "I_MESSAGECFGSET_MESSAGECFG");

            entity.HasIndex(e => e.MsgcPrinterId, "I_PRINTER_MESSAGECFG");

            entity.Property(e => e.MsgcId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MSGC_ID");
            entity.Property(e => e.MsgcAlertkey)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("MSGC_ALERTKEY");
            entity.Property(e => e.MsgcAlertsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MSGC_ALERTSET_ID");
            entity.Property(e => e.MsgcAlerttypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MSGC_ALERTTYPE_ID");
            entity.Property(e => e.MsgcCodepattern)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("'*'")
                .HasColumnName("MSGC_CODEPATTERN");
            entity.Property(e => e.MsgcContextpattern)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("'*'")
                .HasColumnName("MSGC_CONTEXTPATTERN");
            entity.Property(e => e.MsgcGroupbccId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MSGC_GROUPBCC_ID");
            entity.Property(e => e.MsgcGroupccId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MSGC_GROUPCC_ID");
            entity.Property(e => e.MsgcGrouptoId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MSGC_GROUPTO_ID");
            entity.Property(e => e.MsgcInfopattern)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("'*'  ")
                .HasColumnName("MSGC_INFOPATTERN");
            entity.Property(e => e.MsgcLogId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MSGC_LOG_ID");
            entity.Property(e => e.MsgcMailmessage)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasColumnName("MSGC_MAILMESSAGE");
            entity.Property(e => e.MsgcMailsubject)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("MSGC_MAILSUBJECT");
            entity.Property(e => e.MsgcMessagecfgsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MSGC_MESSAGECFGSET_ID");
            entity.Property(e => e.MsgcMessagecommandId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MSGC_MESSAGECOMMAND_ID");
            entity.Property(e => e.MsgcMessagepattern)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("'*'  ")
                .HasColumnName("MSGC_MESSAGEPATTERN");
            entity.Property(e => e.MsgcPrinterId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MSGC_PRINTER_ID");
            entity.Property(e => e.MsgcPriority)
                .HasPrecision(3)
                .HasDefaultValueSql("0")
                .HasColumnName("MSGC_PRIORITY");
            entity.Property(e => e.MsgcProceed)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("0  ")
                .HasColumnName("MSGC_PROCEED");
            entity.Property(e => e.MsgcSeveritypattern)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("'*'\n")
                .HasColumnName("MSGC_SEVERITYPATTERN");
            entity.Property(e => e.MsgcTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("MSGC_TCREATION");
            entity.Property(e => e.MsgcToolpattern)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("'*'")
                .HasColumnName("MSGC_TOOLPATTERN");
            entity.Property(e => e.MsgcTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("MSGC_TUPDATE");

            entity.HasOne(d => d.MsgcAlertset).WithMany(p => p.JMessagecfgs)
                .HasForeignKey(d => d.MsgcAlertsetId)
                .HasConstraintName("FK_ALERTSET_MESSAGECFG");

            entity.HasOne(d => d.MsgcAlerttype).WithMany(p => p.JMessagecfgs)
                .HasForeignKey(d => d.MsgcAlerttypeId)
                .HasConstraintName("FK_ALERTTYPE_MESSAGECFG");

            entity.HasOne(d => d.MsgcGroupbcc).WithMany(p => p.JMessagecfgMsgcGroupbccs)
                .HasForeignKey(d => d.MsgcGroupbccId)
                .HasConstraintName("FK_GROUPBCC_MESSAGECFG");

            entity.HasOne(d => d.MsgcGroupcc).WithMany(p => p.JMessagecfgMsgcGroupccs)
                .HasForeignKey(d => d.MsgcGroupccId)
                .HasConstraintName("FK_GROUPCC_MESSAGECFG");

            entity.HasOne(d => d.MsgcGroupto).WithMany(p => p.JMessagecfgMsgcGrouptos)
                .HasForeignKey(d => d.MsgcGrouptoId)
                .HasConstraintName("FK_GROUPTO_MESSAGECFG");

            entity.HasOne(d => d.MsgcLog).WithMany(p => p.JMessagecfgs)
                .HasForeignKey(d => d.MsgcLogId)
                .HasConstraintName("FK_LOG_MESSAGECFG");

            entity.HasOne(d => d.MsgcMessagecfgset).WithMany(p => p.JMessagecfgs)
                .HasForeignKey(d => d.MsgcMessagecfgsetId)
                .HasConstraintName("FK_MESSAGECFGSET_MESSAGECFG");

            entity.HasOne(d => d.MsgcMessagecommand).WithMany(p => p.JMessagecfgs)
                .HasForeignKey(d => d.MsgcMessagecommandId)
                .HasConstraintName("FK_COMMAND_MESSAGECFG");

            entity.HasOne(d => d.MsgcPrinter).WithMany(p => p.JMessagecfgs)
                .HasForeignKey(d => d.MsgcPrinterId)
                .HasConstraintName("FK_PRINTER_MESSAGECFG");
        });

        modelBuilder.Entity<JMessagecfgset>(entity =>
        {
            entity.HasKey(e => e.MsgcsId).HasName("PK_MESSAGECFGSET");

            entity.ToTable("J_MESSAGECFGSET", "JITTOE");

            entity.HasIndex(e => e.MsgcsKey, "UN_MSGCS_KEY").IsUnique();

            entity.Property(e => e.MsgcsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MSGCS_ID");
            entity.Property(e => e.MsgcsDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MSGCS_DESCR");
            entity.Property(e => e.MsgcsEnabled)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("1  ")
                .HasColumnName("MSGCS_ENABLED");
            entity.Property(e => e.MsgcsKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("MSGCS_KEY");
            entity.Property(e => e.MsgcsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("MSGCS_TCREATION");
            entity.Property(e => e.MsgcsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("MSGCS_TUPDATE");
        });

        modelBuilder.Entity<JMessagecommand>(entity =>
        {
            entity.HasKey(e => e.MsgcmdId).HasName("PK_MESSAGECOMMAND");

            entity.ToTable("J_MESSAGECOMMAND", "JITTOE");

            entity.HasIndex(e => e.MsgcmdKey, "UN_MSGCMD_KEY").IsUnique();

            entity.Property(e => e.MsgcmdId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MSGCMD_ID");
            entity.Property(e => e.MsgcmdDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MSGCMD_DESCR");
            entity.Property(e => e.MsgcmdKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("MSGCMD_KEY");
            entity.Property(e => e.MsgcmdMessageform)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasColumnName("MSGCMD_MESSAGEFORM");
            entity.Property(e => e.MsgcmdTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("MSGCMD_TCREATION");
            entity.Property(e => e.MsgcmdTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("MSGCMD_TUPDATE");
        });

        modelBuilder.Entity<JMontrafficlight>(entity =>
        {
            entity.HasKey(e => e.MtlId).HasName("PK_MONTRAFFICLIGHT");

            entity.ToTable("J_MONTRAFFICLIGHT", "JITTOE");

            entity.HasIndex(e => e.MtlKey, "UN_MTL_KEY").IsUnique();

            entity.Property(e => e.MtlId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MTL_ID");
            entity.Property(e => e.MtlDescr)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("MTL_DESCR");
            entity.Property(e => e.MtlIndex)
                .HasPrecision(5)
                .HasColumnName("MTL_INDEX");
            entity.Property(e => e.MtlKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("MTL_KEY");
            entity.Property(e => e.MtlTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("MTL_TCREATION");
        });

        modelBuilder.Entity<JMontrafficlightentry>(entity =>
        {
            entity.HasKey(e => e.MtleId).HasName("PK_MONTRAFFICLIGHTENTRY");

            entity.ToTable("J_MONTRAFFICLIGHTENTRY", "JITTOE");

            entity.HasIndex(e => e.MtleMontrafficlightId, "I_MONTRAFFICLIGHT_MONTLENTRY");

            entity.HasIndex(e => e.MtleProdunitId, "I_PRODUNIT_MONTLENTRY");

            entity.Property(e => e.MtleId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MTLE_ID");
            entity.Property(e => e.MtleFunction)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("MTLE_FUNCTION");
            entity.Property(e => e.MtleMontrafficlightId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MTLE_MONTRAFFICLIGHT_ID");
            entity.Property(e => e.MtleProdunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MTLE_PRODUNIT_ID");
            entity.Property(e => e.MtleTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("MTLE_TCREATION");

            entity.HasOne(d => d.MtleMontrafficlight).WithMany(p => p.JMontrafficlightentries)
                .HasForeignKey(d => d.MtleMontrafficlightId)
                .HasConstraintName("FK_MONTRAFFICLIGHT_MONTLENTRY");

            entity.HasOne(d => d.MtleProdunit).WithMany(p => p.JMontrafficlightentries)
                .HasForeignKey(d => d.MtleProdunitId)
                .HasConstraintName("FK_PRODUNIT_MONTLENTRY");
        });

        modelBuilder.Entity<JMsignotification>(entity =>
        {
            entity.HasKey(e => e.MsignId).HasName("PK_MSIGNOTIFICATION");

            entity.ToTable("J_MSIGNOTIFICATION", "JITTOE");

            entity.HasIndex(e => e.MsignCompstockId, "I_COMPSTOCK_MSIGNOT");

            entity.HasIndex(e => e.MsignCompsubjectId, "I_COMPSUBJECT_MSIGNOT");

            entity.HasIndex(e => e.MsignContainerentryId, "I_CONTAINERENTRY_MSIGNOT");

            entity.HasIndex(e => e.MsignProdjobentryId, "I_PRODJOBENTRY_MSIGNOT");

            entity.HasIndex(e => e.MsignTransitstockId, "I_TRANSITSTOCK_MSIGNOT");

            entity.Property(e => e.MsignId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MSIGN_ID");
            entity.Property(e => e.MsignCompstockId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MSIGN_COMPSTOCK_ID");
            entity.Property(e => e.MsignCompsubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MSIGN_COMPSUBJECT_ID");
            entity.Property(e => e.MsignContainerentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MSIGN_CONTAINERENTRY_ID");
            entity.Property(e => e.MsignDeletionid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MSIGN_DELETIONID");
            entity.Property(e => e.MsignNextduetime)
                .HasColumnType("DATE")
                .HasColumnName("MSIGN_NEXTDUETIME");
            entity.Property(e => e.MsignProdjobentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MSIGN_PRODJOBENTRY_ID");
            entity.Property(e => e.MsignRepetitions)
                .HasPrecision(2)
                .HasColumnName("MSIGN_REPETITIONS");
            entity.Property(e => e.MsignTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("MSIGN_TCREATION");
            entity.Property(e => e.MsignTdeletion)
                .HasColumnType("DATE")
                .HasColumnName("MSIGN_TDELETION");
            entity.Property(e => e.MsignTransitstockId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("MSIGN_TRANSITSTOCK_ID");

            entity.HasOne(d => d.MsignCompstock).WithMany(p => p.JMsignotificationMsignCompstocks)
                .HasForeignKey(d => d.MsignCompstockId)
                .HasConstraintName("FK_COMPSTOCK_MSIGNOT");

            entity.HasOne(d => d.MsignCompsubject).WithMany(p => p.JMsignotifications)
                .HasForeignKey(d => d.MsignCompsubjectId)
                .HasConstraintName("FK_COMPSUBJECT_MSIGNOT");

            entity.HasOne(d => d.MsignContainerentry).WithMany(p => p.JMsignotifications)
                .HasForeignKey(d => d.MsignContainerentryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTAINERENTRY_MSIGNOT");

            entity.HasOne(d => d.MsignProdjobentry).WithMany(p => p.JMsignotifications)
                .HasForeignKey(d => d.MsignProdjobentryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODJOBENTRY_MSIGNOT");

            entity.HasOne(d => d.MsignTransitstock).WithMany(p => p.JMsignotificationMsignTransitstocks)
                .HasForeignKey(d => d.MsignTransitstockId)
                .HasConstraintName("FK_TRANSITSTOCK_MSIGNOT");
        });

        modelBuilder.Entity<JObjectcache>(entity =>
        {
            entity.HasKey(e => e.OcaId).HasName("PK_OBJECTCACHE");

            entity.ToTable("J_OBJECTCACHE", "JITTOE");

            entity.HasIndex(e => e.OcaUserId, "I_USER_OBJECTCACHE");

            entity.HasIndex(e => new { e.OcaUserId, e.OcaObjectclassname, e.OcaKey1, e.OcaKey2, e.OcaKey3 }, "UN_OCA_CACHE").IsUnique();

            entity.Property(e => e.OcaId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OCA_ID");
            entity.Property(e => e.OcaKey1)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("OCA_KEY1");
            entity.Property(e => e.OcaKey2)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("OCA_KEY2");
            entity.Property(e => e.OcaKey3)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("OCA_KEY3");
            entity.Property(e => e.OcaObjectclassname)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("OCA_OBJECTCLASSNAME");
            entity.Property(e => e.OcaTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("OCA_TCREATION");
            entity.Property(e => e.OcaTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("OCA_TUPDATE");
            entity.Property(e => e.OcaUserId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OCA_USER_ID");

            entity.HasOne(d => d.OcaUser).WithMany(p => p.JObjectcaches)
                .HasForeignKey(d => d.OcaUserId)
                .HasConstraintName("FK_USER_OBJECTCACHE");
        });

        modelBuilder.Entity<JObjectcacheentry>(entity =>
        {
            entity.HasKey(e => e.OcaeId).HasName("PK_OBJECTCACHEENTRY");

            entity.ToTable("J_OBJECTCACHEENTRY", "JITTOE");

            entity.HasIndex(e => e.OcaeObjectcacheId, "I_OBJECTCACHE_OCAENTRY");

            entity.HasIndex(e => new { e.OcaeObjectcacheId, e.OcaeObjectid }, "UN_OCAE_OBJECT").IsUnique();

            entity.Property(e => e.OcaeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OCAE_ID");
            entity.Property(e => e.OcaeObjectcacheId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OCAE_OBJECTCACHE_ID");
            entity.Property(e => e.OcaeObjectid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OCAE_OBJECTID");
            entity.Property(e => e.OcaeTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("OCAE_TCREATION");

            entity.HasOne(d => d.OcaeObjectcache).WithMany(p => p.JObjectcacheentries)
                .HasForeignKey(d => d.OcaeObjectcacheId)
                .HasConstraintName("FK_OBJECTCACHE_OCAENTRY");
        });

        modelBuilder.Entity<JObjectlog>(entity =>
        {
            entity.HasKey(e => e.OlId).HasName("PK_OBJECTLOG");

            entity.ToTable("J_OBJECTLOG", "JITTOE");

            entity.HasIndex(e => new { e.OlObjectid, e.OlObjectclassname }, "I_OL_OBJECTID");

            entity.HasIndex(e => e.OlTcreation, "I_OL_TCREATION");

            entity.HasIndex(e => e.OlSessionId, "I_SESSION_OBJECTLOG");

            entity.HasIndex(e => e.OlSnapshotId, "I_SNAPSHOT_OBJECTLOG");

            entity.HasIndex(e => e.OlTransitionId, "I_TRANSITION_OBJECTLOG");

            entity.Property(e => e.OlId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OL_ID");
            entity.Property(e => e.OlObjectclassname)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("OL_OBJECTCLASSNAME");
            entity.Property(e => e.OlObjectid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OL_OBJECTID");
            entity.Property(e => e.OlSessionId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OL_SESSION_ID");
            entity.Property(e => e.OlSnapshotId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OL_SNAPSHOT_ID");
            entity.Property(e => e.OlTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("OL_TCREATION");
            entity.Property(e => e.OlTransitionId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OL_TRANSITION_ID");
            entity.Property(e => e.OlType)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("OL_TYPE");

            entity.HasOne(d => d.OlSession).WithMany(p => p.JObjectlogs)
                .HasForeignKey(d => d.OlSessionId)
                .HasConstraintName("FK_SESSION_OBJECTLOG");

            entity.HasOne(d => d.OlSnapshot).WithMany(p => p.JObjectlogs)
                .HasForeignKey(d => d.OlSnapshotId)
                .HasConstraintName("FK_SNAPSHOT_OBJECTLOG");

            entity.HasOne(d => d.OlTransition).WithMany(p => p.JObjectlogs)
                .HasForeignKey(d => d.OlTransitionId)
                .HasConstraintName("FK_TRANSITION_OBJECTLOG");
        });

        modelBuilder.Entity<JObjectlogcontrol>(entity =>
        {
            entity.HasKey(e => e.OlcId).HasName("PK_OBJECTLOGCONTROL");

            entity.ToTable("J_OBJECTLOGCONTROL", "JITTOE");

            entity.HasIndex(e => e.OlcObjectclassname, "UN_OLC_CLASSNAME").IsUnique();

            entity.Property(e => e.OlcId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OLC_ID");
            entity.Property(e => e.OlcEnabled)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("0 ")
                .HasColumnName("OLC_ENABLED");
            entity.Property(e => e.OlcLogattributeclassname)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("OLC_LOGATTRIBUTECLASSNAME");
            entity.Property(e => e.OlcLogclassname)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("OLC_LOGCLASSNAME");
            entity.Property(e => e.OlcObjectclassname)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("OLC_OBJECTCLASSNAME");
            entity.Property(e => e.OlcPrivatelog)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("0  ")
                .HasColumnName("OLC_PRIVATELOG");
            entity.Property(e => e.OlcTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("OLC_TCREATION");
            entity.Property(e => e.OlcTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("OLC_TUPDATE");
        });

        modelBuilder.Entity<JOrder>(entity =>
        {
            entity.HasKey(e => e.OId).HasName("PK_ORDER");

            entity.ToTable("J_ORDER", "JITTOE");

            entity.HasIndex(e => e.OContractId, "I_CONTRACT_ORDER");

            entity.HasIndex(e => e.OReforderId, "I_ORDER_ORDER");

            entity.HasIndex(e => new { e.OContractId, e.OProdsequenceno, e.OClosedtimestamp }, "I_O_PRODSEQUENCENO");

            entity.HasIndex(e => new { e.OContractId, e.ONo, e.OVersion, e.OType, e.OClosedtimestamp }, "UN_O_NO").IsUnique();

            entity.Property(e => e.OId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("O_ID");
            entity.Property(e => e.OClosedtimestamp)
                .HasColumnType("DATE")
                .HasColumnName("O_CLOSEDTIMESTAMP");
            entity.Property(e => e.OContractId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("O_CONTRACT_ID");
            entity.Property(e => e.ONo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("O_NO");
            entity.Property(e => e.OProdsequenceno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("O_PRODSEQUENCENO");
            entity.Property(e => e.OProductid)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("O_PRODUCTID");
            entity.Property(e => e.OReforderId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("O_REFORDER_ID");
            entity.Property(e => e.ORequestor)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("O_REQUESTOR");
            entity.Property(e => e.OScheduledtime)
                .HasColumnType("DATE")
                .HasColumnName("O_SCHEDULEDTIME");
            entity.Property(e => e.OSequenceno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("O_SEQUENCENO");
            entity.Property(e => e.OTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("O_TCREATION");
            entity.Property(e => e.OTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("O_TUPDATE");
            entity.Property(e => e.OType)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("O_TYPE");
            entity.Property(e => e.OVersion)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("O_VERSION");

            entity.HasOne(d => d.OContract).WithMany(p => p.JOrders)
                .HasForeignKey(d => d.OContractId)
                .HasConstraintName("FK_CONTRACT_ORDER");

            entity.HasOne(d => d.OReforder).WithMany(p => p.InverseOReforder)
                .HasForeignKey(d => d.OReforderId)
                .HasConstraintName("FK_ORDER_ORDER");
        });

        modelBuilder.Entity<JOrderbuffer>(entity =>
        {
            entity.HasKey(e => e.ObId).HasName("PK_ORDERBUFFER");

            entity.ToTable("J_ORDERBUFFER", "JITTOE");

            entity.HasIndex(e => e.ObCompanyId, "I_COMPANY_ORDERBUFFER");

            entity.HasIndex(e => e.ObKey, "UN_OB_KEY").IsUnique();

            entity.Property(e => e.ObId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OB_ID");
            entity.Property(e => e.ObCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OB_COMPANY_ID");
            entity.Property(e => e.ObDescr)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("OB_DESCR");
            entity.Property(e => e.ObKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("OB_KEY");
            entity.Property(e => e.ObMaxentries)
                .HasPrecision(5)
                .HasDefaultValueSql("0  ")
                .HasColumnName("OB_MAXENTRIES");
            entity.Property(e => e.ObMaxentryageinminutes)
                .HasPrecision(9)
                .HasDefaultValueSql("0  ")
                .HasColumnName("OB_MAXENTRYAGEINMINUTES");
            entity.Property(e => e.ObTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("OB_TCREATION");
            entity.Property(e => e.ObTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("OB_TUPDATE");

            entity.HasOne(d => d.ObCompany).WithMany(p => p.JOrderbuffers)
                .HasForeignKey(d => d.ObCompanyId)
                .HasConstraintName("FK_COMPANY_ORDERBUFFER");
        });

        modelBuilder.Entity<JOrderbufferclass>(entity =>
        {
            entity.HasKey(e => e.ObcId).HasName("PK_ORDERBUFFERCLASS");

            entity.ToTable("J_ORDERBUFFERCLASS", "JITTOE");

            entity.HasIndex(e => e.ObcCompanyId, "I_COMPANY_OBCLASS");

            entity.HasIndex(e => e.ObcKey, "UN_OBC_KEY").IsUnique();

            entity.Property(e => e.ObcId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OBC_ID");
            entity.Property(e => e.ObcCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OBC_COMPANY_ID");
            entity.Property(e => e.ObcDescr)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("OBC_DESCR");
            entity.Property(e => e.ObcKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("OBC_KEY");
            entity.Property(e => e.ObcTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("OBC_TCREATION");
            entity.Property(e => e.ObcTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("OBC_TUPDATE");
            entity.Property(e => e.ObcUniqueorders)
                .HasPrecision(1)
                .HasColumnName("OBC_UNIQUEORDERS");

            entity.HasOne(d => d.ObcCompany).WithMany(p => p.JOrderbufferclasses)
                .HasForeignKey(d => d.ObcCompanyId)
                .HasConstraintName("FK_COMPANY_OBCLASS");
        });

        modelBuilder.Entity<JOrderbufferclassmember>(entity =>
        {
            entity.HasKey(e => e.ObcmId).HasName("PK_ORDERBUFFERCLASSMEMBER");

            entity.ToTable("J_ORDERBUFFERCLASSMEMBER", "JITTOE");

            entity.HasIndex(e => e.ObcmOrderbufferclassId, "I_OBC_OBCMEMBER");

            entity.HasIndex(e => e.ObcmOrderbufferId, "I_ORDERBUFFER_OBCMEMBER");

            entity.HasIndex(e => new { e.ObcmOrderbufferId, e.ObcmOrderbufferclassId }, "UN_OBCM_KEY").IsUnique();

            entity.Property(e => e.ObcmId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OBCM_ID");
            entity.Property(e => e.ObcmOrderbufferId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OBCM_ORDERBUFFER_ID");
            entity.Property(e => e.ObcmOrderbufferclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OBCM_ORDERBUFFERCLASS_ID");
            entity.Property(e => e.ObcmTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("OBCM_TCREATION");
            entity.Property(e => e.ObcmTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("OBCM_TUPDATE");

            entity.HasOne(d => d.ObcmOrderbuffer).WithMany(p => p.JOrderbufferclassmembers)
                .HasForeignKey(d => d.ObcmOrderbufferId)
                .HasConstraintName("FK_ORDERBUFFER_OBCMEMBER");

            entity.HasOne(d => d.ObcmOrderbufferclass).WithMany(p => p.JOrderbufferclassmembers)
                .HasForeignKey(d => d.ObcmOrderbufferclassId)
                .HasConstraintName("FK_OBC_OBCMEMBER");
        });

        modelBuilder.Entity<JOrderbufferentry>(entity =>
        {
            entity.HasKey(e => e.ObeId).HasName("PK_ORDERBUFFERENTRY");

            entity.ToTable("J_ORDERBUFFERENTRY", "JITTOE");

            entity.HasIndex(e => e.ObeOrderbufferId, "I_ORDERBUFFER_OBENTRY");

            entity.HasIndex(e => e.ObeOrderId, "I_ORDER_OBENTRY");

            entity.HasIndex(e => new { e.ObeOrderbufferId, e.ObeOrderId }, "UN_OBE_KEY").IsUnique();

            entity.Property(e => e.ObeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OBE_ID");
            entity.Property(e => e.ObeOrderId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OBE_ORDER_ID");
            entity.Property(e => e.ObeOrderbufferId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OBE_ORDERBUFFER_ID");
            entity.Property(e => e.ObeTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("OBE_TCREATION");
            entity.Property(e => e.ObeTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("OBE_TUPDATE");

            entity.HasOne(d => d.ObeOrder).WithMany(p => p.JOrderbufferentries)
                .HasForeignKey(d => d.ObeOrderId)
                .HasConstraintName("FK_ORDER_OBENTRY");

            entity.HasOne(d => d.ObeOrderbuffer).WithMany(p => p.JOrderbufferentries)
                .HasForeignKey(d => d.ObeOrderbufferId)
                .HasConstraintName("FK_ORDERBUFFER_OBENTRY");
        });

        modelBuilder.Entity<JOrdercontrol>(entity =>
        {
            entity.HasKey(e => e.OcId).HasName("PK_ORDERCONTROL");

            entity.ToTable("J_ORDERCONTROL", "JITTOE");

            entity.HasIndex(e => e.OcOffsetcalendarId, "I_CALENDAR_ORDERCONTROL");

            entity.HasIndex(e => e.OcContractId, "I_CONTRACT_ORDERCONTROL");

            entity.HasIndex(e => e.OcTolocationclassId, "I_LCLASS_ORDERCONTROL");

            entity.HasIndex(e => e.OcReqoffsetcalendarId, "I_REQCALENDAR_ORDERCONTROL");

            entity.HasIndex(e => e.OcReqtolocationclassId, "I_REQLCLASS_ORDERCONTROL");

            entity.HasIndex(e => e.OcReqsubjectclassId, "I_REQSCLASS_ORDERCONTROL");

            entity.HasIndex(e => e.OcSubjectclassId, "I_SCLASS_ORDERCONTROL");

            entity.HasIndex(e => e.OcKey, "UN_OC_KEY").IsUnique();

            entity.Property(e => e.OcId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OC_ID");
            entity.Property(e => e.OcCalloffmode)
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasDefaultValueSql("'None'")
                .HasColumnName("OC_CALLOFFMODE");
            entity.Property(e => e.OcContractId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OC_CONTRACT_ID");
            entity.Property(e => e.OcCycle)
                .HasPrecision(9)
                .HasDefaultValueSql("0")
                .HasColumnName("OC_CYCLE");
            entity.Property(e => e.OcCyclecomment)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("OC_CYCLECOMMENT");
            entity.Property(e => e.OcDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OC_DESCR");
            entity.Property(e => e.OcDoneordercount)
                .HasPrecision(6)
                .HasDefaultValueSql("0\n")
                .HasColumnName("OC_DONEORDERCOUNT");
            entity.Property(e => e.OcKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("OC_KEY");
            entity.Property(e => e.OcOffsetcalendarId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OC_OFFSETCALENDAR_ID");
            entity.Property(e => e.OcOffsetinmin)
                .HasPrecision(6)
                .HasDefaultValueSql("0")
                .HasColumnName("OC_OFFSETINMIN");
            entity.Property(e => e.OcOrdercount)
                .HasPrecision(6)
                .HasDefaultValueSql("0")
                .HasColumnName("OC_ORDERCOUNT");
            entity.Property(e => e.OcRefordercount)
                .HasPrecision(6)
                .HasDefaultValueSql("0")
                .HasColumnName("OC_REFORDERCOUNT");
            entity.Property(e => e.OcReftime)
                .HasColumnType("DATE")
                .HasColumnName("OC_REFTIME");
            entity.Property(e => e.OcReqcalloffmode)
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasDefaultValueSql("'None'")
                .HasColumnName("OC_REQCALLOFFMODE");
            entity.Property(e => e.OcReqoffsetcalendarId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OC_REQOFFSETCALENDAR_ID");
            entity.Property(e => e.OcReqoffsetinmin)
                .HasPrecision(6)
                .HasDefaultValueSql("0")
                .HasColumnName("OC_REQOFFSETINMIN");
            entity.Property(e => e.OcReqordercount)
                .HasPrecision(6)
                .HasDefaultValueSql("0")
                .HasColumnName("OC_REQORDERCOUNT");
            entity.Property(e => e.OcReqrefordercount)
                .HasPrecision(6)
                .HasDefaultValueSql("0")
                .HasColumnName("OC_REQREFORDERCOUNT");
            entity.Property(e => e.OcReqreftime)
                .HasColumnType("DATE")
                .HasColumnName("OC_REQREFTIME");
            entity.Property(e => e.OcReqsimulation)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("0  ")
                .HasColumnName("OC_REQSIMULATION");
            entity.Property(e => e.OcReqstoreresult)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("1  ")
                .HasColumnName("OC_REQSTORERESULT");
            entity.Property(e => e.OcReqsubjectclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OC_REQSUBJECTCLASS_ID");
            entity.Property(e => e.OcReqtolocationclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OC_REQTOLOCATIONCLASS_ID");
            entity.Property(e => e.OcSimulation)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("0  ")
                .HasColumnName("OC_SIMULATION");
            entity.Property(e => e.OcStoreresult)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("1  ")
                .HasColumnName("OC_STORERESULT");
            entity.Property(e => e.OcSubjectclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OC_SUBJECTCLASS_ID");
            entity.Property(e => e.OcTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("OC_TCREATION");
            entity.Property(e => e.OcTolocationclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OC_TOLOCATIONCLASS_ID");
            entity.Property(e => e.OcTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("OC_TUPDATE");

            entity.HasOne(d => d.OcContract).WithMany(p => p.JOrdercontrols)
                .HasForeignKey(d => d.OcContractId)
                .HasConstraintName("FK_CONTRACT_ORDERCONTROL");

            entity.HasOne(d => d.OcOffsetcalendar).WithMany(p => p.JOrdercontrolOcOffsetcalendars)
                .HasForeignKey(d => d.OcOffsetcalendarId)
                .HasConstraintName("FK_CALENDAR_ORDERCONTROL");

            entity.HasOne(d => d.OcReqoffsetcalendar).WithMany(p => p.JOrdercontrolOcReqoffsetcalendars)
                .HasForeignKey(d => d.OcReqoffsetcalendarId)
                .HasConstraintName("FK_REQCALENDAR_ORDERCONTROL");

            entity.HasOne(d => d.OcReqsubjectclass).WithMany(p => p.JOrdercontrolOcReqsubjectclasses)
                .HasForeignKey(d => d.OcReqsubjectclassId)
                .HasConstraintName("FK_REQSCLASS_ORDERCONTROL");

            entity.HasOne(d => d.OcReqtolocationclass).WithMany(p => p.JOrdercontrolOcReqtolocationclasses)
                .HasForeignKey(d => d.OcReqtolocationclassId)
                .HasConstraintName("FK_REQLCLASS_ORDERCONTROL");

            entity.HasOne(d => d.OcSubjectclass).WithMany(p => p.JOrdercontrolOcSubjectclasses)
                .HasForeignKey(d => d.OcSubjectclassId)
                .HasConstraintName("FK_SCLASS_ORDERCONTROL");

            entity.HasOne(d => d.OcTolocationclass).WithMany(p => p.JOrdercontrolOcTolocationclasses)
                .HasForeignKey(d => d.OcTolocationclassId)
                .HasConstraintName("FK_LCLASS_ORDERCONTROL");
        });

        modelBuilder.Entity<JOrdercontrolresult>(entity =>
        {
            entity.HasKey(e => e.OcrId).HasName("PK_ORDERCONTROLRESULT");

            entity.ToTable("J_ORDERCONTROLRESULT", "JITTOE");

            entity.HasIndex(e => e.OcrOrdercontrolId, "I_OC_OCRESULT");

            entity.Property(e => e.OcrId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OCR_ID");
            entity.Property(e => e.OcrCycle)
                .HasPrecision(9)
                .HasDefaultValueSql("0  ")
                .HasColumnName("OCR_CYCLE");
            entity.Property(e => e.OcrOrdercontrolId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OCR_ORDERCONTROL_ID");
            entity.Property(e => e.OcrSimulation)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("0  ")
                .HasColumnName("OCR_SIMULATION");
            entity.Property(e => e.OcrTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("OCR_TCREATION");
            entity.Property(e => e.OcrTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("OCR_TUPDATE");

            entity.HasOne(d => d.OcrOrdercontrol).WithMany(p => p.JOrdercontrolresults)
                .HasForeignKey(d => d.OcrOrdercontrolId)
                .HasConstraintName("FK_OC_OCRESULT");
        });

        modelBuilder.Entity<JOrdercontrolresultitem>(entity =>
        {
            entity.HasKey(e => e.OcriId).HasName("PK_ORDERCONTROLRESULTITEM");

            entity.ToTable("J_ORDERCONTROLRESULTITEM", "JITTOE");

            entity.HasIndex(e => e.OcriOcresultId, "I_OCRESULT_OCRESULTITEM");

            entity.HasIndex(e => e.OcriOrderId, "I_ORDER_OCRESULTITEM");

            entity.Property(e => e.OcriId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OCRI_ID");
            entity.Property(e => e.OcriOcresultId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OCRI_OCRESULT_ID");
            entity.Property(e => e.OcriOrderId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OCRI_ORDER_ID");
            entity.Property(e => e.OcriTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("OCRI_TCREATION");

            entity.HasOne(d => d.OcriOcresult).WithMany(p => p.JOrdercontrolresultitems)
                .HasForeignKey(d => d.OcriOcresultId)
                .HasConstraintName("FK_OCRESULT_OCRESULTITEM");

            entity.HasOne(d => d.OcriOrder).WithMany(p => p.JOrdercontrolresultitems)
                .HasForeignKey(d => d.OcriOrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ORDER_OCRESULTITEM");
        });

        modelBuilder.Entity<JOrderentry>(entity =>
        {
            entity.HasKey(e => e.OeId).HasName("PK_ORDERENTRY");

            entity.ToTable("J_ORDERENTRY", "JITTOE");

            entity.HasIndex(e => e.OeContractorderId, "I_CORDER_ORDERENTRY");

            entity.HasIndex(e => e.OeTolocationId, "I_LOCATION_ORDERENTRY");

            entity.HasIndex(e => new { e.OeState, e.OeScheduledtime }, "I_OE_STATE");

            entity.HasIndex(e => e.OeReforderentryId, "I_ORDERENTRY_ORDERENTRY");

            entity.HasIndex(e => e.OeOrderId, "I_ORDER_ORDERENTRY");

            entity.HasIndex(e => e.OeOthersubjectId, "I_OTHERSUBJECT_ORDERENTRY");

            entity.HasIndex(e => e.OeSubjectId, "I_SUBJECT_ORDERENTRY");

            entity.HasIndex(e => e.OeUnitofmeasureId, "I_UNITOFMEASURE_ORDERENTRY");

            entity.Property(e => e.OeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OE_ID");
            entity.Property(e => e.OeAmount)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("OE_AMOUNT");
            entity.Property(e => e.OeAssignedamount)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("OE_ASSIGNEDAMOUNT");
            entity.Property(e => e.OeCallofftime)
                .HasColumnType("DATE")
                .HasColumnName("OE_CALLOFFTIME");
            entity.Property(e => e.OeContractorderId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OE_CONTRACTORDER_ID");
            entity.Property(e => e.OeDeliveredamount)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("OE_DELIVEREDAMOUNT");
            entity.Property(e => e.OeGroup)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("OE_GROUP");
            entity.Property(e => e.OeGroupsequenceno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("OE_GROUPSEQUENCENO");
            entity.Property(e => e.OeInvalidid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OE_INVALIDID");
            entity.Property(e => e.OeIsinternal)
                .HasPrecision(1)
                .HasColumnName("OE_ISINTERNAL");
            entity.Property(e => e.OeNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("OE_NO");
            entity.Property(e => e.OeOrderId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OE_ORDER_ID");
            entity.Property(e => e.OeOrderedtime)
                .HasColumnType("DATE")
                .HasColumnName("OE_ORDEREDTIME");
            entity.Property(e => e.OeOtherstate)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("OE_OTHERSTATE");
            entity.Property(e => e.OeOthersubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OE_OTHERSUBJECT_ID");
            entity.Property(e => e.OePaidamount)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("OE_PAIDAMOUNT");
            entity.Property(e => e.OeReceivedamount)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("OE_RECEIVEDAMOUNT");
            entity.Property(e => e.OeReforderentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OE_REFORDERENTRY_ID");
            entity.Property(e => e.OeScheduledtime)
                .HasColumnType("DATE")
                .HasColumnName("OE_SCHEDULEDTIME");
            entity.Property(e => e.OeState)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("OE_STATE");
            entity.Property(e => e.OeSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OE_SUBJECT_ID");
            entity.Property(e => e.OeTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("OE_TCREATION");
            entity.Property(e => e.OeTolocationId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OE_TOLOCATION_ID");
            entity.Property(e => e.OeTransformedamount)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("OE_TRANSFORMEDAMOUNT");
            entity.Property(e => e.OeTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("OE_TUPDATE");
            entity.Property(e => e.OeTvalidfrom)
                .HasColumnType("DATE")
                .HasColumnName("OE_TVALIDFROM");
            entity.Property(e => e.OeTvaliduntil)
                .HasColumnType("DATE")
                .HasColumnName("OE_TVALIDUNTIL");
            entity.Property(e => e.OeUnitofmeasureId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OE_UNITOFMEASURE_ID");
            entity.Property(e => e.OeVersion)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("OE_VERSION");

            entity.HasOne(d => d.OeContractorder).WithMany(p => p.JOrderentryOeContractorders)
                .HasForeignKey(d => d.OeContractorderId)
                .HasConstraintName("FK_CORDER_ORDERENTRY");

            entity.HasOne(d => d.OeOrder).WithMany(p => p.JOrderentryOeOrders)
                .HasForeignKey(d => d.OeOrderId)
                .HasConstraintName("FK_ORDER_ORDERENTRY");

            entity.HasOne(d => d.OeOthersubject).WithMany(p => p.JOrderentryOeOthersubjects)
                .HasForeignKey(d => d.OeOthersubjectId)
                .HasConstraintName("FK_OTHERSUBJECT_ORDERENTRY");

            entity.HasOne(d => d.OeReforderentry).WithMany(p => p.InverseOeReforderentry)
                .HasForeignKey(d => d.OeReforderentryId)
                .HasConstraintName("FK_ORDERENTRY_ORDERENTRY");

            entity.HasOne(d => d.OeSubject).WithMany(p => p.JOrderentryOeSubjects)
                .HasForeignKey(d => d.OeSubjectId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SUBJECT_ORDERENTRY");

            entity.HasOne(d => d.OeTolocation).WithMany(p => p.JOrderentries)
                .HasForeignKey(d => d.OeTolocationId)
                .HasConstraintName("FK_LOCATION_ORDERENTRY");

            entity.HasOne(d => d.OeUnitofmeasure).WithMany(p => p.JOrderentries)
                .HasForeignKey(d => d.OeUnitofmeasureId)
                .HasConstraintName("FK_UNITOFMEASURE_ORDERENTRY");
        });

        modelBuilder.Entity<JOrderentryinfo>(entity =>
        {
            entity.HasKey(e => e.OeiId).HasName("PK_ORDERENTRYINFO");

            entity.ToTable("J_ORDERENTRYINFO", "JITTOE");

            entity.HasIndex(e => e.OeiUomId, "I_UOM_OEINFO");

            entity.HasIndex(e => new { e.OeiOrderentryId, e.OeiType, e.OeiKey1, e.OeiKey2, e.OeiKey3 }, "UN_OEI_INFO").IsUnique();

            entity.Property(e => e.OeiId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OEI_ID");
            entity.Property(e => e.OeiIntvalue)
                .HasPrecision(10)
                .HasColumnName("OEI_INTVALUE");
            entity.Property(e => e.OeiKey1)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("OEI_KEY1");
            entity.Property(e => e.OeiKey2)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("OEI_KEY2");
            entity.Property(e => e.OeiKey3)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("OEI_KEY3");
            entity.Property(e => e.OeiOrderentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OEI_ORDERENTRY_ID");
            entity.Property(e => e.OeiStringvalue)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("OEI_STRINGVALUE");
            entity.Property(e => e.OeiTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("OEI_TCREATION");
            entity.Property(e => e.OeiTimevalue)
                .HasColumnType("DATE")
                .HasColumnName("OEI_TIMEVALUE");
            entity.Property(e => e.OeiTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("OEI_TUPDATE");
            entity.Property(e => e.OeiType)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasColumnName("OEI_TYPE");
            entity.Property(e => e.OeiUomId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OEI_UOM_ID");

            entity.HasOne(d => d.OeiOrderentry).WithMany(p => p.JOrderentryinfos)
                .HasForeignKey(d => d.OeiOrderentryId)
                .HasConstraintName("FK_ORDERENTRY_OEINFO");

            entity.HasOne(d => d.OeiUom).WithMany(p => p.JOrderentryinfos)
                .HasForeignKey(d => d.OeiUomId)
                .HasConstraintName("FK_UOM_OEINFO");
        });

        modelBuilder.Entity<JOrderevent>(entity =>
        {
            entity.HasKey(e => e.OevId).HasName("PK_ORDEREVENT");

            entity.ToTable("J_ORDEREVENT", "JITTOE");

            entity.HasIndex(e => e.OevTcreation, "I_OEV_TCREATION");

            entity.HasIndex(e => e.OevOrderId, "I_ORDER_ORDEREVENT");

            entity.HasIndex(e => e.OevTransitionId, "I_TRANSITION_ORDEREVENT");

            entity.Property(e => e.OevId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OEV_ID");
            entity.Property(e => e.OevComment)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("OEV_COMMENT");
            entity.Property(e => e.OevEvent)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("OEV_EVENT");
            entity.Property(e => e.OevOrderId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OEV_ORDER_ID");
            entity.Property(e => e.OevProdsequenceno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("OEV_PRODSEQUENCENO");
            entity.Property(e => e.OevReason)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OEV_REASON");
            entity.Property(e => e.OevSequenceno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("OEV_SEQUENCENO");
            entity.Property(e => e.OevTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("OEV_TCREATION");
            entity.Property(e => e.OevTransitionId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OEV_TRANSITION_ID");

            entity.HasOne(d => d.OevOrder).WithMany(p => p.JOrderevents)
                .HasForeignKey(d => d.OevOrderId)
                .HasConstraintName("FK_ORDER_ORDEREVENT");

            entity.HasOne(d => d.OevTransition).WithMany(p => p.JOrderevents)
                .HasForeignKey(d => d.OevTransitionId)
                .HasConstraintName("FK_TRANSITION_ORDEREVENT");
        });

        modelBuilder.Entity<JOrdereventcfg>(entity =>
        {
            entity.HasKey(e => e.OevcId).HasName("PK_ORDEREVENTCFG");

            entity.ToTable("J_ORDEREVENTCFG", "JITTOE");

            entity.HasIndex(e => e.OevcContractId, "I_CONTRACT_ORDEREVC");

            entity.HasIndex(e => e.OevcOrdermgrId, "I_ORDERMGR_ORDEREVC");

            entity.HasIndex(e => e.OevcTolocationclassId, "I_TOLCLASS_ORDEREVC");

            entity.HasIndex(e => e.OevcKey, "UN_OEVC_KEY").IsUnique();

            entity.Property(e => e.OevcId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OEVC_ID");
            entity.Property(e => e.OevcCategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("OEVC_CATEGORY");
            entity.Property(e => e.OevcConfiguration)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("OEVC_CONFIGURATION");
            entity.Property(e => e.OevcContractId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OEVC_CONTRACT_ID");
            entity.Property(e => e.OevcDescr)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("OEVC_DESCR");
            entity.Property(e => e.OevcIsinternal)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("0  ")
                .HasColumnName("OEVC_ISINTERNAL");
            entity.Property(e => e.OevcKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("OEVC_KEY");
            entity.Property(e => e.OevcMode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("OEVC_MODE");
            entity.Property(e => e.OevcName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OEVC_NAME");
            entity.Property(e => e.OevcOrderentrygrouprx)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("OEVC_ORDERENTRYGROUPRX");
            entity.Property(e => e.OevcOrderentryselectiontype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("OEVC_ORDERENTRYSELECTIONTYPE");
            entity.Property(e => e.OevcOrdermgrId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OEVC_ORDERMGR_ID");
            entity.Property(e => e.OevcOrdertransformtype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValueSql("'None'  ")
                .HasColumnName("OEVC_ORDERTRANSFORMTYPE");
            entity.Property(e => e.OevcOrdertype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("OEVC_ORDERTYPE");
            entity.Property(e => e.OevcPreselectorderentries)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("0  ")
                .HasColumnName("OEVC_PRESELECTORDERENTRIES");
            entity.Property(e => e.OevcTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("OEVC_TCREATION");
            entity.Property(e => e.OevcTolocationclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OEVC_TOLOCATIONCLASS_ID");
            entity.Property(e => e.OevcTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("OEVC_TUPDATE");

            entity.HasOne(d => d.OevcContract).WithMany(p => p.JOrdereventcfgs)
                .HasForeignKey(d => d.OevcContractId)
                .HasConstraintName("FK_CONTRACT_ORDEREVC");

            entity.HasOne(d => d.OevcOrdermgr).WithMany(p => p.JOrdereventcfgs)
                .HasForeignKey(d => d.OevcOrdermgrId)
                .HasConstraintName("FK_ORDERMGR_ORDEREVC");

            entity.HasOne(d => d.OevcTolocationclass).WithMany(p => p.JOrdereventcfgs)
                .HasForeignKey(d => d.OevcTolocationclassId)
                .HasConstraintName("FK_TOLCLASS_ORDEREVC");
        });

        modelBuilder.Entity<JOrderevententry>(entity =>
        {
            entity.HasKey(e => e.OeveId).HasName("PK_ORDEREVENTENTRY");

            entity.ToTable("J_ORDEREVENTENTRY", "JITTOE");

            entity.HasIndex(e => e.OeveTolocationId, "I_LOCATION_ORDEREVENTENTRY");

            entity.HasIndex(e => e.OeveOrdereventId, "I_ORDEREVENT_ENTRY");

            entity.HasIndex(e => e.OeveOthersubjectId, "I_OTHERSUBJECT_OEENTRY");

            entity.HasIndex(e => e.OeveSubjectId, "I_SUBJECT_ORDEREVENTENTRY");

            entity.Property(e => e.OeveId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OEVE_ID");
            entity.Property(e => e.OeveAmount)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("OEVE_AMOUNT");
            entity.Property(e => e.OeveAssignedamount)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("OEVE_ASSIGNEDAMOUNT");
            entity.Property(e => e.OeveCallofftime)
                .HasColumnType("DATE")
                .HasColumnName("OEVE_CALLOFFTIME");
            entity.Property(e => e.OeveDeliveredamount)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("OEVE_DELIVEREDAMOUNT");
            entity.Property(e => e.OeveGroup)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("OEVE_GROUP");
            entity.Property(e => e.OeveGroupsequenceno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("OEVE_GROUPSEQUENCENO");
            entity.Property(e => e.OeveInvalidid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OEVE_INVALIDID");
            entity.Property(e => e.OeveIsinternal)
                .HasPrecision(1)
                .HasColumnName("OEVE_ISINTERNAL");
            entity.Property(e => e.OeveNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("OEVE_NO");
            entity.Property(e => e.OeveOrdereventId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OEVE_ORDEREVENT_ID");
            entity.Property(e => e.OeveOtherstate)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("OEVE_OTHERSTATE");
            entity.Property(e => e.OeveOthersubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OEVE_OTHERSUBJECT_ID");
            entity.Property(e => e.OevePaidamount)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("OEVE_PAIDAMOUNT");
            entity.Property(e => e.OeveReceivedamount)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("OEVE_RECEIVEDAMOUNT");
            entity.Property(e => e.OeveScheduledtime)
                .HasColumnType("DATE")
                .HasColumnName("OEVE_SCHEDULEDTIME");
            entity.Property(e => e.OeveState)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("OEVE_STATE");
            entity.Property(e => e.OeveSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OEVE_SUBJECT_ID");
            entity.Property(e => e.OeveTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("OEVE_TCREATION");
            entity.Property(e => e.OeveTolocationId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OEVE_TOLOCATION_ID");
            entity.Property(e => e.OeveTransformedamount)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("OEVE_TRANSFORMEDAMOUNT");
            entity.Property(e => e.OeveTvalidfrom)
                .HasColumnType("DATE")
                .HasColumnName("OEVE_TVALIDFROM");
            entity.Property(e => e.OeveTvaliduntil)
                .HasColumnType("DATE")
                .HasColumnName("OEVE_TVALIDUNTIL");
            entity.Property(e => e.OeveVersion)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("OEVE_VERSION");

            entity.HasOne(d => d.OeveOrderevent).WithMany(p => p.JOrderevententries)
                .HasForeignKey(d => d.OeveOrdereventId)
                .HasConstraintName("FK_ORDEREVENT_ENTRY");

            entity.HasOne(d => d.OeveOthersubject).WithMany(p => p.JOrderevententryOeveOthersubjects)
                .HasForeignKey(d => d.OeveOthersubjectId)
                .HasConstraintName("FK_OTHERSUBJECT_OEENTRY");

            entity.HasOne(d => d.OeveSubject).WithMany(p => p.JOrderevententryOeveSubjects)
                .HasForeignKey(d => d.OeveSubjectId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SUBJECT_ORDEREVENTENTRY");

            entity.HasOne(d => d.OeveTolocation).WithMany(p => p.JOrderevententries)
                .HasForeignKey(d => d.OeveTolocationId)
                .HasConstraintName("FK_LOCATION_ORDEREVENTENTRY");
        });

        modelBuilder.Entity<JOrdereventparam>(entity =>
        {
            entity.HasKey(e => e.OevpId).HasName("PK_ORDEREVENTPARAM");

            entity.ToTable("J_ORDEREVENTPARAM", "JITTOE");

            entity.HasIndex(e => e.OevpOrdereventcfgId, "I_ORDEREVC_ORDEREVP");

            entity.HasIndex(e => new { e.OevpOrdereventcfgId, e.OevpName }, "UN_OEVP_PARAM_NAME").IsUnique();

            entity.Property(e => e.OevpId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OEVP_ID");
            entity.Property(e => e.OevpDefaultvalue)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("OEVP_DEFAULTVALUE");
            entity.Property(e => e.OevpDescr)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("OEVP_DESCR");
            entity.Property(e => e.OevpIsconstant)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("0  ")
                .HasColumnName("OEVP_ISCONSTANT");
            entity.Property(e => e.OevpIsmandatory)
                .HasPrecision(1)
                .HasColumnName("OEVP_ISMANDATORY");
            entity.Property(e => e.OevpName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OEVP_NAME");
            entity.Property(e => e.OevpOrdereventcfgId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OEVP_ORDEREVENTCFG_ID");
            entity.Property(e => e.OevpSelector)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("OEVP_SELECTOR");
            entity.Property(e => e.OevpTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("OEVP_TCREATION");
            entity.Property(e => e.OevpTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("OEVP_TUPDATE");
            entity.Property(e => e.OevpType)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("OEVP_TYPE");

            entity.HasOne(d => d.OevpOrdereventcfg).WithMany(p => p.JOrdereventparams)
                .HasForeignKey(d => d.OevpOrdereventcfgId)
                .HasConstraintName("FK_ORDEREVC_ORDEREVP");
        });

        modelBuilder.Entity<JOrderinfo>(entity =>
        {
            entity.HasKey(e => e.OiId).HasName("PK_ORDERINFO");

            entity.ToTable("J_ORDERINFO", "JITTOE");

            entity.HasIndex(e => new { e.OiType, e.OiTupdate }, "I_OI_TYPE");

            entity.HasIndex(e => e.OiUomId, "I_UOM_ORDERINFO");

            entity.HasIndex(e => new { e.OiOrderId, e.OiType, e.OiKey1, e.OiKey2, e.OiKey3 }, "UN_OI_INFO").IsUnique();

            entity.Property(e => e.OiId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OI_ID");
            entity.Property(e => e.OiKey1)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("OI_KEY1");
            entity.Property(e => e.OiKey2)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("OI_KEY2");
            entity.Property(e => e.OiKey3)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("OI_KEY3");
            entity.Property(e => e.OiOrderId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OI_ORDER_ID");
            entity.Property(e => e.OiStringvalue)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("OI_STRINGVALUE");
            entity.Property(e => e.OiTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("OI_TCREATION");
            entity.Property(e => e.OiTimevalue)
                .HasColumnType("DATE")
                .HasColumnName("OI_TIMEVALUE");
            entity.Property(e => e.OiTimevalue2)
                .HasColumnType("DATE")
                .HasColumnName("OI_TIMEVALUE2");
            entity.Property(e => e.OiTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("OI_TUPDATE");
            entity.Property(e => e.OiType)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasColumnName("OI_TYPE");
            entity.Property(e => e.OiUomId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OI_UOM_ID");

            entity.HasOne(d => d.OiOrder).WithMany(p => p.JOrderinfos)
                .HasForeignKey(d => d.OiOrderId)
                .HasConstraintName("FK_ORDER_ORDERINFO");

            entity.HasOne(d => d.OiUom).WithMany(p => p.JOrderinfos)
                .HasForeignKey(d => d.OiUomId)
                .HasConstraintName("FK_UOM_ORDERINFO");
        });

        modelBuilder.Entity<JOrdermgr>(entity =>
        {
            entity.HasKey(e => e.OmId).HasName("PK_ORDERMGR");

            entity.ToTable("J_ORDERMGR", "JITTOE");

            entity.HasIndex(e => e.OmConfigdefId, "I_CONFIGDEF_ORDERMGR");

            entity.HasIndex(e => e.OmContractId, "I_CONTRACT_ORDERMGR");

            entity.HasIndex(e => e.OmKey, "UN_OM_KEY").IsUnique();

            entity.Property(e => e.OmId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OM_ID");
            entity.Property(e => e.OmConfigdefId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OM_CONFIGDEF_ID");
            entity.Property(e => e.OmContractId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OM_CONTRACT_ID");
            entity.Property(e => e.OmDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OM_DESCR");
            entity.Property(e => e.OmKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("OM_KEY");
            entity.Property(e => e.OmTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("OM_TCREATION");
            entity.Property(e => e.OmTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("OM_TUPDATE");

            entity.HasOne(d => d.OmConfigdef).WithMany(p => p.JOrdermgrs)
                .HasForeignKey(d => d.OmConfigdefId)
                .HasConstraintName("FK_CONFIGDEF_ORDERMGR");

            entity.HasOne(d => d.OmContract).WithMany(p => p.JOrdermgrs)
                .HasForeignKey(d => d.OmContractId)
                .HasConstraintName("FK_CONTRACT_ORDERMGR");
        });

        modelBuilder.Entity<JOrdermgrpropertyset>(entity =>
        {
            entity.HasKey(e => e.OmpsId).HasName("PK_ORDERMGRPROPERTYSET");

            entity.ToTable("J_ORDERMGRPROPERTYSET", "JITTOE");

            entity.HasIndex(e => e.OmpsOrdermgrId, "I_ORDERMGR_OMPSET");

            entity.HasIndex(e => e.OmpsPropertysetId, "I_PROPERTYSET_OMPSET");

            entity.HasIndex(e => new { e.OmpsOrdermgrId, e.OmpsPropertysetId }, "UN_OMPS_KEY").IsUnique();

            entity.Property(e => e.OmpsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OMPS_ID");
            entity.Property(e => e.OmpsOrdermgrId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OMPS_ORDERMGR_ID");
            entity.Property(e => e.OmpsPropertysetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OMPS_PROPERTYSET_ID");
            entity.Property(e => e.OmpsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("OMPS_TCREATION");

            entity.HasOne(d => d.OmpsOrdermgr).WithMany(p => p.JOrdermgrpropertysets)
                .HasForeignKey(d => d.OmpsOrdermgrId)
                .HasConstraintName("FK_ORDERMGR_OMPSET");

            entity.HasOne(d => d.OmpsPropertyset).WithMany(p => p.JOrdermgrpropertysets)
                .HasForeignKey(d => d.OmpsPropertysetId)
                .HasConstraintName("FK_PROPERTYSET_OMPSET");
        });

        modelBuilder.Entity<JOrderproclog>(entity =>
        {
            entity.HasKey(e => e.OplId).HasName("PK_ORDERPROCLOG");

            entity.ToTable("J_ORDERPROCLOG", "JITTOE");

            entity.HasIndex(e => e.OplContractId, "I_CONTRACT_ORDERPROCLOG");

            entity.Property(e => e.OplId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OPL_ID");
            entity.Property(e => e.OplContractId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("OPL_CONTRACT_ID");
            entity.Property(e => e.OplCount)
                .HasPrecision(9)
                .HasColumnName("OPL_COUNT");
            entity.Property(e => e.OplQualifier1)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("OPL_QUALIFIER1");
            entity.Property(e => e.OplQualifier2)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("OPL_QUALIFIER2");
            entity.Property(e => e.OplQualifier3)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("OPL_QUALIFIER3");
            entity.Property(e => e.OplTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("OPL_TCREATION");
            entity.Property(e => e.OplTimevalue)
                .HasColumnType("DATE")
                .HasColumnName("OPL_TIMEVALUE");
            entity.Property(e => e.OplType)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("OPL_TYPE");

            entity.HasOne(d => d.OplContract).WithMany(p => p.JOrderproclogs)
                .HasForeignKey(d => d.OplContractId)
                .HasConstraintName("FK_CONTRACT_ORDERPROCLOG");
        });

        modelBuilder.Entity<JPackcfg>(entity =>
        {
            entity.HasKey(e => e.PcfId).HasName("PK_PACKCFG");

            entity.ToTable("J_PACKCFG", "JITTOE");

            entity.HasIndex(e => e.PcfChildctypeId, "I_CHILDCTYPE_PACKCFG");

            entity.HasIndex(e => e.PcfPackcfgsetId, "I_PACKCFGSET_PACKCFG");

            entity.HasIndex(e => e.PcfPackingmaterialId, "I_PACKINGMATERIAL_PACKCFG");

            entity.HasIndex(e => e.PcfParentctypeId, "I_PARENTCTYPE_PACKCFG");

            entity.HasIndex(e => e.PcfSubjectclassId, "I_SUBJECTCLASS_PACKCFG");

            entity.HasIndex(e => e.PcfSubjectId, "I_SUBJECT_PACKCFG");

            entity.Property(e => e.PcfId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PCF_ID");
            entity.Property(e => e.PcfChildcontainermultiple)
                .HasPrecision(4)
                .HasDefaultValueSql("0  ")
                .HasColumnName("PCF_CHILDCONTAINERMULTIPLE");
            entity.Property(e => e.PcfChildctypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PCF_CHILDCTYPE_ID");
            entity.Property(e => e.PcfDeletionid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PCF_DELETIONID");
            entity.Property(e => e.PcfInvalidid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PCF_INVALIDID");
            entity.Property(e => e.PcfIsroot)
                .HasPrecision(1)
                .HasColumnName("PCF_ISROOT");
            entity.Property(e => e.PcfMaxchildcontainers)
                .HasPrecision(4)
                .HasDefaultValueSql("0  ")
                .HasColumnName("PCF_MAXCHILDCONTAINERS");
            entity.Property(e => e.PcfMaxquantity)
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("PCF_MAXQUANTITY");
            entity.Property(e => e.PcfMaxquantitymultiple)
                .HasDefaultValueSql("0  ")
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("PCF_MAXQUANTITYMULTIPLE");
            entity.Property(e => e.PcfPackcfgsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PCF_PACKCFGSET_ID");
            entity.Property(e => e.PcfPackingmaterialId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PCF_PACKINGMATERIAL_ID");
            entity.Property(e => e.PcfPackingmaterialassign)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasDefaultValueSql("'PerContainer'  ")
                .HasColumnName("PCF_PACKINGMATERIALASSIGN");
            entity.Property(e => e.PcfPackingmaterialquantity)
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("PCF_PACKINGMATERIALQUANTITY");
            entity.Property(e => e.PcfParentctypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PCF_PARENTCTYPE_ID");
            entity.Property(e => e.PcfPriority)
                .HasPrecision(3)
                .HasColumnName("PCF_PRIORITY");
            entity.Property(e => e.PcfSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PCF_SUBJECT_ID");
            entity.Property(e => e.PcfSubjectclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PCF_SUBJECTCLASS_ID");
            entity.Property(e => e.PcfTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PCF_TCREATION");
            entity.Property(e => e.PcfTdeletion)
                .HasColumnType("DATE")
                .HasColumnName("PCF_TDELETION");
            entity.Property(e => e.PcfTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PCF_TUPDATE");
            entity.Property(e => e.PcfTvalidfrom)
                .HasColumnType("DATE")
                .HasColumnName("PCF_TVALIDFROM");
            entity.Property(e => e.PcfTvaliduntil)
                .HasColumnType("DATE")
                .HasColumnName("PCF_TVALIDUNTIL");
            entity.Property(e => e.PcfUsestdpack)
                .HasPrecision(1)
                .HasColumnName("PCF_USESTDPACK");
            entity.Property(e => e.PcfUsestdpackmultiple)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("0  ")
                .HasColumnName("PCF_USESTDPACKMULTIPLE");

            entity.HasOne(d => d.PcfChildctype).WithMany(p => p.JPackcfgPcfChildctypes)
                .HasForeignKey(d => d.PcfChildctypeId)
                .HasConstraintName("FK_CHILDCTYPE_PACKCFG");

            entity.HasOne(d => d.PcfPackcfgset).WithMany(p => p.JPackcfgs)
                .HasForeignKey(d => d.PcfPackcfgsetId)
                .HasConstraintName("FK_PACKCFGSET_PACKCFG");

            entity.HasOne(d => d.PcfPackingmaterial).WithMany(p => p.JPackcfgPcfPackingmaterials)
                .HasForeignKey(d => d.PcfPackingmaterialId)
                .HasConstraintName("FK_PACKINGMATERIAL_PACKCFG");

            entity.HasOne(d => d.PcfParentctype).WithMany(p => p.JPackcfgPcfParentctypes)
                .HasForeignKey(d => d.PcfParentctypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PARENTCTYPE_PACKCFG");

            entity.HasOne(d => d.PcfSubject).WithMany(p => p.JPackcfgPcfSubjects)
                .HasForeignKey(d => d.PcfSubjectId)
                .HasConstraintName("FK_SUBJECT_PACKCFG");

            entity.HasOne(d => d.PcfSubjectclass).WithMany(p => p.JPackcfgs)
                .HasForeignKey(d => d.PcfSubjectclassId)
                .HasConstraintName("FK_SUBJECTCLASS_PACKCFG");
        });

        modelBuilder.Entity<JPackcfgset>(entity =>
        {
            entity.HasKey(e => e.PcfsId).HasName("PK_PACKCFGSET");

            entity.ToTable("J_PACKCFGSET", "JITTOE");

            entity.HasIndex(e => e.PcfsCompanyId, "I_COMPANY_PACKCFGSET");

            entity.HasIndex(e => e.PcfsKey, "UN_PCFS_KEY").IsUnique();

            entity.Property(e => e.PcfsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PCFS_ID");
            entity.Property(e => e.PcfsCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PCFS_COMPANY_ID");
            entity.Property(e => e.PcfsDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PCFS_DESCR");
            entity.Property(e => e.PcfsKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PCFS_KEY");
            entity.Property(e => e.PcfsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PCFS_TCREATION");
            entity.Property(e => e.PcfsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PCFS_TUPDATE");

            entity.HasOne(d => d.PcfsCompany).WithMany(p => p.JPackcfgsets)
                .HasForeignKey(d => d.PcfsCompanyId)
                .HasConstraintName("FK_COMPANY_PACKCFGSET");
        });

        modelBuilder.Entity<JPackingmaterial>(entity =>
        {
            entity.HasKey(e => e.PmId).HasName("PK_PACKINGMATERIAL");

            entity.ToTable("J_PACKINGMATERIAL", "JITTOE");

            entity.HasIndex(e => e.PmContainerId, "I_CONTAINER_PMATERIAL");

            entity.HasIndex(e => e.PmSubjectId, "I_SUBJECT_PMATERIAL");

            entity.HasIndex(e => new { e.PmContainerId, e.PmSubjectId }, "UN_PM_CONTAINER_SUBJECT").IsUnique();

            entity.Property(e => e.PmId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PM_ID");
            entity.Property(e => e.PmAmount)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("PM_AMOUNT");
            entity.Property(e => e.PmContainerId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PM_CONTAINER_ID");
            entity.Property(e => e.PmSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PM_SUBJECT_ID");
            entity.Property(e => e.PmTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PM_TCREATION");
            entity.Property(e => e.PmTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PM_TUPDATE");

            entity.HasOne(d => d.PmContainer).WithMany(p => p.JPackingmaterials)
                .HasForeignKey(d => d.PmContainerId)
                .HasConstraintName("FK_CONTAINER_PMATERIAL");

            entity.HasOne(d => d.PmSubject).WithMany(p => p.JPackingmaterials)
                .HasForeignKey(d => d.PmSubjectId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SUBJECT_PMATERIAL");
        });

        modelBuilder.Entity<JPaintarea>(entity =>
        {
            entity.HasKey(e => e.PaaId).HasName("PK_PAINTAREA");

            entity.ToTable("J_PAINTAREA", "JITTOE");

            entity.HasIndex(e => e.PaaPaintunitId, "I_PAINTUNIT_PAINTAREA");

            entity.HasIndex(e => new { e.PaaPaintunitId, e.PaaCode }, "UN_PAA_CODE").IsUnique();

            entity.Property(e => e.PaaId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PAA_ID");
            entity.Property(e => e.PaaCode)
                .HasPrecision(1)
                .HasColumnName("PAA_CODE");
            entity.Property(e => e.PaaDescr)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PAA_DESCR");
            entity.Property(e => e.PaaPaintunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PAA_PAINTUNIT_ID");
            entity.Property(e => e.PaaTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PAA_TCREATION");
            entity.Property(e => e.PaaTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PAA_TUPDATE");

            entity.HasOne(d => d.PaaPaintunit).WithMany(p => p.JPaintareas)
                .HasForeignKey(d => d.PaaPaintunitId)
                .HasConstraintName("FK_PAINTUNIT_PAINTAREA");
        });

        modelBuilder.Entity<JPaintchannel>(entity =>
        {
            entity.HasKey(e => e.PachId).HasName("PK_PAINTCHANNEL");

            entity.ToTable("J_PAINTCHANNEL", "JITTOE");

            entity.HasIndex(e => e.PachPaintunitId, "I_PAINTUNIT_PAINTCHANNEL");

            entity.HasIndex(e => new { e.PachPaintunitId, e.PachType, e.PachCode }, "UN_PACH_CODE").IsUnique();

            entity.Property(e => e.PachId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PACH_ID");
            entity.Property(e => e.PachCode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("PACH_CODE");
            entity.Property(e => e.PachDescr)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PACH_DESCR");
            entity.Property(e => e.PachPaintunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PACH_PAINTUNIT_ID");
            entity.Property(e => e.PachTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PACH_TCREATION");
            entity.Property(e => e.PachTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PACH_TUPDATE");
            entity.Property(e => e.PachType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PACH_TYPE");

            entity.HasOne(d => d.PachPaintunit).WithMany(p => p.JPaintchannels)
                .HasForeignKey(d => d.PachPaintunitId)
                .HasConstraintName("FK_PAINTUNIT_PAINTCHANNEL");
        });

        modelBuilder.Entity<JPaintcolor>(entity =>
        {
            entity.HasKey(e => e.PacId).HasName("PK_PAINTCOLOR");

            entity.ToTable("J_PAINTCOLOR", "JITTOE");

            entity.HasIndex(e => e.PacColorId, "I_COLOR_PAINTCOLOR");

            entity.HasIndex(e => e.PacPaintunitId, "I_PAINTUNIT_PAINTCOLOR");

            entity.HasIndex(e => new { e.PacPaintunitId, e.PacColorId }, "UN_PAC_COLOR").IsUnique();

            entity.Property(e => e.PacId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PAC_ID");
            entity.Property(e => e.PacColorId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PAC_COLOR_ID");
            entity.Property(e => e.PacInfo1)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("PAC_INFO1");
            entity.Property(e => e.PacInfo2)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("PAC_INFO2");
            entity.Property(e => e.PacInfo3)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("PAC_INFO3");
            entity.Property(e => e.PacLocked)
                .HasPrecision(1)
                .HasColumnName("PAC_LOCKED");
            entity.Property(e => e.PacPaintunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PAC_PAINTUNIT_ID");
            entity.Property(e => e.PacTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PAC_TCREATION");
            entity.Property(e => e.PacTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PAC_TUPDATE");

            entity.HasOne(d => d.PacColor).WithMany(p => p.JPaintcolors)
                .HasForeignKey(d => d.PacColorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COLOR_PAINTCOLOR");

            entity.HasOne(d => d.PacPaintunit).WithMany(p => p.JPaintcolors)
                .HasForeignKey(d => d.PacPaintunitId)
                .HasConstraintName("FK_PAINTUNIT_PAINTCOLOR");
        });

        modelBuilder.Entity<JPaintcolorinfo>(entity =>
        {
            entity.HasKey(e => e.PaciId).HasName("PK_PAINTCOLORINFO");

            entity.ToTable("J_PAINTCOLORINFO", "JITTOE");

            entity.HasIndex(e => e.PaciPaintcolorId, "I_PAINTCOLOR_PCINFO");

            entity.HasIndex(e => new { e.PaciPaintcolorId, e.PaciType, e.PaciKey1, e.PaciKey2, e.PaciKey3 }, "UN_PACI_INFO").IsUnique();

            entity.Property(e => e.PaciId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PACI_ID");
            entity.Property(e => e.PaciKey1)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PACI_KEY1");
            entity.Property(e => e.PaciKey2)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PACI_KEY2");
            entity.Property(e => e.PaciKey3)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PACI_KEY3");
            entity.Property(e => e.PaciPaintcolorId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PACI_PAINTCOLOR_ID");
            entity.Property(e => e.PaciStringvalue)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("PACI_STRINGVALUE");
            entity.Property(e => e.PaciTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PACI_TCREATION");
            entity.Property(e => e.PaciTimevalue)
                .HasColumnType("DATE")
                .HasColumnName("PACI_TIMEVALUE");
            entity.Property(e => e.PaciTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PACI_TUPDATE");
            entity.Property(e => e.PaciType)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("PACI_TYPE");

            entity.HasOne(d => d.PaciPaintcolor).WithMany(p => p.JPaintcolorinfos)
                .HasForeignKey(d => d.PaciPaintcolorId)
                .HasConstraintName("FK_PAINTCOLOR_PCINFO");
        });

        modelBuilder.Entity<JPaintcolorseq>(entity =>
        {
            entity.HasKey(e => e.PacsId).HasName("PK_PAINTCOLORSEQ");

            entity.ToTable("J_PAINTCOLORSEQ", "JITTOE");

            entity.HasIndex(e => e.PacsColorId, "I_COLOR_PACSEQ");

            entity.HasIndex(e => e.PacsPaintunitId, "I_PAINTUNIT_PACSEQ");

            entity.HasIndex(e => e.PacsSucccolorId, "I_SUCCCOLOR_PACSEQ");

            entity.HasIndex(e => new { e.PacsPaintunitId, e.PacsColorId, e.PacsSucccolorId }, "UN_PACS_COLORSEQ").IsUnique();

            entity.Property(e => e.PacsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PACS_ID");
            entity.Property(e => e.PacsColorId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PACS_COLOR_ID");
            entity.Property(e => e.PacsLocked)
                .HasPrecision(1)
                .HasColumnName("PACS_LOCKED");
            entity.Property(e => e.PacsPaintunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PACS_PAINTUNIT_ID");
            entity.Property(e => e.PacsSucccolorId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PACS_SUCCCOLOR_ID");
            entity.Property(e => e.PacsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PACS_TCREATION");
            entity.Property(e => e.PacsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PACS_TUPDATE");

            entity.HasOne(d => d.PacsColor).WithMany(p => p.JPaintcolorseqPacsColors)
                .HasForeignKey(d => d.PacsColorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COLOR_PACSEQ");

            entity.HasOne(d => d.PacsPaintunit).WithMany(p => p.JPaintcolorseqs)
                .HasForeignKey(d => d.PacsPaintunitId)
                .HasConstraintName("FK_PAINTUNIT_PACSEQ");

            entity.HasOne(d => d.PacsSucccolor).WithMany(p => p.JPaintcolorseqPacsSucccolors)
                .HasForeignKey(d => d.PacsSucccolorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SUCCCOLOR_PACSEQ");
        });

        modelBuilder.Entity<JPaintplan>(entity =>
        {
            entity.HasKey(e => e.PpId).HasName("PK_PAINTPLAN");

            entity.ToTable("J_PAINTPLAN", "JITTOE");

            entity.HasIndex(e => e.PpPaintplantemplateId, "I_PAINTPLANTEMPLATE_PAINTPLAN");

            entity.HasIndex(e => e.PpPaintunitId, "I_PAINTUNIT_PAINTPLAN");

            entity.HasIndex(e => new { e.PpPaintunitId, e.PpState, e.PpLoadingtime }, "I_PP_STATELOADING");

            entity.HasIndex(e => new { e.PpPaintunitId, e.PpNo }, "UN_PP_NO").IsUnique();

            entity.Property(e => e.PpId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PP_ID");
            entity.Property(e => e.PpLastsyncerrors)
                .HasPrecision(3)
                .HasColumnName("PP_LASTSYNCERRORS");
            entity.Property(e => e.PpLoadingtime)
                .HasColumnType("DATE")
                .HasColumnName("PP_LOADINGTIME");
            entity.Property(e => e.PpNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PP_NO");
            entity.Property(e => e.PpPaintplantemplateId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PP_PAINTPLANTEMPLATE_ID");
            entity.Property(e => e.PpPaintunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PP_PAINTUNIT_ID");
            entity.Property(e => e.PpPosdelta)
                .HasPrecision(4)
                .HasColumnName("PP_POSDELTA");
            entity.Property(e => e.PpRound)
                .HasPrecision(6)
                .HasDefaultValueSql("0  ")
                .HasColumnName("PP_ROUND");
            entity.Property(e => e.PpState)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("PP_STATE");
            entity.Property(e => e.PpTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PP_TCREATION");
            entity.Property(e => e.PpTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PP_TUPDATE");
            entity.Property(e => e.PpVersion)
                .HasPrecision(4)
                .HasColumnName("PP_VERSION");

            entity.HasOne(d => d.PpPaintplantemplate).WithMany(p => p.JPaintplans)
                .HasForeignKey(d => d.PpPaintplantemplateId)
                .HasConstraintName("FK_PAINTPLANTEMPLATE_PAINTPLAN");

            entity.HasOne(d => d.PpPaintunit).WithMany(p => p.JPaintplans)
                .HasForeignKey(d => d.PpPaintunitId)
                .HasConstraintName("FK_PAINTUNIT_PAINTPLAN");
        });

        modelBuilder.Entity<JPaintplanentry>(entity =>
        {
            entity.HasKey(e => e.PpeId).HasName("PK_PAINTPLANENTRY");

            entity.ToTable("J_PAINTPLANENTRY", "JITTOE");

            entity.HasIndex(e => e.PpeColorId, "I_COLOR_PPENTRY");

            entity.HasIndex(e => e.PpePaintplanId, "I_PAINTPLAN_PPENTRY");

            entity.HasIndex(e => e.PpeSkidtypeId, "I_SKIDTYPE_PPENTRY");

            entity.HasIndex(e => new { e.PpePaintplanId, e.PpePos, e.PpeBackupforsyncid }, "UN_PPE_POS").IsUnique();

            entity.Property(e => e.PpeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPE_ID");
            entity.Property(e => e.PpeBackupforsyncid)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("PPE_BACKUPFORSYNCID");
            entity.Property(e => e.PpeColorId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPE_COLOR_ID");
            entity.Property(e => e.PpeInfo1)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("PPE_INFO1");
            entity.Property(e => e.PpeInfo2)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("PPE_INFO2");
            entity.Property(e => e.PpeLastsyncret)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PPE_LASTSYNCRET");
            entity.Property(e => e.PpeLoadedquantity)
                .HasDefaultValueSql("0  ")
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("PPE_LOADEDQUANTITY");
            entity.Property(e => e.PpePaintplanId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPE_PAINTPLAN_ID");
            entity.Property(e => e.PpePos)
                .HasPrecision(4)
                .HasColumnName("PPE_POS");
            entity.Property(e => e.PpePrimerenabled)
                .HasPrecision(1)
                .HasColumnName("PPE_PRIMERENABLED");
            entity.Property(e => e.PpeQuantity)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("PPE_QUANTITY");
            entity.Property(e => e.PpeSkidtypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPE_SKIDTYPE_ID");
            entity.Property(e => e.PpeSkidusageshortname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PPE_SKIDUSAGESHORTNAME");
            entity.Property(e => e.PpeState)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasDefaultValueSql("'Initial'  ")
                .HasColumnName("PPE_STATE");
            entity.Property(e => e.PpeSyncenabled)
                .HasPrecision(1)
                .HasColumnName("PPE_SYNCENABLED");
            entity.Property(e => e.PpeSyncid)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("PPE_SYNCID");
            entity.Property(e => e.PpeTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PPE_TCREATION");
            entity.Property(e => e.PpeTimebeginloading)
                .HasColumnType("DATE")
                .HasColumnName("PPE_TIMEBEGINLOADING");
            entity.Property(e => e.PpeTimebeginunloading)
                .HasColumnType("DATE")
                .HasColumnName("PPE_TIMEBEGINUNLOADING");
            entity.Property(e => e.PpeTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PPE_TUPDATE");
            entity.Property(e => e.PpeUnloadedquantity)
                .HasDefaultValueSql("0  ")
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("PPE_UNLOADEDQUANTITY");
            entity.Property(e => e.PpeVersion)
                .HasPrecision(4)
                .HasColumnName("PPE_VERSION");

            entity.HasOne(d => d.PpeColor).WithMany(p => p.JPaintplanentries)
                .HasForeignKey(d => d.PpeColorId)
                .HasConstraintName("FK_COLOR_PPENTRY");

            entity.HasOne(d => d.PpePaintplan).WithMany(p => p.JPaintplanentries)
                .HasForeignKey(d => d.PpePaintplanId)
                .HasConstraintName("FK_PAINTPLAN_PPENTRY");

            entity.HasOne(d => d.PpeSkidtype).WithMany(p => p.JPaintplanentries)
                .HasForeignKey(d => d.PpeSkidtypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SKIDTYPE_PPENTRY");
        });

        modelBuilder.Entity<JPaintplanentrydemand>(entity =>
        {
            entity.HasKey(e => e.PpedId).HasName("PK_PAINTPLANENTRYDEMAND");

            entity.ToTable("J_PAINTPLANENTRYDEMAND", "JITTOE");

            entity.HasIndex(e => e.PpedDemandId, "I_DEMAND_PPEDEMAND");

            entity.HasIndex(e => e.PpedPaintplanentryId, "I_PAINTPLANENTRY_PPEDEMAND");

            entity.Property(e => e.PpedId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPED_ID");
            entity.Property(e => e.PpedDemandId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPED_DEMAND_ID");
            entity.Property(e => e.PpedPaintplanentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPED_PAINTPLANENTRY_ID");
            entity.Property(e => e.PpedSkidindex)
                .HasPrecision(4)
                .HasColumnName("PPED_SKIDINDEX");
            entity.Property(e => e.PpedTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PPED_TCREATION");

            entity.HasOne(d => d.PpedDemand).WithMany(p => p.JPaintplanentrydemands)
                .HasForeignKey(d => d.PpedDemandId)
                .HasConstraintName("FK_DEMAND_PPEDEMAND");

            entity.HasOne(d => d.PpedPaintplanentry).WithMany(p => p.JPaintplanentrydemands)
                .HasForeignKey(d => d.PpedPaintplanentryId)
                .HasConstraintName("FK_PAINTPLANENTRY_PPEDEMAND");
        });

        modelBuilder.Entity<JPaintplanentryelem>(entity =>
        {
            entity.HasKey(e => e.PpeeId).HasName("PK_PAINTPLANENTRYELEM");

            entity.ToTable("J_PAINTPLANENTRYELEM", "JITTOE");

            entity.HasIndex(e => e.PpeeOrderentryId, "I_ORDERENTRY_PPEELEM");

            entity.HasIndex(e => e.PpeePaintedoutchannelId, "I_PAINTEDOUT_PPEELEM");

            entity.HasIndex(e => e.PpeePaintedsubjectId, "I_PAINTEDSUBJECT_PPEELEM");

            entity.HasIndex(e => e.PpeePaintplanentryId, "I_PAINTPLANENTRY_PPEELEM");

            entity.HasIndex(e => e.PpeeRawinchannelId, "I_RAWIN_PPEELEM");

            entity.HasIndex(e => e.PpeeRawsubjectId, "I_RAWSUBJECT_PPEELEM");

            entity.HasIndex(e => new { e.PpeePaintplanentryId, e.PpeeIndex }, "UN_PPEE_INDEX").IsUnique();

            entity.Property(e => e.PpeeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPEE_ID");
            entity.Property(e => e.PpeeIndex)
                .HasPrecision(3)
                .HasColumnName("PPEE_INDEX");
            entity.Property(e => e.PpeeLoadedquantity)
                .HasDefaultValueSql("0  ")
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("PPEE_LOADEDQUANTITY");
            entity.Property(e => e.PpeeOrderentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPEE_ORDERENTRY_ID");
            entity.Property(e => e.PpeePaintedoutchannelId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPEE_PAINTEDOUTCHANNEL_ID");
            entity.Property(e => e.PpeePaintedsubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPEE_PAINTEDSUBJECT_ID");
            entity.Property(e => e.PpeePaintplanentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPEE_PAINTPLANENTRY_ID");
            entity.Property(e => e.PpeeQuantity)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("PPEE_QUANTITY");
            entity.Property(e => e.PpeeRawinchannelId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPEE_RAWINCHANNEL_ID");
            entity.Property(e => e.PpeeRawsubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPEE_RAWSUBJECT_ID");
            entity.Property(e => e.PpeeTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PPEE_TCREATION");
            entity.Property(e => e.PpeeTotalloadedquantity)
                .HasDefaultValueSql("0  ")
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("PPEE_TOTALLOADEDQUANTITY");
            entity.Property(e => e.PpeeTotalscrapquantity)
                .HasDefaultValueSql("0  ")
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("PPEE_TOTALSCRAPQUANTITY");
            entity.Property(e => e.PpeeTotalunloadedquantity)
                .HasDefaultValueSql("0  ")
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("PPEE_TOTALUNLOADEDQUANTITY");
            entity.Property(e => e.PpeeUnloadedquantity)
                .HasDefaultValueSql("0  ")
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("PPEE_UNLOADEDQUANTITY");

            entity.HasOne(d => d.PpeeOrderentry).WithMany(p => p.JPaintplanentryelems)
                .HasForeignKey(d => d.PpeeOrderentryId)
                .HasConstraintName("FK_ORDERENTRY_PPEELEM");

            entity.HasOne(d => d.PpeePaintedoutchannel).WithMany(p => p.JPaintplanentryelemPpeePaintedoutchannels)
                .HasForeignKey(d => d.PpeePaintedoutchannelId)
                .HasConstraintName("FK_PAINTEDOUT_PPEELEM");

            entity.HasOne(d => d.PpeePaintedsubject).WithMany(p => p.JPaintplanentryelemPpeePaintedsubjects)
                .HasForeignKey(d => d.PpeePaintedsubjectId)
                .HasConstraintName("FK_PAINTEDSUBJECT_PPEELEM");

            entity.HasOne(d => d.PpeePaintplanentry).WithMany(p => p.JPaintplanentryelems)
                .HasForeignKey(d => d.PpeePaintplanentryId)
                .HasConstraintName("FK_PAINTPLANENTRY_PPEELEM");

            entity.HasOne(d => d.PpeeRawinchannel).WithMany(p => p.JPaintplanentryelemPpeeRawinchannels)
                .HasForeignKey(d => d.PpeeRawinchannelId)
                .HasConstraintName("FK_RAWIN_PPEELEM");

            entity.HasOne(d => d.PpeeRawsubject).WithMany(p => p.JPaintplanentryelemPpeeRawsubjects)
                .HasForeignKey(d => d.PpeeRawsubjectId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RAWSUBJECT_PPEELEM");
        });

        modelBuilder.Entity<JPaintplanentryinfo>(entity =>
        {
            entity.HasKey(e => e.PpeiId).HasName("PK_PAINTPLANENTRYINFO");

            entity.ToTable("J_PAINTPLANENTRYINFO", "JITTOE");

            entity.HasIndex(e => e.PpeiPaintplanentryId, "I_PPENTRY_PPENTRYINFO");

            entity.HasIndex(e => new { e.PpeiPaintplanentryId, e.PpeiType, e.PpeiKey1, e.PpeiKey2, e.PpeiKey3 }, "UN_PPEI_INFO").IsUnique();

            entity.Property(e => e.PpeiId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPEI_ID");
            entity.Property(e => e.PpeiIntvalue)
                .HasPrecision(10)
                .HasColumnName("PPEI_INTVALUE");
            entity.Property(e => e.PpeiKey1)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PPEI_KEY1");
            entity.Property(e => e.PpeiKey2)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PPEI_KEY2");
            entity.Property(e => e.PpeiKey3)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PPEI_KEY3");
            entity.Property(e => e.PpeiPaintplanentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPEI_PAINTPLANENTRY_ID");
            entity.Property(e => e.PpeiStringvalue)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("PPEI_STRINGVALUE");
            entity.Property(e => e.PpeiTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PPEI_TCREATION");
            entity.Property(e => e.PpeiTimevalue)
                .HasColumnType("DATE")
                .HasColumnName("PPEI_TIMEVALUE");
            entity.Property(e => e.PpeiTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PPEI_TUPDATE");
            entity.Property(e => e.PpeiType)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("PPEI_TYPE");

            entity.HasOne(d => d.PpeiPaintplanentry).WithMany(p => p.JPaintplanentryinfos)
                .HasForeignKey(d => d.PpeiPaintplanentryId)
                .HasConstraintName("FK_PPENTRY_PPENTRYINFO");
        });

        modelBuilder.Entity<JPaintplantemplate>(entity =>
        {
            entity.HasKey(e => e.PptId).HasName("PK_PAINTPLANTEMPLATE");

            entity.ToTable("J_PAINTPLANTEMPLATE", "JITTOE");

            entity.HasIndex(e => e.PptPaintunitId, "I_PAINTUNIT_PAINTPLTEMPLATE");

            entity.HasIndex(e => new { e.PptPaintunitId, e.PptShortname, e.PptDeletionid }, "UN_PPT_SHORTNAME").IsUnique();

            entity.Property(e => e.PptId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPT_ID");
            entity.Property(e => e.PptDeletionid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPT_DELETIONID");
            entity.Property(e => e.PptDescr)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PPT_DESCR");
            entity.Property(e => e.PptPaintunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPT_PAINTUNIT_ID");
            entity.Property(e => e.PptShortname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PPT_SHORTNAME");
            entity.Property(e => e.PptState)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasDefaultValueSql("'Available'  ")
                .HasColumnName("PPT_STATE");
            entity.Property(e => e.PptTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PPT_TCREATION");
            entity.Property(e => e.PptTdeletion)
                .HasColumnType("DATE")
                .HasColumnName("PPT_TDELETION");
            entity.Property(e => e.PptTimeexported)
                .HasColumnType("DATE")
                .HasColumnName("PPT_TIMEEXPORTED");
            entity.Property(e => e.PptTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PPT_TUPDATE");

            entity.HasOne(d => d.PptPaintunit).WithMany(p => p.JPaintplantemplates)
                .HasForeignKey(d => d.PptPaintunitId)
                .HasConstraintName("FK_PAINTUNIT_PAINTPLTEMPLATE");
        });

        modelBuilder.Entity<JPaintplantemplateentry>(entity =>
        {
            entity.HasKey(e => e.PpteId).HasName("PK_PAINTPLANTEMPLATEENTRY");

            entity.ToTable("J_PAINTPLANTEMPLATEENTRY", "JITTOE");

            entity.HasIndex(e => e.PptePaintplantemplateId, "I_PAINTPLANTEMPLATE_ENTRY");

            entity.HasIndex(e => e.PpteSkidtypeId, "I_SKIDTYPE_PAINTPLTEMPLENTRY");

            entity.HasIndex(e => new { e.PptePaintplantemplateId, e.PptePos }, "UN_PPTE_SHORTNAME").IsUnique();

            entity.Property(e => e.PpteId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPTE_ID");
            entity.Property(e => e.PpteDefempty)
                .HasPrecision(1)
                .HasColumnName("PPTE_DEFEMPTY");
            entity.Property(e => e.PpteDefskidusageshortname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PPTE_DEFSKIDUSAGESHORTNAME");
            entity.Property(e => e.PpteNewgroup)
                .HasPrecision(1)
                .HasColumnName("PPTE_NEWGROUP");
            entity.Property(e => e.PptePaintplantemplateId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPTE_PAINTPLANTEMPLATE_ID");
            entity.Property(e => e.PptePos)
                .HasPrecision(4)
                .HasColumnName("PPTE_POS");
            entity.Property(e => e.PpteQuantity)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("PPTE_QUANTITY");
            entity.Property(e => e.PpteSkidtypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPTE_SKIDTYPE_ID");
            entity.Property(e => e.PpteTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PPTE_TCREATION");
            entity.Property(e => e.PpteTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PPTE_TUPDATE");

            entity.HasOne(d => d.PptePaintplantemplate).WithMany(p => p.JPaintplantemplateentries)
                .HasForeignKey(d => d.PptePaintplantemplateId)
                .HasConstraintName("FK_PAINTPLANTEMPLATE_ENTRY");

            entity.HasOne(d => d.PpteSkidtype).WithMany(p => p.JPaintplantemplateentries)
                .HasForeignKey(d => d.PpteSkidtypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SKIDTYPE_PAINTPLTEMPLENTRY");
        });

        modelBuilder.Entity<JPaintunit>(entity =>
        {
            entity.HasKey(e => e.PauId).HasName("PK_PAINTUNIT");

            entity.ToTable("J_PAINTUNIT", "JITTOE");

            entity.HasIndex(e => e.PauAltdemandcategoryId, "I_ALTDC_PAINTUNIT");

            entity.HasIndex(e => e.PauContainersetId, "I_CONTAINERSET_PAINTUNIT");

            entity.HasIndex(e => e.PauDemandcategoryId, "I_DEMANDCATEGORY_PAINTUNIT");

            entity.HasIndex(e => e.PauCounterId, "I_PLANCOUNTER_PAINTUNIT");

            entity.HasIndex(e => e.PauProdunitId, "I_PRODUNIT_PAINTUNIT");

            entity.HasIndex(e => e.PauSkidtypesetId, "UN_PAU_SKIDTYPESET").IsUnique();

            entity.Property(e => e.PauId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PAU_ID");
            entity.Property(e => e.PauAltdemandcategoryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PAU_ALTDEMANDCATEGORY_ID");
            entity.Property(e => e.PauContainersetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PAU_CONTAINERSET_ID");
            entity.Property(e => e.PauCostpercolorchange)
                .HasColumnType("NUMBER(13,2)")
                .HasColumnName("PAU_COSTPERCOLORCHANGE");
            entity.Property(e => e.PauCounterId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PAU_COUNTER_ID");
            entity.Property(e => e.PauDemandcategoryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PAU_DEMANDCATEGORY_ID");
            entity.Property(e => e.PauLoadtounloadinmin)
                .HasPrecision(5)
                .HasColumnName("PAU_LOADTOUNLOADINMIN");
            entity.Property(e => e.PauMaxplanageindays)
                .HasPrecision(5)
                .HasColumnName("PAU_MAXPLANAGEINDAYS");
            entity.Property(e => e.PauProdunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PAU_PRODUNIT_ID");
            entity.Property(e => e.PauSkidinsec)
                .HasColumnType("NUMBER(16,6)")
                .HasColumnName("PAU_SKIDINSEC");
            entity.Property(e => e.PauSkidtypesetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PAU_SKIDTYPESET_ID");
            entity.Property(e => e.PauTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PAU_TCREATION");

            entity.HasOne(d => d.PauAltdemandcategory).WithMany(p => p.JPaintunitPauAltdemandcategories)
                .HasForeignKey(d => d.PauAltdemandcategoryId)
                .HasConstraintName("FK_ALTDC_PAINTUNIT");

            entity.HasOne(d => d.PauContainerset).WithMany(p => p.JPaintunits)
                .HasForeignKey(d => d.PauContainersetId)
                .HasConstraintName("FK_CONTAINERSET_PAINTUNIT");

            entity.HasOne(d => d.PauCounter).WithMany(p => p.JPaintunits)
                .HasForeignKey(d => d.PauCounterId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PLANCOUNTER_PAINTUNIT");

            entity.HasOne(d => d.PauDemandcategory).WithMany(p => p.JPaintunitPauDemandcategories)
                .HasForeignKey(d => d.PauDemandcategoryId)
                .HasConstraintName("FK_DEMANDCATEGORY_PAINTUNIT");

            entity.HasOne(d => d.PauProdunit).WithMany(p => p.JPaintunits)
                .HasForeignKey(d => d.PauProdunitId)
                .HasConstraintName("FK_PRODUNIT_PAINTUNIT");

            entity.HasOne(d => d.PauSkidtypeset).WithOne(p => p.JPaintunit)
                .HasForeignKey<JPaintunit>(d => d.PauSkidtypesetId)
                .HasConstraintName("FK_SKIDTYPESET_PAINTUNIT");
        });

        modelBuilder.Entity<JPaintunitskidtype>(entity =>
        {
            entity.HasKey(e => e.PausktId).HasName("PK_PAINTUNITSKIDTYPE");

            entity.ToTable("J_PAINTUNITSKIDTYPE", "JITTOE");

            entity.HasIndex(e => e.PausktPaintunitId, "I_PAINTUNIT_PAUSKIDTYPE");

            entity.HasIndex(e => e.PausktSkidtypeId, "I_SKIDTYPE_PAUSKIDTYPE");

            entity.HasIndex(e => new { e.PausktPaintunitId, e.PausktSkidtypeId }, "UN_PAUSKT_PAUSKIDTYPE").IsUnique();

            entity.Property(e => e.PausktId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PAUSKT_ID");
            entity.Property(e => e.PausktPaintunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PAUSKT_PAINTUNIT_ID");
            entity.Property(e => e.PausktSkidtypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PAUSKT_SKIDTYPE_ID");
            entity.Property(e => e.PausktTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PAUSKT_TCREATION");
            entity.Property(e => e.PausktTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PAUSKT_TUPDATE");

            entity.HasOne(d => d.PausktPaintunit).WithMany(p => p.JPaintunitskidtypes)
                .HasForeignKey(d => d.PausktPaintunitId)
                .HasConstraintName("FK_PAINTUNIT_PAUSKIDTYPE");

            entity.HasOne(d => d.PausktSkidtype).WithMany(p => p.JPaintunitskidtypes)
                .HasForeignKey(d => d.PausktSkidtypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SKIDTYPE_PAUSKIDTYPE");
        });

        modelBuilder.Entity<JPaintunitstate>(entity =>
        {
            entity.HasKey(e => e.PausId).HasName("PK_PAINTUNITSTATE");

            entity.ToTable("J_PAINTUNITSTATE", "JITTOE");

            entity.HasIndex(e => e.PausPaintunitId, "I_PAINTUNIT_PUSTATE");

            entity.HasIndex(e => e.PausUnloadingentryId, "I_PPENTRY_PUSTATEUNLOAD");

            entity.Property(e => e.PausId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PAUS_ID");
            entity.Property(e => e.PausPaintunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PAUS_PAINTUNIT_ID");
            entity.Property(e => e.PausTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PAUS_TCREATION");
            entity.Property(e => e.PausTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PAUS_TUPDATE");
            entity.Property(e => e.PausUnloadingentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PAUS_UNLOADINGENTRY_ID");

            entity.HasOne(d => d.PausPaintunit).WithMany(p => p.JPaintunitstates)
                .HasForeignKey(d => d.PausPaintunitId)
                .HasConstraintName("FK_PAINTUNIT_PUSTATE");

            entity.HasOne(d => d.PausUnloadingentry).WithMany(p => p.JPaintunitstates)
                .HasForeignKey(d => d.PausUnloadingentryId)
                .HasConstraintName("FK_PPENTRY_PUSTATEUNLOAD");
        });

        modelBuilder.Entity<JPaintunitstateelem>(entity =>
        {
            entity.HasKey(e => e.PauseId).HasName("PK_PAINTUNITSTATEELEM");

            entity.ToTable("J_PAINTUNITSTATEELEM", "JITTOE");

            entity.HasIndex(e => e.PausePaintplanentryId, "I_PPENTRY_PUSTATEELEM");

            entity.HasIndex(e => e.PausePaintunitstateId, "I_PUSTATE_PUSTATEELEM");

            entity.HasIndex(e => e.PauseSkidinfoId, "I_SKIDINFO_PUSTATEELEM");

            entity.HasIndex(e => e.PauseSkidId, "I_SKID_PUSTATEELEM");

            entity.HasIndex(e => new { e.PausePaintunitstateId, e.PauseType, e.PauseKey }, "UN_PAUSE_KEY").IsUnique();

            entity.Property(e => e.PauseId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PAUSE_ID");
            entity.Property(e => e.PauseKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PAUSE_KEY");
            entity.Property(e => e.PausePaintplanentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PAUSE_PAINTPLANENTRY_ID");
            entity.Property(e => e.PausePaintunitstateId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PAUSE_PAINTUNITSTATE_ID");
            entity.Property(e => e.PauseSkidId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PAUSE_SKID_ID");
            entity.Property(e => e.PauseSkidinfoId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PAUSE_SKIDINFO_ID");
            entity.Property(e => e.PauseTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PAUSE_TCREATION");
            entity.Property(e => e.PauseTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PAUSE_TUPDATE");
            entity.Property(e => e.PauseType)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("PAUSE_TYPE");

            entity.HasOne(d => d.PausePaintplanentry).WithMany(p => p.JPaintunitstateelems)
                .HasForeignKey(d => d.PausePaintplanentryId)
                .HasConstraintName("FK_PPENTRY_PUSTATEELEM");

            entity.HasOne(d => d.PausePaintunitstate).WithMany(p => p.JPaintunitstateelems)
                .HasForeignKey(d => d.PausePaintunitstateId)
                .HasConstraintName("FK_PUSTATE_PUSTATEELEM");

            entity.HasOne(d => d.PauseSkid).WithMany(p => p.JPaintunitstateelems)
                .HasForeignKey(d => d.PauseSkidId)
                .HasConstraintName("FK_SKID_PUSTATEELEM");

            entity.HasOne(d => d.PauseSkidinfo).WithMany(p => p.JPaintunitstateelems)
                .HasForeignKey(d => d.PauseSkidinfoId)
                .HasConstraintName("FK_SKIDINFO_PUSTATEELEM");
        });

        modelBuilder.Entity<JPart>(entity =>
        {
            entity.HasKey(e => e.PId).HasName("PK_PART");

            entity.ToTable("J_PART", "JITTOE");

            entity.HasIndex(e => e.PContainerentryId, "I_CONTAINERENTRY_PART");

            entity.HasIndex(e => e.PDoccfgId, "I_DOCCFG_PART");

            entity.HasIndex(e => e.POrderentryId, "I_ORDERENTRY_PART");

            entity.HasIndex(e => e.PParentpartId, "I_PARENTPART_PART");

            entity.HasIndex(e => e.PPartsetId, "I_PARTSET_PART");

            entity.HasIndex(e => e.PProdunitId, "I_PRODUNIT_PART");

            entity.HasIndex(e => new { e.PPartsetId, e.PTcreation }, "I_P_TCREATION");

            entity.HasIndex(e => e.PRefpartId, "I_REFPART_PART");

            entity.HasIndex(e => e.PStockId, "I_STOCK_PART");

            entity.HasIndex(e => e.PSubjectId, "I_SUBJECT_PART");

            entity.HasIndex(e => new { e.PPartsetId, e.PNo }, "UN_P_NO").IsUnique();

            entity.Property(e => e.PId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("P_ID");
            entity.Property(e => e.PContainerentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("P_CONTAINERENTRY_ID");
            entity.Property(e => e.PDoccfgId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("P_DOCCFG_ID");
            entity.Property(e => e.PNo)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("P_NO");
            entity.Property(e => e.POrderentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("P_ORDERENTRY_ID");
            entity.Property(e => e.PParentpartId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("P_PARENTPART_ID");
            entity.Property(e => e.PPartsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("P_PARTSET_ID");
            entity.Property(e => e.PProdunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("P_PRODUNIT_ID");
            entity.Property(e => e.PQualityclass)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("P_QUALITYCLASS");
            entity.Property(e => e.PRefpartId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("P_REFPART_ID");
            entity.Property(e => e.PStockId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("P_STOCK_ID");
            entity.Property(e => e.PSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("P_SUBJECT_ID");
            entity.Property(e => e.PTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("P_TCREATION");
            entity.Property(e => e.PTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("P_TUPDATE");

            entity.HasOne(d => d.PContainerentry).WithMany(p => p.JParts)
                .HasForeignKey(d => d.PContainerentryId)
                .HasConstraintName("FK_CONTAINERENTRY_PART");

            entity.HasOne(d => d.PDoccfg).WithMany(p => p.JParts)
                .HasForeignKey(d => d.PDoccfgId)
                .HasConstraintName("FK_DOCCFG_PART");

            entity.HasOne(d => d.POrderentry).WithMany(p => p.JParts)
                .HasForeignKey(d => d.POrderentryId)
                .HasConstraintName("FK_ORDERENTRY_PART");

            entity.HasOne(d => d.PParentpart).WithMany(p => p.InversePParentpart)
                .HasForeignKey(d => d.PParentpartId)
                .HasConstraintName("FK_PARENTPART_PART");

            entity.HasOne(d => d.PPartset).WithMany(p => p.JParts)
                .HasForeignKey(d => d.PPartsetId)
                .HasConstraintName("FK_PARTSET_PART");

            entity.HasOne(d => d.PProdunit).WithMany(p => p.JParts)
                .HasForeignKey(d => d.PProdunitId)
                .HasConstraintName("FK_PRODUNIT_PART");

            entity.HasOne(d => d.PRefpart).WithMany(p => p.InversePRefpart)
                .HasForeignKey(d => d.PRefpartId)
                .HasConstraintName("FK_REFPART_PART");

            entity.HasOne(d => d.PStock).WithMany(p => p.JParts)
                .HasForeignKey(d => d.PStockId)
                .HasConstraintName("FK_STOCK_PART");

            entity.HasOne(d => d.PSubject).WithMany(p => p.JParts)
                .HasForeignKey(d => d.PSubjectId)
                .HasConstraintName("FK_SUBJECT_PART");
        });

        modelBuilder.Entity<JPartbuffer>(entity =>
        {
            entity.HasKey(e => e.PbId).HasName("PK_PARTBUFFER");

            entity.ToTable("J_PARTBUFFER", "JITTOE");

            entity.HasIndex(e => e.PbCompanyId, "I_COMPANY_PARTBUFFER");

            entity.HasIndex(e => e.PbKey, "UN_PB_KEY").IsUnique();

            entity.Property(e => e.PbId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PB_ID");
            entity.Property(e => e.PbCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PB_COMPANY_ID");
            entity.Property(e => e.PbDescr)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("PB_DESCR");
            entity.Property(e => e.PbKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PB_KEY");
            entity.Property(e => e.PbMaxentries)
                .HasPrecision(5)
                .HasDefaultValueSql("0  ")
                .HasColumnName("PB_MAXENTRIES");
            entity.Property(e => e.PbMaxentryageinminutes)
                .HasPrecision(9)
                .HasDefaultValueSql("0  ")
                .HasColumnName("PB_MAXENTRYAGEINMINUTES");
            entity.Property(e => e.PbTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PB_TCREATION");
            entity.Property(e => e.PbTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PB_TUPDATE");

            entity.HasOne(d => d.PbCompany).WithMany(p => p.JPartbuffers)
                .HasForeignKey(d => d.PbCompanyId)
                .HasConstraintName("FK_COMPANY_PARTBUFFER");
        });

        modelBuilder.Entity<JPartbufferclass>(entity =>
        {
            entity.HasKey(e => e.PbcId).HasName("PK_PARTBUFFERCLASS");

            entity.ToTable("J_PARTBUFFERCLASS", "JITTOE");

            entity.HasIndex(e => e.PbcCompanyId, "I_COMPANY_PBCLASS");

            entity.HasIndex(e => e.PbcKey, "UN_PBC_KEY").IsUnique();

            entity.Property(e => e.PbcId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PBC_ID");
            entity.Property(e => e.PbcCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PBC_COMPANY_ID");
            entity.Property(e => e.PbcDescr)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PBC_DESCR");
            entity.Property(e => e.PbcKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PBC_KEY");
            entity.Property(e => e.PbcTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PBC_TCREATION");
            entity.Property(e => e.PbcTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PBC_TUPDATE");
            entity.Property(e => e.PbcUniqueparts)
                .HasPrecision(1)
                .HasColumnName("PBC_UNIQUEPARTS");

            entity.HasOne(d => d.PbcCompany).WithMany(p => p.JPartbufferclasses)
                .HasForeignKey(d => d.PbcCompanyId)
                .HasConstraintName("FK_COMPANY_PBCLASS");
        });

        modelBuilder.Entity<JPartbufferclassmember>(entity =>
        {
            entity.HasKey(e => e.PbcmId).HasName("PK_PARTBUFFERCLASSMEMBER");

            entity.ToTable("J_PARTBUFFERCLASSMEMBER", "JITTOE");

            entity.HasIndex(e => e.PbcmPartbufferId, "I_PARTBUFFER_PBCMEMBER");

            entity.HasIndex(e => e.PbcmPartbufferclassId, "I_PBC_PBCMEMBER");

            entity.HasIndex(e => new { e.PbcmPartbufferId, e.PbcmPartbufferclassId }, "UN_PBCM_KEY").IsUnique();

            entity.Property(e => e.PbcmId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PBCM_ID");
            entity.Property(e => e.PbcmPartbufferId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PBCM_PARTBUFFER_ID");
            entity.Property(e => e.PbcmPartbufferclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PBCM_PARTBUFFERCLASS_ID");
            entity.Property(e => e.PbcmTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PBCM_TCREATION");
            entity.Property(e => e.PbcmTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PBCM_TUPDATE");

            entity.HasOne(d => d.PbcmPartbuffer).WithMany(p => p.JPartbufferclassmembers)
                .HasForeignKey(d => d.PbcmPartbufferId)
                .HasConstraintName("FK_PARTBUFFER_PBCMEMBER");

            entity.HasOne(d => d.PbcmPartbufferclass).WithMany(p => p.JPartbufferclassmembers)
                .HasForeignKey(d => d.PbcmPartbufferclassId)
                .HasConstraintName("FK_PBC_PBCMEMBER");
        });

        modelBuilder.Entity<JPartbufferentry>(entity =>
        {
            entity.HasKey(e => e.PbeId).HasName("PK_PARTBUFFERENTRY");

            entity.ToTable("J_PARTBUFFERENTRY", "JITTOE");

            entity.HasIndex(e => e.PbePartbufferId, "I_PARTBUFFER_PBENTRY");

            entity.HasIndex(e => e.PbePartId, "I_PART_PBENTRY");

            entity.HasIndex(e => new { e.PbePartbufferId, e.PbePartId }, "UN_PBE_KEY").IsUnique();

            entity.Property(e => e.PbeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PBE_ID");
            entity.Property(e => e.PbePartId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PBE_PART_ID");
            entity.Property(e => e.PbePartbufferId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PBE_PARTBUFFER_ID");
            entity.Property(e => e.PbeTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PBE_TCREATION");
            entity.Property(e => e.PbeTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PBE_TUPDATE");

            entity.HasOne(d => d.PbePart).WithMany(p => p.JPartbufferentries)
                .HasForeignKey(d => d.PbePartId)
                .HasConstraintName("FK_PART_PBENTRY");

            entity.HasOne(d => d.PbePartbuffer).WithMany(p => p.JPartbufferentries)
                .HasForeignKey(d => d.PbePartbufferId)
                .HasConstraintName("FK_PARTBUFFER_PBENTRY");
        });

        modelBuilder.Entity<JPartdatum>(entity =>
        {
            entity.HasKey(e => e.PadId).HasName("PK_PARTDATA");

            entity.ToTable("J_PARTDATA", "JITTOE");

            entity.HasIndex(e => e.PadPartId, "I_PART_PARTDATA");

            entity.Property(e => e.PadId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PAD_ID");
            entity.Property(e => e.PadKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PAD_KEY");
            entity.Property(e => e.PadPartId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PAD_PART_ID");
            entity.Property(e => e.PadTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PAD_TCREATION");
            entity.Property(e => e.PadTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PAD_TUPDATE");
            entity.Property(e => e.PadValue)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("PAD_VALUE");

            entity.HasOne(d => d.PadPart).WithMany(p => p.JPartdata)
                .HasForeignKey(d => d.PadPartId)
                .HasConstraintName("FK_PART_PARTDATA");
        });

        modelBuilder.Entity<JPartevent>(entity =>
        {
            entity.HasKey(e => e.PeId).HasName("PK_PARTEVENT");

            entity.ToTable("J_PARTEVENT", "JITTOE");

            entity.HasIndex(e => e.PeContainerentryId, "I_CONTAINERENTRY_PARTEVENT");

            entity.HasIndex(e => e.PeOrderentryId, "I_ORDERENTRY_PARTEVENT");

            entity.HasIndex(e => e.PeParentpartId, "I_PARENTPART_PARTEVENT");

            entity.HasIndex(e => e.PePartId, "I_PART_PARTEVENT");

            entity.HasIndex(e => e.PeTcreation, "I_PE_TCREATION");

            entity.HasIndex(e => e.PeProdunitId, "I_PRODUNIT_PARTEVENT");

            entity.HasIndex(e => e.PeStockId, "I_STOCK_PARTEVENT");

            entity.HasIndex(e => e.PeSubjectId, "I_SUBJECT_PARTEVENT");

            entity.HasIndex(e => e.PeTransitionId, "I_TRANSITION_PARTEVENT");

            entity.Property(e => e.PeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PE_ID");
            entity.Property(e => e.PeContainerentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PE_CONTAINERENTRY_ID");
            entity.Property(e => e.PeOrderentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PE_ORDERENTRY_ID");
            entity.Property(e => e.PeParentpartId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PE_PARENTPART_ID");
            entity.Property(e => e.PePartId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PE_PART_ID");
            entity.Property(e => e.PeProdunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PE_PRODUNIT_ID");
            entity.Property(e => e.PeQualityclass)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PE_QUALITYCLASS");
            entity.Property(e => e.PeStockId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PE_STOCK_ID");
            entity.Property(e => e.PeSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PE_SUBJECT_ID");
            entity.Property(e => e.PeTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PE_TCREATION");
            entity.Property(e => e.PeTransitionId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PE_TRANSITION_ID");

            entity.HasOne(d => d.PeContainerentry).WithMany(p => p.JPartevents)
                .HasForeignKey(d => d.PeContainerentryId)
                .HasConstraintName("FK_CONTAINERENTRY_PARTEVENT");

            entity.HasOne(d => d.PeOrderentry).WithMany(p => p.JPartevents)
                .HasForeignKey(d => d.PeOrderentryId)
                .HasConstraintName("FK_ORDERENTRY_PARTEVENT");

            entity.HasOne(d => d.PeParentpart).WithMany(p => p.JParteventPeParentparts)
                .HasForeignKey(d => d.PeParentpartId)
                .HasConstraintName("FK_PARENTPART_PARTEVENT");

            entity.HasOne(d => d.PePart).WithMany(p => p.JParteventPeParts)
                .HasForeignKey(d => d.PePartId)
                .HasConstraintName("FK_PART_PARTEVENT");

            entity.HasOne(d => d.PeProdunit).WithMany(p => p.JPartevents)
                .HasForeignKey(d => d.PeProdunitId)
                .HasConstraintName("FK_PRODUNIT_PARTEVENT");

            entity.HasOne(d => d.PeStock).WithMany(p => p.JPartevents)
                .HasForeignKey(d => d.PeStockId)
                .HasConstraintName("FK_STOCK_PARTEVENT");

            entity.HasOne(d => d.PeSubject).WithMany(p => p.JPartevents)
                .HasForeignKey(d => d.PeSubjectId)
                .HasConstraintName("FK_SUBJECT_PARTEVENT");

            entity.HasOne(d => d.PeTransition).WithMany(p => p.JPartevents)
                .HasForeignKey(d => d.PeTransitionId)
                .HasConstraintName("FK_TRANSITION_PARTEVENT");
        });

        modelBuilder.Entity<JPartset>(entity =>
        {
            entity.HasKey(e => e.PsId).HasName("PK_PARTSET");

            entity.ToTable("J_PARTSET", "JITTOE");

            entity.HasIndex(e => e.PsCompanyId, "I_COMPANY_PARTSET");

            entity.HasIndex(e => e.PsCounterId, "I_COUNTER_PARTSET");

            entity.HasIndex(e => e.PsDoccfgId, "I_DOCCFG_PARTSET");

            entity.HasIndex(e => e.PsEdicfgId, "I_EDICFG_PARTSET");

            entity.HasIndex(e => e.PsKey, "UN_PS_KEY").IsUnique();

            entity.Property(e => e.PsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PS_ID");
            entity.Property(e => e.PsCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PS_COMPANY_ID");
            entity.Property(e => e.PsCounterId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PS_COUNTER_ID");
            entity.Property(e => e.PsDescr)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("PS_DESCR");
            entity.Property(e => e.PsDoccfgId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PS_DOCCFG_ID");
            entity.Property(e => e.PsEdicfgId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PS_EDICFG_ID");
            entity.Property(e => e.PsKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PS_KEY");
            entity.Property(e => e.PsLastpartno)
                .HasPrecision(9)
                .HasColumnName("PS_LASTPARTNO");
            entity.Property(e => e.PsMaxpartno)
                .HasPrecision(9)
                .HasColumnName("PS_MAXPARTNO");
            entity.Property(e => e.PsMaxupdateageindays)
                .HasPrecision(5)
                .HasColumnName("PS_MAXUPDATEAGEINDAYS");
            entity.Property(e => e.PsMinpartno)
                .HasPrecision(9)
                .HasColumnName("PS_MINPARTNO");
            entity.Property(e => e.PsPartnoformat)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PS_PARTNOFORMAT");
            entity.Property(e => e.PsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PS_TCREATION");
            entity.Property(e => e.PsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PS_TUPDATE");

            entity.HasOne(d => d.PsCompany).WithMany(p => p.JPartsets)
                .HasForeignKey(d => d.PsCompanyId)
                .HasConstraintName("FK_COMPANY_PARTSET");

            entity.HasOne(d => d.PsCounter).WithMany(p => p.JPartsets)
                .HasForeignKey(d => d.PsCounterId)
                .HasConstraintName("FK_COUNTER_PARTSET");

            entity.HasOne(d => d.PsDoccfg).WithMany(p => p.JPartsets)
                .HasForeignKey(d => d.PsDoccfgId)
                .HasConstraintName("FK_DOCCFG_PARTSET");

            entity.HasOne(d => d.PsEdicfg).WithMany(p => p.JPartsets)
                .HasForeignKey(d => d.PsEdicfgId)
                .HasConstraintName("FK_EDICFG_PARTSET");
        });

        modelBuilder.Entity<JParttransfer>(entity =>
        {
            entity.HasKey(e => e.PatId).HasName("PK_PARTTRANSFER");

            entity.ToTable("J_PARTTRANSFER", "JITTOE");

            entity.Property(e => e.PatId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PAT_ID");
            entity.Property(e => e.PatPartno)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("PAT_PARTNO");
            entity.Property(e => e.PatSubjectno)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("PAT_SUBJECTNO");
            entity.Property(e => e.PatTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PAT_TCREATION");
            entity.Property(e => e.PatUnitcode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PAT_UNITCODE");
        });

        modelBuilder.Entity<JPlugindef>(entity =>
        {
            entity.HasKey(e => e.PldId).HasName("PK_PLUGINDEF");

            entity.ToTable("J_PLUGINDEF", "JITTOE");

            entity.HasIndex(e => e.PldConfigdefId, "I_CONFIGDEF_PLUGINDEF");

            entity.HasIndex(e => e.PldKey, "UN_PLD_KEY").IsUnique();

            entity.Property(e => e.PldId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PLD_ID");
            entity.Property(e => e.PldConfigdefId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PLD_CONFIGDEF_ID");
            entity.Property(e => e.PldConfiguration)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("PLD_CONFIGURATION");
            entity.Property(e => e.PldDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PLD_DESCR");
            entity.Property(e => e.PldDriver)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PLD_DRIVER");
            entity.Property(e => e.PldKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PLD_KEY");
            entity.Property(e => e.PldTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PLD_TCREATION");
            entity.Property(e => e.PldTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PLD_TUPDATE");

            entity.HasOne(d => d.PldConfigdef).WithMany(p => p.JPlugindefs)
                .HasForeignKey(d => d.PldConfigdefId)
                .HasConstraintName("FK_CONFIGDEF_PLUGINDEF");
        });

        modelBuilder.Entity<JPlugindefpropertyset>(entity =>
        {
            entity.HasKey(e => e.PldpsId).HasName("PK_PLUGINDEFPROPERTYSET");

            entity.ToTable("J_PLUGINDEFPROPERTYSET", "JITTOE");

            entity.HasIndex(e => e.PldpsPlugindefId, "I_PLUGINDEF_PDPSET");

            entity.HasIndex(e => e.PldpsPropertysetId, "I_PROPERTYSET_PDPSET");

            entity.HasIndex(e => new { e.PldpsPlugindefId, e.PldpsPropertysetId }, "UN_PLDPS_KEY").IsUnique();

            entity.Property(e => e.PldpsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PLDPS_ID");
            entity.Property(e => e.PldpsPlugindefId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PLDPS_PLUGINDEF_ID");
            entity.Property(e => e.PldpsPropertysetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PLDPS_PROPERTYSET_ID");
            entity.Property(e => e.PldpsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PLDPS_TCREATION");

            entity.HasOne(d => d.PldpsPlugindef).WithMany(p => p.JPlugindefpropertysets)
                .HasForeignKey(d => d.PldpsPlugindefId)
                .HasConstraintName("FK_PLUGINDEF_PDPSET");

            entity.HasOne(d => d.PldpsPropertyset).WithMany(p => p.JPlugindefpropertysets)
                .HasForeignKey(d => d.PldpsPropertysetId)
                .HasConstraintName("FK_PROPERTYSET_PDPSET");
        });

        modelBuilder.Entity<JPolyconpaintevent>(entity =>
        {
            entity.HasKey(e => e.DpcpeId).HasName("PK_POLYCONPAINTEVENT");

            entity.ToTable("J_POLYCONPAINTEVENT", "JITTOE");

            entity.HasIndex(e => e.DpcpePaintunitId, "I_PPEVENT_PAINTUNIT");

            entity.HasIndex(e => e.DpcpeSkidId, "I_PPEVENT_SKID");

            entity.HasIndex(e => e.DpcpeSkidinfo1Id, "I_PPEVENT_SKIDINFO1");

            entity.HasIndex(e => e.DpcpeSkidinfo2Id, "I_PPEVENT_SKIDINFO2");

            entity.HasIndex(e => e.DpcpePaintedpartId, "I_PPEVENT_SUBJECT");

            entity.Property(e => e.DpcpeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DPCPE_ID");
            entity.Property(e => e.DpcpeB1sys)
                .HasPrecision(11)
                .HasColumnName("DPCPE_B1SYS");
            entity.Property(e => e.DpcpeB2sys)
                .HasPrecision(11)
                .HasColumnName("DPCPE_B2SYS");
            entity.Property(e => e.DpcpeB3sys)
                .HasPrecision(11)
                .HasColumnName("DPCPE_B3SYS");
            entity.Property(e => e.DpcpeC1sys)
                .HasPrecision(11)
                .HasColumnName("DPCPE_C1SYS");
            entity.Property(e => e.DpcpeC2sys)
                .HasPrecision(11)
                .HasColumnName("DPCPE_C2SYS");
            entity.Property(e => e.DpcpeCarno)
                .HasPrecision(11)
                .HasColumnName("DPCPE_CARNO");
            entity.Property(e => e.DpcpeCarnoret)
                .HasPrecision(11)
                .HasColumnName("DPCPE_CARNORET");
            entity.Property(e => e.DpcpeErrcd)
                .HasPrecision(11)
                .HasColumnName("DPCPE_ERRCD");
            entity.Property(e => e.DpcpeErrmsg)
                .HasMaxLength(45)
                .IsUnicode(false)
                .HasColumnName("DPCPE_ERRMSG");
            entity.Property(e => e.DpcpePaintedpartId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DPCPE_PAINTEDPART_ID");
            entity.Property(e => e.DpcpePaintedpartno)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("DPCPE_PAINTEDPARTNO");
            entity.Property(e => e.DpcpePaintunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DPCPE_PAINTUNIT_ID");
            entity.Property(e => e.DpcpeProgramtype)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("DPCPE_PROGRAMTYPE");
            entity.Property(e => e.DpcpeResult1)
                .HasPrecision(11)
                .HasColumnName("DPCPE_RESULT1");
            entity.Property(e => e.DpcpeResult2)
                .HasPrecision(11)
                .HasColumnName("DPCPE_RESULT2");
            entity.Property(e => e.DpcpeRetcode)
                .HasPrecision(11)
                .HasColumnName("DPCPE_RETCODE");
            entity.Property(e => e.DpcpeRndno)
                .HasPrecision(11)
                .HasColumnName("DPCPE_RNDNO");
            entity.Property(e => e.DpcpeSeqno)
                .HasPrecision(11)
                .HasColumnName("DPCPE_SEQNO");
            entity.Property(e => e.DpcpeSkidId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DPCPE_SKID_ID");
            entity.Property(e => e.DpcpeSkidinfo1Id)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DPCPE_SKIDINFO1_ID");
            entity.Property(e => e.DpcpeSkidinfo2Id)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("DPCPE_SKIDINFO2_ID");
            entity.Property(e => e.DpcpeState)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DPCPE_STATE");
            entity.Property(e => e.DpcpeStation)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("DPCPE_STATION");
            entity.Property(e => e.DpcpeTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("DPCPE_TCREATION");
            entity.Property(e => e.DpcpeTrnscd)
                .HasPrecision(11)
                .HasColumnName("DPCPE_TRNSCD");
            entity.Property(e => e.DpcpeTrnsmsg)
                .HasMaxLength(45)
                .IsUnicode(false)
                .HasColumnName("DPCPE_TRNSMSG");
            entity.Property(e => e.DpcpeTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("DPCPE_TUPDATE");
            entity.Property(e => e.DpcpeWatch)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DPCPE_WATCH");

            entity.HasOne(d => d.DpcpePaintedpart).WithMany(p => p.JPolyconpaintevents)
                .HasForeignKey(d => d.DpcpePaintedpartId)
                .HasConstraintName("FK_PPEVENT_SUBJECT");

            entity.HasOne(d => d.DpcpePaintunit).WithMany(p => p.JPolyconpaintevents)
                .HasForeignKey(d => d.DpcpePaintunitId)
                .HasConstraintName("FK_PPEVENT_PAINTUNIT");

            entity.HasOne(d => d.DpcpeSkid).WithMany(p => p.JPolyconpaintevents)
                .HasForeignKey(d => d.DpcpeSkidId)
                .HasConstraintName("FK_PPEVENT_SKID");

            entity.HasOne(d => d.DpcpeSkidinfo1).WithMany(p => p.JPolyconpainteventDpcpeSkidinfo1s)
                .HasForeignKey(d => d.DpcpeSkidinfo1Id)
                .HasConstraintName("FK_PPEVENT_SKIDINFO1");

            entity.HasOne(d => d.DpcpeSkidinfo2).WithMany(p => p.JPolyconpainteventDpcpeSkidinfo2s)
                .HasForeignKey(d => d.DpcpeSkidinfo2Id)
                .HasConstraintName("FK_PPEVENT_SKIDINFO2");
        });

        modelBuilder.Entity<JPptemplateentrydefelem>(entity =>
        {
            entity.HasKey(e => e.PptedeId).HasName("PK_PPTEMPLATEENTRYDEFELEM");

            entity.ToTable("J_PPTEMPLATEENTRYDEFELEM", "JITTOE");

            entity.HasIndex(e => e.PptedePptemplateentryId, "I_PPTENTRY_PPTEDEFELEM");

            entity.HasIndex(e => e.PptedeRawsubjectId, "I_RAWSUBJECT_PPTEDEFELEM");

            entity.HasIndex(e => new { e.PptedePptemplateentryId, e.PptedeIndex }, "UN_PPTEDE_INDEX").IsUnique();

            entity.Property(e => e.PptedeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPTEDE_ID");
            entity.Property(e => e.PptedeIndex)
                .HasPrecision(3)
                .HasColumnName("PPTEDE_INDEX");
            entity.Property(e => e.PptedePptemplateentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPTEDE_PPTEMPLATEENTRY_ID");
            entity.Property(e => e.PptedeQuantity)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("PPTEDE_QUANTITY");
            entity.Property(e => e.PptedeRawsubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPTEDE_RAWSUBJECT_ID");
            entity.Property(e => e.PptedeTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PPTEDE_TCREATION");

            entity.HasOne(d => d.PptedePptemplateentry).WithMany(p => p.JPptemplateentrydefelems)
                .HasForeignKey(d => d.PptedePptemplateentryId)
                .HasConstraintName("FK_PPTENTRY_PPTEDEFELEM");

            entity.HasOne(d => d.PptedeRawsubject).WithMany(p => p.JPptemplateentrydefelems)
                .HasForeignKey(d => d.PptedeRawsubjectId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RAWSUBJECT_PPTEDEFELEM");
        });

        modelBuilder.Entity<JPrintcfg>(entity =>
        {
            entity.HasKey(e => e.PricId).HasName("PK_PRINTCFG");

            entity.ToTable("J_PRINTCFG", "JITTOE");

            entity.HasIndex(e => e.PricPrintcfgsetId, "I_PRINTCFGSET_PRINTCFG");

            entity.HasIndex(e => e.PricPrinterId, "I_PRINTCFG_PRINTER");

            entity.HasIndex(e => e.PricPrintitemId, "I_PRINTCFG_PRINTITEM");

            entity.Property(e => e.PricId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRIC_ID");
            entity.Property(e => e.PricExternalprinterkey)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PRIC_EXTERNALPRINTERKEY");
            entity.Property(e => e.PricHintpattern)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PRIC_HINTPATTERN");
            entity.Property(e => e.PricNrofcopies)
                .HasPrecision(3)
                .HasColumnName("PRIC_NROFCOPIES");
            entity.Property(e => e.PricPfpattern)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PRIC_PFPATTERN");
            entity.Property(e => e.PricPrintcfgsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRIC_PRINTCFGSET_ID");
            entity.Property(e => e.PricPrinterId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRIC_PRINTER_ID");
            entity.Property(e => e.PricPrintitemId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRIC_PRINTITEM_ID");
            entity.Property(e => e.PricTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PRIC_TCREATION");
            entity.Property(e => e.PricToolpattern)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PRIC_TOOLPATTERN");
            entity.Property(e => e.PricTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PRIC_TUPDATE");
            entity.Property(e => e.PricUserpattern)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PRIC_USERPATTERN");
            entity.Property(e => e.PricWorkstationpattern)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PRIC_WORKSTATIONPATTERN");

            entity.HasOne(d => d.PricPrintcfgset).WithMany(p => p.JPrintcfgs)
                .HasForeignKey(d => d.PricPrintcfgsetId)
                .HasConstraintName("FK_PRINTCFGSET_PRINTCFG");

            entity.HasOne(d => d.PricPrinter).WithMany(p => p.JPrintcfgs)
                .HasForeignKey(d => d.PricPrinterId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PRINTCFG_PRINTER");

            entity.HasOne(d => d.PricPrintitem).WithMany(p => p.JPrintcfgs)
                .HasForeignKey(d => d.PricPrintitemId)
                .HasConstraintName("FK_PRINTCFG_PRINTITEM");
        });

        modelBuilder.Entity<JPrintcfgset>(entity =>
        {
            entity.HasKey(e => e.PricsId).HasName("PK_PRINTCFGSET");

            entity.ToTable("J_PRINTCFGSET", "JITTOE");

            entity.HasIndex(e => e.PricsKey, "UN_PRICS_KEY").IsUnique();

            entity.Property(e => e.PricsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRICS_ID");
            entity.Property(e => e.PricsDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PRICS_DESCR");
            entity.Property(e => e.PricsKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PRICS_KEY");
            entity.Property(e => e.PricsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PRICS_TCREATION");
            entity.Property(e => e.PricsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PRICS_TUPDATE");
        });

        modelBuilder.Entity<JPrinter>(entity =>
        {
            entity.HasKey(e => e.PriId).HasName("PK_PRINTER");

            entity.ToTable("J_PRINTER", "JITTOE");

            entity.HasIndex(e => e.PriPrintersetId, "I_PRINTERSET_PRINTER");

            entity.HasIndex(e => e.PriRedirprinterId, "I_REDIRPRINTER_PRINTER");

            entity.HasIndex(e => e.PriKey, "UN_PRI_KEY").IsUnique();

            entity.Property(e => e.PriId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRI_ID");
            entity.Property(e => e.PriConfig)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("PRI_CONFIG");
            entity.Property(e => e.PriDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PRI_DESCR");
            entity.Property(e => e.PriDialect)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PRI_DIALECT");
            entity.Property(e => e.PriIseditable)
                .HasPrecision(1)
                .HasColumnName("PRI_ISEDITABLE");
            entity.Property(e => e.PriKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PRI_KEY");
            entity.Property(e => e.PriOsqueue)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PRI_OSQUEUE");
            entity.Property(e => e.PriPrintersetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRI_PRINTERSET_ID");
            entity.Property(e => e.PriProtocol)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PRI_PROTOCOL");
            entity.Property(e => e.PriRedirprinterId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRI_REDIRPRINTER_ID");
            entity.Property(e => e.PriTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PRI_TCREATION");
            entity.Property(e => e.PriTemplate)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PRI_TEMPLATE");
            entity.Property(e => e.PriTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PRI_TUPDATE");
            entity.Property(e => e.PriUrl)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("PRI_URL");

            entity.HasOne(d => d.PriPrinterset).WithMany(p => p.JPrinters)
                .HasForeignKey(d => d.PriPrintersetId)
                .HasConstraintName("FK_PRINTERSET_PRINTER");

            entity.HasOne(d => d.PriRedirprinter).WithMany(p => p.InversePriRedirprinter)
                .HasForeignKey(d => d.PriRedirprinterId)
                .HasConstraintName("FK_REDIRPRINTER_PRINTER");
        });

        modelBuilder.Entity<JPrinterclass>(entity =>
        {
            entity.HasKey(e => e.PriclId).HasName("PK_PRINTERCLASS");

            entity.ToTable("J_PRINTERCLASS", "JITTOE");

            entity.HasIndex(e => e.PriclKey, "UN_PRICL_KEY").IsUnique();

            entity.Property(e => e.PriclId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRICL_ID");
            entity.Property(e => e.PriclDescr)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("PRICL_DESCR");
            entity.Property(e => e.PriclKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("PRICL_KEY");
            entity.Property(e => e.PriclTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PRICL_TCREATION");
            entity.Property(e => e.PriclTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PRICL_TUPDATE");
        });

        modelBuilder.Entity<JPrinterclassmember>(entity =>
        {
            entity.HasKey(e => e.PriclmId).HasName("PK_PRINTERCLASSMEMBER");

            entity.ToTable("J_PRINTERCLASSMEMBER", "JITTOE");

            entity.HasIndex(e => e.PriclmPrinterclassId, "I_PRICLASS_PRICLMEMBER");

            entity.HasIndex(e => e.PriclmPrinterId, "I_PRINTER_PRICLMEMBER");

            entity.HasIndex(e => new { e.PriclmPrinterId, e.PriclmPrinterclassId }, "UN_PRICLM_KEY").IsUnique();

            entity.Property(e => e.PriclmId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRICLM_ID");
            entity.Property(e => e.PriclmPrinterId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRICLM_PRINTER_ID");
            entity.Property(e => e.PriclmPrinterclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRICLM_PRINTERCLASS_ID");
            entity.Property(e => e.PriclmTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PRICLM_TCREATION");
            entity.Property(e => e.PriclmTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PRICLM_TUPDATE");

            entity.HasOne(d => d.PriclmPrinter).WithMany(p => p.JPrinterclassmembers)
                .HasForeignKey(d => d.PriclmPrinterId)
                .HasConstraintName("FK_PRINTER_PRICLMEMBER");

            entity.HasOne(d => d.PriclmPrinterclass).WithMany(p => p.JPrinterclassmembers)
                .HasForeignKey(d => d.PriclmPrinterclassId)
                .HasConstraintName("FK_PRICLASS_PRICLMEMBER");
        });

        modelBuilder.Entity<JPrinterset>(entity =>
        {
            entity.HasKey(e => e.PrisId).HasName("PK_PRINTERSET");

            entity.ToTable("J_PRINTERSET", "JITTOE");

            entity.HasIndex(e => e.PrisKey, "UN_PRIS_KEY").IsUnique();

            entity.Property(e => e.PrisId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRIS_ID");
            entity.Property(e => e.PrisDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PRIS_DESCR");
            entity.Property(e => e.PrisKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PRIS_KEY");
            entity.Property(e => e.PrisTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PRIS_TCREATION");
            entity.Property(e => e.PrisTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PRIS_TUPDATE");
        });

        modelBuilder.Entity<JPrintitem>(entity =>
        {
            entity.HasKey(e => e.PriiId).HasName("PK_PRINTITEM");

            entity.ToTable("J_PRINTITEM", "JITTOE");

            entity.HasIndex(e => e.PriiPrinterclassId, "I_PRINTERCLASS_PRINTITEM");

            entity.HasIndex(e => e.PriiKey, "UN_PRII_KEY").IsUnique();

            entity.Property(e => e.PriiId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRII_ID");
            entity.Property(e => e.PriiAnonymous)
                .HasPrecision(1)
                .HasColumnName("PRII_ANONYMOUS");
            entity.Property(e => e.PriiDescr)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("PRII_DESCR");
            entity.Property(e => e.PriiKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("PRII_KEY");
            entity.Property(e => e.PriiPrinterclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRII_PRINTERCLASS_ID");
            entity.Property(e => e.PriiProtocol)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PRII_PROTOCOL");
            entity.Property(e => e.PriiTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PRII_TCREATION");
            entity.Property(e => e.PriiTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PRII_TUPDATE");

            entity.HasOne(d => d.PriiPrinterclass).WithMany(p => p.JPrintitems)
                .HasForeignKey(d => d.PriiPrinterclassId)
                .HasConstraintName("FK_PRINTERCLASS_PRINTITEM");
        });

        modelBuilder.Entity<JPrintlog>(entity =>
        {
            entity.HasKey(e => e.PrilId).HasName("PK_PRINTLOG");

            entity.ToTable("J_PRINTLOG", "JITTOE");

            entity.HasIndex(e => e.PrilPrinterId, "I_PRINTER_PRINTLOG");

            entity.HasIndex(e => new { e.PrilObjectid, e.PrilDoctype }, "I_PRINTLOG_OBJECTIDDOCTYPE");

            entity.HasIndex(e => e.PrilObjectinfo1, "I_PRINTLOG_OBJECTINFO1");

            entity.HasIndex(e => e.PrilTransitionId, "I_TRANSITION_PRINTLOG");

            entity.Property(e => e.PrilId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRIL_ID");
            entity.Property(e => e.PrilDocdefkey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PRIL_DOCDEFKEY");
            entity.Property(e => e.PrilDoctype)
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasColumnName("PRIL_DOCTYPE");
            entity.Property(e => e.PrilExternalprinterkey)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PRIL_EXTERNALPRINTERKEY");
            entity.Property(e => e.PrilNrofcopies)
                .HasPrecision(3)
                .HasDefaultValueSql("1  ")
                .HasColumnName("PRIL_NROFCOPIES");
            entity.Property(e => e.PrilObjectid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRIL_OBJECTID");
            entity.Property(e => e.PrilObjectinfo1)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("PRIL_OBJECTINFO1");
            entity.Property(e => e.PrilObjectinfo2)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("PRIL_OBJECTINFO2");
            entity.Property(e => e.PrilPrinterId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRIL_PRINTER_ID");
            entity.Property(e => e.PrilTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PRIL_TCREATION");
            entity.Property(e => e.PrilTransitionId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRIL_TRANSITION_ID");
            entity.Property(e => e.PrilTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PRIL_TUPDATE");

            entity.HasOne(d => d.PrilPrinter).WithMany(p => p.JPrintlogs)
                .HasForeignKey(d => d.PrilPrinterId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PRINTER_PRINTLOG");

            entity.HasOne(d => d.PrilTransition).WithMany(p => p.JPrintlogs)
                .HasForeignKey(d => d.PrilTransitionId)
                .HasConstraintName("FK_TRANSITION_PRINTLOG");
        });

        modelBuilder.Entity<JProdcounter>(entity =>
        {
            entity.HasKey(e => e.PrcId).HasName("PK_PRODCOUNTER");

            entity.ToTable("J_PRODCOUNTER", "JITTOE");

            entity.HasIndex(e => e.PrcProdcountersetId, "I_PRODCOUNTERSET_PRODCOUNTER");

            entity.HasIndex(e => e.PrcProdstepId, "I_PRODSTEP_PRODCOUNTER");

            entity.HasIndex(e => e.PrcProdunitId, "I_PRODUNIT_PRODCOUNTER");

            entity.HasIndex(e => e.PrcSubjectId, "I_SUBJECT_PRODCOUNTER");

            entity.Property(e => e.PrcId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRC_ID");
            entity.Property(e => e.PrcAmount)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("PRC_AMOUNT");
            entity.Property(e => e.PrcProdcountersetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRC_PRODCOUNTERSET_ID");
            entity.Property(e => e.PrcProdstepId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRC_PRODSTEP_ID");
            entity.Property(e => e.PrcProdunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRC_PRODUNIT_ID");
            entity.Property(e => e.PrcQualityclass)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PRC_QUALITYCLASS");
            entity.Property(e => e.PrcSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRC_SUBJECT_ID");
            entity.Property(e => e.PrcTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PRC_TCREATION");
            entity.Property(e => e.PrcTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PRC_TUPDATE");

            entity.HasOne(d => d.PrcProdcounterset).WithMany(p => p.JProdcounters)
                .HasForeignKey(d => d.PrcProdcountersetId)
                .HasConstraintName("FK_PRODCOUNTERSET_PRODCOUNTER");

            entity.HasOne(d => d.PrcProdstep).WithMany(p => p.JProdcounters)
                .HasForeignKey(d => d.PrcProdstepId)
                .HasConstraintName("FK_PRODSTEP_PRODCOUNTER");

            entity.HasOne(d => d.PrcProdunit).WithMany(p => p.JProdcounters)
                .HasForeignKey(d => d.PrcProdunitId)
                .HasConstraintName("FK_PRODUNIT_PRODCOUNTER");

            entity.HasOne(d => d.PrcSubject).WithMany(p => p.JProdcounters)
                .HasForeignKey(d => d.PrcSubjectId)
                .HasConstraintName("FK_SUBJECT_PRODCOUNTER");
        });

        modelBuilder.Entity<JProdcounterset>(entity =>
        {
            entity.HasKey(e => e.PrcsId).HasName("PK_PRODCOUNTERSET");

            entity.ToTable("J_PRODCOUNTERSET", "JITTOE");

            entity.HasIndex(e => e.PrcsCompanyId, "I_COMPANY_PRODCOUNTERSET");

            entity.HasIndex(e => e.PrcsKey, "UN_PRCS_KEY").IsUnique();

            entity.Property(e => e.PrcsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRCS_ID");
            entity.Property(e => e.PrcsCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRCS_COMPANY_ID");
            entity.Property(e => e.PrcsDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PRCS_DESCR");
            entity.Property(e => e.PrcsKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PRCS_KEY");
            entity.Property(e => e.PrcsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PRCS_TCREATION");
            entity.Property(e => e.PrcsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PRCS_TUPDATE");

            entity.HasOne(d => d.PrcsCompany).WithMany(p => p.JProdcountersets)
                .HasForeignKey(d => d.PrcsCompanyId)
                .HasConstraintName("FK_COMPANY_PRODCOUNTERSET");
        });

        modelBuilder.Entity<JProdevent>(entity =>
        {
            entity.HasKey(e => e.PreId).HasName("PK_PRODEVENT");

            entity.ToTable("J_PRODEVENT", "JITTOE");

            entity.HasIndex(e => e.PreContainerentryId, "I_CONTAINERENTRY_PRODEVENT");

            entity.HasIndex(e => e.PrePaintplanentryId, "I_PAINTPLANENTRY_PRODEVENT");

            entity.HasIndex(e => e.PrePartId, "I_PART_PRODEVENT");

            entity.HasIndex(e => new { e.PreProdeventsetId, e.PreExported }, "I_PRE_EXPORTED");

            entity.HasIndex(e => e.PreTcreation, "I_PRE_TCREATION");

            entity.HasIndex(e => e.PreProdjobentryId, "I_PRODJOBENTRY_PRODEVENT");

            entity.HasIndex(e => e.PreProdstepId, "I_PRODSTEP_PRODEVENT");

            entity.HasIndex(e => e.PreProdtoolusageId, "I_PRODTOOLUSAGE_PRODEVENT");

            entity.HasIndex(e => e.PreProdunitId, "I_PRODUNIT_PRODEVENT");

            entity.HasIndex(e => e.PreSubjectId, "I_SUBJECT_PRODEVENT");

            entity.HasIndex(e => e.PreTransitionId, "I_TRANSITION_PRODEVENT");

            entity.Property(e => e.PreId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRE_ID");
            entity.Property(e => e.PreAmount)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("PRE_AMOUNT");
            entity.Property(e => e.PreContainerentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRE_CONTAINERENTRY_ID");
            entity.Property(e => e.PreExported)
                .HasColumnType("DATE")
                .HasColumnName("PRE_EXPORTED");
            entity.Property(e => e.PreLocation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PRE_LOCATION");
            entity.Property(e => e.PrePaintplanentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRE_PAINTPLANENTRY_ID");
            entity.Property(e => e.PrePartId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRE_PART_ID");
            entity.Property(e => e.PreProdeventsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRE_PRODEVENTSET_ID");
            entity.Property(e => e.PreProdjobentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRE_PRODJOBENTRY_ID");
            entity.Property(e => e.PreProdstepId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRE_PRODSTEP_ID");
            entity.Property(e => e.PreProdtoolusageId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRE_PRODTOOLUSAGE_ID");
            entity.Property(e => e.PreProdunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRE_PRODUNIT_ID");
            entity.Property(e => e.PreQualifier)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PRE_QUALIFIER");
            entity.Property(e => e.PreQualityclass)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PRE_QUALITYCLASS");
            entity.Property(e => e.PreSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRE_SUBJECT_ID");
            entity.Property(e => e.PreTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PRE_TCREATION");
            entity.Property(e => e.PreTimestamp)
                .HasColumnType("DATE")
                .HasColumnName("PRE_TIMESTAMP");
            entity.Property(e => e.PreTransitionId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRE_TRANSITION_ID");

            entity.HasOne(d => d.PreContainerentry).WithMany(p => p.JProdevents)
                .HasForeignKey(d => d.PreContainerentryId)
                .HasConstraintName("FK_CONTAINERENTRY_PRODEVENT");

            entity.HasOne(d => d.PrePaintplanentry).WithMany(p => p.JProdevents)
                .HasForeignKey(d => d.PrePaintplanentryId)
                .HasConstraintName("FK_PAINTPLANENTRY_PRODEVENT");

            entity.HasOne(d => d.PrePart).WithMany(p => p.JProdevents)
                .HasForeignKey(d => d.PrePartId)
                .HasConstraintName("FK_PART_PRODEVENT");

            entity.HasOne(d => d.PreProdeventset).WithMany(p => p.JProdevents)
                .HasForeignKey(d => d.PreProdeventsetId)
                .HasConstraintName("FK_PRODEVENTSET_PRODEVENT");

            entity.HasOne(d => d.PreProdjobentry).WithMany(p => p.JProdevents)
                .HasForeignKey(d => d.PreProdjobentryId)
                .HasConstraintName("FK_PRODJOBENTRY_PRODEVENT");

            entity.HasOne(d => d.PreProdstep).WithMany(p => p.JProdevents)
                .HasForeignKey(d => d.PreProdstepId)
                .HasConstraintName("FK_PRODSTEP_PRODEVENT");

            entity.HasOne(d => d.PreProdtoolusage).WithMany(p => p.JProdevents)
                .HasForeignKey(d => d.PreProdtoolusageId)
                .HasConstraintName("FK_PRODTOOLUSAGE_PRODEVENT");

            entity.HasOne(d => d.PreProdunit).WithMany(p => p.JProdevents)
                .HasForeignKey(d => d.PreProdunitId)
                .HasConstraintName("FK_PRODUNIT_PRODEVENT");

            entity.HasOne(d => d.PreSubject).WithMany(p => p.JProdevents)
                .HasForeignKey(d => d.PreSubjectId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SUBJECT_PRODEVENT");

            entity.HasOne(d => d.PreTransition).WithMany(p => p.JProdevents)
                .HasForeignKey(d => d.PreTransitionId)
                .HasConstraintName("FK_TRANSITION_PRODEVENT");
        });

        modelBuilder.Entity<JProdeventdatum>(entity =>
        {
            entity.HasKey(e => e.PredId).HasName("PK_PRODEVENTDATA");

            entity.ToTable("J_PRODEVENTDATA", "JITTOE");

            entity.HasIndex(e => e.PredFailuredetailId, "I_FDETAIL_PRODEVENTDATA");

            entity.HasIndex(e => e.PredFailurereasonId, "I_FREASON_PRODEVENTDATA");

            entity.HasIndex(e => e.PredImageId, "I_IMAGE_PRODEVENTDATA");

            entity.HasIndex(e => e.PredProdeventId, "I_PRODEVENT_PRODEVENTDATA");

            entity.Property(e => e.PredId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRED_ID");
            entity.Property(e => e.PredFailuredetailId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRED_FAILUREDETAIL_ID");
            entity.Property(e => e.PredFailurereasonId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRED_FAILUREREASON_ID");
            entity.Property(e => e.PredImageId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRED_IMAGE_ID");
            entity.Property(e => e.PredImageregioncode)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("PRED_IMAGEREGIONCODE");
            entity.Property(e => e.PredInfo1)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasColumnName("PRED_INFO1");
            entity.Property(e => e.PredInfo2)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasColumnName("PRED_INFO2");
            entity.Property(e => e.PredKey1)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PRED_KEY1");
            entity.Property(e => e.PredKey2)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PRED_KEY2");
            entity.Property(e => e.PredKey3)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PRED_KEY3");
            entity.Property(e => e.PredLocx)
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("PRED_LOCX");
            entity.Property(e => e.PredLocy)
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("PRED_LOCY");
            entity.Property(e => e.PredLocz)
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("PRED_LOCZ");
            entity.Property(e => e.PredProdeventId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRED_PRODEVENT_ID");
            entity.Property(e => e.PredTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PRED_TCREATION");

            entity.HasOne(d => d.PredFailuredetail).WithMany(p => p.JProdeventdata)
                .HasForeignKey(d => d.PredFailuredetailId)
                .HasConstraintName("FK_FDETAIL_PRODEVENTDATA");

            entity.HasOne(d => d.PredFailurereason).WithMany(p => p.JProdeventdata)
                .HasForeignKey(d => d.PredFailurereasonId)
                .HasConstraintName("FK_FREASON_PRODEVENTDATA");

            entity.HasOne(d => d.PredImage).WithMany(p => p.JProdeventdata)
                .HasForeignKey(d => d.PredImageId)
                .HasConstraintName("FK_IMAGE_PRODEVENTDATA");

            entity.HasOne(d => d.PredProdevent).WithMany(p => p.JProdeventdata)
                .HasForeignKey(d => d.PredProdeventId)
                .HasConstraintName("FK_PRODEVENT_PRODEVENTDATA");
        });

        modelBuilder.Entity<JProdeventexport>(entity =>
        {
            entity.HasKey(e => e.PreeId).HasName("PK_PRODEVENTEXPORT");

            entity.ToTable("J_PRODEVENTEXPORT", "JITTOE");

            entity.HasIndex(e => e.PreeProdeventId, "I_PRODEVENT_PRODEVENTEXPORT");

            entity.HasIndex(e => e.PreeTransfercpacketId, "I_TCPACKET_PRODEVENTEXPORT");

            entity.Property(e => e.PreeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PREE_ID");
            entity.Property(e => e.PreeInfo1)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("PREE_INFO1");
            entity.Property(e => e.PreeInfo2)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("PREE_INFO2");
            entity.Property(e => e.PreeProdeventId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PREE_PRODEVENT_ID");
            entity.Property(e => e.PreeTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PREE_TCREATION");
            entity.Property(e => e.PreeTransfercpacketId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PREE_TRANSFERCPACKET_ID");

            entity.HasOne(d => d.PreeProdevent).WithMany(p => p.JProdeventexports)
                .HasForeignKey(d => d.PreeProdeventId)
                .HasConstraintName("FK_PRODEVENT_PRODEVENTEXPORT");

            entity.HasOne(d => d.PreeTransfercpacket).WithMany(p => p.JProdeventexports)
                .HasForeignKey(d => d.PreeTransfercpacketId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_TCPACKET_PRODEVENTEXPORT");
        });

        modelBuilder.Entity<JProdeventset>(entity =>
        {
            entity.HasKey(e => e.PresId).HasName("PK_PRODEVENTSET");

            entity.ToTable("J_PRODEVENTSET", "JITTOE");

            entity.HasIndex(e => e.PresCompanyId, "I_COMPANY_PRODEVENTSET");

            entity.HasIndex(e => e.PresKey, "UN_PRES_KEY").IsUnique();

            entity.Property(e => e.PresId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRES_ID");
            entity.Property(e => e.PresCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRES_COMPANY_ID");
            entity.Property(e => e.PresDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PRES_DESCR");
            entity.Property(e => e.PresKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PRES_KEY");
            entity.Property(e => e.PresTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PRES_TCREATION");
            entity.Property(e => e.PresTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PRES_TUPDATE");

            entity.HasOne(d => d.PresCompany).WithMany(p => p.JProdeventsets)
                .HasForeignKey(d => d.PresCompanyId)
                .HasConstraintName("FK_COMPANY_PRODEVENTSET");
        });

        modelBuilder.Entity<JProdflow>(entity =>
        {
            entity.HasKey(e => e.PflId).HasName("PK_PRODFLOW");

            entity.ToTable("J_PRODFLOW", "JITTOE");

            entity.HasIndex(e => e.PflProdflowsetId, "I_PRODFLOWSET_PRODFLOW");

            entity.HasIndex(e => new { e.PflProdflowsetId, e.PflCode }, "UN_PFL_CODE").IsUnique();

            entity.HasIndex(e => e.PflKey, "UN_PFL_KEY").IsUnique();

            entity.Property(e => e.PflId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PFL_ID");
            entity.Property(e => e.PflCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PFL_CODE");
            entity.Property(e => e.PflDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PFL_DESCR");
            entity.Property(e => e.PflKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PFL_KEY");
            entity.Property(e => e.PflProdflowsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PFL_PRODFLOWSET_ID");
            entity.Property(e => e.PflTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PFL_TCREATION");
            entity.Property(e => e.PflTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PFL_TUPDATE");

            entity.HasOne(d => d.PflProdflowset).WithMany(p => p.JProdflows)
                .HasForeignKey(d => d.PflProdflowsetId)
                .HasConstraintName("FK_PRODFLOWSET_PRODFLOW");
        });

        modelBuilder.Entity<JProdflowaction>(entity =>
        {
            entity.HasKey(e => e.PflaId).HasName("PK_PRODFLOWACTION");

            entity.ToTable("J_PRODFLOWACTION", "JITTOE");

            entity.HasIndex(e => e.PflaProdflowId, "I_PRODFLOW_PFACTION");

            entity.HasIndex(e => e.PflaProdstepId, "I_PRODSTEP_PFACTION");

            entity.HasIndex(e => e.PflaProdunitId, "I_PRODUNIT_PFACTION");

            entity.HasIndex(e => new { e.PflaProdflowId, e.PflaCode }, "UN_PFLA_CODE").IsUnique();

            entity.Property(e => e.PflaId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PFLA_ID");
            entity.Property(e => e.PflaCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PFLA_CODE");
            entity.Property(e => e.PflaDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PFLA_DESCR");
            entity.Property(e => e.PflaErpcode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PFLA_ERPCODE");
            entity.Property(e => e.PflaErpprodstepcode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PFLA_ERPPRODSTEPCODE");
            entity.Property(e => e.PflaErpprodunitcode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PFLA_ERPPRODUNITCODE");
            entity.Property(e => e.PflaIspaypoint)
                .HasPrecision(1)
                .HasColumnName("PFLA_ISPAYPOINT");
            entity.Property(e => e.PflaProdflowId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PFLA_PRODFLOW_ID");
            entity.Property(e => e.PflaProdstepId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PFLA_PRODSTEP_ID");
            entity.Property(e => e.PflaProdunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PFLA_PRODUNIT_ID");
            entity.Property(e => e.PflaTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PFLA_TCREATION");

            entity.HasOne(d => d.PflaProdflow).WithMany(p => p.JProdflowactions)
                .HasForeignKey(d => d.PflaProdflowId)
                .HasConstraintName("FK_PRODFLOW_PFACTION");

            entity.HasOne(d => d.PflaProdstep).WithMany(p => p.JProdflowactions)
                .HasForeignKey(d => d.PflaProdstepId)
                .HasConstraintName("FK_PRODSTEP_PFACTION");

            entity.HasOne(d => d.PflaProdunit).WithMany(p => p.JProdflowactions)
                .HasForeignKey(d => d.PflaProdunitId)
                .HasConstraintName("FK_PRODUNIT_PFACTION");
        });

        modelBuilder.Entity<JProdflowset>(entity =>
        {
            entity.HasKey(e => e.PflsId).HasName("PK_PRODFLOWSET");

            entity.ToTable("J_PRODFLOWSET", "JITTOE");

            entity.HasIndex(e => e.PflsCompanyId, "I_COMPANY_PRODFLOWSET");

            entity.HasIndex(e => e.PflsKey, "UN_PFLS_KEY").IsUnique();

            entity.Property(e => e.PflsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PFLS_ID");
            entity.Property(e => e.PflsCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PFLS_COMPANY_ID");
            entity.Property(e => e.PflsDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PFLS_DESCR");
            entity.Property(e => e.PflsKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PFLS_KEY");
            entity.Property(e => e.PflsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PFLS_TCREATION");
            entity.Property(e => e.PflsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PFLS_TUPDATE");

            entity.HasOne(d => d.PflsCompany).WithMany(p => p.JProdflowsets)
                .HasForeignKey(d => d.PflsCompanyId)
                .HasConstraintName("FK_COMPANY_PRODFLOWSET");
        });

        modelBuilder.Entity<JProdflowusage>(entity =>
        {
            entity.HasKey(e => e.PfluId).HasName("PK_PRODFLOWUSAGE");

            entity.ToTable("J_PRODFLOWUSAGE", "JITTOE");

            entity.HasIndex(e => e.PfluProdflowId, "I_PRODFLOW_PFUSAGE");

            entity.HasIndex(e => e.PfluProdunitId, "I_PRODUNIT_PFUSAGE");

            entity.HasIndex(e => e.PfluSubjectcomptypeId, "I_SCTYPE_PFUSAGE");

            entity.HasIndex(e => e.PfluSubjecttypeId, "I_SUBJECTTYPE_PFUSAGE");

            entity.HasIndex(e => e.PfluSubjectId, "I_SUBJECT_PFUSAGE");

            entity.HasIndex(e => new { e.PfluCode, e.PfluProdflowId, e.PfluSubjecttypeId, e.PfluSubjectId, e.PfluInvalidid }, "UN_PFLU_SUBJECT").IsUnique();

            entity.Property(e => e.PfluId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PFLU_ID");
            entity.Property(e => e.PfluCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PFLU_CODE");
            entity.Property(e => e.PfluEnabled)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("1  ")
                .HasColumnName("PFLU_ENABLED");
            entity.Property(e => e.PfluInvalidid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PFLU_INVALIDID");
            entity.Property(e => e.PfluProdflowId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PFLU_PRODFLOW_ID");
            entity.Property(e => e.PfluProdunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PFLU_PRODUNIT_ID");
            entity.Property(e => e.PfluSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PFLU_SUBJECT_ID");
            entity.Property(e => e.PfluSubjectcomptypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PFLU_SUBJECTCOMPTYPE_ID");
            entity.Property(e => e.PfluSubjecttypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PFLU_SUBJECTTYPE_ID");
            entity.Property(e => e.PfluTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PFLU_TCREATION");
            entity.Property(e => e.PfluTvalidfrom)
                .HasColumnType("DATE")
                .HasColumnName("PFLU_TVALIDFROM");
            entity.Property(e => e.PfluTvaliduntil)
                .HasColumnType("DATE")
                .HasColumnName("PFLU_TVALIDUNTIL");

            entity.HasOne(d => d.PfluProdflow).WithMany(p => p.JProdflowusages)
                .HasForeignKey(d => d.PfluProdflowId)
                .HasConstraintName("FK_PRODFLOW_PFUSAGE");

            entity.HasOne(d => d.PfluProdunit).WithMany(p => p.JProdflowusages)
                .HasForeignKey(d => d.PfluProdunitId)
                .HasConstraintName("FK_PRODUNIT_PFUSAGE");

            entity.HasOne(d => d.PfluSubject).WithMany(p => p.JProdflowusages)
                .HasForeignKey(d => d.PfluSubjectId)
                .HasConstraintName("FK_SUBJECT_PFUSAGE");

            entity.HasOne(d => d.PfluSubjectcomptype).WithMany(p => p.JProdflowusages)
                .HasForeignKey(d => d.PfluSubjectcomptypeId)
                .HasConstraintName("FK_SCTYPE_PFUSAGE");

            entity.HasOne(d => d.PfluSubjecttype).WithMany(p => p.JProdflowusages)
                .HasForeignKey(d => d.PfluSubjecttypeId)
                .HasConstraintName("FK_SUBJECTTYPE_PFUSAGE");
        });

        modelBuilder.Entity<JProdjob>(entity =>
        {
            entity.HasKey(e => e.PjId).HasName("PK_PRODJOB");

            entity.ToTable("J_PRODJOB", "JITTOE");

            entity.HasIndex(e => e.PjCommcontrolId, "I_COMMCONTROL_PRODJOB");

            entity.HasIndex(e => e.PjContainerId, "I_CONTAINER_PRODJOB");

            entity.HasIndex(e => e.PjDeststocklocId, "I_DESTSTOCKLOC_PRODJOB");

            entity.HasIndex(e => e.PjDeststockId, "I_DESTSTOCK_PRODJOB");

            entity.HasIndex(e => e.PjOrderId, "I_ORDER_PRODJOB");

            entity.HasIndex(e => e.PjPaintplanentryId, "I_PAINTPLANENTRY_PRODJOB");

            entity.HasIndex(e => new { e.PjProdstepId, e.PjState }, "I_PJ_PRODSTEP_STATE");

            entity.HasIndex(e => new { e.PjProdstepId, e.PjTupdate }, "I_PJ_PRODSTEP_TUPDATE");

            entity.HasIndex(e => e.PjProdreplenishmentcfgId, "I_PRCFG_PRODJOB");

            entity.HasIndex(e => e.PjParentId, "I_PRODJOB_PRODJOB");

            entity.HasIndex(e => e.PjProdunitId, "I_PRODUNIT_PRODJOB");

            entity.HasIndex(e => e.PjSourcestocklocId, "I_SOURCESTOCKLOC_PRODJOB");

            entity.HasIndex(e => e.PjWorkflowjobId, "I_WORKFLOWJOB_PRODJOB");

            entity.HasIndex(e => e.PjWorkflowtaskId, "I_WORKFLOWTASK_PRODJOB");

            entity.HasIndex(e => new { e.PjProdjobsetId, e.PjNo, e.PjDeletionid }, "UN_PJ_PRODJOBSET_NO").IsUnique();

            entity.Property(e => e.PjId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJ_ID");
            entity.Property(e => e.PjAltseqno)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("PJ_ALTSEQNO");
            entity.Property(e => e.PjCommcontrolId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJ_COMMCONTROL_ID");
            entity.Property(e => e.PjContainerId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJ_CONTAINER_ID");
            entity.Property(e => e.PjDeletionid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJ_DELETIONID");
            entity.Property(e => e.PjDescr)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PJ_DESCR");
            entity.Property(e => e.PjDeststockId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJ_DESTSTOCK_ID");
            entity.Property(e => e.PjDeststocklocId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJ_DESTSTOCKLOC_ID");
            entity.Property(e => e.PjGroup)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PJ_GROUP");
            entity.Property(e => e.PjNo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("PJ_NO");
            entity.Property(e => e.PjOrderId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJ_ORDER_ID");
            entity.Property(e => e.PjPaintplanentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJ_PAINTPLANENTRY_ID");
            entity.Property(e => e.PjParentId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJ_PARENT_ID");
            entity.Property(e => e.PjProdjobsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJ_PRODJOBSET_ID");
            entity.Property(e => e.PjProdreplenishmentcfgId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJ_PRODREPLENISHMENTCFG_ID");
            entity.Property(e => e.PjProdstepId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJ_PRODSTEP_ID");
            entity.Property(e => e.PjProdunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJ_PRODUNIT_ID");
            entity.Property(e => e.PjQualifier1)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("PJ_QUALIFIER1");
            entity.Property(e => e.PjQualifier2)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("PJ_QUALIFIER2");
            entity.Property(e => e.PjQualifier3)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("PJ_QUALIFIER3");
            entity.Property(e => e.PjRetries)
                .HasPrecision(6)
                .HasColumnName("PJ_RETRIES");
            entity.Property(e => e.PjRetryreason)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("PJ_RETRYREASON");
            entity.Property(e => e.PjScheduledtime)
                .HasColumnType("DATE")
                .HasColumnName("PJ_SCHEDULEDTIME");
            entity.Property(e => e.PjSeqno)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("PJ_SEQNO");
            entity.Property(e => e.PjSourcestocklocId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJ_SOURCESTOCKLOC_ID");
            entity.Property(e => e.PjStartseq)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJ_STARTSEQ");
            entity.Property(e => e.PjState)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("PJ_STATE");
            entity.Property(e => e.PjStrategy)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("PJ_STRATEGY");
            entity.Property(e => e.PjTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PJ_TCREATION");
            entity.Property(e => e.PjTdeletion)
                .HasColumnType("DATE")
                .HasColumnName("PJ_TDELETION");
            entity.Property(e => e.PjTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PJ_TUPDATE");
            entity.Property(e => e.PjWorkflowjobId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJ_WORKFLOWJOB_ID");
            entity.Property(e => e.PjWorkflowtaskId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJ_WORKFLOWTASK_ID");

            entity.HasOne(d => d.PjCommcontrol).WithMany(p => p.JProdjobs)
                .HasForeignKey(d => d.PjCommcontrolId)
                .HasConstraintName("FK_COMMCONTROL_PRODJOB");

            entity.HasOne(d => d.PjContainer).WithMany(p => p.JProdjobs)
                .HasForeignKey(d => d.PjContainerId)
                .HasConstraintName("FK_CONTAINER_PRODJOB");

            entity.HasOne(d => d.PjDeststock).WithMany(p => p.JProdjobs)
                .HasForeignKey(d => d.PjDeststockId)
                .HasConstraintName("FK_DESTSTOCK_PRODJOB");

            entity.HasOne(d => d.PjDeststockloc).WithMany(p => p.JProdjobPjDeststocklocs)
                .HasForeignKey(d => d.PjDeststocklocId)
                .HasConstraintName("FK_DESTSTOCKLOC_PRODJOB");

            entity.HasOne(d => d.PjOrder).WithMany(p => p.JProdjobs)
                .HasForeignKey(d => d.PjOrderId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_ORDER_PRODJOB");

            entity.HasOne(d => d.PjPaintplanentry).WithMany(p => p.JProdjobs)
                .HasForeignKey(d => d.PjPaintplanentryId)
                .HasConstraintName("FK_PAINTPLANENTRY_PRODJOB");

            entity.HasOne(d => d.PjParent).WithMany(p => p.InversePjParent)
                .HasForeignKey(d => d.PjParentId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PRODJOB_PRODJOB");

            entity.HasOne(d => d.PjProdjobset).WithMany(p => p.JProdjobs)
                .HasForeignKey(d => d.PjProdjobsetId)
                .HasConstraintName("FK_PRODJOBSET_PRODJOB");

            entity.HasOne(d => d.PjProdreplenishmentcfg).WithMany(p => p.JProdjobs)
                .HasForeignKey(d => d.PjProdreplenishmentcfgId)
                .HasConstraintName("FK_PRCFG_PRODJOB");

            entity.HasOne(d => d.PjProdstep).WithMany(p => p.JProdjobs)
                .HasForeignKey(d => d.PjProdstepId)
                .HasConstraintName("FK_PRODSTEP_PRODJOB");

            entity.HasOne(d => d.PjProdunit).WithMany(p => p.JProdjobs)
                .HasForeignKey(d => d.PjProdunitId)
                .HasConstraintName("FK_PRODUNIT_PRODJOB");

            entity.HasOne(d => d.PjSourcestockloc).WithMany(p => p.JProdjobPjSourcestocklocs)
                .HasForeignKey(d => d.PjSourcestocklocId)
                .HasConstraintName("FK_SOURCESTOCKLOC_PRODJOB");

            entity.HasOne(d => d.PjWorkflowjob).WithMany(p => p.JProdjobs)
                .HasForeignKey(d => d.PjWorkflowjobId)
                .HasConstraintName("FK_WORKFLOWJOB_PRODJOB");

            entity.HasOne(d => d.PjWorkflowtask).WithMany(p => p.JProdjobs)
                .HasForeignKey(d => d.PjWorkflowtaskId)
                .HasConstraintName("FK_WORKFLOWTASK_PRODJOB");
        });

        modelBuilder.Entity<JProdjobbuffer>(entity =>
        {
            entity.HasKey(e => e.PjbId).HasName("PK_PRODJOBBUFFER");

            entity.ToTable("J_PRODJOBBUFFER", "JITTOE");

            entity.HasIndex(e => e.PjbCompanyId, "I_COMPANY_PRODJOBBUFFER");

            entity.HasIndex(e => e.PjbCounterId, "I_COUNTER_PRODJOBBUFFER");

            entity.HasIndex(e => e.PjbKey, "UN_PJB_KEY").IsUnique();

            entity.Property(e => e.PjbId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJB_ID");
            entity.Property(e => e.PjbCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJB_COMPANY_ID");
            entity.Property(e => e.PjbCounterId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJB_COUNTER_ID");
            entity.Property(e => e.PjbDescr)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("PJB_DESCR");
            entity.Property(e => e.PjbKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PJB_KEY");
            entity.Property(e => e.PjbMaxentries)
                .HasPrecision(5)
                .HasDefaultValueSql("0  ")
                .HasColumnName("PJB_MAXENTRIES");
            entity.Property(e => e.PjbMaxentryageinminutes)
                .HasPrecision(9)
                .HasDefaultValueSql("0  ")
                .HasColumnName("PJB_MAXENTRYAGEINMINUTES");
            entity.Property(e => e.PjbTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PJB_TCREATION");
            entity.Property(e => e.PjbTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PJB_TUPDATE");

            entity.HasOne(d => d.PjbCompany).WithMany(p => p.JProdjobbuffers)
                .HasForeignKey(d => d.PjbCompanyId)
                .HasConstraintName("FK_COMPANY_PRODJOBBUFFER");

            entity.HasOne(d => d.PjbCounter).WithMany(p => p.JProdjobbuffers)
                .HasForeignKey(d => d.PjbCounterId)
                .HasConstraintName("FK_COUNTER_PRODJOBBUFFER");
        });

        modelBuilder.Entity<JProdjobbufferclass>(entity =>
        {
            entity.HasKey(e => e.PjbcId).HasName("PK_PRODJOBBUFFERCLASS");

            entity.ToTable("J_PRODJOBBUFFERCLASS", "JITTOE");

            entity.HasIndex(e => e.PjbcCompanyId, "I_COMPANY_PJBCLASS");

            entity.HasIndex(e => e.PjbcKey, "UN_PJBC_KEY").IsUnique();

            entity.Property(e => e.PjbcId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJBC_ID");
            entity.Property(e => e.PjbcCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJBC_COMPANY_ID");
            entity.Property(e => e.PjbcDescr)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PJBC_DESCR");
            entity.Property(e => e.PjbcKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PJBC_KEY");
            entity.Property(e => e.PjbcTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PJBC_TCREATION");
            entity.Property(e => e.PjbcTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PJBC_TUPDATE");
            entity.Property(e => e.PjbcUniqueprodjobs)
                .HasPrecision(1)
                .HasColumnName("PJBC_UNIQUEPRODJOBS");

            entity.HasOne(d => d.PjbcCompany).WithMany(p => p.JProdjobbufferclasses)
                .HasForeignKey(d => d.PjbcCompanyId)
                .HasConstraintName("FK_COMPANY_PJBCLASS");
        });

        modelBuilder.Entity<JProdjobbufferclassm>(entity =>
        {
            entity.HasKey(e => e.PjbcmId).HasName("PK_PRODJOBBUFFERCLASSM");

            entity.ToTable("J_PRODJOBBUFFERCLASSM", "JITTOE");

            entity.HasIndex(e => e.PjbcmProdjobbufferclassId, "I_PJBC_PJBCMEMBER");

            entity.HasIndex(e => e.PjbcmProdjobbufferId, "I_PRODJOBBUFFER_PJBCMEMBER");

            entity.HasIndex(e => new { e.PjbcmProdjobbufferId, e.PjbcmProdjobbufferclassId }, "UN_PJBCM_KEY").IsUnique();

            entity.Property(e => e.PjbcmId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJBCM_ID");
            entity.Property(e => e.PjbcmProdjobbufferId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJBCM_PRODJOBBUFFER_ID");
            entity.Property(e => e.PjbcmProdjobbufferclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJBCM_PRODJOBBUFFERCLASS_ID");
            entity.Property(e => e.PjbcmTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PJBCM_TCREATION");
            entity.Property(e => e.PjbcmTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PJBCM_TUPDATE");

            entity.HasOne(d => d.PjbcmProdjobbuffer).WithMany(p => p.JProdjobbufferclassms)
                .HasForeignKey(d => d.PjbcmProdjobbufferId)
                .HasConstraintName("FK_PRODJOBBUFFER_PJBCMEMBER");

            entity.HasOne(d => d.PjbcmProdjobbufferclass).WithMany(p => p.JProdjobbufferclassms)
                .HasForeignKey(d => d.PjbcmProdjobbufferclassId)
                .HasConstraintName("FK_PJBC_PJBCMEMBER");
        });

        modelBuilder.Entity<JProdjobbufferentry>(entity =>
        {
            entity.HasKey(e => e.PjbeId).HasName("PK_PRODJOBBUFFERENTRY");

            entity.ToTable("J_PRODJOBBUFFERENTRY", "JITTOE");

            entity.HasIndex(e => e.PjbeProdjobbufferId, "I_PRODJOBBUFFER_PJBENTRY");

            entity.HasIndex(e => e.PjbeProdjobId, "I_PRODJOB_PJBENTRY");

            entity.HasIndex(e => new { e.PjbeProdjobbufferId, e.PjbeProdjobId }, "UN_PJBE_KEY").IsUnique();

            entity.Property(e => e.PjbeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJBE_ID");
            entity.Property(e => e.PjbeNo)
                .HasPrecision(9)
                .HasDefaultValueSql("0  ")
                .HasColumnName("PJBE_NO");
            entity.Property(e => e.PjbeProdjobId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJBE_PRODJOB_ID");
            entity.Property(e => e.PjbeProdjobbufferId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJBE_PRODJOBBUFFER_ID");
            entity.Property(e => e.PjbeTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PJBE_TCREATION");
            entity.Property(e => e.PjbeTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PJBE_TUPDATE");

            entity.HasOne(d => d.PjbeProdjob).WithMany(p => p.JProdjobbufferentries)
                .HasForeignKey(d => d.PjbeProdjobId)
                .HasConstraintName("FK_PRODJOB_PJBENTRY");

            entity.HasOne(d => d.PjbeProdjobbuffer).WithMany(p => p.JProdjobbufferentries)
                .HasForeignKey(d => d.PjbeProdjobbufferId)
                .HasConstraintName("FK_PRODJOBBUFFER_PJBENTRY");
        });

        modelBuilder.Entity<JProdjobdatum>(entity =>
        {
            entity.HasKey(e => e.PjdId).HasName("PK_PRODJOBDATA");

            entity.ToTable("J_PRODJOBDATA", "JITTOE");

            entity.HasIndex(e => new { e.PjdValue, e.PjdKind }, "I_J_PRODJOBDATA_VALUE");

            entity.HasIndex(e => e.PjdTcreation, "I_PJD_TCREATION");

            entity.HasIndex(e => e.PjdProdjobId, "I_PRODJOB_PRODJOBDATA");

            entity.Property(e => e.PjdId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJD_ID");
            entity.Property(e => e.PjdDeletionid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJD_DELETIONID");
            entity.Property(e => e.PjdKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("PJD_KEY");
            entity.Property(e => e.PjdKind)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PJD_KIND");
            entity.Property(e => e.PjdProdjobId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJD_PRODJOB_ID");
            entity.Property(e => e.PjdTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PJD_TCREATION");
            entity.Property(e => e.PjdTdeletion)
                .HasColumnType("DATE")
                .HasColumnName("PJD_TDELETION");
            entity.Property(e => e.PjdTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PJD_TUPDATE");
            entity.Property(e => e.PjdValue)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasColumnName("PJD_VALUE");

            entity.HasOne(d => d.PjdProdjob).WithMany(p => p.JProdjobdata)
                .HasForeignKey(d => d.PjdProdjobId)
                .HasConstraintName("FK_PRODJOB_PRODJOBDATA");
        });

        modelBuilder.Entity<JProdjobdependency>(entity =>
        {
            entity.HasKey(e => e.PjdeId).HasName("PK_PRODJOBDEPENDENCY");

            entity.ToTable("J_PRODJOBDEPENDENCY", "JITTOE");

            entity.HasIndex(e => e.PjdeProdjobId, "I_PRODJOB_PJDEP");

            entity.Property(e => e.PjdeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJDE_ID");
            entity.Property(e => e.PjdeProdjobId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJDE_PRODJOB_ID");
            entity.Property(e => e.PjdeTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PJDE_TCREATION");
            entity.Property(e => e.PjdeTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PJDE_TUPDATE");

            entity.HasOne(d => d.PjdeProdjob).WithMany(p => p.JProdjobdependencies)
                .HasForeignKey(d => d.PjdeProdjobId)
                .HasConstraintName("FK_PRODJOB_PJDEP");
        });

        modelBuilder.Entity<JProdjobdependencyitem>(entity =>
        {
            entity.HasKey(e => e.PjdeiId).HasName("PK_PRODJOBDEPENDENCYITEM");

            entity.ToTable("J_PRODJOBDEPENDENCYITEM", "JITTOE");

            entity.HasIndex(e => e.PjdeiFromprodjobId, "I_FROMPRODJOB_PJDEPITEM");

            entity.HasIndex(e => e.PjdeiProdjobdependencyId, "I_PJDEP_PJDEPITEM");

            entity.Property(e => e.PjdeiId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJDEI_ID");
            entity.Property(e => e.PjdeiFromprodjobId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJDEI_FROMPRODJOB_ID");
            entity.Property(e => e.PjdeiProdjobdependencyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJDEI_PRODJOBDEPENDENCY_ID");
            entity.Property(e => e.PjdeiTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PJDEI_TCREATION");
            entity.Property(e => e.PjdeiTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PJDEI_TUPDATE");

            entity.HasOne(d => d.PjdeiFromprodjob).WithMany(p => p.JProdjobdependencyitems)
                .HasForeignKey(d => d.PjdeiFromprodjobId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FROMPRODJOB_PJDEPITEM");

            entity.HasOne(d => d.PjdeiProdjobdependency).WithMany(p => p.JProdjobdependencyitems)
                .HasForeignKey(d => d.PjdeiProdjobdependencyId)
                .HasConstraintName("FK_PJDEP_PJDEPITEM");
        });

        modelBuilder.Entity<JProdjobentry>(entity =>
        {
            entity.HasKey(e => e.PjeId).HasName("PK_PRODJOBENTRY");

            entity.ToTable("J_PRODJOBENTRY", "JITTOE");

            entity.HasIndex(e => e.PjeContainerentryId, "I_CONTAINERENTRY_PRODJOBENTRY");

            entity.HasIndex(e => e.PjeOrderentryId, "I_ORDERENTRY_PRODJOBENTRY");

            entity.HasIndex(e => e.PjeProdjobId, "I_PRODJOB_PRODJOBENTRY");

            entity.HasIndex(e => e.PjeSubjectId, "I_SUBJECT_PRODJOBENTRY");

            entity.Property(e => e.PjeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJE_ID");
            entity.Property(e => e.PjeAmount)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("PJE_AMOUNT");
            entity.Property(e => e.PjeContainerentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJE_CONTAINERENTRY_ID");
            entity.Property(e => e.PjeDeletionid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJE_DELETIONID");
            entity.Property(e => e.PjeNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("PJE_NO");
            entity.Property(e => e.PjeOrderentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJE_ORDERENTRY_ID");
            entity.Property(e => e.PjeProdjobId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJE_PRODJOB_ID");
            entity.Property(e => e.PjeProducedamount)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("PJE_PRODUCEDAMOUNT");
            entity.Property(e => e.PjeState)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("PJE_STATE");
            entity.Property(e => e.PjeSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJE_SUBJECT_ID");
            entity.Property(e => e.PjeTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PJE_TCREATION");
            entity.Property(e => e.PjeTdeletion)
                .HasColumnType("DATE")
                .HasColumnName("PJE_TDELETION");
            entity.Property(e => e.PjeTimerescheduled)
                .HasColumnType("DATE")
                .HasColumnName("PJE_TIMERESCHEDULED");
            entity.Property(e => e.PjeTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PJE_TUPDATE");

            entity.HasOne(d => d.PjeContainerentry).WithMany(p => p.JProdjobentries)
                .HasForeignKey(d => d.PjeContainerentryId)
                .HasConstraintName("FK_CONTAINERENTRY_PRODJOBENTRY");

            entity.HasOne(d => d.PjeOrderentry).WithMany(p => p.JProdjobentries)
                .HasForeignKey(d => d.PjeOrderentryId)
                .HasConstraintName("FK_ORDERENTRY_PRODJOBENTRY");

            entity.HasOne(d => d.PjeProdjob).WithMany(p => p.JProdjobentries)
                .HasForeignKey(d => d.PjeProdjobId)
                .HasConstraintName("FK_PRODJOB_PRODJOBENTRY");

            entity.HasOne(d => d.PjeSubject).WithMany(p => p.JProdjobentries)
                .HasForeignKey(d => d.PjeSubjectId)
                .HasConstraintName("FK_SUBJECT_PRODJOBENTRY");
        });

        modelBuilder.Entity<JProdjobinfo>(entity =>
        {
            entity.HasKey(e => e.PjiId).HasName("PK_PRODJOBINFO");

            entity.ToTable("J_PRODJOBINFO", "JITTOE");

            entity.HasIndex(e => e.PjiProdjobId, "I_PRODJOB_PRODJOBINFO");

            entity.HasIndex(e => new { e.PjiProdjobId, e.PjiType, e.PjiKey1, e.PjiKey2, e.PjiKey3 }, "UN_PJI_INFO").IsUnique();

            entity.Property(e => e.PjiId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJI_ID");
            entity.Property(e => e.PjiIntvalue)
                .HasPrecision(10)
                .HasColumnName("PJI_INTVALUE");
            entity.Property(e => e.PjiKey1)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PJI_KEY1");
            entity.Property(e => e.PjiKey2)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PJI_KEY2");
            entity.Property(e => e.PjiKey3)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PJI_KEY3");
            entity.Property(e => e.PjiProdjobId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJI_PRODJOB_ID");
            entity.Property(e => e.PjiStringvalue)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasColumnName("PJI_STRINGVALUE");
            entity.Property(e => e.PjiTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PJI_TCREATION");
            entity.Property(e => e.PjiTimevalue)
                .HasColumnType("DATE")
                .HasColumnName("PJI_TIMEVALUE");
            entity.Property(e => e.PjiTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PJI_TUPDATE");
            entity.Property(e => e.PjiType)
                .HasMaxLength(17)
                .IsUnicode(false)
                .HasColumnName("PJI_TYPE");

            entity.HasOne(d => d.PjiProdjob).WithMany(p => p.JProdjobinfos)
                .HasForeignKey(d => d.PjiProdjobId)
                .HasConstraintName("FK_PRODJOB_PRODJOBINFO");
        });

        modelBuilder.Entity<JProdjobset>(entity =>
        {
            entity.HasKey(e => e.PjsId).HasName("PK_PRODJOBSET");

            entity.ToTable("J_PRODJOBSET", "JITTOE");

            entity.HasIndex(e => e.PjsCompanyId, "I_COMPANY_PRODJOBSET");

            entity.HasIndex(e => e.PjsCounterId, "I_COUNTER_PRODJOBSET");

            entity.HasIndex(e => e.PjsKey, "UN_PJS_KEY").IsUnique();

            entity.Property(e => e.PjsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJS_ID");
            entity.Property(e => e.PjsCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJS_COMPANY_ID");
            entity.Property(e => e.PjsCounterId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PJS_COUNTER_ID");
            entity.Property(e => e.PjsDescr)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PJS_DESCR");
            entity.Property(e => e.PjsKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PJS_KEY");
            entity.Property(e => e.PjsLabeltype)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PJS_LABELTYPE");
            entity.Property(e => e.PjsSheettype)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PJS_SHEETTYPE");
            entity.Property(e => e.PjsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PJS_TCREATION");
            entity.Property(e => e.PjsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PJS_TUPDATE");

            entity.HasOne(d => d.PjsCompany).WithMany(p => p.JProdjobsets)
                .HasForeignKey(d => d.PjsCompanyId)
                .HasConstraintName("FK_COMPANY_PRODJOBSET");

            entity.HasOne(d => d.PjsCounter).WithMany(p => p.JProdjobsets)
                .HasForeignKey(d => d.PjsCounterId)
                .HasConstraintName("FK_COUNTER_PRODJOBSET");
        });

        modelBuilder.Entity<JProdlot>(entity =>
        {
            entity.HasKey(e => e.PltId).HasName("PK_PRODLOT");

            entity.ToTable("J_PRODLOT", "JITTOE");

            entity.HasIndex(e => e.PltProdlotsetId, "I_PRODLOTSET_LOT");

            entity.HasIndex(e => new { e.PltProdlotsetId, e.PltNo, e.PltDeletionid }, "UN_PLT_NO").IsUnique();

            entity.Property(e => e.PltId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PLT_ID");
            entity.Property(e => e.PltDeletionid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PLT_DELETIONID");
            entity.Property(e => e.PltDescr)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("PLT_DESCR");
            entity.Property(e => e.PltInspectionstate)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasDefaultValueSql("'None'  ")
                .HasColumnName("PLT_INSPECTIONSTATE");
            entity.Property(e => e.PltNo)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PLT_NO");
            entity.Property(e => e.PltProdlotsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PLT_PRODLOTSET_ID");
            entity.Property(e => e.PltQualityclass)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PLT_QUALITYCLASS");
            entity.Property(e => e.PltTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PLT_TCREATION");
            entity.Property(e => e.PltTdeletion)
                .HasColumnType("DATE")
                .HasColumnName("PLT_TDELETION");
            entity.Property(e => e.PltTimeclosed)
                .HasColumnType("DATE")
                .HasColumnName("PLT_TIMECLOSED");
            entity.Property(e => e.PltTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PLT_TUPDATE");

            entity.HasOne(d => d.PltProdlotset).WithMany(p => p.JProdlots)
                .HasForeignKey(d => d.PltProdlotsetId)
                .HasConstraintName("FK_PRODLOTSET_LOT");
        });

        modelBuilder.Entity<JProdlotcontainer>(entity =>
        {
            entity.HasKey(e => e.PltcId).HasName("PK_PRODLOTCONTAINER");

            entity.ToTable("J_PRODLOTCONTAINER", "JITTOE");

            entity.HasIndex(e => e.PltcContainerId, "I_CONTAINER_PLCNR");

            entity.HasIndex(e => e.PltcProdlotId, "I_PRODLOT_PLCNR");

            entity.HasIndex(e => new { e.PltcProdlotId, e.PltcContainerId }, "UN_PLTC_CNR").IsUnique();

            entity.Property(e => e.PltcId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PLTC_ID");
            entity.Property(e => e.PltcContainerId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PLTC_CONTAINER_ID");
            entity.Property(e => e.PltcProdlotId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PLTC_PRODLOT_ID");
            entity.Property(e => e.PltcTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PLTC_TCREATION");
            entity.Property(e => e.PltcTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PLTC_TUPDATE");

            entity.HasOne(d => d.PltcContainer).WithMany(p => p.JProdlotcontainers)
                .HasForeignKey(d => d.PltcContainerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTAINER_PLCNR");

            entity.HasOne(d => d.PltcProdlot).WithMany(p => p.JProdlotcontainers)
                .HasForeignKey(d => d.PltcProdlotId)
                .HasConstraintName("FK_PRODLOT_PLCNR");
        });

        modelBuilder.Entity<JProdlotdatum>(entity =>
        {
            entity.HasKey(e => e.PltdId).HasName("PK_PRODLOTDATA");

            entity.ToTable("J_PRODLOTDATA", "JITTOE");

            entity.HasIndex(e => e.PltdProdlotId, "I_PRODLOT_PRODLOTDATA");

            entity.Property(e => e.PltdId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PLTD_ID");
            entity.Property(e => e.PltdKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("PLTD_KEY");
            entity.Property(e => e.PltdProdlotId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PLTD_PRODLOT_ID");
            entity.Property(e => e.PltdTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PLTD_TCREATION");
            entity.Property(e => e.PltdTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PLTD_TUPDATE");
            entity.Property(e => e.PltdType)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("PLTD_TYPE");
            entity.Property(e => e.PltdValue)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasColumnName("PLTD_VALUE");

            entity.HasOne(d => d.PltdProdlot).WithMany(p => p.JProdlotdata)
                .HasForeignKey(d => d.PltdProdlotId)
                .HasConstraintName("FK_PRODLOT_PRODLOTDATA");
        });

        modelBuilder.Entity<JProdlotpart>(entity =>
        {
            entity.HasKey(e => e.PltpId).HasName("PK_PRODLOTPART");

            entity.ToTable("J_PRODLOTPART", "JITTOE");

            entity.HasIndex(e => e.PltpPartId, "I_PART_PLPART");

            entity.HasIndex(e => e.PltpProdlotId, "I_PRODLOT_PLPART");

            entity.HasIndex(e => new { e.PltpProdlotId, e.PltpPartId }, "UN_PLTP_PART").IsUnique();

            entity.Property(e => e.PltpId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PLTP_ID");
            entity.Property(e => e.PltpPartId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PLTP_PART_ID");
            entity.Property(e => e.PltpProdlotId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PLTP_PRODLOT_ID");
            entity.Property(e => e.PltpTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PLTP_TCREATION");
            entity.Property(e => e.PltpTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PLTP_TUPDATE");

            entity.HasOne(d => d.PltpPart).WithMany(p => p.JProdlotparts)
                .HasForeignKey(d => d.PltpPartId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PART_PLPART");

            entity.HasOne(d => d.PltpProdlot).WithMany(p => p.JProdlotparts)
                .HasForeignKey(d => d.PltpProdlotId)
                .HasConstraintName("FK_PRODLOT_PLPART");
        });

        modelBuilder.Entity<JProdlotset>(entity =>
        {
            entity.HasKey(e => e.PltsId).HasName("PK_PRODLOTSET");

            entity.ToTable("J_PRODLOTSET", "JITTOE");

            entity.HasIndex(e => e.PltsCompanyId, "I_COMPANY_PRODLOTSET");

            entity.HasIndex(e => e.PltsCounterId, "I_COUNTER_PRODLOTSET");

            entity.HasIndex(e => e.PltsDoccfgId, "I_DOCCFG_PRODLOTSET");

            entity.HasIndex(e => e.PltsKey, "UN_PLTS_KEY").IsUnique();

            entity.Property(e => e.PltsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PLTS_ID");
            entity.Property(e => e.PltsCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PLTS_COMPANY_ID");
            entity.Property(e => e.PltsCounterId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PLTS_COUNTER_ID");
            entity.Property(e => e.PltsDescr)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("PLTS_DESCR");
            entity.Property(e => e.PltsDoccfgId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PLTS_DOCCFG_ID");
            entity.Property(e => e.PltsEditor)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasDefaultValueSql("'Special'  ")
                .HasColumnName("PLTS_EDITOR");
            entity.Property(e => e.PltsKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PLTS_KEY");
            entity.Property(e => e.PltsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PLTS_TCREATION");
            entity.Property(e => e.PltsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PLTS_TUPDATE");
            entity.Property(e => e.PltsType)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValueSql("'Internal'  ")
                .HasColumnName("PLTS_TYPE");

            entity.HasOne(d => d.PltsCompany).WithMany(p => p.JProdlotsets)
                .HasForeignKey(d => d.PltsCompanyId)
                .HasConstraintName("FK_COMPANY_PRODLOTSET");

            entity.HasOne(d => d.PltsCounter).WithMany(p => p.JProdlotsets)
                .HasForeignKey(d => d.PltsCounterId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COUNTER_PRODLOTSET");

            entity.HasOne(d => d.PltsDoccfg).WithMany(p => p.JProdlotsets)
                .HasForeignKey(d => d.PltsDoccfgId)
                .HasConstraintName("FK_DOCCFG_PRODLOTSET");
        });

        modelBuilder.Entity<JProdnote>(entity =>
        {
            entity.HasKey(e => e.PnId).HasName("PK_PRODNOTE");

            entity.ToTable("J_PRODNOTE", "JITTOE");

            entity.HasIndex(e => e.PnProdjobId, "I_PRODJOB_PRODNOTE");

            entity.HasIndex(e => e.PnProdnotesetId, "I_PRODNOTESET_NOTE");

            entity.HasIndex(e => e.PnProdunitId, "I_PRODUNIT_PRODNOTE");

            entity.HasIndex(e => new { e.PnProdnotesetId, e.PnNo }, "UN_PN_NO").IsUnique();

            entity.Property(e => e.PnId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PN_ID");
            entity.Property(e => e.PnDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PN_DESCR");
            entity.Property(e => e.PnNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PN_NO");
            entity.Property(e => e.PnOpen)
                .HasPrecision(1)
                .HasColumnName("PN_OPEN");
            entity.Property(e => e.PnProdjobId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PN_PRODJOB_ID");
            entity.Property(e => e.PnProdnotesetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PN_PRODNOTESET_ID");
            entity.Property(e => e.PnProdunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PN_PRODUNIT_ID");
            entity.Property(e => e.PnTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PN_TCREATION");
            entity.Property(e => e.PnTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PN_TUPDATE");

            entity.HasOne(d => d.PnProdjob).WithMany(p => p.JProdnotes)
                .HasForeignKey(d => d.PnProdjobId)
                .HasConstraintName("FK_PRODJOB_PRODNOTE");

            entity.HasOne(d => d.PnProdnoteset).WithMany(p => p.JProdnotes)
                .HasForeignKey(d => d.PnProdnotesetId)
                .HasConstraintName("FK_PRODNOTESET_NOTE");

            entity.HasOne(d => d.PnProdunit).WithMany(p => p.JProdnotes)
                .HasForeignKey(d => d.PnProdunitId)
                .HasConstraintName("FK_PRODUNIT_PRODNOTE");
        });

        modelBuilder.Entity<JProdnoteentry>(entity =>
        {
            entity.HasKey(e => e.PneId).HasName("PK_PRODNOTEENTRY");

            entity.ToTable("J_PRODNOTEENTRY", "JITTOE");

            entity.HasIndex(e => e.PneProdjobId, "I_PRODJOB_PNENTRY");

            entity.HasIndex(e => e.PneProdnoteId, "I_PRODNOTE_PNENTRY");

            entity.Property(e => e.PneId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PNE_ID");
            entity.Property(e => e.PneProdjobId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PNE_PRODJOB_ID");
            entity.Property(e => e.PneProdnoteId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PNE_PRODNOTE_ID");
            entity.Property(e => e.PneTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PNE_TCREATION");
            entity.Property(e => e.PneTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PNE_TUPDATE");

            entity.HasOne(d => d.PneProdjob).WithMany(p => p.JProdnoteentries)
                .HasForeignKey(d => d.PneProdjobId)
                .HasConstraintName("FK_PRODJOB_PNENTRY");

            entity.HasOne(d => d.PneProdnote).WithMany(p => p.JProdnoteentries)
                .HasForeignKey(d => d.PneProdnoteId)
                .HasConstraintName("FK_PRODNOTE_PNENTRY");
        });

        modelBuilder.Entity<JProdnoteset>(entity =>
        {
            entity.HasKey(e => e.PnsId).HasName("PK_PRODNOTESET");

            entity.ToTable("J_PRODNOTESET", "JITTOE");

            entity.HasIndex(e => e.PnsCompanyId, "I_COMPANY_PRODNOTESET");

            entity.HasIndex(e => e.PnsCounterId, "I_COUNTER_PRODNOTESET");

            entity.HasIndex(e => e.PnsDoccfgId, "I_DOCCFG_PRODNOTESET");

            entity.HasIndex(e => e.PnsKey, "UN_PNS_KEY").IsUnique();

            entity.Property(e => e.PnsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PNS_ID");
            entity.Property(e => e.PnsCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PNS_COMPANY_ID");
            entity.Property(e => e.PnsCounterId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PNS_COUNTER_ID");
            entity.Property(e => e.PnsDescr)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PNS_DESCR");
            entity.Property(e => e.PnsDoccfgId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PNS_DOCCFG_ID");
            entity.Property(e => e.PnsKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PNS_KEY");
            entity.Property(e => e.PnsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PNS_TCREATION");
            entity.Property(e => e.PnsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PNS_TUPDATE");

            entity.HasOne(d => d.PnsCompany).WithMany(p => p.JProdnotesets)
                .HasForeignKey(d => d.PnsCompanyId)
                .HasConstraintName("FK_COMPANY_PRODNOTESET");

            entity.HasOne(d => d.PnsCounter).WithMany(p => p.JProdnotesets)
                .HasForeignKey(d => d.PnsCounterId)
                .HasConstraintName("FK_COUNTER_PRODNOTESET");

            entity.HasOne(d => d.PnsDoccfg).WithMany(p => p.JProdnotesets)
                .HasForeignKey(d => d.PnsDoccfgId)
                .HasConstraintName("FK_DOCCFG_PRODNOTESET");
        });

        modelBuilder.Entity<JProdplan>(entity =>
        {
            entity.HasKey(e => e.PplId).HasName("PK_PRODPLAN");

            entity.ToTable("J_PRODPLAN", "JITTOE");

            entity.HasIndex(e => e.PplContractId, "I_CONTRACT_PRODPLAN");

            entity.HasIndex(e => e.PplProdplansetId, "I_PRODPLANSET_PRODPLAN");

            entity.HasIndex(e => e.PplProdplantypeId, "I_PRODPLANTYPE_PRODPLAN");

            entity.HasIndex(e => e.PplProdunitId, "I_PRODUNIT_PRODPLAN");

            entity.HasIndex(e => e.PplKey, "UN_PPL_KEY").IsUnique();

            entity.HasIndex(e => new { e.PplShortname, e.PplProdplansetId, e.PplProdunitId }, "UN_PPL_SHORTNAME").IsUnique();

            entity.Property(e => e.PplId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPL_ID");
            entity.Property(e => e.PplContractId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPL_CONTRACT_ID");
            entity.Property(e => e.PplDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PPL_DESCR");
            entity.Property(e => e.PplEditor)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasDefaultValueSql("'Special'  ")
                .HasColumnName("PPL_EDITOR");
            entity.Property(e => e.PplKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PPL_KEY");
            entity.Property(e => e.PplProdplansetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPL_PRODPLANSET_ID");
            entity.Property(e => e.PplProdplantypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPL_PRODPLANTYPE_ID");
            entity.Property(e => e.PplProdunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPL_PRODUNIT_ID");
            entity.Property(e => e.PplScheduledtime)
                .HasColumnType("DATE")
                .HasColumnName("PPL_SCHEDULEDTIME");
            entity.Property(e => e.PplShortname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PPL_SHORTNAME");
            entity.Property(e => e.PplState)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasDefaultValueSql("'Available'  ")
                .HasColumnName("PPL_STATE");
            entity.Property(e => e.PplTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PPL_TCREATION");
            entity.Property(e => e.PplTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PPL_TUPDATE");

            entity.HasOne(d => d.PplContract).WithMany(p => p.JProdplans)
                .HasForeignKey(d => d.PplContractId)
                .HasConstraintName("FK_CONTRACT_PRODPLAN");

            entity.HasOne(d => d.PplProdplanset).WithMany(p => p.JProdplans)
                .HasForeignKey(d => d.PplProdplansetId)
                .HasConstraintName("FK_PRODPLANSET_PRODPLAN");

            entity.HasOne(d => d.PplProdplantype).WithMany(p => p.JProdplans)
                .HasForeignKey(d => d.PplProdplantypeId)
                .HasConstraintName("FK_PRODPLANTYPE_PRODPLAN");

            entity.HasOne(d => d.PplProdunit).WithMany(p => p.JProdplans)
                .HasForeignKey(d => d.PplProdunitId)
                .HasConstraintName("FK_PRODUNIT_PRODPLAN");
        });

        modelBuilder.Entity<JProdplanentry>(entity =>
        {
            entity.HasKey(e => e.PpleId).HasName("PK_PRODPLANENTRY");

            entity.ToTable("J_PRODPLANENTRY", "JITTOE");

            entity.HasIndex(e => e.PpleContractId, "I_CONTRACT_PPENTRY");

            entity.HasIndex(e => e.PpleOrderentryId, "I_ORDERENTRY_PPENTRY");

            entity.HasIndex(e => e.PpleOrderId, "I_ORDER_PPENTRY");

            entity.HasIndex(e => e.PpleProdplanentrytypeId, "I_PPENTRYTYPE_PPENTRY");

            entity.HasIndex(e => e.PpleProdplanId, "I_PRODPLAN_PPENTRY");

            entity.HasIndex(e => e.PpleProdtoolusageId, "I_PRODTOOLUSAGE_PPENTRY");

            entity.HasIndex(e => e.PpleSubjectId, "I_SUBJECT_PPENTRY");

            entity.HasIndex(e => new { e.PpleProdplanId, e.PplePos }, "UN_PPLE_POS").IsUnique();

            entity.Property(e => e.PpleId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPLE_ID");
            entity.Property(e => e.PpleContractId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPLE_CONTRACT_ID");
            entity.Property(e => e.PpleInfo1)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("PPLE_INFO1");
            entity.Property(e => e.PpleInfo2)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("PPLE_INFO2");
            entity.Property(e => e.PpleOrderId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPLE_ORDER_ID");
            entity.Property(e => e.PpleOrderentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPLE_ORDERENTRY_ID");
            entity.Property(e => e.PplePlannedbreakinsec)
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("PPLE_PLANNEDBREAKINSEC");
            entity.Property(e => e.PplePlanneddurationinsec)
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("PPLE_PLANNEDDURATIONINSEC");
            entity.Property(e => e.PplePlannedsetuptimeinsec)
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("PPLE_PLANNEDSETUPTIMEINSEC");
            entity.Property(e => e.PplePlannedstarttime)
                .HasColumnType("DATE")
                .HasColumnName("PPLE_PLANNEDSTARTTIME");
            entity.Property(e => e.PplePlannedteardowntimeinsec)
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("PPLE_PLANNEDTEARDOWNTIMEINSEC");
            entity.Property(e => e.PplePos)
                .HasPrecision(5)
                .HasColumnName("PPLE_POS");
            entity.Property(e => e.PpleProdplanId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPLE_PRODPLAN_ID");
            entity.Property(e => e.PpleProdplanentrytypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPLE_PRODPLANENTRYTYPE_ID");
            entity.Property(e => e.PpleProdtoolusageId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPLE_PRODTOOLUSAGE_ID");
            entity.Property(e => e.PpleQuantity)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("PPLE_QUANTITY");
            entity.Property(e => e.PpleState)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("PPLE_STATE");
            entity.Property(e => e.PpleSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPLE_SUBJECT_ID");
            entity.Property(e => e.PpleTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PPLE_TCREATION");
            entity.Property(e => e.PpleTimecompleted)
                .HasColumnType("DATE")
                .HasColumnName("PPLE_TIMECOMPLETED");
            entity.Property(e => e.PpleTimestarted)
                .HasColumnType("DATE")
                .HasColumnName("PPLE_TIMESTARTED");
            entity.Property(e => e.PpleTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PPLE_TUPDATE");

            entity.HasOne(d => d.PpleContract).WithMany(p => p.JProdplanentries)
                .HasForeignKey(d => d.PpleContractId)
                .HasConstraintName("FK_CONTRACT_PPENTRY");

            entity.HasOne(d => d.PpleOrder).WithMany(p => p.JProdplanentries)
                .HasForeignKey(d => d.PpleOrderId)
                .HasConstraintName("FK_ORDER_PPENTRY");

            entity.HasOne(d => d.PpleOrderentry).WithMany(p => p.JProdplanentries)
                .HasForeignKey(d => d.PpleOrderentryId)
                .HasConstraintName("FK_ORDERENTRY_PPENTRY");

            entity.HasOne(d => d.PpleProdplan).WithMany(p => p.JProdplanentries)
                .HasForeignKey(d => d.PpleProdplanId)
                .HasConstraintName("FK_PRODPLAN_PPENTRY");

            entity.HasOne(d => d.PpleProdplanentrytype).WithMany(p => p.JProdplanentries)
                .HasForeignKey(d => d.PpleProdplanentrytypeId)
                .HasConstraintName("FK_PPENTRYTYPE_PPENTRY");

            entity.HasOne(d => d.PpleProdtoolusage).WithMany(p => p.JProdplanentries)
                .HasForeignKey(d => d.PpleProdtoolusageId)
                .HasConstraintName("FK_PRODTOOLUSAGE_PPENTRY");

            entity.HasOne(d => d.PpleSubject).WithMany(p => p.JProdplanentries)
                .HasForeignKey(d => d.PpleSubjectId)
                .HasConstraintName("FK_SUBJECT_PPENTRY");
        });

        modelBuilder.Entity<JProdplanentryelem>(entity =>
        {
            entity.HasKey(e => e.PpleeId).HasName("PK_PRODPLANENTRYELEM");

            entity.ToTable("J_PRODPLANENTRYELEM", "JITTOE");

            entity.HasIndex(e => e.PpleeContractorderId, "I_CORDER_PPENTRYITEM");

            entity.HasIndex(e => e.PpleeFailurereasonId, "I_FREASON_PPENTRYITEM");

            entity.HasIndex(e => e.PpleeTolocationId, "I_LOCATION_PPENTRYITEM");

            entity.HasIndex(e => e.PpleeOrderentryId, "I_ORDERENTRY_PPENTRYITEM");

            entity.HasIndex(e => e.PpleeProdplanentryId, "I_PPENTRY_PPENTRYITEM");

            entity.HasIndex(e => e.PpleeProdtoolusageelemId, "I_PTUELEM_PPENTRYITEM");

            entity.HasIndex(e => e.PpleeReforderentryId, "I_REFORDERENTRY_PPENTRYITEM");

            entity.HasIndex(e => e.PpleeSubjectId, "I_SUBJECT_PPENTRYITEM");

            entity.Property(e => e.PpleeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPLEE_ID");
            entity.Property(e => e.PpleeContractorderId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPLEE_CONTRACTORDER_ID");
            entity.Property(e => e.PpleeFailurereasonId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPLEE_FAILUREREASON_ID");
            entity.Property(e => e.PpleeOrderentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPLEE_ORDERENTRY_ID");
            entity.Property(e => e.PpleePlannedqualityclass)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("'IO'  ")
                .HasColumnName("PPLEE_PLANNEDQUALITYCLASS");
            entity.Property(e => e.PpleeProdplanentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPLEE_PRODPLANENTRY_ID");
            entity.Property(e => e.PpleeProdtoolusageelemId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPLEE_PRODTOOLUSAGEELEM_ID");
            entity.Property(e => e.PpleeProducedquantity)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("PPLEE_PRODUCEDQUANTITY");
            entity.Property(e => e.PpleeQuantity)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("PPLEE_QUANTITY");
            entity.Property(e => e.PpleeReforderentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPLEE_REFORDERENTRY_ID");
            entity.Property(e => e.PpleeScrapquantity)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("PPLEE_SCRAPQUANTITY");
            entity.Property(e => e.PpleeSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPLEE_SUBJECT_ID");
            entity.Property(e => e.PpleeTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PPLEE_TCREATION");
            entity.Property(e => e.PpleeTolocationId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPLEE_TOLOCATION_ID");
            entity.Property(e => e.PpleeTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PPLEE_TUPDATE");

            entity.HasOne(d => d.PpleeContractorder).WithMany(p => p.JProdplanentryelems)
                .HasForeignKey(d => d.PpleeContractorderId)
                .HasConstraintName("FK_CORDER_PPENTRYITEM");

            entity.HasOne(d => d.PpleeFailurereason).WithMany(p => p.JProdplanentryelems)
                .HasForeignKey(d => d.PpleeFailurereasonId)
                .HasConstraintName("FK_FREASON_PPENTRYITEM");

            entity.HasOne(d => d.PpleeOrderentry).WithMany(p => p.JProdplanentryelemPpleeOrderentries)
                .HasForeignKey(d => d.PpleeOrderentryId)
                .HasConstraintName("FK_ORDERENTRY_PPENTRYITEM");

            entity.HasOne(d => d.PpleeProdplanentry).WithMany(p => p.JProdplanentryelems)
                .HasForeignKey(d => d.PpleeProdplanentryId)
                .HasConstraintName("FK_PPENTRY_PPENTRYITEM");

            entity.HasOne(d => d.PpleeProdtoolusageelem).WithMany(p => p.JProdplanentryelems)
                .HasForeignKey(d => d.PpleeProdtoolusageelemId)
                .HasConstraintName("FK_PTUELEM_PPENTRYITEM");

            entity.HasOne(d => d.PpleeReforderentry).WithMany(p => p.JProdplanentryelemPpleeReforderentries)
                .HasForeignKey(d => d.PpleeReforderentryId)
                .HasConstraintName("FK_REFORDERENTRY_PPENTRYITEM");

            entity.HasOne(d => d.PpleeSubject).WithMany(p => p.JProdplanentryelems)
                .HasForeignKey(d => d.PpleeSubjectId)
                .HasConstraintName("FK_SUBJECT_PPENTRYITEM");

            entity.HasOne(d => d.PpleeTolocation).WithMany(p => p.JProdplanentryelems)
                .HasForeignKey(d => d.PpleeTolocationId)
                .HasConstraintName("FK_LOCATION_PPENTRYITEM");
        });

        modelBuilder.Entity<JProdplanentrytype>(entity =>
        {
            entity.HasKey(e => e.PpletId).HasName("PK_PRODPLANENTRYTYPE");

            entity.ToTable("J_PRODPLANENTRYTYPE", "JITTOE");

            entity.HasIndex(e => e.PpletProdplantypeId, "I_PPTYPE_PPENTRYTYPE");

            entity.HasIndex(e => e.PpletKey, "UN_PPLET_KEY").IsUnique();

            entity.HasIndex(e => new { e.PpletShortname, e.PpletProdplantypeId }, "UN_PPLET_SHORTNAME").IsUnique();

            entity.Property(e => e.PpletId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPLET_ID");
            entity.Property(e => e.PpletDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PPLET_DESCR");
            entity.Property(e => e.PpletEnabled)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("1  ")
                .HasColumnName("PPLET_ENABLED");
            entity.Property(e => e.PpletKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PPLET_KEY");
            entity.Property(e => e.PpletProdplantypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPLET_PRODPLANTYPE_ID");
            entity.Property(e => e.PpletShortname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PPLET_SHORTNAME");
            entity.Property(e => e.PpletTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PPLET_TCREATION");
            entity.Property(e => e.PpletTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PPLET_TUPDATE");

            entity.HasOne(d => d.PpletProdplantype).WithMany(p => p.JProdplanentrytypes)
                .HasForeignKey(d => d.PpletProdplantypeId)
                .HasConstraintName("FK_PPTYPE_PPENTRYTYPE");
        });

        modelBuilder.Entity<JProdplanentrytypeelem>(entity =>
        {
            entity.HasKey(e => e.PpleteId).HasName("PK_PRODPLANENTRYTYPEELEM");

            entity.ToTable("J_PRODPLANENTRYTYPEELEM", "JITTOE");

            entity.HasIndex(e => e.PpleteProdplanentrytypeId, "I_PPETYPE_PPETYPEELEM");

            entity.HasIndex(e => e.PpleteSubjectId, "I_SUBJECT_PPETYPEELEM");

            entity.Property(e => e.PpleteId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPLETE_ID");
            entity.Property(e => e.PpleteProdplanentrytypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPLETE_PRODPLANENTRYTYPE_ID");
            entity.Property(e => e.PpleteQuantity)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("PPLETE_QUANTITY");
            entity.Property(e => e.PpleteSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPLETE_SUBJECT_ID");
            entity.Property(e => e.PpleteTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PPLETE_TCREATION");
            entity.Property(e => e.PpleteTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PPLETE_TUPDATE");

            entity.HasOne(d => d.PpleteProdplanentrytype).WithMany(p => p.JProdplanentrytypeelems)
                .HasForeignKey(d => d.PpleteProdplanentrytypeId)
                .HasConstraintName("FK_PPETYPE_PPETYPEELEM");

            entity.HasOne(d => d.PpleteSubject).WithMany(p => p.JProdplanentrytypeelems)
                .HasForeignKey(d => d.PpleteSubjectId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SUBJECT_PPETYPEELEM");
        });

        modelBuilder.Entity<JProdplanentrytypeinfo>(entity =>
        {
            entity.HasKey(e => e.PpletiId).HasName("PK_PRODPLANENTRYTYPEINFO");

            entity.ToTable("J_PRODPLANENTRYTYPEINFO", "JITTOE");

            entity.HasIndex(e => e.PpletiProdplanentrytypeId, "I_PPETYPE_PPETYPEINFO");

            entity.HasIndex(e => new { e.PpletiProdplanentrytypeId, e.PpletiType, e.PpletiKey1, e.PpletiKey2, e.PpletiKey3 }, "UN_PPLETI_INFO").IsUnique();

            entity.Property(e => e.PpletiId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPLETI_ID");
            entity.Property(e => e.PpletiKey1)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("PPLETI_KEY1");
            entity.Property(e => e.PpletiKey2)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("PPLETI_KEY2");
            entity.Property(e => e.PpletiKey3)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("PPLETI_KEY3");
            entity.Property(e => e.PpletiProdplanentrytypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPLETI_PRODPLANENTRYTYPE_ID");
            entity.Property(e => e.PpletiStringvalue)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("PPLETI_STRINGVALUE");
            entity.Property(e => e.PpletiTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PPLETI_TCREATION");
            entity.Property(e => e.PpletiTimevalue)
                .HasColumnType("DATE")
                .HasColumnName("PPLETI_TIMEVALUE");
            entity.Property(e => e.PpletiTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PPLETI_TUPDATE");
            entity.Property(e => e.PpletiType)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("PPLETI_TYPE");

            entity.HasOne(d => d.PpletiProdplanentrytype).WithMany(p => p.JProdplanentrytypeinfos)
                .HasForeignKey(d => d.PpletiProdplanentrytypeId)
                .HasConstraintName("FK_PPETYPE_PPETYPEINFO");
        });

        modelBuilder.Entity<JProdplanset>(entity =>
        {
            entity.HasKey(e => e.PplsId).HasName("PK_PRODPLANSET");

            entity.ToTable("J_PRODPLANSET", "JITTOE");

            entity.HasIndex(e => e.PplsCompanyId, "I_COMPANY_PRODPLANSET");

            entity.HasIndex(e => e.PplsKey, "UN_PPLS_KEY").IsUnique();

            entity.Property(e => e.PplsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPLS_ID");
            entity.Property(e => e.PplsCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPLS_COMPANY_ID");
            entity.Property(e => e.PplsDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PPLS_DESCR");
            entity.Property(e => e.PplsKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PPLS_KEY");
            entity.Property(e => e.PplsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PPLS_TCREATION");
            entity.Property(e => e.PplsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PPLS_TUPDATE");

            entity.HasOne(d => d.PplsCompany).WithMany(p => p.JProdplansets)
                .HasForeignKey(d => d.PplsCompanyId)
                .HasConstraintName("FK_COMPANY_PRODPLANSET");
        });

        modelBuilder.Entity<JProdplantype>(entity =>
        {
            entity.HasKey(e => e.PpltId).HasName("PK_PRODPLANTYPE");

            entity.ToTable("J_PRODPLANTYPE", "JITTOE");

            entity.HasIndex(e => e.PpltProdplantypesetId, "I_PPTYPESET_PPTYPE");

            entity.HasIndex(e => e.PpltKey, "UN_PPLT_KEY").IsUnique();

            entity.HasIndex(e => new { e.PpltShortname, e.PpltProdplantypesetId }, "UN_PPLT_SHORTNAME").IsUnique();

            entity.Property(e => e.PpltId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPLT_ID");
            entity.Property(e => e.PpltDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PPLT_DESCR");
            entity.Property(e => e.PpltKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PPLT_KEY");
            entity.Property(e => e.PpltProdplantypesetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPLT_PRODPLANTYPESET_ID");
            entity.Property(e => e.PpltShortname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PPLT_SHORTNAME");
            entity.Property(e => e.PpltTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PPLT_TCREATION");
            entity.Property(e => e.PpltTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PPLT_TUPDATE");

            entity.HasOne(d => d.PpltProdplantypeset).WithMany(p => p.JProdplantypes)
                .HasForeignKey(d => d.PpltProdplantypesetId)
                .HasConstraintName("FK_PPTYPESET_PPTYPE");
        });

        modelBuilder.Entity<JProdplantypeinfo>(entity =>
        {
            entity.HasKey(e => e.PpltiId).HasName("PK_PRODPLANTYPEINFO");

            entity.ToTable("J_PRODPLANTYPEINFO", "JITTOE");

            entity.HasIndex(e => e.PpltiProdplantypeId, "I_PPTYPE_PPTYPEINFO");

            entity.HasIndex(e => new { e.PpltiProdplantypeId, e.PpltiType, e.PpltiKey1, e.PpltiKey2, e.PpltiKey3 }, "UN_PPLTI_INFO").IsUnique();

            entity.Property(e => e.PpltiId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPLTI_ID");
            entity.Property(e => e.PpltiKey1)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("PPLTI_KEY1");
            entity.Property(e => e.PpltiKey2)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("PPLTI_KEY2");
            entity.Property(e => e.PpltiKey3)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("PPLTI_KEY3");
            entity.Property(e => e.PpltiProdplantypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPLTI_PRODPLANTYPE_ID");
            entity.Property(e => e.PpltiStringvalue)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("PPLTI_STRINGVALUE");
            entity.Property(e => e.PpltiTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PPLTI_TCREATION");
            entity.Property(e => e.PpltiTimevalue)
                .HasColumnType("DATE")
                .HasColumnName("PPLTI_TIMEVALUE");
            entity.Property(e => e.PpltiTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PPLTI_TUPDATE");
            entity.Property(e => e.PpltiType)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("PPLTI_TYPE");

            entity.HasOne(d => d.PpltiProdplantype).WithMany(p => p.JProdplantypeinfos)
                .HasForeignKey(d => d.PpltiProdplantypeId)
                .HasConstraintName("FK_PPTYPE_PPTYPEINFO");
        });

        modelBuilder.Entity<JProdplantypeset>(entity =>
        {
            entity.HasKey(e => e.PpltsId).HasName("PK_PRODPLANTYPESET");

            entity.ToTable("J_PRODPLANTYPESET", "JITTOE");

            entity.HasIndex(e => e.PpltsCompanyId, "I_COMPANY_PPTYPESET");

            entity.HasIndex(e => e.PpltsKey, "UN_PPLTS_KEY").IsUnique();

            entity.Property(e => e.PpltsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPLTS_ID");
            entity.Property(e => e.PpltsCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PPLTS_COMPANY_ID");
            entity.Property(e => e.PpltsDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PPLTS_DESCR");
            entity.Property(e => e.PpltsKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PPLTS_KEY");
            entity.Property(e => e.PpltsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PPLTS_TCREATION");
            entity.Property(e => e.PpltsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PPLTS_TUPDATE");

            entity.HasOne(d => d.PpltsCompany).WithMany(p => p.JProdplantypesets)
                .HasForeignKey(d => d.PpltsCompanyId)
                .HasConstraintName("FK_COMPANY_PPTYPESET");
        });

        modelBuilder.Entity<JProdreplenishmentcfg>(entity =>
        {
            entity.HasKey(e => e.PrcfId).HasName("PK_PRODREPLENISHMENTCFG");

            entity.ToTable("J_PRODREPLENISHMENTCFG", "JITTOE");

            entity.HasIndex(e => e.PrcfDeststockId, "I_DESTSTOCK_PRCFG");

            entity.HasIndex(e => e.PrcfPrcfgsetId, "I_PRCFGSET_PRCFG");

            entity.HasIndex(e => e.PrcfProdunitId, "I_PRODUNIT_PRCFG");

            entity.HasIndex(e => e.PrcfSourcestockId, "I_SOURCESTOCK_PRCFG");

            entity.HasIndex(e => e.PrcfSubjectId, "I_SUBJECT_PRCFG");

            entity.HasIndex(e => new { e.PrcfCode, e.PrcfDeletionid }, "UN_PRCF_CODE").IsUnique();

            entity.Property(e => e.PrcfId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRCF_ID");
            entity.Property(e => e.PrcfCode)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("PRCF_CODE");
            entity.Property(e => e.PrcfDeletionid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRCF_DELETIONID");
            entity.Property(e => e.PrcfDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PRCF_DESCR");
            entity.Property(e => e.PrcfDestcode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PRCF_DESTCODE");
            entity.Property(e => e.PrcfDestinationdescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PRCF_DESTINATIONDESCR");
            entity.Property(e => e.PrcfDeststockId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRCF_DESTSTOCK_ID");
            entity.Property(e => e.PrcfPrcfgsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRCF_PRCFGSET_ID");
            entity.Property(e => e.PrcfProdunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRCF_PRODUNIT_ID");
            entity.Property(e => e.PrcfQualifier)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PRCF_QUALIFIER");
            entity.Property(e => e.PrcfQuantity)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("PRCF_QUANTITY");
            entity.Property(e => e.PrcfSensorcode)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("PRCF_SENSORCODE");
            entity.Property(e => e.PrcfSheetdoccfgitemrole)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PRCF_SHEETDOCCFGITEMROLE");
            entity.Property(e => e.PrcfSourcecode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PRCF_SOURCECODE");
            entity.Property(e => e.PrcfSourcedescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PRCF_SOURCEDESCR");
            entity.Property(e => e.PrcfSourcereservation)
                .HasMaxLength(23)
                .IsUnicode(false)
                .HasColumnName("PRCF_SOURCERESERVATION");
            entity.Property(e => e.PrcfSourcestockId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRCF_SOURCESTOCK_ID");
            entity.Property(e => e.PrcfStrategy)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("PRCF_STRATEGY");
            entity.Property(e => e.PrcfSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRCF_SUBJECT_ID");
            entity.Property(e => e.PrcfTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PRCF_TCREATION");
            entity.Property(e => e.PrcfTdeletion)
                .HasColumnType("DATE")
                .HasColumnName("PRCF_TDELETION");
            entity.Property(e => e.PrcfTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PRCF_TUPDATE");

            entity.HasOne(d => d.PrcfDeststock).WithMany(p => p.JProdreplenishmentcfgPrcfDeststocks)
                .HasForeignKey(d => d.PrcfDeststockId)
                .HasConstraintName("FK_DESTSTOCK_PRCFG");

            entity.HasOne(d => d.PrcfPrcfgset).WithMany(p => p.JProdreplenishmentcfgs)
                .HasForeignKey(d => d.PrcfPrcfgsetId)
                .HasConstraintName("FK_PRCFGSET_PRCFG");

            entity.HasOne(d => d.PrcfProdunit).WithMany(p => p.JProdreplenishmentcfgs)
                .HasForeignKey(d => d.PrcfProdunitId)
                .HasConstraintName("FK_PRODUNIT_PRCFG");

            entity.HasOne(d => d.PrcfSourcestock).WithMany(p => p.JProdreplenishmentcfgPrcfSourcestocks)
                .HasForeignKey(d => d.PrcfSourcestockId)
                .HasConstraintName("FK_SOURCESTOCK_PRCFG");

            entity.HasOne(d => d.PrcfSubject).WithMany(p => p.JProdreplenishmentcfgs)
                .HasForeignKey(d => d.PrcfSubjectId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SUBJECT_PRCFG");
        });

        modelBuilder.Entity<JProdreplenishmentcfgset>(entity =>
        {
            entity.HasKey(e => e.PrcfsId).HasName("PK_PRODREPLENISHMENTCFGSET");

            entity.ToTable("J_PRODREPLENISHMENTCFGSET", "JITTOE");

            entity.HasIndex(e => e.PrcfsCompanyId, "I_COMPANY_PRCFGSET");

            entity.HasIndex(e => e.PrcfsKey, "UN_PRCFS_KEY").IsUnique();

            entity.Property(e => e.PrcfsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRCFS_ID");
            entity.Property(e => e.PrcfsCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRCFS_COMPANY_ID");
            entity.Property(e => e.PrcfsDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PRCFS_DESCR");
            entity.Property(e => e.PrcfsKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PRCFS_KEY");
            entity.Property(e => e.PrcfsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PRCFS_TCREATION");
            entity.Property(e => e.PrcfsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PRCFS_TUPDATE");

            entity.HasOne(d => d.PrcfsCompany).WithMany(p => p.JProdreplenishmentcfgsets)
                .HasForeignKey(d => d.PrcfsCompanyId)
                .HasConstraintName("FK_COMPANY_PRCFGSET");
        });

        modelBuilder.Entity<JProdstat>(entity =>
        {
            entity.HasKey(e => e.PstId).HasName("PK_PRODSTAT");

            entity.ToTable("J_PRODSTAT", "JITTOE");

            entity.HasIndex(e => e.PstProdstatsetId, "I_PRODSTATSET_PRODSTAT");

            entity.HasIndex(e => e.PstProdunitId, "I_PRODUNIT_PRODSTAT");

            entity.HasIndex(e => e.PstSubjectclassId, "I_SUBJECTCLASS_PRODSTAT");

            entity.Property(e => e.PstId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PST_ID");
            entity.Property(e => e.PstDowntimeinsec)
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("PST_DOWNTIMEINSEC");
            entity.Property(e => e.PstFromtime)
                .HasColumnType("DATE")
                .HasColumnName("PST_FROMTIME");
            entity.Property(e => e.PstGoodquantity)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("PST_GOODQUANTITY");
            entity.Property(e => e.PstMaxquantity)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("PST_MAXQUANTITY");
            entity.Property(e => e.PstPlannedtimeinsec)
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("PST_PLANNEDTIMEINSEC");
            entity.Property(e => e.PstProdstatsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PST_PRODSTATSET_ID");
            entity.Property(e => e.PstProducedquantity)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("PST_PRODUCEDQUANTITY");
            entity.Property(e => e.PstProdunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PST_PRODUNIT_ID");
            entity.Property(e => e.PstSubjectclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PST_SUBJECTCLASS_ID");
            entity.Property(e => e.PstTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PST_TCREATION");
            entity.Property(e => e.PstTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PST_TUPDATE");
            entity.Property(e => e.PstUntiltime)
                .HasColumnType("DATE")
                .HasColumnName("PST_UNTILTIME");

            entity.HasOne(d => d.PstProdstatset).WithMany(p => p.JProdstats)
                .HasForeignKey(d => d.PstProdstatsetId)
                .HasConstraintName("FK_PRODSTATSET_PRODSTAT");

            entity.HasOne(d => d.PstProdunit).WithMany(p => p.JProdstats)
                .HasForeignKey(d => d.PstProdunitId)
                .HasConstraintName("FK_PRODUNIT_PRODSTAT");

            entity.HasOne(d => d.PstSubjectclass).WithMany(p => p.JProdstats)
                .HasForeignKey(d => d.PstSubjectclassId)
                .HasConstraintName("FK_SUBJECTCLASS_PRODSTAT");
        });

        modelBuilder.Entity<JProdstatset>(entity =>
        {
            entity.HasKey(e => e.PstsId).HasName("PK_PRODSTATSET");

            entity.ToTable("J_PRODSTATSET", "JITTOE");

            entity.HasIndex(e => e.PstsCompanyId, "I_COMPANY_PRODSTATSET");

            entity.HasIndex(e => e.PstsKey, "UN_PSTS_KEY").IsUnique();

            entity.Property(e => e.PstsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PSTS_ID");
            entity.Property(e => e.PstsCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PSTS_COMPANY_ID");
            entity.Property(e => e.PstsDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PSTS_DESCR");
            entity.Property(e => e.PstsKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PSTS_KEY");
            entity.Property(e => e.PstsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PSTS_TCREATION");
            entity.Property(e => e.PstsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PSTS_TUPDATE");

            entity.HasOne(d => d.PstsCompany).WithMany(p => p.JProdstatsets)
                .HasForeignKey(d => d.PstsCompanyId)
                .HasConstraintName("FK_COMPANY_PRODSTATSET");
        });

        modelBuilder.Entity<JProdstep>(entity =>
        {
            entity.HasKey(e => e.PrsId).HasName("PK_PRODSTEP");

            entity.ToTable("J_PRODSTEP", "JITTOE");

            entity.HasIndex(e => e.PrsDoccfgId, "I_DOCCFG_PRODSTEP");

            entity.HasIndex(e => e.PrsEdicfgId, "I_EDICFG_PRODSTEP");

            entity.HasIndex(e => e.PrsFreasonsetId, "I_FREASONSET_PRODSTEP");

            entity.HasIndex(e => e.PrsProdstepsetId, "I_PRODSTEPSET_PRODSTEP");

            entity.HasIndex(e => new { e.PrsProdstepsetId, e.PrsCode }, "UN_PRS_CODE").IsUnique();

            entity.HasIndex(e => e.PrsKey, "UN_PRS_KEY").IsUnique();

            entity.Property(e => e.PrsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRS_ID");
            entity.Property(e => e.PrsAltlabeltype)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("PRS_ALTLABELTYPE");
            entity.Property(e => e.PrsCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PRS_CODE");
            entity.Property(e => e.PrsDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PRS_DESCR");
            entity.Property(e => e.PrsDoccfgId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRS_DOCCFG_ID");
            entity.Property(e => e.PrsDohandlestock)
                .HasPrecision(1)
                .HasColumnName("PRS_DOHANDLESTOCK");
            entity.Property(e => e.PrsEdicfgId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRS_EDICFG_ID");
            entity.Property(e => e.PrsFreasonsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRS_FREASONSET_ID");
            entity.Property(e => e.PrsKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PRS_KEY");
            entity.Property(e => e.PrsKind)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PRS_KIND");
            entity.Property(e => e.PrsLabeltype)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("PRS_LABELTYPE");
            entity.Property(e => e.PrsProdstepsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRS_PRODSTEPSET_ID");
            entity.Property(e => e.PrsShortdescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PRS_SHORTDESCR");
            entity.Property(e => e.PrsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PRS_TCREATION");

            entity.HasOne(d => d.PrsDoccfg).WithMany(p => p.JProdsteps)
                .HasForeignKey(d => d.PrsDoccfgId)
                .HasConstraintName("FK_DOCCFG_PRODSTEP");

            entity.HasOne(d => d.PrsEdicfg).WithMany(p => p.JProdsteps)
                .HasForeignKey(d => d.PrsEdicfgId)
                .HasConstraintName("FK_EDICFG_PRODSTEP");

            entity.HasOne(d => d.PrsFreasonset).WithMany(p => p.JProdsteps)
                .HasForeignKey(d => d.PrsFreasonsetId)
                .HasConstraintName("FK_FREASONSET_PRODSTEP");

            entity.HasOne(d => d.PrsProdstepset).WithMany(p => p.JProdsteps)
                .HasForeignKey(d => d.PrsProdstepsetId)
                .HasConstraintName("FK_PRODSTEPSET_PRODSTEP");
        });

        modelBuilder.Entity<JProdstepclass>(entity =>
        {
            entity.HasKey(e => e.PrsclId).HasName("PK_PRODSTEPCLASS");

            entity.ToTable("J_PRODSTEPCLASS", "JITTOE");

            entity.HasIndex(e => e.PrsclCompanyId, "I_COMPANY_PRODSTEPCLASS");

            entity.HasIndex(e => e.PrsclKey, "UN_PRSCL_KEY").IsUnique();

            entity.Property(e => e.PrsclId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRSCL_ID");
            entity.Property(e => e.PrsclCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRSCL_COMPANY_ID");
            entity.Property(e => e.PrsclDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PRSCL_DESCR");
            entity.Property(e => e.PrsclKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PRSCL_KEY");
            entity.Property(e => e.PrsclTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PRSCL_TCREATION");
            entity.Property(e => e.PrsclTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PRSCL_TUPDATE");

            entity.HasOne(d => d.PrsclCompany).WithMany(p => p.JProdstepclasses)
                .HasForeignKey(d => d.PrsclCompanyId)
                .HasConstraintName("FK_COMPANY_PRODSTEPCLASS");
        });

        modelBuilder.Entity<JProdstepclassmember>(entity =>
        {
            entity.HasKey(e => e.PrsclmId).HasName("PK_PRODSTEPCLASSMEMBER");

            entity.ToTable("J_PRODSTEPCLASSMEMBER", "JITTOE");

            entity.HasIndex(e => e.PrsclmProdstepclassId, "I_PRODSTEPCLASS_PRSCMEMBER");

            entity.HasIndex(e => e.PrsclmProdstepId, "I_PRODSTEP_PRSCMEMBER");

            entity.HasIndex(e => new { e.PrsclmProdstepId, e.PrsclmProdstepclassId }, "UN_PRSCLM_KEY").IsUnique();

            entity.Property(e => e.PrsclmId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRSCLM_ID");
            entity.Property(e => e.PrsclmProdstepId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRSCLM_PRODSTEP_ID");
            entity.Property(e => e.PrsclmProdstepclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRSCLM_PRODSTEPCLASS_ID");
            entity.Property(e => e.PrsclmTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PRSCLM_TCREATION");
            entity.Property(e => e.PrsclmTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PRSCLM_TUPDATE");

            entity.HasOne(d => d.PrsclmProdstep).WithMany(p => p.JProdstepclassmembers)
                .HasForeignKey(d => d.PrsclmProdstepId)
                .HasConstraintName("FK_PRODSTEP_PRSCMEMBER");

            entity.HasOne(d => d.PrsclmProdstepclass).WithMany(p => p.JProdstepclassmembers)
                .HasForeignKey(d => d.PrsclmProdstepclassId)
                .HasConstraintName("FK_PRODSTEPCLASS_PRSCMEMBER");
        });

        modelBuilder.Entity<JProdstepinfo>(entity =>
        {
            entity.HasKey(e => e.PrsiId).HasName("PK_PRODSTEPINFO");

            entity.ToTable("J_PRODSTEPINFO", "JITTOE");

            entity.HasIndex(e => e.PrsiErpentityId, "I_ERPENTITY_PRODSTEPINFO");

            entity.HasIndex(e => e.PrsiProdstepId, "I_PRODSTEP_PRODSTEPINFO");

            entity.HasIndex(e => new { e.PrsiProdstepId, e.PrsiType, e.PrsiKey1, e.PrsiKey2, e.PrsiKey3 }, "UN_PRSI_INFO").IsUnique();

            entity.Property(e => e.PrsiId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRSI_ID");
            entity.Property(e => e.PrsiErpentityId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRSI_ERPENTITY_ID");
            entity.Property(e => e.PrsiKey1)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("PRSI_KEY1");
            entity.Property(e => e.PrsiKey2)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("PRSI_KEY2");
            entity.Property(e => e.PrsiKey3)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("PRSI_KEY3");
            entity.Property(e => e.PrsiProdstepId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRSI_PRODSTEP_ID");
            entity.Property(e => e.PrsiStringvalue)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("PRSI_STRINGVALUE");
            entity.Property(e => e.PrsiTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PRSI_TCREATION");
            entity.Property(e => e.PrsiTimevalue)
                .HasColumnType("DATE")
                .HasColumnName("PRSI_TIMEVALUE");
            entity.Property(e => e.PrsiTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PRSI_TUPDATE");
            entity.Property(e => e.PrsiType)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("PRSI_TYPE");

            entity.HasOne(d => d.PrsiErpentity).WithMany(p => p.JProdstepinfos)
                .HasForeignKey(d => d.PrsiErpentityId)
                .HasConstraintName("FK_ERPENTITY_PRODSTEPINFO");

            entity.HasOne(d => d.PrsiProdstep).WithMany(p => p.JProdstepinfos)
                .HasForeignKey(d => d.PrsiProdstepId)
                .HasConstraintName("FK_PRODSTEP_PRODSTEPINFO");
        });

        modelBuilder.Entity<JProdstepset>(entity =>
        {
            entity.HasKey(e => e.PessId).HasName("PK_PRODSTEPSET");

            entity.ToTable("J_PRODSTEPSET", "JITTOE");

            entity.HasIndex(e => e.PessCompanyId, "I_COMPANY_PRODSTEPSET");

            entity.HasIndex(e => e.PessKey, "UN_PESS_KEY").IsUnique();

            entity.Property(e => e.PessId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PESS_ID");
            entity.Property(e => e.PessCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PESS_COMPANY_ID");
            entity.Property(e => e.PessDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PESS_DESCR");
            entity.Property(e => e.PessKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PESS_KEY");
            entity.Property(e => e.PessTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PESS_TCREATION");
            entity.Property(e => e.PessTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PESS_TUPDATE");

            entity.HasOne(d => d.PessCompany).WithMany(p => p.JProdstepsets)
                .HasForeignKey(d => d.PessCompanyId)
                .HasConstraintName("FK_COMPANY_PRODSTEPSET");
        });

        modelBuilder.Entity<JProdstepstatus>(entity =>
        {
            entity.HasKey(e => e.PrssId).HasName("PK_PRODSTEPSTATUS");

            entity.ToTable("J_PRODSTEPSTATUS", "JITTOE");

            entity.HasIndex(e => e.PrssLastcontainerId, "I_CONTAINER_PRODSTEPSTATUS");

            entity.HasIndex(e => e.PrssProdstepId, "I_PRODSTEP_PRODSTEPSTATUS");

            entity.Property(e => e.PrssId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRSS_ID");
            entity.Property(e => e.PrssLastcontainerId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRSS_LASTCONTAINER_ID");
            entity.Property(e => e.PrssProdstepId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRSS_PRODSTEP_ID");
            entity.Property(e => e.PrssTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PRSS_TCREATION");

            entity.HasOne(d => d.PrssLastcontainer).WithMany(p => p.JProdstepstatuses)
                .HasForeignKey(d => d.PrssLastcontainerId)
                .HasConstraintName("FK_CONTAINER_PRODSTEPSTATUS");

            entity.HasOne(d => d.PrssProdstep).WithMany(p => p.JProdstepstatuses)
                .HasForeignKey(d => d.PrssProdstepId)
                .HasConstraintName("FK_PRODSTEP_PRODSTEPSTATUS");
        });

        modelBuilder.Entity<JProdtool>(entity =>
        {
            entity.HasKey(e => e.PtId).HasName("PK_PRODTOOL");

            entity.ToTable("J_PRODTOOL", "JITTOE");

            entity.HasIndex(e => e.PtProdtoolsetId, "I_PRODTOOLSET_PRODTOOL");

            entity.HasIndex(e => e.PtKey, "UN_PT_KEY").IsUnique();

            entity.Property(e => e.PtId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PT_ID");
            entity.Property(e => e.PtCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PT_CODE");
            entity.Property(e => e.PtDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PT_DESCR");
            entity.Property(e => e.PtEnabled)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("1  ")
                .HasColumnName("PT_ENABLED");
            entity.Property(e => e.PtKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PT_KEY");
            entity.Property(e => e.PtKind)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("PT_KIND");
            entity.Property(e => e.PtMincycletimeinsec)
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("PT_MINCYCLETIMEINSEC");
            entity.Property(e => e.PtProdtoolsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PT_PRODTOOLSET_ID");
            entity.Property(e => e.PtSetuptimeinsec)
                .HasDefaultValueSql("0  ")
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("PT_SETUPTIMEINSEC");
            entity.Property(e => e.PtTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PT_TCREATION");
            entity.Property(e => e.PtTeardowntimeinsec)
                .HasDefaultValueSql("0  ")
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("PT_TEARDOWNTIMEINSEC");
            entity.Property(e => e.PtTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PT_TUPDATE");

            entity.HasOne(d => d.PtProdtoolset).WithMany(p => p.JProdtools)
                .HasForeignKey(d => d.PtProdtoolsetId)
                .HasConstraintName("FK_PRODTOOLSET_PRODTOOL");
        });

        modelBuilder.Entity<JProdtooladvice>(entity =>
        {
            entity.HasKey(e => e.PtaId).HasName("PK_PRODTOOLADVICE");

            entity.ToTable("J_PRODTOOLADVICE", "JITTOE");

            entity.HasIndex(e => e.PtaAdviceId, "I_ADVICE_PRODTOOLADVICE");

            entity.HasIndex(e => e.PtaConfirmedbyuserId, "I_CONFIRMEDBY_PRODTOOLADVICE");

            entity.HasIndex(e => e.PtaProdtoolId, "I_PRODTOOL_PRODTOOLADVICE");

            entity.HasIndex(e => new { e.PtaProdtoolId, e.PtaAdviceId }, "UN_PTA_PRODTOOLADVICE").IsUnique();

            entity.Property(e => e.PtaId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PTA_ID");
            entity.Property(e => e.PtaAdviceId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PTA_ADVICE_ID");
            entity.Property(e => e.PtaConfirmedbyuserId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PTA_CONFIRMEDBYUSER_ID");
            entity.Property(e => e.PtaProdtoolId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PTA_PRODTOOL_ID");
            entity.Property(e => e.PtaTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PTA_TCREATION");
            entity.Property(e => e.PtaTimeconfirmed)
                .HasColumnType("DATE")
                .HasColumnName("PTA_TIMECONFIRMED");
            entity.Property(e => e.PtaTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PTA_TUPDATE");

            entity.HasOne(d => d.PtaAdvice).WithMany(p => p.JProdtooladvices)
                .HasForeignKey(d => d.PtaAdviceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ADVICE_PRODTOOLADVICE");

            entity.HasOne(d => d.PtaConfirmedbyuser).WithMany(p => p.JProdtooladvices)
                .HasForeignKey(d => d.PtaConfirmedbyuserId)
                .HasConstraintName("FK_CONFIRMEDBY_PRODTOOLADVICE");

            entity.HasOne(d => d.PtaProdtool).WithMany(p => p.JProdtooladvices)
                .HasForeignKey(d => d.PtaProdtoolId)
                .HasConstraintName("FK_PRODTOOL_PRODTOOLADVICE");
        });

        modelBuilder.Entity<JProdtoolclass>(entity =>
        {
            entity.HasKey(e => e.PtclId).HasName("PK_PRODTOOLCLASS");

            entity.ToTable("J_PRODTOOLCLASS", "JITTOE");

            entity.HasIndex(e => e.PtclCompanyId, "I_COMPANY_PRODTOOLCLASS");

            entity.HasIndex(e => e.PtclKey, "UN_PTCL_KEY").IsUnique();

            entity.Property(e => e.PtclId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PTCL_ID");
            entity.Property(e => e.PtclCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PTCL_COMPANY_ID");
            entity.Property(e => e.PtclDescr)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("PTCL_DESCR");
            entity.Property(e => e.PtclKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("PTCL_KEY");
            entity.Property(e => e.PtclTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PTCL_TCREATION");
            entity.Property(e => e.PtclTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PTCL_TUPDATE");

            entity.HasOne(d => d.PtclCompany).WithMany(p => p.JProdtoolclasses)
                .HasForeignKey(d => d.PtclCompanyId)
                .HasConstraintName("FK_COMPANY_PRODTOOLCLASS");
        });

        modelBuilder.Entity<JProdtoolclassmember>(entity =>
        {
            entity.HasKey(e => e.PtclmId).HasName("PK_PRODTOOLCLASSMEMBER");

            entity.ToTable("J_PRODTOOLCLASSMEMBER", "JITTOE");

            entity.HasIndex(e => e.PtclmProdtoolclassId, "I_PRODTOOLCLASS_PTCMEMBER");

            entity.HasIndex(e => e.PtclmProdtoolId, "I_PRODTOOL_PTCMEMBER");

            entity.HasIndex(e => new { e.PtclmProdtoolId, e.PtclmProdtoolclassId }, "UN_PTCLM_KEY").IsUnique();

            entity.Property(e => e.PtclmId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PTCLM_ID");
            entity.Property(e => e.PtclmProdtoolId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PTCLM_PRODTOOL_ID");
            entity.Property(e => e.PtclmProdtoolclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PTCLM_PRODTOOLCLASS_ID");
            entity.Property(e => e.PtclmTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PTCLM_TCREATION");
            entity.Property(e => e.PtclmTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PTCLM_TUPDATE");

            entity.HasOne(d => d.PtclmProdtool).WithMany(p => p.JProdtoolclassmembers)
                .HasForeignKey(d => d.PtclmProdtoolId)
                .HasConstraintName("FK_PRODTOOL_PTCMEMBER");

            entity.HasOne(d => d.PtclmProdtoolclass).WithMany(p => p.JProdtoolclassmembers)
                .HasForeignKey(d => d.PtclmProdtoolclassId)
                .HasConstraintName("FK_PRODTOOLCLASS_PTCMEMBER");
        });

        modelBuilder.Entity<JProdtoolinfo>(entity =>
        {
            entity.HasKey(e => e.PtiId).HasName("PK_PRODTOOLINFO");

            entity.ToTable("J_PRODTOOLINFO", "JITTOE");

            entity.HasIndex(e => e.PtiProdtoolId, "I_PRODTOOL_PRODTOOLINFO");

            entity.HasIndex(e => new { e.PtiProdtoolId, e.PtiType, e.PtiKey1, e.PtiKey2, e.PtiKey3 }, "UN_PTI_INFO").IsUnique();

            entity.Property(e => e.PtiId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PTI_ID");
            entity.Property(e => e.PtiIntvalue)
                .HasPrecision(10)
                .HasColumnName("PTI_INTVALUE");
            entity.Property(e => e.PtiKey1)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("PTI_KEY1");
            entity.Property(e => e.PtiKey2)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("PTI_KEY2");
            entity.Property(e => e.PtiKey3)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("PTI_KEY3");
            entity.Property(e => e.PtiProdtoolId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PTI_PRODTOOL_ID");
            entity.Property(e => e.PtiStringvalue)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("PTI_STRINGVALUE");
            entity.Property(e => e.PtiTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PTI_TCREATION");
            entity.Property(e => e.PtiTimevalue)
                .HasColumnType("DATE")
                .HasColumnName("PTI_TIMEVALUE");
            entity.Property(e => e.PtiTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PTI_TUPDATE");
            entity.Property(e => e.PtiType)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("PTI_TYPE");

            entity.HasOne(d => d.PtiProdtool).WithMany(p => p.JProdtoolinfos)
                .HasForeignKey(d => d.PtiProdtoolId)
                .HasConstraintName("FK_PRODTOOL_PRODTOOLINFO");
        });

        modelBuilder.Entity<JProdtoolset>(entity =>
        {
            entity.HasKey(e => e.PtsId).HasName("PK_PRODTOOLSET");

            entity.ToTable("J_PRODTOOLSET", "JITTOE");

            entity.HasIndex(e => e.PtsCompanyId, "I_COMPANY_PRODTOOLSET");

            entity.HasIndex(e => e.PtsKey, "UN_PTS_KEY").IsUnique();

            entity.Property(e => e.PtsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PTS_ID");
            entity.Property(e => e.PtsCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PTS_COMPANY_ID");
            entity.Property(e => e.PtsDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PTS_DESCR");
            entity.Property(e => e.PtsKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PTS_KEY");
            entity.Property(e => e.PtsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PTS_TCREATION");
            entity.Property(e => e.PtsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PTS_TUPDATE");

            entity.HasOne(d => d.PtsCompany).WithMany(p => p.JProdtoolsets)
                .HasForeignKey(d => d.PtsCompanyId)
                .HasConstraintName("FK_COMPANY_PRODTOOLSET");
        });

        modelBuilder.Entity<JProdtoolusage>(entity =>
        {
            entity.HasKey(e => e.PtuId).HasName("PK_PRODTOOLUSAGE");

            entity.ToTable("J_PRODTOOLUSAGE", "JITTOE");

            entity.HasIndex(e => e.PtuProdtoolId, "I_PRODTOOL_PTUSAGE");

            entity.HasIndex(e => new { e.PtuProdtoolId, e.PtuCode }, "UN_PTU_CODE").IsUnique();

            entity.Property(e => e.PtuId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PTU_ID");
            entity.Property(e => e.PtuCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PTU_CODE");
            entity.Property(e => e.PtuCycletimecalcmode)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasDefaultValueSql("'None'  ")
                .HasColumnName("PTU_CYCLETIMECALCMODE");
            entity.Property(e => e.PtuDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PTU_DESCR");
            entity.Property(e => e.PtuParams)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("PTU_PARAMS");
            entity.Property(e => e.PtuProdtoolId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PTU_PRODTOOL_ID");
            entity.Property(e => e.PtuTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PTU_TCREATION");
            entity.Property(e => e.PtuTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PTU_TUPDATE");

            entity.HasOne(d => d.PtuProdtool).WithMany(p => p.JProdtoolusages)
                .HasForeignKey(d => d.PtuProdtoolId)
                .HasConstraintName("FK_PRODTOOL_PTUSAGE");
        });

        modelBuilder.Entity<JProdtoolusageelem>(entity =>
        {
            entity.HasKey(e => e.PtueId).HasName("PK_PRODTOOLUSAGEELEM");

            entity.ToTable("J_PRODTOOLUSAGEELEM", "JITTOE");

            entity.HasIndex(e => e.PtueProdtoolusageId, "I_PTUSAGE_PTUELEM");

            entity.HasIndex(e => e.PtueSubjectclassId, "I_SUBJECTCLASS_PTUELEM");

            entity.HasIndex(e => e.PtueSubjectId, "I_SUBJECT_PTUELEM");

            entity.Property(e => e.PtueId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PTUE_ID");
            entity.Property(e => e.PtueCavity)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PTUE_CAVITY");
            entity.Property(e => e.PtueDoccfgitemrole)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PTUE_DOCCFGITEMROLE");
            entity.Property(e => e.PtueMincycletimeinsec)
                .HasDefaultValueSql("0  ")
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("PTUE_MINCYCLETIMEINSEC");
            entity.Property(e => e.PtueParams)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("PTUE_PARAMS");
            entity.Property(e => e.PtueProdtoolusageId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PTUE_PRODTOOLUSAGE_ID");
            entity.Property(e => e.PtueQuantity)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("PTUE_QUANTITY");
            entity.Property(e => e.PtueSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PTUE_SUBJECT_ID");
            entity.Property(e => e.PtueSubjectclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PTUE_SUBJECTCLASS_ID");
            entity.Property(e => e.PtueTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PTUE_TCREATION");
            entity.Property(e => e.PtueTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PTUE_TUPDATE");

            entity.HasOne(d => d.PtueProdtoolusage).WithMany(p => p.JProdtoolusageelems)
                .HasForeignKey(d => d.PtueProdtoolusageId)
                .HasConstraintName("FK_PTUSAGE_PTUELEM");

            entity.HasOne(d => d.PtueSubject).WithMany(p => p.JProdtoolusageelems)
                .HasForeignKey(d => d.PtueSubjectId)
                .HasConstraintName("FK_SUBJECT_PTUELEM");

            entity.HasOne(d => d.PtueSubjectclass).WithMany(p => p.JProdtoolusageelems)
                .HasForeignKey(d => d.PtueSubjectclassId)
                .HasConstraintName("FK_SUBJECTCLASS_PTUELEM");
        });

        modelBuilder.Entity<JProductfamily>(entity =>
        {
            entity.HasKey(e => e.PfId).HasName("PK_PRODUCTFAMILY");

            entity.ToTable("J_PRODUCTFAMILY", "JITTOE");

            entity.HasIndex(e => e.PfCompanyId, "I_COMPANY_PF");

            entity.HasIndex(e => new { e.PfCompanyId, e.PfDescr }, "UN_PF_COMPANY_PF").IsUnique();

            entity.HasIndex(e => e.PfKey, "UN_PF_KEY").IsUnique();

            entity.Property(e => e.PfId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PF_ID");
            entity.Property(e => e.PfCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PF_COMPANY_ID");
            entity.Property(e => e.PfDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PF_DESCR");
            entity.Property(e => e.PfKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PF_KEY");
            entity.Property(e => e.PfTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PF_TCREATION");
            entity.Property(e => e.PfTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PF_TUPDATE");

            entity.HasOne(d => d.PfCompany).WithMany(p => p.JProductfamilies)
                .HasForeignKey(d => d.PfCompanyId)
                .HasConstraintName("FK_COMPANY_PF");
        });

        modelBuilder.Entity<JProductfamilyStockset>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("J_PRODUCTFAMILY_STOCKSET", "JITTOE");

            entity.HasIndex(e => e.ProductfamilyId, "I_PRODUCTFAMILY_STOCKSET_1");

            entity.HasIndex(e => e.StocksetId, "I_PRODUCTFAMILY_STOCKSET_2");

            entity.HasIndex(e => new { e.ProductfamilyId, e.StocksetId }, "UN_PRODUCTFAMILY_STOCKSET").IsUnique();

            entity.Property(e => e.ProductfamilyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRODUCTFAMILY_ID");
            entity.Property(e => e.StocksetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STOCKSET_ID");
            entity.Property(e => e.Tcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TCREATION");

            entity.HasOne(d => d.Productfamily).WithMany()
                .HasForeignKey(d => d.ProductfamilyId)
                .HasConstraintName("FK_PRODUCTFAMILY_STOCKSET_1");

            entity.HasOne(d => d.Stockset).WithMany()
                .HasForeignKey(d => d.StocksetId)
                .HasConstraintName("FK_PRODUCTFAMILY_STOCKSET_2");
        });

        modelBuilder.Entity<JProdunit>(entity =>
        {
            entity.HasKey(e => e.PuId).HasName("PK_PRODUNIT");

            entity.ToTable("J_PRODUNIT", "JITTOE");

            entity.HasIndex(e => e.PuCalendarId, "I_CALENDAR_PRODUNIT");

            entity.HasIndex(e => e.PuConditionreasonsetId, "I_CONDITIONRS_PRODUNIT");

            entity.HasIndex(e => e.PuDoccfgId, "I_DOCCFG_PRODUNIT");

            entity.HasIndex(e => e.PuDowntimereasonsetId, "I_DOWNTIMERS_PRODUNIT");

            entity.HasIndex(e => e.PuInterruptreasonsetId, "I_INTERRUPTRS_PRODUNIT");

            entity.HasIndex(e => e.PuProdunitsetId, "I_PRODUNITSET_PRODUNIT");

            entity.HasIndex(e => e.PuCode, "UN_PU_CODE").IsUnique();

            entity.HasIndex(e => e.PuKey, "UN_PU_KEY").IsUnique();

            entity.Property(e => e.PuId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PU_ID");
            entity.Property(e => e.PuCalendarId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PU_CALENDAR_ID");
            entity.Property(e => e.PuCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PU_CODE");
            entity.Property(e => e.PuConditionreasonsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PU_CONDITIONREASONSET_ID");
            entity.Property(e => e.PuDescr)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("PU_DESCR");
            entity.Property(e => e.PuDoccfgId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PU_DOCCFG_ID");
            entity.Property(e => e.PuDowntimereasonsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PU_DOWNTIMEREASONSET_ID");
            entity.Property(e => e.PuEnabled)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("1  ")
                .HasColumnName("PU_ENABLED");
            entity.Property(e => e.PuInterruptreasonsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PU_INTERRUPTREASONSET_ID");
            entity.Property(e => e.PuKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PU_KEY");
            entity.Property(e => e.PuKind)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("PU_KIND");
            entity.Property(e => e.PuProdunitsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PU_PRODUNITSET_ID");
            entity.Property(e => e.PuShortdescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PU_SHORTDESCR");
            entity.Property(e => e.PuTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PU_TCREATION");
            entity.Property(e => e.PuTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PU_TUPDATE");

            entity.HasOne(d => d.PuCalendar).WithMany(p => p.JProdunits)
                .HasForeignKey(d => d.PuCalendarId)
                .HasConstraintName("FK_CALENDAR_PRODUNIT");

            entity.HasOne(d => d.PuConditionreasonset).WithMany(p => p.JProdunitPuConditionreasonsets)
                .HasForeignKey(d => d.PuConditionreasonsetId)
                .HasConstraintName("FK_CONDITIONRS_PRODUNIT");

            entity.HasOne(d => d.PuDoccfg).WithMany(p => p.JProdunits)
                .HasForeignKey(d => d.PuDoccfgId)
                .HasConstraintName("FK_DOCCFG_PRODUNIT");

            entity.HasOne(d => d.PuDowntimereasonset).WithMany(p => p.JProdunitPuDowntimereasonsets)
                .HasForeignKey(d => d.PuDowntimereasonsetId)
                .HasConstraintName("FK_DOWNTIMERS_PRODUNIT");

            entity.HasOne(d => d.PuInterruptreasonset).WithMany(p => p.JProdunitPuInterruptreasonsets)
                .HasForeignKey(d => d.PuInterruptreasonsetId)
                .HasConstraintName("FK_INTERRUPTRS_PRODUNIT");

            entity.HasOne(d => d.PuProdunitset).WithMany(p => p.JProdunits)
                .HasForeignKey(d => d.PuProdunitsetId)
                .HasConstraintName("FK_PRODUNITSET_PRODUNIT");
        });

        modelBuilder.Entity<JProdunitadvice>(entity =>
        {
            entity.HasKey(e => e.PuaId).HasName("PK_PRODUNITADVICE");

            entity.ToTable("J_PRODUNITADVICE", "JITTOE");

            entity.HasIndex(e => e.PuaAdviceId, "I_ADVICE_PRODUNITADVICE");

            entity.HasIndex(e => e.PuaConfirmedbyuserId, "I_CONFIRMEDBY_PRODUNITADVICE");

            entity.HasIndex(e => e.PuaProdunitId, "I_PRODUNIT_PRODUNITADVICE");

            entity.HasIndex(e => new { e.PuaProdunitId, e.PuaAdviceId }, "UN_PUA_PRODUNITADVICE").IsUnique();

            entity.Property(e => e.PuaId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PUA_ID");
            entity.Property(e => e.PuaAdviceId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PUA_ADVICE_ID");
            entity.Property(e => e.PuaConfirmedbyuserId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PUA_CONFIRMEDBYUSER_ID");
            entity.Property(e => e.PuaProdunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PUA_PRODUNIT_ID");
            entity.Property(e => e.PuaTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PUA_TCREATION");
            entity.Property(e => e.PuaTimeconfirmed)
                .HasColumnType("DATE")
                .HasColumnName("PUA_TIMECONFIRMED");
            entity.Property(e => e.PuaTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PUA_TUPDATE");

            entity.HasOne(d => d.PuaAdvice).WithMany(p => p.JProdunitadvices)
                .HasForeignKey(d => d.PuaAdviceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ADVICE_PRODUNITADVICE");

            entity.HasOne(d => d.PuaConfirmedbyuser).WithMany(p => p.JProdunitadvices)
                .HasForeignKey(d => d.PuaConfirmedbyuserId)
                .HasConstraintName("FK_CONFIRMEDBY_PRODUNITADVICE");

            entity.HasOne(d => d.PuaProdunit).WithMany(p => p.JProdunitadvices)
                .HasForeignKey(d => d.PuaProdunitId)
                .HasConstraintName("FK_PRODUNIT_PRODUNITADVICE");
        });

        modelBuilder.Entity<JProdunitcalendar>(entity =>
        {
            entity.HasKey(e => e.PucaId).HasName("PK_PRODUNITCALENDAR");

            entity.ToTable("J_PRODUNITCALENDAR", "JITTOE");

            entity.HasIndex(e => e.PucaCalendarId, "I_CALENDAR_PUCALENDAR");

            entity.HasIndex(e => e.PucaProdunitId, "I_PRODUNIT_PUCALENDAR");

            entity.HasIndex(e => new { e.PucaProdunitId, e.PucaIndex }, "UN_PUCA_INDEX").IsUnique();

            entity.Property(e => e.PucaId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PUCA_ID");
            entity.Property(e => e.PucaCalendarId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PUCA_CALENDAR_ID");
            entity.Property(e => e.PucaIndex)
                .HasPrecision(5)
                .HasColumnName("PUCA_INDEX");
            entity.Property(e => e.PucaProdunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PUCA_PRODUNIT_ID");
            entity.Property(e => e.PucaTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PUCA_TCREATION");
            entity.Property(e => e.PucaTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PUCA_TUPDATE");

            entity.HasOne(d => d.PucaCalendar).WithMany(p => p.JProdunitcalendars)
                .HasForeignKey(d => d.PucaCalendarId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CALENDAR_PUCALENDAR");

            entity.HasOne(d => d.PucaProdunit).WithMany(p => p.JProdunitcalendars)
                .HasForeignKey(d => d.PucaProdunitId)
                .HasConstraintName("FK_PRODUNIT_PUCALENDAR");
        });

        modelBuilder.Entity<JProdunitclass>(entity =>
        {
            entity.HasKey(e => e.PuclId).HasName("PK_PRODUNITCLASS");

            entity.ToTable("J_PRODUNITCLASS", "JITTOE");

            entity.HasIndex(e => e.PuclCompanyId, "I_COMPANY_PRODUNITCLASS");

            entity.HasIndex(e => e.PuclKey, "UN_PUCL_KEY").IsUnique();

            entity.Property(e => e.PuclId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PUCL_ID");
            entity.Property(e => e.PuclCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PUCL_COMPANY_ID");
            entity.Property(e => e.PuclDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PUCL_DESCR");
            entity.Property(e => e.PuclKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PUCL_KEY");
            entity.Property(e => e.PuclTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PUCL_TCREATION");
            entity.Property(e => e.PuclTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PUCL_TUPDATE");

            entity.HasOne(d => d.PuclCompany).WithMany(p => p.JProdunitclasses)
                .HasForeignKey(d => d.PuclCompanyId)
                .HasConstraintName("FK_COMPANY_PRODUNITCLASS");
        });

        modelBuilder.Entity<JProdunitclassmember>(entity =>
        {
            entity.HasKey(e => e.PuclmId).HasName("PK_PRODUNITCLASSMEMBER");

            entity.ToTable("J_PRODUNITCLASSMEMBER", "JITTOE");

            entity.HasIndex(e => e.PuclmProdunitclassId, "I_PRODUNITCLASS_PUCMEMBER");

            entity.HasIndex(e => e.PuclmProdunitId, "I_PRODUNIT_PUCMEMBER");

            entity.HasIndex(e => new { e.PuclmProdunitId, e.PuclmProdunitclassId }, "UN_PUCLM_KEY").IsUnique();

            entity.Property(e => e.PuclmId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PUCLM_ID");
            entity.Property(e => e.PuclmProdunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PUCLM_PRODUNIT_ID");
            entity.Property(e => e.PuclmProdunitclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PUCLM_PRODUNITCLASS_ID");
            entity.Property(e => e.PuclmTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PUCLM_TCREATION");
            entity.Property(e => e.PuclmTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PUCLM_TUPDATE");

            entity.HasOne(d => d.PuclmProdunit).WithMany(p => p.JProdunitclassmembers)
                .HasForeignKey(d => d.PuclmProdunitId)
                .HasConstraintName("FK_PRODUNIT_PUCMEMBER");

            entity.HasOne(d => d.PuclmProdunitclass).WithMany(p => p.JProdunitclassmembers)
                .HasForeignKey(d => d.PuclmProdunitclassId)
                .HasConstraintName("FK_PRODUNITCLASS_PUCMEMBER");
        });

        modelBuilder.Entity<JProdunitdatum>(entity =>
        {
            entity.HasKey(e => e.PudId).HasName("PK_PRODUNITDATA");

            entity.ToTable("J_PRODUNITDATA", "JITTOE");

            entity.HasIndex(e => e.PudProdunitId, "I_PRODUNIT_PRODUNITDATA");

            entity.Property(e => e.PudId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PUD_ID");
            entity.Property(e => e.PudKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PUD_KEY");
            entity.Property(e => e.PudProdunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PUD_PRODUNIT_ID");
            entity.Property(e => e.PudTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PUD_TCREATION");
            entity.Property(e => e.PudTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PUD_TUPDATE");
            entity.Property(e => e.PudValue)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("PUD_VALUE");

            entity.HasOne(d => d.PudProdunit).WithMany(p => p.JProdunitdata)
                .HasForeignKey(d => d.PudProdunitId)
                .HasConstraintName("FK_PRODUNIT_PRODUNITDATA");
        });

        modelBuilder.Entity<JProdunitevent>(entity =>
        {
            entity.HasKey(e => e.PueId).HasName("PK_PRODUNITEVENT");

            entity.ToTable("J_PRODUNITEVENT", "JITTOE");

            entity.HasIndex(e => e.PueProdtoolusageId, "I_PRODTOOLUSAGE_PUEVENT");

            entity.HasIndex(e => e.PueProduniteventsetId, "I_PRODUNITEVENTSET_PUEVENT");

            entity.HasIndex(e => e.PueProdunitId, "I_PRODUNIT_PUEVENT");

            entity.HasIndex(e => new { e.PueProdunitId, e.PueEventkind, e.PueTcreation }, "I_PUE_KIND_TCREATION");

            entity.HasIndex(e => e.PueTransitionId, "I_TRANSITION_PUEVENT");

            entity.Property(e => e.PueId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PUE_ID");
            entity.Property(e => e.PueDuration)
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("PUE_DURATION");
            entity.Property(e => e.PueEventkind)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("PUE_EVENTKIND");
            entity.Property(e => e.PueInfo1)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("PUE_INFO1");
            entity.Property(e => e.PueInfo2)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("PUE_INFO2");
            entity.Property(e => e.PueInfo3)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("PUE_INFO3");
            entity.Property(e => e.PueProdtoolusageId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PUE_PRODTOOLUSAGE_ID");
            entity.Property(e => e.PueProdunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PUE_PRODUNIT_ID");
            entity.Property(e => e.PueProduniteventsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PUE_PRODUNITEVENTSET_ID");
            entity.Property(e => e.PueTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PUE_TCREATION");
            entity.Property(e => e.PueTimeedited)
                .HasColumnType("DATE")
                .HasColumnName("PUE_TIMEEDITED");
            entity.Property(e => e.PueTransitionId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PUE_TRANSITION_ID");

            entity.HasOne(d => d.PueProdtoolusage).WithMany(p => p.JProdunitevents)
                .HasForeignKey(d => d.PueProdtoolusageId)
                .HasConstraintName("FK_PRODTOOLUSAGE_PUEVENT");

            entity.HasOne(d => d.PueProdunit).WithMany(p => p.JProdunitevents)
                .HasForeignKey(d => d.PueProdunitId)
                .HasConstraintName("FK_PRODUNIT_PUEVENT");

            entity.HasOne(d => d.PueProduniteventset).WithMany(p => p.JProdunitevents)
                .HasForeignKey(d => d.PueProduniteventsetId)
                .HasConstraintName("FK_PRODUNITEVENTSET_PUEVENT");

            entity.HasOne(d => d.PueTransition).WithMany(p => p.JProdunitevents)
                .HasForeignKey(d => d.PueTransitionId)
                .HasConstraintName("FK_TRANSITION_PUEVENT");
        });

        modelBuilder.Entity<JProduniteventdatum>(entity =>
        {
            entity.HasKey(e => e.PuedId).HasName("PK_PRODUNITEVENTDATA");

            entity.ToTable("J_PRODUNITEVENTDATA", "JITTOE");

            entity.HasIndex(e => e.PuedFreasongroupId, "I_FREASONGROUP_PUEVENTDATA");

            entity.HasIndex(e => e.PuedFailurereasonId, "I_FREASON_PUEVENTDATA");

            entity.HasIndex(e => e.PuedProdtoolId, "I_PRODTOOL_PUEVENTDATA");

            entity.HasIndex(e => e.PuedProduniteventId, "I_PRODUNITEVENT_PUEVENTDATA");

            entity.Property(e => e.PuedId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PUED_ID");
            entity.Property(e => e.PuedFailurereasonId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PUED_FAILUREREASON_ID");
            entity.Property(e => e.PuedFreasongroupId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PUED_FREASONGROUP_ID");
            entity.Property(e => e.PuedKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PUED_KEY");
            entity.Property(e => e.PuedProdtoolId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PUED_PRODTOOL_ID");
            entity.Property(e => e.PuedProduniteventId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PUED_PRODUNITEVENT_ID");
            entity.Property(e => e.PuedTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PUED_TCREATION");
            entity.Property(e => e.PuedValue)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("PUED_VALUE");

            entity.HasOne(d => d.PuedFailurereason).WithMany(p => p.JProduniteventdata)
                .HasForeignKey(d => d.PuedFailurereasonId)
                .HasConstraintName("FK_FREASON_PUEVENTDATA");

            entity.HasOne(d => d.PuedFreasongroup).WithMany(p => p.JProduniteventdata)
                .HasForeignKey(d => d.PuedFreasongroupId)
                .HasConstraintName("FK_FREASONGROUP_PUEVENTDATA");

            entity.HasOne(d => d.PuedProdtool).WithMany(p => p.JProduniteventdata)
                .HasForeignKey(d => d.PuedProdtoolId)
                .HasConstraintName("FK_PRODTOOL_PUEVENTDATA");

            entity.HasOne(d => d.PuedProdunitevent).WithMany(p => p.JProduniteventdata)
                .HasForeignKey(d => d.PuedProduniteventId)
                .HasConstraintName("FK_PRODUNITEVENT_PUEVENTDATA");
        });

        modelBuilder.Entity<JProduniteventset>(entity =>
        {
            entity.HasKey(e => e.PuesId).HasName("PK_PRODUNITEVENTSET");

            entity.ToTable("J_PRODUNITEVENTSET", "JITTOE");

            entity.HasIndex(e => e.PuesCompanyId, "I_COMPANY_PUEVENTSET");

            entity.HasIndex(e => e.PuesKey, "UN_PUES_KEY").IsUnique();

            entity.Property(e => e.PuesId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PUES_ID");
            entity.Property(e => e.PuesCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PUES_COMPANY_ID");
            entity.Property(e => e.PuesDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PUES_DESCR");
            entity.Property(e => e.PuesKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PUES_KEY");
            entity.Property(e => e.PuesTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PUES_TCREATION");
            entity.Property(e => e.PuesTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PUES_TUPDATE");

            entity.HasOne(d => d.PuesCompany).WithMany(p => p.JProduniteventsets)
                .HasForeignKey(d => d.PuesCompanyId)
                .HasConstraintName("FK_COMPANY_PUEVENTSET");
        });

        modelBuilder.Entity<JProdunitfreasongroup>(entity =>
        {
            entity.HasKey(e => e.PufrgId).HasName("PK_PRODUNITFREASONGROUP");

            entity.ToTable("J_PRODUNITFREASONGROUP", "JITTOE");

            entity.HasIndex(e => e.PufrgFreasongroupId, "I_FRG_PRODUNITFRG");

            entity.HasIndex(e => e.PufrgProdunitId, "I_PRODUNIT_PRODUNITFRG");

            entity.HasIndex(e => new { e.PufrgProdunitId, e.PufrgFreasongroupId, e.PufrgRole }, "UN_PUFRG_ROLE").IsUnique();

            entity.Property(e => e.PufrgId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PUFRG_ID");
            entity.Property(e => e.PufrgFreasongroupId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PUFRG_FREASONGROUP_ID");
            entity.Property(e => e.PufrgProdunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PUFRG_PRODUNIT_ID");
            entity.Property(e => e.PufrgRole)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("PUFRG_ROLE");
            entity.Property(e => e.PufrgTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PUFRG_TCREATION");
            entity.Property(e => e.PufrgTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PUFRG_TUPDATE");

            entity.HasOne(d => d.PufrgFreasongroup).WithMany(p => p.JProdunitfreasongroups)
                .HasForeignKey(d => d.PufrgFreasongroupId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FRG_PRODUNITFRG");

            entity.HasOne(d => d.PufrgProdunit).WithMany(p => p.JProdunitfreasongroups)
                .HasForeignKey(d => d.PufrgProdunitId)
                .HasConstraintName("FK_PRODUNIT_PRODUNITFRG");
        });

        modelBuilder.Entity<JProdunitinfo>(entity =>
        {
            entity.HasKey(e => e.PuiId).HasName("PK_PRODUNITINFO");

            entity.ToTable("J_PRODUNITINFO", "JITTOE");

            entity.HasIndex(e => e.PuiErpentityId, "I_ERPENTITY_PRODUNITINFO");

            entity.HasIndex(e => e.PuiImageId, "I_IMAGE_PRODUNITINFO");

            entity.HasIndex(e => e.PuiProdunitId, "I_PRODUNIT_PRODUNITINFO");

            entity.HasIndex(e => new { e.PuiProdunitId, e.PuiType, e.PuiKey1, e.PuiKey2, e.PuiKey3 }, "UN_PUI_INFO").IsUnique();

            entity.Property(e => e.PuiId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PUI_ID");
            entity.Property(e => e.PuiErpentityId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PUI_ERPENTITY_ID");
            entity.Property(e => e.PuiImageId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PUI_IMAGE_ID");
            entity.Property(e => e.PuiIntvalue)
                .HasPrecision(10)
                .HasColumnName("PUI_INTVALUE");
            entity.Property(e => e.PuiKey1)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("PUI_KEY1");
            entity.Property(e => e.PuiKey2)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("PUI_KEY2");
            entity.Property(e => e.PuiKey3)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("PUI_KEY3");
            entity.Property(e => e.PuiProdunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PUI_PRODUNIT_ID");
            entity.Property(e => e.PuiStringvalue)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("PUI_STRINGVALUE");
            entity.Property(e => e.PuiTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PUI_TCREATION");
            entity.Property(e => e.PuiTimevalue)
                .HasColumnType("DATE")
                .HasColumnName("PUI_TIMEVALUE");
            entity.Property(e => e.PuiTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PUI_TUPDATE");
            entity.Property(e => e.PuiType)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("PUI_TYPE");

            entity.HasOne(d => d.PuiErpentity).WithMany(p => p.JProdunitinfos)
                .HasForeignKey(d => d.PuiErpentityId)
                .HasConstraintName("FK_ERPENTITY_PRODUNITINFO");

            entity.HasOne(d => d.PuiImage).WithMany(p => p.JProdunitinfos)
                .HasForeignKey(d => d.PuiImageId)
                .HasConstraintName("FK_IMAGE_PRODUNITINFO");

            entity.HasOne(d => d.PuiProdunit).WithMany(p => p.JProdunitinfos)
                .HasForeignKey(d => d.PuiProdunitId)
                .HasConstraintName("FK_PRODUNIT_PRODUNITINFO");
        });

        modelBuilder.Entity<JProdunitinterval>(entity =>
        {
            entity.HasKey(e => e.PuivId).HasName("PK_PRODUNITINTERVAL");

            entity.ToTable("J_PRODUNITINTERVAL", "JITTOE");

            entity.HasIndex(e => e.PuivFailurereasonId, "I_FREASON_PUINTERVAL");

            entity.HasIndex(e => e.PuivProdunitId, "I_PRODUNIT_PUINTERVAL");

            entity.HasIndex(e => new { e.PuivFromtime, e.PuivProdunitId, e.PuivType, e.PuivUntiltime }, "I_PUINTERVAL1");

            entity.HasIndex(e => new { e.PuivUntiltime, e.PuivProdunitId, e.PuivType, e.PuivFromtime }, "I_PUINTERVAL2");

            entity.Property(e => e.PuivId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PUIV_ID");
            entity.Property(e => e.PuivComment)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasColumnName("PUIV_COMMENT");
            entity.Property(e => e.PuivFailurereasonId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PUIV_FAILUREREASON_ID");
            entity.Property(e => e.PuivFromtime)
                .HasColumnType("DATE")
                .HasColumnName("PUIV_FROMTIME");
            entity.Property(e => e.PuivProdunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PUIV_PRODUNIT_ID");
            entity.Property(e => e.PuivQualifier1)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("PUIV_QUALIFIER1");
            entity.Property(e => e.PuivTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PUIV_TCREATION");
            entity.Property(e => e.PuivTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PUIV_TUPDATE");
            entity.Property(e => e.PuivType)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("PUIV_TYPE");
            entity.Property(e => e.PuivUntiltime)
                .HasColumnType("DATE")
                .HasColumnName("PUIV_UNTILTIME");

            entity.HasOne(d => d.PuivFailurereason).WithMany(p => p.JProdunitintervals)
                .HasForeignKey(d => d.PuivFailurereasonId)
                .HasConstraintName("FK_FREASON_PUINTERVAL");

            entity.HasOne(d => d.PuivProdunit).WithMany(p => p.JProdunitintervals)
                .HasForeignKey(d => d.PuivProdunitId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PRODUNIT_PUINTERVAL");
        });

        modelBuilder.Entity<JProdunitintervalinfo>(entity =>
        {
            entity.HasKey(e => e.PuiviId).HasName("PK_PRODUNITINTERVALINFO");

            entity.ToTable("J_PRODUNITINTERVALINFO", "JITTOE");

            entity.HasIndex(e => e.PuiviFreasongroupId, "I_FREASONGROUP_PUIINFO");

            entity.HasIndex(e => e.PuiviProdunitintervalId, "I_PUINTERVAL_PUIINFO");

            entity.HasIndex(e => new { e.PuiviProdunitintervalId, e.PuiviType, e.PuiviKey1, e.PuiviKey2, e.PuiviKey3 }, "UN_PUIVI_INFO").IsUnique();

            entity.Property(e => e.PuiviId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PUIVI_ID");
            entity.Property(e => e.PuiviFreasongroupId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PUIVI_FREASONGROUP_ID");
            entity.Property(e => e.PuiviIntvalue)
                .HasPrecision(10)
                .HasColumnName("PUIVI_INTVALUE");
            entity.Property(e => e.PuiviKey1)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("PUIVI_KEY1");
            entity.Property(e => e.PuiviKey2)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("PUIVI_KEY2");
            entity.Property(e => e.PuiviKey3)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("PUIVI_KEY3");
            entity.Property(e => e.PuiviProdunitintervalId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PUIVI_PRODUNITINTERVAL_ID");
            entity.Property(e => e.PuiviStringvalue)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("PUIVI_STRINGVALUE");
            entity.Property(e => e.PuiviTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PUIVI_TCREATION");
            entity.Property(e => e.PuiviTimevalue)
                .HasColumnType("DATE")
                .HasColumnName("PUIVI_TIMEVALUE");
            entity.Property(e => e.PuiviTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PUIVI_TUPDATE");
            entity.Property(e => e.PuiviType)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("PUIVI_TYPE");

            entity.HasOne(d => d.PuiviFreasongroup).WithMany(p => p.JProdunitintervalinfos)
                .HasForeignKey(d => d.PuiviFreasongroupId)
                .HasConstraintName("FK_FREASONGROUP_PUIINFO");

            entity.HasOne(d => d.PuiviProdunitinterval).WithMany(p => p.JProdunitintervalinfos)
                .HasForeignKey(d => d.PuiviProdunitintervalId)
                .HasConstraintName("FK_PUINTERVAL_PUIINFO");
        });

        modelBuilder.Entity<JProdunitparam>(entity =>
        {
            entity.HasKey(e => e.PupId).HasName("PK_PRODUNITPARAM");

            entity.ToTable("J_PRODUNITPARAM", "JITTOE");

            entity.HasIndex(e => e.PupProdunitId, "I_PRODUNIT_PRODUNITPARAM");

            entity.HasIndex(e => new { e.PupProdunitId, e.PupKey }, "UN_PUP_KEY").IsUnique();

            entity.Property(e => e.PupId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PUP_ID");
            entity.Property(e => e.PupDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PUP_DESCR");
            entity.Property(e => e.PupKey)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("PUP_KEY");
            entity.Property(e => e.PupProdunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PUP_PRODUNIT_ID");
            entity.Property(e => e.PupTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PUP_TCREATION");
            entity.Property(e => e.PupTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PUP_TUPDATE");
            entity.Property(e => e.PupValue)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("PUP_VALUE");

            entity.HasOne(d => d.PupProdunit).WithMany(p => p.JProdunitparams)
                .HasForeignKey(d => d.PupProdunitId)
                .HasConstraintName("FK_PRODUNIT_PRODUNITPARAM");
        });

        modelBuilder.Entity<JProdunitset>(entity =>
        {
            entity.HasKey(e => e.PusId).HasName("PK_PRODUNITSET");

            entity.ToTable("J_PRODUNITSET", "JITTOE");

            entity.HasIndex(e => e.PusCompanyId, "I_COMPANY_PRODUNITSET");

            entity.HasIndex(e => e.PusKey, "UN_PUS_KEY").IsUnique();

            entity.Property(e => e.PusId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PUS_ID");
            entity.Property(e => e.PusCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PUS_COMPANY_ID");
            entity.Property(e => e.PusDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PUS_DESCR");
            entity.Property(e => e.PusKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PUS_KEY");
            entity.Property(e => e.PusTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PUS_TCREATION");
            entity.Property(e => e.PusTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PUS_TUPDATE");

            entity.HasOne(d => d.PusCompany).WithMany(p => p.JProdunitsets)
                .HasForeignKey(d => d.PusCompanyId)
                .HasConstraintName("FK_COMPANY_PRODUNITSET");
        });

        modelBuilder.Entity<JProdunittool>(entity =>
        {
            entity.HasKey(e => e.PutId).HasName("PK_PRODUNITTOOL");

            entity.ToTable("J_PRODUNITTOOL", "JITTOE");

            entity.HasIndex(e => e.PutProdtoolId, "I_PRODTOOL_PRODUNITTOOL");

            entity.HasIndex(e => e.PutProdunitId, "I_PRODUNIT_PRODUNITTOOL");

            entity.HasIndex(e => new { e.PutProdunitId, e.PutProdtoolId }, "UN_PUT_PUTPRODUNITPRODTOOL").IsUnique();

            entity.Property(e => e.PutId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PUT_ID");
            entity.Property(e => e.PutMincycletimeinsec)
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("PUT_MINCYCLETIMEINSEC");
            entity.Property(e => e.PutProdtoolId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PUT_PRODTOOL_ID");
            entity.Property(e => e.PutProdunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PUT_PRODUNIT_ID");
            entity.Property(e => e.PutSetuptimeinsec)
                .HasDefaultValueSql("0  ")
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("PUT_SETUPTIMEINSEC");
            entity.Property(e => e.PutTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PUT_TCREATION");
            entity.Property(e => e.PutTeardowntimeinsec)
                .HasDefaultValueSql("0  ")
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("PUT_TEARDOWNTIMEINSEC");
            entity.Property(e => e.PutTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PUT_TUPDATE");

            entity.HasOne(d => d.PutProdtool).WithMany(p => p.JProdunittools)
                .HasForeignKey(d => d.PutProdtoolId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODTOOL_PRODUNITTOOL");

            entity.HasOne(d => d.PutProdunit).WithMany(p => p.JProdunittools)
                .HasForeignKey(d => d.PutProdunitId)
                .HasConstraintName("FK_PRODUNIT_PRODUNITTOOL");
        });

        modelBuilder.Entity<JProdunittoolinfo>(entity =>
        {
            entity.HasKey(e => e.PutiId).HasName("PK_PRODUNITTOOLINFO");

            entity.ToTable("J_PRODUNITTOOLINFO", "JITTOE");

            entity.HasIndex(e => e.PutiProdunittoolId, "I_PUTOOL_PUTOOLINFO");

            entity.HasIndex(e => new { e.PutiProdunittoolId, e.PutiType, e.PutiKey1, e.PutiKey2, e.PutiKey3 }, "UN_PUTI_INFO").IsUnique();

            entity.Property(e => e.PutiId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PUTI_ID");
            entity.Property(e => e.PutiIntvalue)
                .HasPrecision(10)
                .HasColumnName("PUTI_INTVALUE");
            entity.Property(e => e.PutiKey1)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("PUTI_KEY1");
            entity.Property(e => e.PutiKey2)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("PUTI_KEY2");
            entity.Property(e => e.PutiKey3)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("PUTI_KEY3");
            entity.Property(e => e.PutiProdunittoolId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PUTI_PRODUNITTOOL_ID");
            entity.Property(e => e.PutiStringvalue)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("PUTI_STRINGVALUE");
            entity.Property(e => e.PutiTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PUTI_TCREATION");
            entity.Property(e => e.PutiTimevalue)
                .HasColumnType("DATE")
                .HasColumnName("PUTI_TIMEVALUE");
            entity.Property(e => e.PutiTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PUTI_TUPDATE");
            entity.Property(e => e.PutiType)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("PUTI_TYPE");

            entity.HasOne(d => d.PutiProdunittool).WithMany(p => p.JProdunittoolinfos)
                .HasForeignKey(d => d.PutiProdunittoolId)
                .HasConstraintName("FK_PUTOOL_PUTOOLINFO");
        });

        modelBuilder.Entity<JProdversionclass>(entity =>
        {
            entity.HasKey(e => e.PvclId).HasName("PK_PRODVERSIONCLASS");

            entity.ToTable("J_PRODVERSIONCLASS", "JITTOE");

            entity.HasIndex(e => e.PvclCompanyId, "I_COMPANY_PVCLASS");

            entity.HasIndex(e => e.PvclKey, "UN_PVCL_KEY").IsUnique();

            entity.Property(e => e.PvclId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PVCL_ID");
            entity.Property(e => e.PvclCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PVCL_COMPANY_ID");
            entity.Property(e => e.PvclDescr)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("PVCL_DESCR");
            entity.Property(e => e.PvclKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("PVCL_KEY");
            entity.Property(e => e.PvclTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PVCL_TCREATION");
            entity.Property(e => e.PvclTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PVCL_TUPDATE");

            entity.HasOne(d => d.PvclCompany).WithMany(p => p.JProdversionclasses)
                .HasForeignKey(d => d.PvclCompanyId)
                .HasConstraintName("FK_COMPANY_PVCLASS");
        });

        modelBuilder.Entity<JProdversionclassmember>(entity =>
        {
            entity.HasKey(e => e.PvclmId).HasName("PK_PRODVERSIONCLASSMEMBER");

            entity.ToTable("J_PRODVERSIONCLASSMEMBER", "JITTOE");

            entity.HasIndex(e => e.PvclmProdversionclassId, "I_PVCLASS_PVCLASSMEMBER");

            entity.HasIndex(e => e.PvclmProdflowusageId, "I_PV_PVCLASSMEMBER");

            entity.HasIndex(e => new { e.PvclmProdflowusageId, e.PvclmProdversionclassId }, "UN_PVCLM_KEY").IsUnique();

            entity.Property(e => e.PvclmId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PVCLM_ID");
            entity.Property(e => e.PvclmProdflowusageId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PVCLM_PRODFLOWUSAGE_ID");
            entity.Property(e => e.PvclmProdversionclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PVCLM_PRODVERSIONCLASS_ID");
            entity.Property(e => e.PvclmTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PVCLM_TCREATION");
            entity.Property(e => e.PvclmTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PVCLM_TUPDATE");

            entity.HasOne(d => d.PvclmProdflowusage).WithMany(p => p.JProdversionclassmembers)
                .HasForeignKey(d => d.PvclmProdflowusageId)
                .HasConstraintName("FK_PV_PVCLASSMEMBER");

            entity.HasOne(d => d.PvclmProdversionclass).WithMany(p => p.JProdversionclassmembers)
                .HasForeignKey(d => d.PvclmProdversionclassId)
                .HasConstraintName("FK_PVCLASS_PVCLASSMEMBER");
        });

        modelBuilder.Entity<JProdversioninfo>(entity =>
        {
            entity.HasKey(e => e.PviId).HasName("PK_PRODVERSIONINFO");

            entity.ToTable("J_PRODVERSIONINFO", "JITTOE");

            entity.HasIndex(e => e.PviErpentityId, "I_ERPENTITY_PVERSIONINFO");

            entity.HasIndex(e => e.PviProdversionId, "I_PVERSION_PVERSIONINFO");

            entity.HasIndex(e => new { e.PviProdversionId, e.PviType, e.PviKey1, e.PviKey2, e.PviKey3 }, "UN_PVI_INFO").IsUnique();

            entity.Property(e => e.PviId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PVI_ID");
            entity.Property(e => e.PviErpentityId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PVI_ERPENTITY_ID");
            entity.Property(e => e.PviIntvalue)
                .HasPrecision(10)
                .HasColumnName("PVI_INTVALUE");
            entity.Property(e => e.PviKey1)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("PVI_KEY1");
            entity.Property(e => e.PviKey2)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("PVI_KEY2");
            entity.Property(e => e.PviKey3)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("PVI_KEY3");
            entity.Property(e => e.PviProdversionId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PVI_PRODVERSION_ID");
            entity.Property(e => e.PviStringvalue)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("PVI_STRINGVALUE");
            entity.Property(e => e.PviTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PVI_TCREATION");
            entity.Property(e => e.PviTimevalue)
                .HasColumnType("DATE")
                .HasColumnName("PVI_TIMEVALUE");
            entity.Property(e => e.PviTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PVI_TUPDATE");
            entity.Property(e => e.PviType)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("PVI_TYPE");

            entity.HasOne(d => d.PviErpentity).WithMany(p => p.JProdversioninfos)
                .HasForeignKey(d => d.PviErpentityId)
                .HasConstraintName("FK_ERPENTITY_PVERSIONINFO");

            entity.HasOne(d => d.PviProdversion).WithMany(p => p.JProdversioninfos)
                .HasForeignKey(d => d.PviProdversionId)
                .HasConstraintName("FK_PVERSION_PVERSIONINFO");
        });

        modelBuilder.Entity<JProperty>(entity =>
        {
            entity.HasKey(e => e.ProId).HasName("PK_PROPERTY");

            entity.ToTable("J_PROPERTY", "JITTOE");

            entity.HasIndex(e => e.ProPropertysetId, "I_PROPERTYSET_PROPERTY");

            entity.HasIndex(e => e.ProKey, "UN_PRO_KEY").IsUnique();

            entity.HasIndex(e => new { e.ProPropertysetId, e.ProName }, "UN_PRO_NAME").IsUnique();

            entity.Property(e => e.ProId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRO_ID");
            entity.Property(e => e.ProDescr)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("PRO_DESCR");
            entity.Property(e => e.ProEnabled)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("1  ")
                .HasColumnName("PRO_ENABLED");
            entity.Property(e => e.ProKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PRO_KEY");
            entity.Property(e => e.ProLength)
                .HasPrecision(4)
                .HasColumnName("PRO_LENGTH");
            entity.Property(e => e.ProName)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("PRO_NAME");
            entity.Property(e => e.ProOwner)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("PRO_OWNER");
            entity.Property(e => e.ProPropertysetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PRO_PROPERTYSET_ID");
            entity.Property(e => e.ProTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PRO_TCREATION");
            entity.Property(e => e.ProTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PRO_TUPDATE");
            entity.Property(e => e.ProValue)
                .HasMaxLength(3072)
                .IsUnicode(false)
                .HasColumnName("PRO_VALUE");
            entity.Property(e => e.ProValuetype)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("PRO_VALUETYPE");

            entity.HasOne(d => d.ProPropertyset).WithMany(p => p.JProperties)
                .HasForeignKey(d => d.ProPropertysetId)
                .HasConstraintName("FK_PROPERTYSET_PROPERTY");
        });

        modelBuilder.Entity<JPropertyset>(entity =>
        {
            entity.HasKey(e => e.ProsId).HasName("PK_PROPERTYSET");

            entity.ToTable("J_PROPERTYSET", "JITTOE");

            entity.HasIndex(e => e.ProsKey, "UN_PROS_KEY").IsUnique();

            entity.Property(e => e.ProsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PROS_ID");
            entity.Property(e => e.ProsCheckoutdescr)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("PROS_CHECKOUTDESCR");
            entity.Property(e => e.ProsDescr)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("PROS_DESCR");
            entity.Property(e => e.ProsFilename)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("PROS_FILENAME");
            entity.Property(e => e.ProsKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("PROS_KEY");
            entity.Property(e => e.ProsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PROS_TCREATION");
            entity.Property(e => e.ProsTimecheckout)
                .HasColumnType("DATE")
                .HasColumnName("PROS_TIMECHECKOUT");
            entity.Property(e => e.ProsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PROS_TUPDATE");
            entity.Property(e => e.ProsType)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("PROS_TYPE");
        });

        modelBuilder.Entity<JPsprodevent>(entity =>
        {
            entity.HasKey(e => e.PspreId).HasName("PK_PSPRODEVENT");

            entity.ToTable("J_PSPRODEVENT", "JITTOE");

            entity.HasIndex(e => new { e.PspreSourcesystemkey, e.PspreSourceid, e.PspreDeletionid }, "UN_PSPRE_SOURCEID").IsUnique();

            entity.Property(e => e.PspreId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PSPRE_ID");
            entity.Property(e => e.PspreDeletionid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PSPRE_DELETIONID");
            entity.Property(e => e.PspreInfo1)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("PSPRE_INFO1");
            entity.Property(e => e.PspreInfo2)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("PSPRE_INFO2");
            entity.Property(e => e.PspreMachinekey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PSPRE_MACHINEKEY");
            entity.Property(e => e.PspreProdjobnoraw)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("PSPRE_PRODJOBNORAW");
            entity.Property(e => e.PspreQualityclass)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PSPRE_QUALITYCLASS");
            entity.Property(e => e.PspreSourceid)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("PSPRE_SOURCEID");
            entity.Property(e => e.PspreSourcesystemkey)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("PSPRE_SOURCESYSTEMKEY");
            entity.Property(e => e.PspreSourcetimecreated)
                .HasColumnType("DATE")
                .HasColumnName("PSPRE_SOURCETIMECREATED");
            entity.Property(e => e.PspreTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PSPRE_TCREATION");
            entity.Property(e => e.PspreTdeletion)
                .HasColumnType("DATE")
                .HasColumnName("PSPRE_TDELETION");
            entity.Property(e => e.PspreUserkey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PSPRE_USERKEY");
        });

        modelBuilder.Entity<JPsprodeventdatum>(entity =>
        {
            entity.HasKey(e => e.PspredId).HasName("PK_PSPRODEVENTDATA");

            entity.ToTable("J_PSPRODEVENTDATA", "JITTOE");

            entity.HasIndex(e => e.PspredPsprodeventId, "I_PSPE_PSPEDATA");

            entity.Property(e => e.PspredId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PSPRED_ID");
            entity.Property(e => e.PspredKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PSPRED_KEY");
            entity.Property(e => e.PspredPsprodeventId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PSPRED_PSPRODEVENT_ID");
            entity.Property(e => e.PspredTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PSPRED_TCREATION");
            entity.Property(e => e.PspredValue)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("PSPRED_VALUE");

            entity.HasOne(d => d.PspredPsprodevent).WithMany(p => p.JPsprodeventdata)
                .HasForeignKey(d => d.PspredPsprodeventId)
                .HasConstraintName("FK_PSPE_PSPEDATA");
        });

        modelBuilder.Entity<JPurchasecontract>(entity =>
        {
            entity.HasKey(e => e.PcId).HasName("PK_PURCHASECONTRACT");

            entity.ToTable("J_PURCHASECONTRACT", "JITTOE");

            entity.HasIndex(e => e.PcSupplyediId, "I_EDICFG_PURCHASECONTR");

            entity.HasIndex(e => e.PcPurchaseediId, "I_EDICFG_PURCHASECONTR2");

            entity.HasIndex(e => e.PcTransportstockId, "I_TSTOCK_PURCHASECONTRACT");

            entity.HasIndex(e => e.PcContractId, "UN_PC_CONTRACT").IsUnique();

            entity.Property(e => e.PcId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PC_ID");
            entity.Property(e => e.PcContractId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PC_CONTRACT_ID");
            entity.Property(e => e.PcPurchaseediId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PC_PURCHASEEDI_ID");
            entity.Property(e => e.PcSupplyediId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PC_SUPPLYEDI_ID");
            entity.Property(e => e.PcTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PC_TCREATION");
            entity.Property(e => e.PcTransportstockId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PC_TRANSPORTSTOCK_ID");
            entity.Property(e => e.PcTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PC_TUPDATE");

            entity.HasOne(d => d.PcContract).WithOne(p => p.JPurchasecontract)
                .HasForeignKey<JPurchasecontract>(d => d.PcContractId)
                .HasConstraintName("FK_CONTRACT_PURCHASECONTR");

            entity.HasOne(d => d.PcPurchaseedi).WithMany(p => p.JPurchasecontractPcPurchaseedis)
                .HasForeignKey(d => d.PcPurchaseediId)
                .HasConstraintName("FK_EDICFG_PURCHASECONTR2");

            entity.HasOne(d => d.PcSupplyedi).WithMany(p => p.JPurchasecontractPcSupplyedis)
                .HasForeignKey(d => d.PcSupplyediId)
                .HasConstraintName("FK_EDICFG_PURCHASECONTR");

            entity.HasOne(d => d.PcTransportstock).WithMany(p => p.JPurchasecontracts)
                .HasForeignKey(d => d.PcTransportstockId)
                .HasConstraintName("FK_TSTOCK_PURCHASECONTRACT");
        });

        modelBuilder.Entity<JPvss>(entity =>
        {
            entity.HasKey(e => e.PvId).HasName("PK_PVSS");

            entity.ToTable("J_PVSS", "JITTOE");

            entity.HasIndex(e => e.PvKey, "UN_PV_KEY").IsUnique();

            entity.Property(e => e.PvId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PV_ID");
            entity.Property(e => e.PvDescr)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("PV_DESCR");
            entity.Property(e => e.PvKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PV_KEY");
            entity.Property(e => e.PvTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PV_TCREATION");
            entity.Property(e => e.PvTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PV_TUPDATE");
        });

        modelBuilder.Entity<JPvssarea>(entity =>
        {
            entity.HasKey(e => e.PvaId).HasName("PK_PVSSAREA");

            entity.ToTable("J_PVSSAREA", "JITTOE");

            entity.HasIndex(e => e.PvaPlantId, "I_PLANT_PVSSAREA");

            entity.HasIndex(e => e.PvaPvssId, "I_PVSS_PVSSAREA");

            entity.HasIndex(e => e.PvaStockId, "I_STOCK_PVSSAREA");

            entity.HasIndex(e => e.PvaStorageId, "I_STORAGE_PVSSAREA");

            entity.HasIndex(e => new { e.PvaPvssId, e.PvaCode }, "UN_PVA_CODE").IsUnique();

            entity.Property(e => e.PvaId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PVA_ID");
            entity.Property(e => e.PvaCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PVA_CODE");
            entity.Property(e => e.PvaDescr)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("PVA_DESCR");
            entity.Property(e => e.PvaPlantId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PVA_PLANT_ID");
            entity.Property(e => e.PvaPvssId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PVA_PVSS_ID");
            entity.Property(e => e.PvaStockId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PVA_STOCK_ID");
            entity.Property(e => e.PvaStorageId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PVA_STORAGE_ID");
            entity.Property(e => e.PvaSyncrequired)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("0  ")
                .HasColumnName("PVA_SYNCREQUIRED");
            entity.Property(e => e.PvaTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PVA_TCREATION");
            entity.Property(e => e.PvaTimelastsync)
                .HasColumnType("DATE")
                .HasColumnName("PVA_TIMELASTSYNC");
            entity.Property(e => e.PvaTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PVA_TUPDATE");

            entity.HasOne(d => d.PvaPlant).WithMany(p => p.JPvssareaPvaPlants)
                .HasForeignKey(d => d.PvaPlantId)
                .HasConstraintName("FK_PLANT_PVSSAREA");

            entity.HasOne(d => d.PvaPvss).WithMany(p => p.JPvssareas)
                .HasForeignKey(d => d.PvaPvssId)
                .HasConstraintName("FK_PVSS_PVSSAREA");

            entity.HasOne(d => d.PvaStock).WithMany(p => p.JPvssareas)
                .HasForeignKey(d => d.PvaStockId)
                .HasConstraintName("FK_STOCK_PVSSAREA");

            entity.HasOne(d => d.PvaStorage).WithMany(p => p.JPvssareaPvaStorages)
                .HasForeignKey(d => d.PvaStorageId)
                .HasConstraintName("FK_STORAGE_PVSSAREA");
        });

        modelBuilder.Entity<JPvssareaprodunit>(entity =>
        {
            entity.HasKey(e => e.PvapuId).HasName("PK_PVSSAREAPRODUNIT");

            entity.ToTable("J_PVSSAREAPRODUNIT", "JITTOE");

            entity.HasIndex(e => e.PvapuProdunitId, "I_PRODUNIT_PVSSAREAPU");

            entity.HasIndex(e => e.PvapuPvssareaId, "I_PVSSAREA_PVSSAREAPU");

            entity.HasIndex(e => e.PvapuSubjectclassId, "I_SUBJECTCLASS_PVSSAREAPU");

            entity.HasIndex(e => new { e.PvapuPvssareaId, e.PvapuProdunitId }, "UN_PVAPU_PVSSAREAPRODUNIT").IsUnique();

            entity.Property(e => e.PvapuId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PVAPU_ID");
            entity.Property(e => e.PvapuProdunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PVAPU_PRODUNIT_ID");
            entity.Property(e => e.PvapuPvssareaId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PVAPU_PVSSAREA_ID");
            entity.Property(e => e.PvapuSubjectclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PVAPU_SUBJECTCLASS_ID");
            entity.Property(e => e.PvapuTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PVAPU_TCREATION");
            entity.Property(e => e.PvapuTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PVAPU_TUPDATE");

            entity.HasOne(d => d.PvapuProdunit).WithMany(p => p.JPvssareaprodunits)
                .HasForeignKey(d => d.PvapuProdunitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUNIT_PVSSAREAPU");

            entity.HasOne(d => d.PvapuPvssarea).WithMany(p => p.JPvssareaprodunits)
                .HasForeignKey(d => d.PvapuPvssareaId)
                .HasConstraintName("FK_PVSSAREA_PVSSAREAPU");

            entity.HasOne(d => d.PvapuSubjectclass).WithMany(p => p.JPvssareaprodunits)
                .HasForeignKey(d => d.PvapuSubjectclassId)
                .HasConstraintName("FK_SUBJECTCLASS_PVSSAREAPU");
        });

        modelBuilder.Entity<JPvssboxdatum>(entity =>
        {
            entity.HasKey(e => e.PvbdId).HasName("PK_PVSSBOXDATA");

            entity.ToTable("J_PVSSBOXDATA", "JITTOE");

            entity.HasIndex(e => e.PvbdProdunitId, "I_PRODUNIT_PVSSBOXDATA");

            entity.HasIndex(e => e.PvbdPvssId, "I_PVSS_PVSSBOXDATA");

            entity.Property(e => e.PvbdId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PVBD_ID");
            entity.Property(e => e.PvbdBoxtype)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("PVBD_BOXTYPE");
            entity.Property(e => e.PvbdColorcode1)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("PVBD_COLORCODE1");
            entity.Property(e => e.PvbdColorcode2)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("PVBD_COLORCODE2");
            entity.Property(e => e.PvbdNo)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("PVBD_NO");
            entity.Property(e => e.PvbdPaintno)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("PVBD_PAINTNO");
            entity.Property(e => e.PvbdPaintplanno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PVBD_PAINTPLANNO");
            entity.Property(e => e.PvbdPaintplanpos)
                .HasPrecision(5)
                .HasColumnName("PVBD_PAINTPLANPOS");
            entity.Property(e => e.PvbdPaintplansubpos)
                .HasPrecision(5)
                .HasColumnName("PVBD_PAINTPLANSUBPOS");
            entity.Property(e => e.PvbdProdunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PVBD_PRODUNIT_ID");
            entity.Property(e => e.PvbdPvssId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PVBD_PVSS_ID");
            entity.Property(e => e.PvbdQuantity1)
                .HasPrecision(5)
                .HasColumnName("PVBD_QUANTITY1");
            entity.Property(e => e.PvbdQuantity2)
                .HasPrecision(5)
                .HasColumnName("PVBD_QUANTITY2");
            entity.Property(e => e.PvbdSenderrormessage)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasColumnName("PVBD_SENDERRORMESSAGE");
            entity.Property(e => e.PvbdStationcode)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("PVBD_STATIONCODE");
            entity.Property(e => e.PvbdTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PVBD_TCREATION");
            entity.Property(e => e.PvbdTimereceived)
                .HasColumnType("DATE")
                .HasColumnName("PVBD_TIMERECEIVED");
            entity.Property(e => e.PvbdTimesendrequest)
                .HasColumnType("DATE")
                .HasColumnName("PVBD_TIMESENDREQUEST");
            entity.Property(e => e.PvbdTimesent)
                .HasColumnType("DATE")
                .HasColumnName("PVBD_TIMESENT");
            entity.Property(e => e.PvbdTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PVBD_TUPDATE");
            entity.Property(e => e.PvbdTypecode1)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("PVBD_TYPECODE1");
            entity.Property(e => e.PvbdTypecode2)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("PVBD_TYPECODE2");

            entity.HasOne(d => d.PvbdProdunit).WithMany(p => p.JPvssboxdata)
                .HasForeignKey(d => d.PvbdProdunitId)
                .HasConstraintName("FK_PRODUNIT_PVSSBOXDATA");

            entity.HasOne(d => d.PvbdPvss).WithMany(p => p.JPvssboxdata)
                .HasForeignKey(d => d.PvbdPvssId)
                .HasConstraintName("FK_PVSS_PVSSBOXDATA");
        });

        modelBuilder.Entity<JPvssboxtype>(entity =>
        {
            entity.HasKey(e => e.PvbtId).HasName("PK_PVSSBOXTYPE");

            entity.ToTable("J_PVSSBOXTYPE", "JITTOE");

            entity.HasIndex(e => e.PvbtPvsstypeId, "I_PVSSTYPE_PVSSBOXTYPE");

            entity.HasIndex(e => new { e.PvbtPvsstypeId, e.PvbtNo }, "UN_PVBT_NO").IsUnique();

            entity.Property(e => e.PvbtId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PVBT_ID");
            entity.Property(e => e.PvbtMaxsubjectcount)
                .HasPrecision(5)
                .HasColumnName("PVBT_MAXSUBJECTCOUNT");
            entity.Property(e => e.PvbtMinfillingrate)
                .HasPrecision(3)
                .HasColumnName("PVBT_MINFILLINGRATE");
            entity.Property(e => e.PvbtNo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("PVBT_NO");
            entity.Property(e => e.PvbtPvsstypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PVBT_PVSSTYPE_ID");
            entity.Property(e => e.PvbtSupplyfactor)
                .HasPrecision(3)
                .HasColumnName("PVBT_SUPPLYFACTOR");
            entity.Property(e => e.PvbtTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PVBT_TCREATION");
            entity.Property(e => e.PvbtTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PVBT_TUPDATE");

            entity.HasOne(d => d.PvbtPvsstype).WithMany(p => p.JPvssboxtypes)
                .HasForeignKey(d => d.PvbtPvsstypeId)
                .HasConstraintName("FK_PVSSTYPE_PVSSBOXTYPE");
        });

        modelBuilder.Entity<JPvsscomp>(entity =>
        {
            entity.HasKey(e => e.PvcId).HasName("PK_PVSSCOMP");

            entity.ToTable("J_PVSSCOMP", "JITTOE");

            entity.HasIndex(e => e.PvcPvsssubjectId, "I_PVSSSUBJECT_PVSSCOMP");

            entity.HasIndex(e => new { e.PvcPvsssubjectId, e.PvcName }, "UN_PVC_SUBJECT").IsUnique();

            entity.Property(e => e.PvcId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PVC_ID");
            entity.Property(e => e.PvcName)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("PVC_NAME");
            entity.Property(e => e.PvcPvsssubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PVC_PVSSSUBJECT_ID");
            entity.Property(e => e.PvcTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PVC_TCREATION");
            entity.Property(e => e.PvcTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PVC_TUPDATE");

            entity.HasOne(d => d.PvcPvsssubject).WithMany(p => p.JPvsscomps)
                .HasForeignKey(d => d.PvcPvsssubjectId)
                .HasConstraintName("FK_PVSSSUBJECT_PVSSCOMP");
        });

        modelBuilder.Entity<JPvssloc>(entity =>
        {
            entity.HasKey(e => e.PvlId).HasName("PK_PVSSLOC");

            entity.ToTable("J_PVSSLOC", "JITTOE");

            entity.HasIndex(e => e.PvlPvssareaId, "I_PVSSAREA_PVSSLOC");

            entity.HasIndex(e => e.PvlPvsssubjectId, "I_PVSSSUBJECT_PVSSLOC");

            entity.HasIndex(e => e.PvlPvssId, "I_PVSS_PVSSLOC");

            entity.HasIndex(e => new { e.PvlPvssId, e.PvlCode }, "UN_PVL_CODE").IsUnique();

            entity.Property(e => e.PvlId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PVL_ID");
            entity.Property(e => e.PvlCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PVL_CODE");
            entity.Property(e => e.PvlPvssId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PVL_PVSS_ID");
            entity.Property(e => e.PvlPvssareaId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PVL_PVSSAREA_ID");
            entity.Property(e => e.PvlPvsssubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PVL_PVSSSUBJECT_ID");
            entity.Property(e => e.PvlTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PVL_TCREATION");
            entity.Property(e => e.PvlTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PVL_TUPDATE");

            entity.HasOne(d => d.PvlPvss).WithMany(p => p.JPvsslocs)
                .HasForeignKey(d => d.PvlPvssId)
                .HasConstraintName("FK_PVSS_PVSSLOC");

            entity.HasOne(d => d.PvlPvssarea).WithMany(p => p.JPvsslocs)
                .HasForeignKey(d => d.PvlPvssareaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PVSSAREA_PVSSLOC");

            entity.HasOne(d => d.PvlPvsssubject).WithMany(p => p.JPvsslocs)
                .HasForeignKey(d => d.PvlPvsssubjectId)
                .HasConstraintName("FK_PVSSSUBJECT_PVSSLOC");
        });

        modelBuilder.Entity<JPvssreason>(entity =>
        {
            entity.HasKey(e => e.PvrId).HasName("PK_PVSSREASON");

            entity.ToTable("J_PVSSREASON", "JITTOE");

            entity.HasIndex(e => e.PvrFailurereasonId, "I_FREASON_PVSSREASON");

            entity.HasIndex(e => e.PvrPvsstypeId, "I_PVSSTYPE_PVSSREASON");

            entity.Property(e => e.PvrId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PVR_ID");
            entity.Property(e => e.PvrFailurereasonId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PVR_FAILUREREASON_ID");
            entity.Property(e => e.PvrPvsstypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PVR_PVSSTYPE_ID");
            entity.Property(e => e.PvrTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PVR_TCREATION");
            entity.Property(e => e.PvrTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PVR_TUPDATE");

            entity.HasOne(d => d.PvrFailurereason).WithMany(p => p.JPvssreasons)
                .HasForeignKey(d => d.PvrFailurereasonId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FREASON_PVSSREASON");

            entity.HasOne(d => d.PvrPvsstype).WithMany(p => p.JPvssreasons)
                .HasForeignKey(d => d.PvrPvsstypeId)
                .HasConstraintName("FK_PVSSTYPE_PVSSREASON");
        });

        modelBuilder.Entity<JPvsssubject>(entity =>
        {
            entity.HasKey(e => e.PvsId).HasName("PK_PVSSSUBJECT");

            entity.ToTable("J_PVSSSUBJECT", "JITTOE");

            entity.HasIndex(e => e.PvsColorId, "I_COLOR_PVSSSUBJECT");

            entity.HasIndex(e => e.PvsPvsstypeId, "I_PVSSTYPE_PVSSSUBJECT");

            entity.HasIndex(e => e.PvsSubjectId, "I_SUBJECT_PVSSSUBJECT");

            entity.HasIndex(e => new { e.PvsPvsstypeId, e.PvsSubjectId }, "UN_PVS_SUBJECT").IsUnique();

            entity.Property(e => e.PvsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PVS_ID");
            entity.Property(e => e.PvsColorId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PVS_COLOR_ID");
            entity.Property(e => e.PvsCommexternal)
                .HasPrecision(1)
                .HasColumnName("PVS_COMMEXTERNAL");
            entity.Property(e => e.PvsHasstock)
                .HasPrecision(1)
                .HasColumnName("PVS_HASSTOCK");
            entity.Property(e => e.PvsLaqposmessage)
                .HasPrecision(1)
                .HasColumnName("PVS_LAQPOSMESSAGE");
            entity.Property(e => e.PvsPvsstypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PVS_PVSSTYPE_ID");
            entity.Property(e => e.PvsSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PVS_SUBJECT_ID");
            entity.Property(e => e.PvsSyncrequired)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("0  ")
                .HasColumnName("PVS_SYNCREQUIRED");
            entity.Property(e => e.PvsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PVS_TCREATION");
            entity.Property(e => e.PvsTimelastsync)
                .HasColumnType("DATE")
                .HasColumnName("PVS_TIMELASTSYNC");
            entity.Property(e => e.PvsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PVS_TUPDATE");

            entity.HasOne(d => d.PvsColor).WithMany(p => p.JPvsssubjects)
                .HasForeignKey(d => d.PvsColorId)
                .HasConstraintName("FK_COLOR_PVSSSUBJECT");

            entity.HasOne(d => d.PvsPvsstype).WithMany(p => p.JPvsssubjects)
                .HasForeignKey(d => d.PvsPvsstypeId)
                .HasConstraintName("FK_PVSSTYPE_PVSSSUBJECT");

            entity.HasOne(d => d.PvsSubject).WithMany(p => p.JPvsssubjects)
                .HasForeignKey(d => d.PvsSubjectId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SUBJECT_PVSSSUBJECT");
        });

        modelBuilder.Entity<JPvsstype>(entity =>
        {
            entity.HasKey(e => e.PvtId).HasName("PK_PVSSTYPE");

            entity.ToTable("J_PVSSTYPE", "JITTOE");

            entity.HasIndex(e => e.PvtFailurereasonsetId, "I_FREASONSET_PVSSTYPE");

            entity.HasIndex(e => e.PvtPvssareaId, "I_PVSSAREA_PVSSTYPE");

            entity.HasIndex(e => e.PvtPvssId, "I_PVSS_PVSSTYPE");

            entity.HasIndex(e => new { e.PvtPvssId, e.PvtCode }, "UN_PVT_CODE").IsUnique();

            entity.Property(e => e.PvtId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PVT_ID");
            entity.Property(e => e.PvtCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("PVT_CODE");
            entity.Property(e => e.PvtCommissionfloor)
                .HasPrecision(1)
                .HasColumnName("PVT_COMMISSIONFLOOR");
            entity.Property(e => e.PvtFailurereasonsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PVT_FAILUREREASONSET_ID");
            entity.Property(e => e.PvtIssl)
                .HasPrecision(1)
                .HasColumnName("PVT_ISSL");
            entity.Property(e => e.PvtName)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("PVT_NAME");
            entity.Property(e => e.PvtPartgroup)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PVT_PARTGROUP");
            entity.Property(e => e.PvtParttype)
                .HasPrecision(1)
                .HasColumnName("PVT_PARTTYPE");
            entity.Property(e => e.PvtPvssId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PVT_PVSS_ID");
            entity.Property(e => e.PvtPvssareaId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("PVT_PVSSAREA_ID");
            entity.Property(e => e.PvtSyncrequired)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("0  ")
                .HasColumnName("PVT_SYNCREQUIRED");
            entity.Property(e => e.PvtTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PVT_TCREATION");
            entity.Property(e => e.PvtTimelastsync)
                .HasColumnType("DATE")
                .HasColumnName("PVT_TIMELASTSYNC");
            entity.Property(e => e.PvtTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("PVT_TUPDATE");
            entity.Property(e => e.PvtUsepvss)
                .HasPrecision(1)
                .HasColumnName("PVT_USEPVSS");

            entity.HasOne(d => d.PvtFailurereasonset).WithMany(p => p.JPvsstypes)
                .HasForeignKey(d => d.PvtFailurereasonsetId)
                .HasConstraintName("FK_FREASONSET_PVSSTYPE");

            entity.HasOne(d => d.PvtPvss).WithMany(p => p.JPvsstypes)
                .HasForeignKey(d => d.PvtPvssId)
                .HasConstraintName("FK_PVSS_PVSSTYPE");

            entity.HasOne(d => d.PvtPvssarea).WithMany(p => p.JPvsstypes)
                .HasForeignKey(d => d.PvtPvssareaId)
                .HasConstraintName("FK_PVSSAREA_PVSSTYPE");
        });

        modelBuilder.Entity<JQualification>(entity =>
        {
            entity.HasKey(e => e.QId).HasName("PK_QUALIFICATION");

            entity.ToTable("J_QUALIFICATION", "JITTOE");

            entity.HasIndex(e => e.QQualificationsetId, "I_QUALSET_QUAL");

            entity.HasIndex(e => new { e.QKey, e.QDeletionid }, "UN_Q_KEY").IsUnique();

            entity.Property(e => e.QId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("Q_ID");
            entity.Property(e => e.QDeletionid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("Q_DELETIONID");
            entity.Property(e => e.QDescr)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("Q_DESCR");
            entity.Property(e => e.QDuration)
                .HasPrecision(5)
                .HasDefaultValueSql("0  ")
                .HasColumnName("Q_DURATION");
            entity.Property(e => e.QDurationscale)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasDefaultValueSql("'Year'  ")
                .HasColumnName("Q_DURATIONSCALE");
            entity.Property(e => e.QKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("Q_KEY");
            entity.Property(e => e.QQualificationsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("Q_QUALIFICATIONSET_ID");
            entity.Property(e => e.QTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("Q_TCREATION");
            entity.Property(e => e.QTdeletion)
                .HasColumnType("DATE")
                .HasColumnName("Q_TDELETION");
            entity.Property(e => e.QTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("Q_TUPDATE");

            entity.HasOne(d => d.QQualificationset).WithMany(p => p.JQualifications)
                .HasForeignKey(d => d.QQualificationsetId)
                .HasConstraintName("FK_QUALSET_QUAL");
        });

        modelBuilder.Entity<JQualificationclass>(entity =>
        {
            entity.HasKey(e => e.QcId).HasName("PK_QUALIFICATIONCLASS");

            entity.ToTable("J_QUALIFICATIONCLASS", "JITTOE");

            entity.HasIndex(e => e.QcCompanyId, "I_COMPANY_QUALCLASS");

            entity.HasIndex(e => e.QcKey, "UN_QC_KEY").IsUnique();

            entity.Property(e => e.QcId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("QC_ID");
            entity.Property(e => e.QcCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("QC_COMPANY_ID");
            entity.Property(e => e.QcDescr)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("QC_DESCR");
            entity.Property(e => e.QcKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("QC_KEY");
            entity.Property(e => e.QcTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("QC_TCREATION");
            entity.Property(e => e.QcTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("QC_TUPDATE");

            entity.HasOne(d => d.QcCompany).WithMany(p => p.JQualificationclasses)
                .HasForeignKey(d => d.QcCompanyId)
                .HasConstraintName("FK_COMPANY_QUALCLASS");
        });

        modelBuilder.Entity<JQualificationclassmember>(entity =>
        {
            entity.HasKey(e => e.QcmId).HasName("PK_QUALIFICATIONCLASSMEMBER");

            entity.ToTable("J_QUALIFICATIONCLASSMEMBER", "JITTOE");

            entity.HasIndex(e => e.QcmQualificationclassId, "I_QUALCLASS_QUALCLASSMEMBER");

            entity.HasIndex(e => e.QcmQualificationId, "I_QUAL_QUALCLASSMEMBER");

            entity.HasIndex(e => new { e.QcmQualificationId, e.QcmQualificationclassId }, "UN_QCM_KEY").IsUnique();

            entity.Property(e => e.QcmId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("QCM_ID");
            entity.Property(e => e.QcmQualificationId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("QCM_QUALIFICATION_ID");
            entity.Property(e => e.QcmQualificationclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("QCM_QUALIFICATIONCLASS_ID");
            entity.Property(e => e.QcmTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("QCM_TCREATION");
            entity.Property(e => e.QcmTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("QCM_TUPDATE");

            entity.HasOne(d => d.QcmQualification).WithMany(p => p.JQualificationclassmembers)
                .HasForeignKey(d => d.QcmQualificationId)
                .HasConstraintName("FK_QUAL_QUALCLASSMEMBER");

            entity.HasOne(d => d.QcmQualificationclass).WithMany(p => p.JQualificationclassmembers)
                .HasForeignKey(d => d.QcmQualificationclassId)
                .HasConstraintName("FK_QUALCLASS_QUALCLASSMEMBER");
        });

        modelBuilder.Entity<JQualificationset>(entity =>
        {
            entity.HasKey(e => e.QsId).HasName("PK_QUALIFICATIONSET");

            entity.ToTable("J_QUALIFICATIONSET", "JITTOE");

            entity.HasIndex(e => e.QsCompanyId, "I_COMPANY_QSET");

            entity.HasIndex(e => e.QsKey, "UN_QS_KEY").IsUnique();

            entity.Property(e => e.QsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("QS_ID");
            entity.Property(e => e.QsCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("QS_COMPANY_ID");
            entity.Property(e => e.QsDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("QS_DESCR");
            entity.Property(e => e.QsKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("QS_KEY");
            entity.Property(e => e.QsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("QS_TCREATION");
            entity.Property(e => e.QsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("QS_TUPDATE");

            entity.HasOne(d => d.QsCompany).WithMany(p => p.JQualificationsets)
                .HasForeignKey(d => d.QsCompanyId)
                .HasConstraintName("FK_COMPANY_QSET");
        });

        modelBuilder.Entity<JReport>(entity =>
        {
            entity.HasKey(e => e.RId).HasName("PK_REPORT");

            entity.ToTable("J_REPORT", "JITTOE");

            entity.HasIndex(e => e.RReportsetId, "I_REPORTSET_REPORT");

            entity.HasIndex(e => e.RReporttypeId, "I_REPORTTYPE_REPORT");

            entity.HasIndex(e => e.RKey, "UN_R_KEY").IsUnique();

            entity.Property(e => e.RId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("R_ID");
            entity.Property(e => e.RComment)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("R_COMMENT");
            entity.Property(e => e.RDescr)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("R_DESCR");
            entity.Property(e => e.RKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("R_KEY");
            entity.Property(e => e.RReportsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("R_REPORTSET_ID");
            entity.Property(e => e.RReporttypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("R_REPORTTYPE_ID");
            entity.Property(e => e.RTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("R_TCREATION");
            entity.Property(e => e.RTimeexecuted)
                .HasColumnType("DATE")
                .HasColumnName("R_TIMEEXECUTED");
            entity.Property(e => e.RTimeinactivated)
                .HasColumnType("DATE")
                .HasColumnName("R_TIMEINACTIVATED");
            entity.Property(e => e.RTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("R_TUPDATE");

            entity.HasOne(d => d.RReportset).WithMany(p => p.JReports)
                .HasForeignKey(d => d.RReportsetId)
                .HasConstraintName("FK_REPORTSET_REPORT");

            entity.HasOne(d => d.RReporttype).WithMany(p => p.JReports)
                .HasForeignKey(d => d.RReporttypeId)
                .HasConstraintName("FK_REPORTTYPE_REPORT");
        });

        modelBuilder.Entity<JReportclass>(entity =>
        {
            entity.HasKey(e => e.RclId).HasName("PK_REPORTCLASS");

            entity.ToTable("J_REPORTCLASS", "JITTOE");

            entity.HasIndex(e => e.RclCompanyId, "I_COMPANY_REPORTCLASS");

            entity.HasIndex(e => e.RclKey, "UN_RCL_KEY").IsUnique();

            entity.Property(e => e.RclId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("RCL_ID");
            entity.Property(e => e.RclCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("RCL_COMPANY_ID");
            entity.Property(e => e.RclDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RCL_DESCR");
            entity.Property(e => e.RclKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("RCL_KEY");
            entity.Property(e => e.RclTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("RCL_TCREATION");
            entity.Property(e => e.RclTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("RCL_TUPDATE");

            entity.HasOne(d => d.RclCompany).WithMany(p => p.JReportclasses)
                .HasForeignKey(d => d.RclCompanyId)
                .HasConstraintName("FK_COMPANY_REPORTCLASS");
        });

        modelBuilder.Entity<JReportclassmember>(entity =>
        {
            entity.HasKey(e => e.RclmId).HasName("PK_REPORTCLASSMEMBER");

            entity.ToTable("J_REPORTCLASSMEMBER", "JITTOE");

            entity.HasIndex(e => e.RclmReportclassId, "I_RCLASS_RCLASSMEMBER");

            entity.HasIndex(e => e.RclmReportId, "I_REPORT_RCLASSMEMBER");

            entity.HasIndex(e => new { e.RclmReportId, e.RclmReportclassId }, "UN_RCLM_KEY").IsUnique();

            entity.Property(e => e.RclmId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("RCLM_ID");
            entity.Property(e => e.RclmReportId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("RCLM_REPORT_ID");
            entity.Property(e => e.RclmReportclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("RCLM_REPORTCLASS_ID");
            entity.Property(e => e.RclmTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("RCLM_TCREATION");
            entity.Property(e => e.RclmTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("RCLM_TUPDATE");

            entity.HasOne(d => d.RclmReport).WithMany(p => p.JReportclassmembers)
                .HasForeignKey(d => d.RclmReportId)
                .HasConstraintName("FK_REPORT_RCLASSMEMBER");

            entity.HasOne(d => d.RclmReportclass).WithMany(p => p.JReportclassmembers)
                .HasForeignKey(d => d.RclmReportclassId)
                .HasConstraintName("FK_RCLASS_RCLASSMEMBER");
        });

        modelBuilder.Entity<JReportparam>(entity =>
        {
            entity.HasKey(e => e.RpId).HasName("PK_REPORTPARAM");

            entity.ToTable("J_REPORTPARAM", "JITTOE");

            entity.HasIndex(e => e.RpCalendarId, "I_CALENDAR_REPPARAM");

            entity.HasIndex(e => e.RpContractId, "I_CONTRACT_REPPARAM");

            entity.HasIndex(e => e.RpDemandcategoryId, "I_DEMANDCATEGORY_REPPARAM");

            entity.HasIndex(e => e.RpJoinedreportId, "I_JOINEDREPORT_REPPARAM");

            entity.HasIndex(e => e.RpProdstepId, "I_PRODSTEP_REPPARAM");

            entity.HasIndex(e => e.RpProdunitId, "I_PRODUNIT_REPPARAM");

            entity.HasIndex(e => e.RpParentId, "I_REPORTPARAM_REPPARAM");

            entity.HasIndex(e => e.RpReportId, "I_REPORT_REPPARAM");

            entity.HasIndex(e => e.RpStockId, "I_STOCK_REPPARAM");

            entity.HasIndex(e => e.RpSubjectattrId, "I_SUBJECTATTR_REPPARAM");

            entity.HasIndex(e => e.RpSubjectclassId, "I_SUBJECTCLASS_REPPARAM");

            entity.HasIndex(e => new { e.RpReportId, e.RpParentId, e.RpName, e.RpPosno }, "UN_RP_NAMEPOSNO").IsUnique();

            entity.Property(e => e.RpId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("RP_ID");
            entity.Property(e => e.RpCalendarId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("RP_CALENDAR_ID");
            entity.Property(e => e.RpContractId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("RP_CONTRACT_ID");
            entity.Property(e => e.RpData)
                .HasColumnType("LONG RAW")
                .HasColumnName("RP_DATA");
            entity.Property(e => e.RpDatasize)
                .HasPrecision(9)
                .HasColumnName("RP_DATASIZE");
            entity.Property(e => e.RpDecimalvalue)
                .HasColumnType("NUMBER(13,6)")
                .HasColumnName("RP_DECIMALVALUE");
            entity.Property(e => e.RpDemandcategoryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("RP_DEMANDCATEGORY_ID");
            entity.Property(e => e.RpIntvalue)
                .HasPrecision(10)
                .HasColumnName("RP_INTVALUE");
            entity.Property(e => e.RpJoinedreportId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("RP_JOINEDREPORT_ID");
            entity.Property(e => e.RpName)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("RP_NAME");
            entity.Property(e => e.RpParentId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("RP_PARENT_ID");
            entity.Property(e => e.RpPosno)
                .HasPrecision(3)
                .HasColumnName("RP_POSNO");
            entity.Property(e => e.RpProdstepId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("RP_PRODSTEP_ID");
            entity.Property(e => e.RpProdunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("RP_PRODUNIT_ID");
            entity.Property(e => e.RpReportId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("RP_REPORT_ID");
            entity.Property(e => e.RpStockId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("RP_STOCK_ID");
            entity.Property(e => e.RpStringvalue)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("RP_STRINGVALUE");
            entity.Property(e => e.RpSubjectattrId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("RP_SUBJECTATTR_ID");
            entity.Property(e => e.RpSubjectclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("RP_SUBJECTCLASS_ID");
            entity.Property(e => e.RpTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("RP_TCREATION");
            entity.Property(e => e.RpTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("RP_TUPDATE");
            entity.Property(e => e.RpValuetype)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("RP_VALUETYPE");

            entity.HasOne(d => d.RpCalendar).WithMany(p => p.JReportparams)
                .HasForeignKey(d => d.RpCalendarId)
                .HasConstraintName("FK_CALENDAR_REPPARAM");

            entity.HasOne(d => d.RpContract).WithMany(p => p.JReportparams)
                .HasForeignKey(d => d.RpContractId)
                .HasConstraintName("FK_CONTRACT_REPPARAM");

            entity.HasOne(d => d.RpDemandcategory).WithMany(p => p.JReportparams)
                .HasForeignKey(d => d.RpDemandcategoryId)
                .HasConstraintName("FK_DEMANDCATEGORY_REPPARAM");

            entity.HasOne(d => d.RpJoinedreport).WithMany(p => p.JReportparamRpJoinedreports)
                .HasForeignKey(d => d.RpJoinedreportId)
                .HasConstraintName("FK_JOINEDREPORT_REPPARAM");

            entity.HasOne(d => d.RpParent).WithMany(p => p.InverseRpParent)
                .HasForeignKey(d => d.RpParentId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_REPORTPARAM_REPPARAM");

            entity.HasOne(d => d.RpProdstep).WithMany(p => p.JReportparams)
                .HasForeignKey(d => d.RpProdstepId)
                .HasConstraintName("FK_PRODSTEP_REPPARAM");

            entity.HasOne(d => d.RpProdunit).WithMany(p => p.JReportparams)
                .HasForeignKey(d => d.RpProdunitId)
                .HasConstraintName("FK_PRODUNIT_REPPARAM");

            entity.HasOne(d => d.RpReport).WithMany(p => p.JReportparamRpReports)
                .HasForeignKey(d => d.RpReportId)
                .HasConstraintName("FK_REPORT_REPPARAM");

            entity.HasOne(d => d.RpStock).WithMany(p => p.JReportparams)
                .HasForeignKey(d => d.RpStockId)
                .HasConstraintName("FK_STOCK_REPPARAM");

            entity.HasOne(d => d.RpSubjectattr).WithMany(p => p.JReportparams)
                .HasForeignKey(d => d.RpSubjectattrId)
                .HasConstraintName("FK_SUBJECTATTR_REPPARAM");

            entity.HasOne(d => d.RpSubjectclass).WithMany(p => p.JReportparams)
                .HasForeignKey(d => d.RpSubjectclassId)
                .HasConstraintName("FK_SUBJECTCLASS_REPPARAM");
        });

        modelBuilder.Entity<JReportset>(entity =>
        {
            entity.HasKey(e => e.RsId).HasName("PK_REPORTSET");

            entity.ToTable("J_REPORTSET", "JITTOE");

            entity.HasIndex(e => e.RsCompanyId, "I_COMPANY_REPORTSET");

            entity.HasIndex(e => e.RsProductfamilyId, "I_PRODUCTFAMILY_REPORTSET");

            entity.HasIndex(e => e.RsKey, "UN_RS_KEY").IsUnique();

            entity.Property(e => e.RsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("RS_ID");
            entity.Property(e => e.RsCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("RS_COMPANY_ID");
            entity.Property(e => e.RsDescr)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("RS_DESCR");
            entity.Property(e => e.RsKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("RS_KEY");
            entity.Property(e => e.RsProductfamilyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("RS_PRODUCTFAMILY_ID");
            entity.Property(e => e.RsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("RS_TCREATION");
            entity.Property(e => e.RsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("RS_TUPDATE");

            entity.HasOne(d => d.RsCompany).WithMany(p => p.JReportsets)
                .HasForeignKey(d => d.RsCompanyId)
                .HasConstraintName("FK_COMPANY_REPORTSET");

            entity.HasOne(d => d.RsProductfamily).WithMany(p => p.JReportsets)
                .HasForeignKey(d => d.RsProductfamilyId)
                .HasConstraintName("FK_PRODUCTFAMILY_REPORTSET");
        });

        modelBuilder.Entity<JReporttemptable>(entity =>
        {
            entity.HasKey(e => e.RttId).HasName("PK_REPORTTEMPTABLE");

            entity.ToTable("J_REPORTTEMPTABLE", "JITTOE");

            entity.Property(e => e.RttId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("RTT_ID");
            entity.Property(e => e.RttReportid)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("RTT_REPORTID");
            entity.Property(e => e.RttSequencename)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("RTT_SEQUENCENAME");
            entity.Property(e => e.RttTablename)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("RTT_TABLENAME");
            entity.Property(e => e.RttTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("RTT_TCREATION");
        });

        modelBuilder.Entity<JReporttype>(entity =>
        {
            entity.HasKey(e => e.RtId).HasName("PK_REPORTTYPE");

            entity.ToTable("J_REPORTTYPE", "JITTOE");

            entity.HasIndex(e => e.RtReporttypesetId, "I_REPORTTYPESET_REPORTTYPE");

            entity.HasIndex(e => e.RtKey, "UN_RT_KEY").IsUnique();

            entity.Property(e => e.RtId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("RT_ID");
            entity.Property(e => e.RtDescr)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("RT_DESCR");
            entity.Property(e => e.RtKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("RT_KEY");
            entity.Property(e => e.RtReporttypesetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("RT_REPORTTYPESET_ID");
            entity.Property(e => e.RtTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("RT_TCREATION");
            entity.Property(e => e.RtTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("RT_TUPDATE");
            entity.Property(e => e.RtType)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("RT_TYPE");

            entity.HasOne(d => d.RtReporttypeset).WithMany(p => p.JReporttypes)
                .HasForeignKey(d => d.RtReporttypesetId)
                .HasConstraintName("FK_REPORTTYPESET_REPORTTYPE");
        });

        modelBuilder.Entity<JReporttypeset>(entity =>
        {
            entity.HasKey(e => e.RtsId).HasName("PK_REPORTTYPESET");

            entity.ToTable("J_REPORTTYPESET", "JITTOE");

            entity.HasIndex(e => e.RtsCompanyId, "I_COMPANY_REPORTTYPESET");

            entity.HasIndex(e => e.RtsKey, "UN_RTS_KEY").IsUnique();

            entity.Property(e => e.RtsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("RTS_ID");
            entity.Property(e => e.RtsCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("RTS_COMPANY_ID");
            entity.Property(e => e.RtsDescr)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("RTS_DESCR");
            entity.Property(e => e.RtsKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("RTS_KEY");
            entity.Property(e => e.RtsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("RTS_TCREATION");
            entity.Property(e => e.RtsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("RTS_TUPDATE");

            entity.HasOne(d => d.RtsCompany).WithMany(p => p.JReporttypesets)
                .HasForeignKey(d => d.RtsCompanyId)
                .HasConstraintName("FK_COMPANY_REPORTTYPESET");
        });

        modelBuilder.Entity<JSadefBrand>(entity =>
        {
            entity.HasKey(e => e.SadKey).HasName("PK_SAD_BRAND");

            entity.ToTable("J_SADEF_BRAND", "JITTOE");

            entity.HasIndex(e => e.SadPosno, "UN_SAD_BRAND_P").IsUnique();

            entity.Property(e => e.SadKey)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("SAD_KEY");
            entity.Property(e => e.SadPosno)
                .HasPrecision(4)
                .HasColumnName("SAD_POSNO");
            entity.Property(e => e.SadValue)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("SAD_VALUE");
        });

        modelBuilder.Entity<JSadefChryslerappliquecolor>(entity =>
        {
            entity.HasKey(e => e.SadKey).HasName("PK_SAD_CHRYSLERAPPLIQUECOLOR");

            entity.ToTable("J_SADEF_CHRYSLERAPPLIQUECOLOR", "JITTOE");

            entity.HasIndex(e => e.SadPosno, "UN_SAD_CHRYSLERAPPLIQUECOLOR_P").IsUnique();

            entity.Property(e => e.SadKey)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("SAD_KEY");
            entity.Property(e => e.SadPosno)
                .HasPrecision(4)
                .HasColumnName("SAD_POSNO");
            entity.Property(e => e.SadValue)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("SAD_VALUE");
        });

        modelBuilder.Entity<JSadefChryslerbezeltcolor>(entity =>
        {
            entity.HasKey(e => e.SadKey).HasName("PK_SAD_CHRYSLERBEZELTCOLOR");

            entity.ToTable("J_SADEF_CHRYSLERBEZELTCOLOR", "JITTOE");

            entity.HasIndex(e => e.SadPosno, "UN_SAD_CHRYSLERBEZELTCOLOR_P").IsUnique();

            entity.Property(e => e.SadKey)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("SAD_KEY");
            entity.Property(e => e.SadPosno)
                .HasPrecision(4)
                .HasColumnName("SAD_POSNO");
            entity.Property(e => e.SadValue)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("SAD_VALUE");
        });

        modelBuilder.Entity<JSadefChryslerengdevitype>(entity =>
        {
            entity.HasKey(e => e.SadKey).HasName("PK_SAD_CHRYSLERENGDEVITYPE");

            entity.ToTable("J_SADEF_CHRYSLERENGDEVITYPE", "JITTOE");

            entity.HasIndex(e => e.SadPosno, "UN_SAD_CHRYSLERENGDEVITYPE_P").IsUnique();

            entity.Property(e => e.SadKey)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("SAD_KEY");
            entity.Property(e => e.SadPosno)
                .HasPrecision(4)
                .HasColumnName("SAD_POSNO");
            entity.Property(e => e.SadValue)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("SAD_VALUE");
        });

        modelBuilder.Entity<JSadefChryslerringcolor>(entity =>
        {
            entity.HasKey(e => e.SadKey).HasName("PK_SAD_CHRYSLERRINGCOLOR");

            entity.ToTable("J_SADEF_CHRYSLERRINGCOLOR", "JITTOE");

            entity.HasIndex(e => e.SadPosno, "UN_SAD_CHRYSLERRINGCOLOR_P").IsUnique();

            entity.Property(e => e.SadKey)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("SAD_KEY");
            entity.Property(e => e.SadPosno)
                .HasPrecision(4)
                .HasColumnName("SAD_POSNO");
            entity.Property(e => e.SadValue)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("SAD_VALUE");
        });

        modelBuilder.Entity<JSadefDoor>(entity =>
        {
            entity.HasKey(e => e.SadKey).HasName("PK_SAD_DOORS");

            entity.ToTable("J_SADEF_DOORS", "JITTOE");

            entity.HasIndex(e => e.SadPosno, "UN_SAD_DOORS_P").IsUnique();

            entity.Property(e => e.SadKey)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("SAD_KEY");
            entity.Property(e => e.SadPosno)
                .HasPrecision(4)
                .HasColumnName("SAD_POSNO");
            entity.Property(e => e.SadValue)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("SAD_VALUE");
        });

        modelBuilder.Entity<JSadefDrive>(entity =>
        {
            entity.HasKey(e => e.SadKey).HasName("PK_SAD_DRIVE");

            entity.ToTable("J_SADEF_DRIVE", "JITTOE");

            entity.HasIndex(e => e.SadPosno, "UN_SAD_DRIVE_P").IsUnique();

            entity.Property(e => e.SadKey)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("SAD_KEY");
            entity.Property(e => e.SadPosno)
                .HasPrecision(4)
                .HasColumnName("SAD_POSNO");
            entity.Property(e => e.SadValue)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("SAD_VALUE");
        });

        modelBuilder.Entity<JSadefGmcountry>(entity =>
        {
            entity.HasKey(e => e.SadKey).HasName("PK_SAD_GMCOUNTRY");

            entity.ToTable("J_SADEF_GMCOUNTRY", "JITTOE");

            entity.HasIndex(e => e.SadPosno, "UN_SAD_GMCOUNTRY_P").IsUnique();

            entity.Property(e => e.SadKey)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("SAD_KEY");
            entity.Property(e => e.SadPosno)
                .HasPrecision(4)
                .HasColumnName("SAD_POSNO");
            entity.Property(e => e.SadValue)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("SAD_VALUE");
        });

        modelBuilder.Entity<JSadefGmversion>(entity =>
        {
            entity.HasKey(e => e.SadKey).HasName("PK_SAD_GMVERSION");

            entity.ToTable("J_SADEF_GMVERSION", "JITTOE");

            entity.HasIndex(e => e.SadPosno, "UN_SAD_GMVERSION_P").IsUnique();

            entity.Property(e => e.SadKey)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("SAD_KEY");
            entity.Property(e => e.SadPosno)
                .HasPrecision(4)
                .HasColumnName("SAD_POSNO");
            entity.Property(e => e.SadValue)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("SAD_VALUE");
        });

        modelBuilder.Entity<JSadefHorizposition>(entity =>
        {
            entity.HasKey(e => e.SadKey).HasName("PK_SAD_HORIZPOSITION");

            entity.ToTable("J_SADEF_HORIZPOSITION", "JITTOE");

            entity.HasIndex(e => e.SadPosno, "UN_SAD_HORIZPOSITION_P").IsUnique();

            entity.Property(e => e.SadKey)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("SAD_KEY");
            entity.Property(e => e.SadPosno)
                .HasPrecision(4)
                .HasColumnName("SAD_POSNO");
            entity.Property(e => e.SadValue)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("SAD_VALUE");
        });

        modelBuilder.Entity<JSadefLighting>(entity =>
        {
            entity.HasKey(e => e.SadKey).HasName("PK_SAD_LIGHTING");

            entity.ToTable("J_SADEF_LIGHTING", "JITTOE");

            entity.HasIndex(e => e.SadPosno, "UN_SAD_LIGHTING_P").IsUnique();

            entity.Property(e => e.SadKey)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("SAD_KEY");
            entity.Property(e => e.SadPosno)
                .HasPrecision(4)
                .HasColumnName("SAD_POSNO");
            entity.Property(e => e.SadValue)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("SAD_VALUE");
        });

        modelBuilder.Entity<JSadefOrdertype>(entity =>
        {
            entity.HasKey(e => e.SadKey).HasName("PK_SAD_ORDERTYPE");

            entity.ToTable("J_SADEF_ORDERTYPE", "JITTOE");

            entity.HasIndex(e => e.SadPosno, "UN_SAD_ORDERTYPE_P").IsUnique();

            entity.Property(e => e.SadKey)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("SAD_KEY");
            entity.Property(e => e.SadPosno)
                .HasPrecision(4)
                .HasColumnName("SAD_POSNO");
            entity.Property(e => e.SadValue)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("SAD_VALUE");
        });

        modelBuilder.Entity<JSadefPartstyle>(entity =>
        {
            entity.HasKey(e => e.SadKey).HasName("PK_SAD_PARTSTYLE");

            entity.ToTable("J_SADEF_PARTSTYLE", "JITTOE");

            entity.HasIndex(e => e.SadPosno, "UN_SAD_PARTSTYLE_P").IsUnique();

            entity.Property(e => e.SadKey)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("SAD_KEY");
            entity.Property(e => e.SadPosno)
                .HasPrecision(4)
                .HasColumnName("SAD_POSNO");
            entity.Property(e => e.SadValue)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("SAD_VALUE");
        });

        modelBuilder.Entity<JSadefSide>(entity =>
        {
            entity.HasKey(e => e.SadKey).HasName("PK_SAD_SIDE");

            entity.ToTable("J_SADEF_SIDE", "JITTOE");

            entity.HasIndex(e => e.SadPosno, "UN_SAD_SIDE_P").IsUnique();

            entity.Property(e => e.SadKey)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("SAD_KEY");
            entity.Property(e => e.SadPosno)
                .HasPrecision(4)
                .HasColumnName("SAD_POSNO");
            entity.Property(e => e.SadValue)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("SAD_VALUE");
        });

        modelBuilder.Entity<JSadefUppergrillestyle>(entity =>
        {
            entity.HasKey(e => e.SadKey).HasName("PK_SAD_UPPERGRILLESTYLE");

            entity.ToTable("J_SADEF_UPPERGRILLESTYLE", "JITTOE");

            entity.HasIndex(e => e.SadPosno, "UN_SAD_UPPERGRILLESTYLE_P").IsUnique();

            entity.Property(e => e.SadKey)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("SAD_KEY");
            entity.Property(e => e.SadPosno)
                .HasPrecision(4)
                .HasColumnName("SAD_POSNO");
            entity.Property(e => e.SadValue)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("SAD_VALUE");
        });

        modelBuilder.Entity<JSadefVertposition>(entity =>
        {
            entity.HasKey(e => e.SadKey).HasName("PK_SAD_VERTPOSITION");

            entity.ToTable("J_SADEF_VERTPOSITION", "JITTOE");

            entity.HasIndex(e => e.SadPosno, "UN_SAD_VERTPOSITION_P").IsUnique();

            entity.Property(e => e.SadKey)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("SAD_KEY");
            entity.Property(e => e.SadPosno)
                .HasPrecision(4)
                .HasColumnName("SAD_POSNO");
            entity.Property(e => e.SadValue)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("SAD_VALUE");
        });

        modelBuilder.Entity<JSalecontract>(entity =>
        {
            entity.HasKey(e => e.ScId).HasName("PK_SALECONTRACT");

            entity.ToTable("J_SALECONTRACT", "JITTOE");

            entity.HasIndex(e => e.ScDeliveryaddressId, "I_DELIVERYADDRESS_SALECONTR");

            entity.HasIndex(e => e.ScDeliveryediId, "I_EDICFG_SALECONTR");

            entity.HasIndex(e => e.ScSaleaddressId, "I_SALEADDRESS_SALECONTR");

            entity.HasIndex(e => e.ScTransportstockId, "I_TSTOCK_SALECONTRACT");

            entity.HasIndex(e => e.ScContractId, "UN_SC_CONTRACT").IsUnique();

            entity.Property(e => e.ScId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SC_ID");
            entity.Property(e => e.ScContractId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SC_CONTRACT_ID");
            entity.Property(e => e.ScDeliveryaddressId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SC_DELIVERYADDRESS_ID");
            entity.Property(e => e.ScDeliveryediId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SC_DELIVERYEDI_ID");
            entity.Property(e => e.ScSaleaddressId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SC_SALEADDRESS_ID");
            entity.Property(e => e.ScTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SC_TCREATION");
            entity.Property(e => e.ScTransportstockId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SC_TRANSPORTSTOCK_ID");
            entity.Property(e => e.ScTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SC_TUPDATE");

            entity.HasOne(d => d.ScContract).WithOne(p => p.JSalecontract)
                .HasForeignKey<JSalecontract>(d => d.ScContractId)
                .HasConstraintName("FK_CONTRACT_SALECONTR");

            entity.HasOne(d => d.ScDeliveryaddress).WithMany(p => p.JSalecontractScDeliveryaddresses)
                .HasForeignKey(d => d.ScDeliveryaddressId)
                .HasConstraintName("FK_DELIVERYADDRESS_SALECONTR");

            entity.HasOne(d => d.ScDeliveryedi).WithMany(p => p.JSalecontracts)
                .HasForeignKey(d => d.ScDeliveryediId)
                .HasConstraintName("FK_EDICFG_SALECONTR");

            entity.HasOne(d => d.ScSaleaddress).WithMany(p => p.JSalecontractScSaleaddresses)
                .HasForeignKey(d => d.ScSaleaddressId)
                .HasConstraintName("FK_SALEADDRESS_SALECONTR");

            entity.HasOne(d => d.ScTransportstock).WithMany(p => p.JSalecontracts)
                .HasForeignKey(d => d.ScTransportstockId)
                .HasConstraintName("FK_TSTOCK_SALECONTRACT");
        });

        modelBuilder.Entity<JSavalApp>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_APP");

            entity.ToTable("J_SAVAL_APP", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasPrecision(1)
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalApp)
                .HasForeignKey<JSavalApp>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_APP");
        });

        modelBuilder.Entity<JSavalBlockheater>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_BLOCKHEATER");

            entity.ToTable("J_SAVAL_BLOCKHEATER", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasPrecision(1)
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalBlockheater)
                .HasForeignKey<JSavalBlockheater>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_BLOCKHEATER");
        });

        modelBuilder.Entity<JSavalBrand>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_BRAND");

            entity.ToTable("J_SAVAL_BRAND", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalBrand)
                .HasForeignKey<JSavalBrand>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_BRAND");
        });

        modelBuilder.Entity<JSavalBsd>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_BSD");

            entity.ToTable("J_SAVAL_BSD", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasPrecision(1)
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalBsd)
                .HasForeignKey<JSavalBsd>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_BSD");
        });

        modelBuilder.Entity<JSavalBuxhitch>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_BUXHITCH");

            entity.ToTable("J_SAVAL_BUXHITCH", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasPrecision(1)
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalBuxhitch)
                .HasForeignKey<JSavalBuxhitch>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_BUXHITCH");
        });

        modelBuilder.Entity<JSavalCamera>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_CAMERA");

            entity.ToTable("J_SAVAL_CAMERA", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasPrecision(1)
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalCamera)
                .HasForeignKey<JSavalCamera>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_CAMERA");
        });

        modelBuilder.Entity<JSavalChryslerappliquecolor>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_CHRYSLERAPPLIQUECOLOR");

            entity.ToTable("J_SAVAL_CHRYSLERAPPLIQUECOLOR", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalChryslerappliquecolor)
                .HasForeignKey<JSavalChryslerappliquecolor>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_CHRYSLERAPPLIQUECOLOR");

            entity.HasOne(d => d.SavValueNavigation).WithMany(p => p.JSavalChryslerappliquecolors)
                .HasForeignKey(d => d.SavValue)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SAV_VCHRYSLERAPPLIQUECOLOR");
        });

        modelBuilder.Entity<JSavalChryslerbezeltrimcolor>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_CHRYSLERBEZELTRIMCOLOR");

            entity.ToTable("J_SAVAL_CHRYSLERBEZELTRIMCOLOR", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalChryslerbezeltrimcolor)
                .HasForeignKey<JSavalChryslerbezeltrimcolor>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_CHRYSLERBEZELTRIMCOLOR");

            entity.HasOne(d => d.SavValueNavigation).WithMany(p => p.JSavalChryslerbezeltrimcolors)
                .HasForeignKey(d => d.SavValue)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SAV_VCHRYSLERBEZELTRIMCOLOR");
        });

        modelBuilder.Entity<JSavalChryslereafoam>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_CHRYSLEREAFOAM");

            entity.ToTable("J_SAVAL_CHRYSLEREAFOAM", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalChryslereafoam)
                .HasForeignKey<JSavalChryslereafoam>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_CHRYSLEREAFOAM");
        });

        modelBuilder.Entity<JSavalChryslerengdevidate>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_CHRYSLERENGDEVIDATE");

            entity.ToTable("J_SAVAL_CHRYSLERENGDEVIDATE", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasColumnType("DATE")
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalChryslerengdevidate)
                .HasForeignKey<JSavalChryslerengdevidate>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_CHRYSLERENGDEVIDATE");
        });

        modelBuilder.Entity<JSavalChryslerengdevidoc>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_CHRYSLERENGDEVIDOC");

            entity.ToTable("J_SAVAL_CHRYSLERENGDEVIDOC", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalChryslerengdevidoc)
                .HasForeignKey<JSavalChryslerengdevidoc>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_CHRYSLERENGDEVIDOC");
        });

        modelBuilder.Entity<JSavalChryslerengdevitype>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_CHRYSLERENGDEVITYPE");

            entity.ToTable("J_SAVAL_CHRYSLERENGDEVITYPE", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalChryslerengdevitype)
                .HasForeignKey<JSavalChryslerengdevitype>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_CHRYSLERENGDEVITYPE");

            entity.HasOne(d => d.SavValueNavigation).WithMany(p => p.JSavalChryslerengdevitypes)
                .HasForeignKey(d => d.SavValue)
                .HasConstraintName("FK_SAV_VCHRYSLERENGDEVITYPE");
        });

        modelBuilder.Entity<JSavalChryslerringcolor>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_CHRYSLERRINGCOLOR");

            entity.ToTable("J_SAVAL_CHRYSLERRINGCOLOR", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalChryslerringcolor)
                .HasForeignKey<JSavalChryslerringcolor>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_CHRYSLERRINGCOLOR");

            entity.HasOne(d => d.SavValueNavigation).WithMany(p => p.JSavalChryslerringcolors)
                .HasForeignKey(d => d.SavValue)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SAV_VCHRYSLERRINGCOLOR");
        });

        modelBuilder.Entity<JSavalColor>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_COLOR");

            entity.ToTable("J_SAVAL_COLOR", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalColor)
                .HasForeignKey<JSavalColor>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_COLOR");

            entity.HasOne(d => d.SavValueNavigation).WithMany(p => p.JSavalColors)
                .HasForeignKey(d => d.SavValue)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_V_J_SAVAL_COLOR");
        });

        modelBuilder.Entity<JSavalCuringtime>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_CURINGTIME");

            entity.ToTable("J_SAVAL_CURINGTIME", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasPrecision(5)
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalCuringtime)
                .HasForeignKey<JSavalCuringtime>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_CURINGTIME");
        });

        modelBuilder.Entity<JSavalCustPn>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_CUST_PN");

            entity.ToTable("J_SAVAL_CUST_PN", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalCustPn)
                .HasForeignKey<JSavalCustPn>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_CUST_PN");
        });

        modelBuilder.Entity<JSavalDasm>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_DASM");

            entity.ToTable("J_SAVAL_DASM", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasPrecision(1)
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalDasm)
                .HasForeignKey<JSavalDasm>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_DASM");
        });

        modelBuilder.Entity<JSavalDeposit>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_DEPOSIT");

            entity.ToTable("J_SAVAL_DEPOSIT", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasPrecision(1)
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalDeposit)
                .HasForeignKey<JSavalDeposit>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_DEPOSIT");
        });

        modelBuilder.Entity<JSavalDiesel>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_DIESEL");

            entity.ToTable("J_SAVAL_DIESEL", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasPrecision(1)
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalDiesel)
                .HasForeignKey<JSavalDiesel>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_DIESEL");
        });

        modelBuilder.Entity<JSavalDoor>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_DOORS");

            entity.ToTable("J_SAVAL_DOORS", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalDoor)
                .HasForeignKey<JSavalDoor>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_DOORS");

            entity.HasOne(d => d.SavValueNavigation).WithMany(p => p.JSavalDoors)
                .HasForeignKey(d => d.SavValue)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SAV_VDOORS");
        });

        modelBuilder.Entity<JSavalDrive>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_DRIVE");

            entity.ToTable("J_SAVAL_DRIVE", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalDrive)
                .HasForeignKey<JSavalDrive>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_DRIVE");

            entity.HasOne(d => d.SavValueNavigation).WithMany(p => p.JSavalDrives)
                .HasForeignKey(d => d.SavValue)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SAV_VDRIVE");
        });

        modelBuilder.Entity<JSavalDualexhaust>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_DUALEXHAUST");

            entity.ToTable("J_SAVAL_DUALEXHAUST", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasPrecision(1)
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalDualexhaust)
                .HasForeignKey<JSavalDualexhaust>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_DUALEXHAUST");
        });

        modelBuilder.Entity<JSavalFoglamp>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_FOGLAMP");

            entity.ToTable("J_SAVAL_FOGLAMP", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasPrecision(1)
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalFoglamp)
                .HasForeignKey<JSavalFoglamp>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_FOGLAMP");
        });

        modelBuilder.Entity<JSavalGmcountry>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_GMCOUNTRY");

            entity.ToTable("J_SAVAL_GMCOUNTRY", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalGmcountry)
                .HasForeignKey<JSavalGmcountry>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_GMCOUNTRY");

            entity.HasOne(d => d.SavValueNavigation).WithMany(p => p.JSavalGmcountries)
                .HasForeignKey(d => d.SavValue)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SAV_VGMCOUNTRY");
        });

        modelBuilder.Entity<JSavalGmversion>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_GMVERSION");

            entity.ToTable("J_SAVAL_GMVERSION", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalGmversion)
                .HasForeignKey<JSavalGmversion>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_GMVERSION");

            entity.HasOne(d => d.SavValueNavigation).WithMany(p => p.JSavalGmversions)
                .HasForeignKey(d => d.SavValue)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SAV_VGMVERSION");
        });

        modelBuilder.Entity<JSavalHeadlampwasher>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_HEADLAMPWASHER");

            entity.ToTable("J_SAVAL_HEADLAMPWASHER", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasPrecision(1)
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalHeadlampwasher)
                .HasForeignKey<JSavalHeadlampwasher>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_HEADLAMPWASHER");
        });

        modelBuilder.Entity<JSavalHorizposition>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_HORIZPOSITION");

            entity.ToTable("J_SAVAL_HORIZPOSITION", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalHorizposition)
                .HasForeignKey<JSavalHorizposition>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_HORIZPOSITION");

            entity.HasOne(d => d.SavValueNavigation).WithMany(p => p.JSavalHorizpositions)
                .HasForeignKey(d => d.SavValue)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SAV_VHORIZPOSITION");
        });

        modelBuilder.Entity<JSavalImage>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_IMAGE");

            entity.ToTable("J_SAVAL_IMAGE", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalImage)
                .HasForeignKey<JSavalImage>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_IMAGE");

            entity.HasOne(d => d.SavValueNavigation).WithMany(p => p.JSavalImages)
                .HasForeignKey(d => d.SavValue)
                .HasConstraintName("FK_V_J_SAVAL_IMAGE");
        });

        modelBuilder.Entity<JSavalKicksensor>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_KICKSENSOR");

            entity.ToTable("J_SAVAL_KICKSENSOR", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasPrecision(1)
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalKicksensor)
                .HasForeignKey<JSavalKicksensor>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_KICKSENSOR");
        });

        modelBuilder.Entity<JSavalKicksensort>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_KICKSENSORT");

            entity.ToTable("J_SAVAL_KICKSENSORT", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasPrecision(1)
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalKicksensort)
                .HasForeignKey<JSavalKicksensort>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_KICKSENSORT");
        });

        modelBuilder.Entity<JSavalLighting>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_LIGHTING");

            entity.ToTable("J_SAVAL_LIGHTING", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalLighting)
                .HasForeignKey<JSavalLighting>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_LIGHTING");

            entity.HasOne(d => d.SavValueNavigation).WithMany(p => p.JSavalLightings)
                .HasForeignKey(d => d.SavValue)
                .HasConstraintName("FK_SAV_VLIGHTING");
        });

        modelBuilder.Entity<JSavalMca>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_MCA");

            entity.ToTable("J_SAVAL_MCA", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasPrecision(1)
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalMca)
                .HasForeignKey<JSavalMca>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_MCA");
        });

        modelBuilder.Entity<JSavalModelyear>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_MODELYEAR");

            entity.ToTable("J_SAVAL_MODELYEAR", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalModelyear)
                .HasForeignKey<JSavalModelyear>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_MODELYEAR");
        });

        modelBuilder.Entity<JSavalOpengrill>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_OPENGRILL");

            entity.ToTable("J_SAVAL_OPENGRILL", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasPrecision(1)
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalOpengrill)
                .HasForeignKey<JSavalOpengrill>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_OPENGRILL");
        });

        modelBuilder.Entity<JSavalOption>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_OPTIONS");

            entity.ToTable("J_SAVAL_OPTIONS", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalOption)
                .HasForeignKey<JSavalOption>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_OPTIONS");
        });

        modelBuilder.Entity<JSavalParkingassistant>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_PARKINGASSISTANT");

            entity.ToTable("J_SAVAL_PARKINGASSISTANT", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasPrecision(1)
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalParkingassistant)
                .HasForeignKey<JSavalParkingassistant>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_PARKINGASSISTANT");
        });

        modelBuilder.Entity<JSavalPartstyle>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_PARTSTYLE");

            entity.ToTable("J_SAVAL_PARTSTYLE", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalPartstyle)
                .HasForeignKey<JSavalPartstyle>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_PARTSTYLE");

            entity.HasOne(d => d.SavValueNavigation).WithMany(p => p.JSavalPartstyles)
                .HasForeignKey(d => d.SavValue)
                .HasConstraintName("FK_SAV_VPARTSTYLE");
        });

        modelBuilder.Entity<JSavalPdc>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_PDC");

            entity.ToTable("J_SAVAL_PDC", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasPrecision(1)
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalPdc)
                .HasForeignKey<JSavalPdc>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_PDC");
        });

        modelBuilder.Entity<JSavalPed>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_PED");

            entity.ToTable("J_SAVAL_PED", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasPrecision(1)
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalPed)
                .HasForeignKey<JSavalPed>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_PED");
        });

        modelBuilder.Entity<JSavalPhantom>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_PHANTOM");

            entity.ToTable("J_SAVAL_PHANTOM", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasPrecision(1)
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalPhantom)
                .HasForeignKey<JSavalPhantom>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_PHANTOM");
        });

        modelBuilder.Entity<JSavalPicklocation>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_PICKLOCATION");

            entity.ToTable("J_SAVAL_PICKLOCATION", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalPicklocation)
                .HasForeignKey<JSavalPicklocation>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_PICKLOCATION");
        });

        modelBuilder.Entity<JSavalPlate>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_PLATE");

            entity.ToTable("J_SAVAL_PLATE", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasPrecision(1)
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalPlate)
                .HasForeignKey<JSavalPlate>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_PLATE");
        });

        modelBuilder.Entity<JSavalReflector>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_REFLECTOR");

            entity.ToTable("J_SAVAL_REFLECTOR", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasPrecision(1)
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalReflector)
                .HasForeignKey<JSavalReflector>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_REFLECTOR");
        });

        modelBuilder.Entity<JSavalReplacedbynew>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_REPLACEDBYNEW");

            entity.ToTable("J_SAVAL_REPLACEDBYNEW", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasPrecision(1)
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalReplacedbynew)
                .HasForeignKey<JSavalReplacedbynew>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_REPLACEDBYNEW");
        });

        modelBuilder.Entity<JSavalSbza>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_SBZA");

            entity.ToTable("J_SAVAL_SBZA", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasPrecision(1)
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalSbza)
                .HasForeignKey<JSavalSbza>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_SBZA");
        });

        modelBuilder.Entity<JSavalSecondpartnum>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_SECONDPARTNUM");

            entity.ToTable("J_SAVAL_SECONDPARTNUM", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalSecondpartnum)
                .HasForeignKey<JSavalSecondpartnum>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_SECONDPARTNUM");
        });

        modelBuilder.Entity<JSavalServiceorder>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_SERVICEORDER");

            entity.ToTable("J_SAVAL_SERVICEORDER", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalServiceorder)
                .HasForeignKey<JSavalServiceorder>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_SERVICEORDER");
        });

        modelBuilder.Entity<JSavalSide>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_SIDE");

            entity.ToTable("J_SAVAL_SIDE", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalSide)
                .HasForeignKey<JSavalSide>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_SIDE");

            entity.HasOne(d => d.SavValueNavigation).WithMany(p => p.JSavalSides)
                .HasForeignKey(d => d.SavValue)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SAV_VSIDE");
        });

        modelBuilder.Entity<JSavalStandardprice>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_STANDARDPRICE");

            entity.ToTable("J_SAVAL_STANDARDPRICE", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasColumnType("NUMBER(12,2)")
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalStandardprice)
                .HasForeignKey<JSavalStandardprice>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_STANDARDPRICE");
        });

        modelBuilder.Entity<JSavalStdpackqty>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_STDPACKQTY");

            entity.ToTable("J_SAVAL_STDPACKQTY", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasPrecision(9)
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalStdpackqty)
                .HasForeignKey<JSavalStdpackqty>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_STDPACKQTY");
        });

        modelBuilder.Entity<JSavalTirepressuremonitor>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_TIREPRESSUREMONITOR");

            entity.ToTable("J_SAVAL_TIREPRESSUREMONITOR", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasPrecision(1)
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalTirepressuremonitor)
                .HasForeignKey<JSavalTirepressuremonitor>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_TIREPRESSUREMONITOR");
        });

        modelBuilder.Entity<JSavalTowhook>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_TOWHOOK");

            entity.ToTable("J_SAVAL_TOWHOOK", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasPrecision(1)
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalTowhook)
                .HasForeignKey<JSavalTowhook>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_TOWHOOK");
        });

        modelBuilder.Entity<JSavalTrackmaterial>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_TRACKMATERIAL");

            entity.ToTable("J_SAVAL_TRACKMATERIAL", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasPrecision(1)
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalTrackmaterial)
                .HasForeignKey<JSavalTrackmaterial>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_TRACKMATERIAL");
        });

        modelBuilder.Entity<JSavalTrailerhitch>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_TRAILERHITCH");

            entity.ToTable("J_SAVAL_TRAILERHITCH", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasPrecision(1)
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalTrailerhitch)
                .HasForeignKey<JSavalTrailerhitch>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_TRAILERHITCH");
        });

        modelBuilder.Entity<JSavalUnitprice>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_UNITPRICE");

            entity.ToTable("J_SAVAL_UNITPRICE", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasColumnType("NUMBER(12,2)")
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalUnitprice)
                .HasForeignKey<JSavalUnitprice>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_UNITPRICE");
        });

        modelBuilder.Entity<JSavalUnitprice1>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_UNITPRICES");

            entity.ToTable("J_SAVAL_UNITPRICES", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasPrecision(5)
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalUnitprice1)
                .HasForeignKey<JSavalUnitprice1>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_UNITPRICES");
        });

        modelBuilder.Entity<JSavalUppergrillestyle>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_UPPERGRILLESTYLE");

            entity.ToTable("J_SAVAL_UPPERGRILLESTYLE", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalUppergrillestyle)
                .HasForeignKey<JSavalUppergrillestyle>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_UPPERGRILLESTYLE");
        });

        modelBuilder.Entity<JSavalUseasordered>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_USEASORDERED");

            entity.ToTable("J_SAVAL_USEASORDERED", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasPrecision(1)
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalUseasordered)
                .HasForeignKey<JSavalUseasordered>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_USEASORDERED");
        });

        modelBuilder.Entity<JSavalValidation>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_VALIDATION");

            entity.ToTable("J_SAVAL_VALIDATION", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalValidation)
                .HasForeignKey<JSavalValidation>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_VALIDATION");
        });

        modelBuilder.Entity<JSavalVertposition>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_VERTPOSITION");

            entity.ToTable("J_SAVAL_VERTPOSITION", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalVertposition)
                .HasForeignKey<JSavalVertposition>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_VERTPOSITION");

            entity.HasOne(d => d.SavValueNavigation).WithMany(p => p.JSavalVertpositions)
                .HasForeignKey(d => d.SavValue)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SAV_VVERTPOSITION");
        });

        modelBuilder.Entity<JSavalWeight>(entity =>
        {
            entity.HasKey(e => e.SavSubjectId).HasName("PK_SAV_WEIGHT");

            entity.ToTable("J_SAVAL_WEIGHT", "JITTOE");

            entity.Property(e => e.SavSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAV_SUBJECT_ID");
            entity.Property(e => e.SavValue)
                .HasColumnType("NUMBER(9,3)")
                .HasColumnName("SAV_VALUE");

            entity.HasOne(d => d.SavSubject).WithOne(p => p.JSavalWeight)
                .HasForeignKey<JSavalWeight>(d => d.SavSubjectId)
                .HasConstraintName("FK_SAV_WEIGHT");
        });

        modelBuilder.Entity<JSchedule>(entity =>
        {
            entity.HasKey(e => e.SchId).HasName("PK_SCHEDULE");

            entity.ToTable("J_SCHEDULE", "JITTOE");

            entity.HasIndex(e => new { e.SchOrderentryId, e.SchValiduntiltime }, "I_ORDERENTRY_SCHEDULE");

            entity.HasIndex(e => e.SchPredscheduleId, "I_PREDSCHEDULE_SCHEDULE");

            entity.HasIndex(e => e.SchSchedulereleaseId, "I_SRELEASE_SCHEDULE");

            entity.Property(e => e.SchId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SCH_ID");
            entity.Property(e => e.SchBackorderquantity)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("SCH_BACKORDERQUANTITY");
            entity.Property(e => e.SchCumreceiptquantity)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("SCH_CUMRECEIPTQUANTITY");
            entity.Property(e => e.SchCumreceiptreftime)
                .HasColumnType("DATE")
                .HasColumnName("SCH_CUMRECEIPTREFTIME");
            entity.Property(e => e.SchCumreqquantity)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("SCH_CUMREQQUANTITY");
            entity.Property(e => e.SchCumreqreftime)
                .HasColumnType("DATE")
                .HasColumnName("SCH_CUMREQREFTIME");
            entity.Property(e => e.SchLastnoteno)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("SCH_LASTNOTENO");
            entity.Property(e => e.SchLastnotequantity)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("SCH_LASTNOTEQUANTITY");
            entity.Property(e => e.SchLastnotetime)
                .HasColumnType("DATE")
                .HasColumnName("SCH_LASTNOTETIME");
            entity.Property(e => e.SchNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SCH_NO");
            entity.Property(e => e.SchOrderentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SCH_ORDERENTRY_ID");
            entity.Property(e => e.SchPredscheduleId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SCH_PREDSCHEDULE_ID");
            entity.Property(e => e.SchPrevno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SCH_PREVNO");
            entity.Property(e => e.SchPrevtimeissued)
                .HasColumnType("DATE")
                .HasColumnName("SCH_PREVTIMEISSUED");
            entity.Property(e => e.SchSchedulereleaseId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SCH_SCHEDULERELEASE_ID");
            entity.Property(e => e.SchTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SCH_TCREATION");
            entity.Property(e => e.SchTimeissued)
                .HasColumnType("DATE")
                .HasColumnName("SCH_TIMEISSUED");
            entity.Property(e => e.SchTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SCH_TUPDATE");
            entity.Property(e => e.SchValiduntiltime)
                .HasColumnType("DATE")
                .HasColumnName("SCH_VALIDUNTILTIME");

            entity.HasOne(d => d.SchOrderentry).WithMany(p => p.JSchedules)
                .HasForeignKey(d => d.SchOrderentryId)
                .HasConstraintName("FK_ORDERENTRY_SCHEDULE");

            entity.HasOne(d => d.SchPredschedule).WithMany(p => p.InverseSchPredschedule)
                .HasForeignKey(d => d.SchPredscheduleId)
                .HasConstraintName("FK_PREDSCHEDULE_SCHEDULE");

            entity.HasOne(d => d.SchSchedulerelease).WithMany(p => p.JSchedules)
                .HasForeignKey(d => d.SchSchedulereleaseId)
                .HasConstraintName("FK_SRELEASE_SCHEDULE");
        });

        modelBuilder.Entity<JScheduleentry>(entity =>
        {
            entity.HasKey(e => e.ScheId).HasName("PK_SCHEDULEENTRY");

            entity.ToTable("J_SCHEDULEENTRY", "JITTOE");

            entity.HasIndex(e => e.ScheScheduleId, "I_SCHEDULEENTRY_SCHEDULE");

            entity.Property(e => e.ScheId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SCHE_ID");
            entity.Property(e => e.ScheQualifier)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("SCHE_QUALIFIER");
            entity.Property(e => e.ScheQuantity)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("SCHE_QUANTITY");
            entity.Property(e => e.ScheScheduleId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SCHE_SCHEDULE_ID");
            entity.Property(e => e.ScheTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SCHE_TCREATION");
            entity.Property(e => e.ScheTimestamp)
                .HasColumnType("DATE")
                .HasColumnName("SCHE_TIMESTAMP");
            entity.Property(e => e.ScheUntiltimestamp)
                .HasColumnType("DATE")
                .HasColumnName("SCHE_UNTILTIMESTAMP");

            entity.HasOne(d => d.ScheSchedule).WithMany(p => p.JScheduleentries)
                .HasForeignKey(d => d.ScheScheduleId)
                .HasConstraintName("FK_SCHEDULEENTRY_SCHEDULE");
        });

        modelBuilder.Entity<JScheduleentrystatus>(entity =>
        {
            entity.HasKey(e => e.SchesId).HasName("PK_SCHEDULEENTRYSTATUS");

            entity.ToTable("J_SCHEDULEENTRYSTATUS", "JITTOE");

            entity.HasIndex(e => e.SchesScheduleentryId, "I_SCHENTRYSTATUS_SCHENTRY");

            entity.Property(e => e.SchesId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SCHES_ID");
            entity.Property(e => e.SchesDevcomment)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("SCHES_DEVCOMMENT");
            entity.Property(e => e.SchesDevqualifier)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("SCHES_DEVQUALIFIER");
            entity.Property(e => e.SchesDevquantity)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("SCHES_DEVQUANTITY");
            entity.Property(e => e.SchesScheduleentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SCHES_SCHEDULEENTRY_ID");
            entity.Property(e => e.SchesTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SCHES_TCREATION");
            entity.Property(e => e.SchesTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SCHES_TUPDATE");

            entity.HasOne(d => d.SchesScheduleentry).WithMany(p => p.JScheduleentrystatuses)
                .HasForeignKey(d => d.SchesScheduleentryId)
                .HasConstraintName("FK_SCHENTRYSTATUS_SCHENTRY");
        });

        modelBuilder.Entity<JScheduleinfo>(entity =>
        {
            entity.HasKey(e => e.SchiId).HasName("PK_SCHEDULEINFO");

            entity.ToTable("J_SCHEDULEINFO", "JITTOE");

            entity.HasIndex(e => e.SchiScheduleId, "I_SCHEDULE_SCHEDULEINFO");

            entity.HasIndex(e => new { e.SchiScheduleId, e.SchiType, e.SchiKey1, e.SchiKey2, e.SchiKey3 }, "UN_SCHI_INFO").IsUnique();

            entity.Property(e => e.SchiId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SCHI_ID");
            entity.Property(e => e.SchiKey1)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SCHI_KEY1");
            entity.Property(e => e.SchiKey2)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SCHI_KEY2");
            entity.Property(e => e.SchiKey3)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SCHI_KEY3");
            entity.Property(e => e.SchiScheduleId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SCHI_SCHEDULE_ID");
            entity.Property(e => e.SchiStringvalue)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("SCHI_STRINGVALUE");
            entity.Property(e => e.SchiTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SCHI_TCREATION");
            entity.Property(e => e.SchiTimevalue)
                .HasColumnType("DATE")
                .HasColumnName("SCHI_TIMEVALUE");
            entity.Property(e => e.SchiTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SCHI_TUPDATE");
            entity.Property(e => e.SchiType)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasColumnName("SCHI_TYPE");

            entity.HasOne(d => d.SchiSchedule).WithMany(p => p.JScheduleinfos)
                .HasForeignKey(d => d.SchiScheduleId)
                .HasConstraintName("FK_SCHEDULE_SCHEDULEINFO");
        });

        modelBuilder.Entity<JSchedulerelease>(entity =>
        {
            entity.HasKey(e => e.SchrId).HasName("PK_SCHEDULERELEASE");

            entity.ToTable("J_SCHEDULERELEASE", "JITTOE");

            entity.HasIndex(e => e.SchrOrderId, "I_ORDER_SCHEDULERELEASE");

            entity.Property(e => e.SchrId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SCHR_ID");
            entity.Property(e => e.SchrNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SCHR_NO");
            entity.Property(e => e.SchrOrderId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SCHR_ORDER_ID");
            entity.Property(e => e.SchrTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SCHR_TCREATION");
            entity.Property(e => e.SchrTimeissued)
                .HasColumnType("DATE")
                .HasColumnName("SCHR_TIMEISSUED");
            entity.Property(e => e.SchrTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SCHR_TUPDATE");

            entity.HasOne(d => d.SchrOrder).WithMany(p => p.JSchedulereleases)
                .HasForeignKey(d => d.SchrOrderId)
                .HasConstraintName("FK_ORDER_SCHEDULERELEASE");
        });

        modelBuilder.Entity<JScriptdef>(entity =>
        {
            entity.HasKey(e => e.ScrdId).HasName("PK_SCRIPTDEF");

            entity.ToTable("J_SCRIPTDEF", "JITTOE");

            entity.HasIndex(e => e.ScrdKey, "UN_SCRD_KEY").IsUnique();

            entity.Property(e => e.ScrdId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SCRD_ID");
            entity.Property(e => e.ScrdDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SCRD_DESCR");
            entity.Property(e => e.ScrdFilename)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("SCRD_FILENAME");
            entity.Property(e => e.ScrdKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SCRD_KEY");
            entity.Property(e => e.ScrdLanguage)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("SCRD_LANGUAGE");
            entity.Property(e => e.ScrdTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SCRD_TCREATION");
            entity.Property(e => e.ScrdTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SCRD_TUPDATE");
        });

        modelBuilder.Entity<JSearchdef>(entity =>
        {
            entity.HasKey(e => e.SdId).HasName("PK_SEARCHDEF");

            entity.ToTable("J_SEARCHDEF", "JITTOE");

            entity.HasIndex(e => e.SdTooldefId, "I_TOOLDEF_SEARCHDEF");

            entity.HasIndex(e => e.SdToolId, "I_TOOL_SEARCHDEF");

            entity.HasIndex(e => e.SdUserId, "I_USER_SEARCHDEF");

            entity.HasIndex(e => e.SdKey, "UN_SD_KEY").IsUnique();

            entity.Property(e => e.SdId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SD_ID");
            entity.Property(e => e.SdData)
                .HasColumnType("LONG RAW")
                .HasColumnName("SD_DATA");
            entity.Property(e => e.SdDatasize)
                .HasPrecision(9)
                .HasColumnName("SD_DATASIZE");
            entity.Property(e => e.SdDescr)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("SD_DESCR");
            entity.Property(e => e.SdEnabled)
                .HasPrecision(1)
                .HasColumnName("SD_ENABLED");
            entity.Property(e => e.SdKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("SD_KEY");
            entity.Property(e => e.SdObjecttype)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("SD_OBJECTTYPE");
            entity.Property(e => e.SdTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SD_TCREATION");
            entity.Property(e => e.SdToolId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SD_TOOL_ID");
            entity.Property(e => e.SdTooldefId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SD_TOOLDEF_ID");
            entity.Property(e => e.SdTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SD_TUPDATE");
            entity.Property(e => e.SdUserId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SD_USER_ID");

            entity.HasOne(d => d.SdTool).WithMany(p => p.JSearchdefs)
                .HasForeignKey(d => d.SdToolId)
                .HasConstraintName("FK_TOOL_SEARCHDEF");

            entity.HasOne(d => d.SdTooldef).WithMany(p => p.JSearchdefs)
                .HasForeignKey(d => d.SdTooldefId)
                .HasConstraintName("FK_TOOLDEF_SEARCHDEF");

            entity.HasOne(d => d.SdUser).WithMany(p => p.JSearchdefs)
                .HasForeignKey(d => d.SdUserId)
                .HasConstraintName("FK_USER_SEARCHDEF");
        });

        modelBuilder.Entity<JSelfcontract>(entity =>
        {
            entity.HasKey(e => e.SecId).HasName("PK_SELFCONTRACT");

            entity.ToTable("J_SELFCONTRACT", "JITTOE");

            entity.HasIndex(e => e.SecDeliveryaddressId, "I_ADDRESS_SELFCONTR");

            entity.HasIndex(e => e.SecDeliveryediId, "I_EDICFG_SELFCONTR1");

            entity.HasIndex(e => e.SecSupplyediId, "I_EDICFG_SELFCONTR2");

            entity.HasIndex(e => e.SecTransportstocksupplyId, "I_SUPPLYTSTOCK_SELFCONTRACT");

            entity.HasIndex(e => e.SecTransportstockId, "I_TSTOCK_SELFCONTRACT");

            entity.HasIndex(e => e.SecContractId, "UN_SEC_CONTRACT").IsUnique();

            entity.Property(e => e.SecId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SEC_ID");
            entity.Property(e => e.SecContractId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SEC_CONTRACT_ID");
            entity.Property(e => e.SecDeliveryaddressId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SEC_DELIVERYADDRESS_ID");
            entity.Property(e => e.SecDeliveryediId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SEC_DELIVERYEDI_ID");
            entity.Property(e => e.SecSupplyediId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SEC_SUPPLYEDI_ID");
            entity.Property(e => e.SecTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SEC_TCREATION");
            entity.Property(e => e.SecTransportstockId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SEC_TRANSPORTSTOCK_ID");
            entity.Property(e => e.SecTransportstocksupplyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SEC_TRANSPORTSTOCKSUPPLY_ID");
            entity.Property(e => e.SecTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SEC_TUPDATE");

            entity.HasOne(d => d.SecContract).WithOne(p => p.JSelfcontract)
                .HasForeignKey<JSelfcontract>(d => d.SecContractId)
                .HasConstraintName("FK_CONTRACT_SELFCONTR");

            entity.HasOne(d => d.SecDeliveryaddress).WithMany(p => p.JSelfcontracts)
                .HasForeignKey(d => d.SecDeliveryaddressId)
                .HasConstraintName("FK_ADDRESS_SELFCONTR");

            entity.HasOne(d => d.SecDeliveryedi).WithMany(p => p.JSelfcontractSecDeliveryedis)
                .HasForeignKey(d => d.SecDeliveryediId)
                .HasConstraintName("FK_EDICFG_SELFCONTR1");

            entity.HasOne(d => d.SecSupplyedi).WithMany(p => p.JSelfcontractSecSupplyedis)
                .HasForeignKey(d => d.SecSupplyediId)
                .HasConstraintName("FK_EDICFG_SELFCONTR2");

            entity.HasOne(d => d.SecTransportstock).WithMany(p => p.JSelfcontractSecTransportstocks)
                .HasForeignKey(d => d.SecTransportstockId)
                .HasConstraintName("FK_TSTOCK_SELFCONTRACT");

            entity.HasOne(d => d.SecTransportstocksupply).WithMany(p => p.JSelfcontractSecTransportstocksupplies)
                .HasForeignKey(d => d.SecTransportstocksupplyId)
                .HasConstraintName("FK_SUPPLYTSTOCK_SELFCONTRACT");
        });

        modelBuilder.Entity<JServer>(entity =>
        {
            entity.HasKey(e => e.SerId).HasName("PK_SERVER");

            entity.ToTable("J_SERVER", "JITTOE");

            entity.HasIndex(e => e.SerLogId, "I_LOG_SERVER");

            entity.HasIndex(e => e.SerUseridentpolicyId, "I_USERIDENTPOLICY_SERVER");

            entity.HasIndex(e => e.SerKey, "UN_SER_KEY").IsUnique();

            entity.Property(e => e.SerId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SER_ID");
            entity.Property(e => e.SerDescr)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("SER_DESCR");
            entity.Property(e => e.SerKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SER_KEY");
            entity.Property(e => e.SerLogId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SER_LOG_ID");
            entity.Property(e => e.SerLogenabled)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("1  ")
                .HasColumnName("SER_LOGENABLED");
            entity.Property(e => e.SerTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SER_TCREATION");
            entity.Property(e => e.SerTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SER_TUPDATE");
            entity.Property(e => e.SerUseridentpolicyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SER_USERIDENTPOLICY_ID");

            entity.HasOne(d => d.SerLog).WithMany(p => p.JServers)
                .HasForeignKey(d => d.SerLogId)
                .HasConstraintName("FK_LOG_SERVER");

            entity.HasOne(d => d.SerUseridentpolicy).WithMany(p => p.JServers)
                .HasForeignKey(d => d.SerUseridentpolicyId)
                .HasConstraintName("FK_USERIDENTPOLICY_SERVER");
        });

        modelBuilder.Entity<JServerlog>(entity =>
        {
            entity.HasKey(e => e.SerlId).HasName("PK_SERVERLOG");

            entity.ToTable("J_SERVERLOG", "JITTOE");

            entity.HasIndex(e => e.SerlServerId, "I_SERVER_SERVERLOG");

            entity.HasIndex(e => e.SerlTransitionId, "I_TRANSITION_SERVERLOG");

            entity.Property(e => e.SerlId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SERL_ID");
            entity.Property(e => e.SerlComment)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasColumnName("SERL_COMMENT");
            entity.Property(e => e.SerlServerId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SERL_SERVER_ID");
            entity.Property(e => e.SerlTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SERL_TCREATION");
            entity.Property(e => e.SerlTransitionId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SERL_TRANSITION_ID");

            entity.HasOne(d => d.SerlServer).WithMany(p => p.JServerlogs)
                .HasForeignKey(d => d.SerlServerId)
                .HasConstraintName("FK_SERVER_SERVERLOG");

            entity.HasOne(d => d.SerlTransition).WithMany(p => p.JServerlogs)
                .HasForeignKey(d => d.SerlTransitionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TRANSITION_SERVERLOG");
        });

        modelBuilder.Entity<JService>(entity =>
        {
            entity.HasKey(e => e.SvcId).HasName("PK_SERVICE");

            entity.ToTable("J_SERVICE", "JITTOE");

            entity.HasIndex(e => e.SvcServicedefId, "I_SERVICEDEF_SERVICE");

            entity.HasIndex(e => e.SvcStationId, "I_STATION_SERVICE");

            entity.HasIndex(e => new { e.SvcStationId, e.SvcServicedefId }, "UN_SVC_SERVICE").IsUnique();

            entity.Property(e => e.SvcId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SVC_ID");
            entity.Property(e => e.SvcEnabled)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("1  ")
                .HasColumnName("SVC_ENABLED");
            entity.Property(e => e.SvcServicedefId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SVC_SERVICEDEF_ID");
            entity.Property(e => e.SvcStationId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SVC_STATION_ID");
            entity.Property(e => e.SvcTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SVC_TCREATION");
            entity.Property(e => e.SvcTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SVC_TUPDATE");

            entity.HasOne(d => d.SvcServicedef).WithMany(p => p.JServices)
                .HasForeignKey(d => d.SvcServicedefId)
                .HasConstraintName("FK_SERVICEDEF_SERVICE");

            entity.HasOne(d => d.SvcStation).WithMany(p => p.JServices)
                .HasForeignKey(d => d.SvcStationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_STATION_SERVICE");
        });

        modelBuilder.Entity<JServicedef>(entity =>
        {
            entity.HasKey(e => e.SvcdId).HasName("PK_SERVICEDEF");

            entity.ToTable("J_SERVICEDEF", "JITTOE");

            entity.HasIndex(e => e.SvcdConfigdefId, "I_CONFIGDEF_SERVICEDEF");

            entity.HasIndex(e => e.SvcdServerId, "I_SERVER_SERVICEDEF");

            entity.HasIndex(e => e.SvcdKey, "UN_SVCD_KEY").IsUnique();

            entity.HasIndex(e => new { e.SvcdServerId, e.SvcdName, e.SvcdDriver }, "UN_SVCD_NAME").IsUnique();

            entity.Property(e => e.SvcdId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SVCD_ID");
            entity.Property(e => e.SvcdConfigdefId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SVCD_CONFIGDEF_ID");
            entity.Property(e => e.SvcdDescr)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("SVCD_DESCR");
            entity.Property(e => e.SvcdDriver)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SVCD_DRIVER");
            entity.Property(e => e.SvcdKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SVCD_KEY");
            entity.Property(e => e.SvcdName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("SVCD_NAME");
            entity.Property(e => e.SvcdServerId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SVCD_SERVER_ID");
            entity.Property(e => e.SvcdTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SVCD_TCREATION");
            entity.Property(e => e.SvcdTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SVCD_TUPDATE");

            entity.HasOne(d => d.SvcdConfigdef).WithMany(p => p.JServicedefs)
                .HasForeignKey(d => d.SvcdConfigdefId)
                .HasConstraintName("FK_CONFIGDEF_SERVICEDEF");

            entity.HasOne(d => d.SvcdServer).WithMany(p => p.JServicedefs)
                .HasForeignKey(d => d.SvcdServerId)
                .HasConstraintName("FK_SERVER_SERVICEDEF");
        });

        modelBuilder.Entity<JServicedefpropertyset>(entity =>
        {
            entity.HasKey(e => e.SvcdpsId).HasName("PK_SERVICEDEFPROPERTYSET");

            entity.ToTable("J_SERVICEDEFPROPERTYSET", "JITTOE");

            entity.HasIndex(e => e.SvcdpsPropertysetId, "I_PROPERTYSET_SDPSET");

            entity.HasIndex(e => e.SvcdpsServicedefId, "I_SERVICEDEF_SDPSET");

            entity.HasIndex(e => new { e.SvcdpsServicedefId, e.SvcdpsPropertysetId }, "UN_SVCDPS_KEY").IsUnique();

            entity.Property(e => e.SvcdpsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SVCDPS_ID");
            entity.Property(e => e.SvcdpsPropertysetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SVCDPS_PROPERTYSET_ID");
            entity.Property(e => e.SvcdpsServicedefId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SVCDPS_SERVICEDEF_ID");
            entity.Property(e => e.SvcdpsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SVCDPS_TCREATION");

            entity.HasOne(d => d.SvcdpsPropertyset).WithMany(p => p.JServicedefpropertysets)
                .HasForeignKey(d => d.SvcdpsPropertysetId)
                .HasConstraintName("FK_PROPERTYSET_SDPSET");

            entity.HasOne(d => d.SvcdpsServicedef).WithMany(p => p.JServicedefpropertysets)
                .HasForeignKey(d => d.SvcdpsServicedefId)
                .HasConstraintName("FK_SERVICEDEF_SDPSET");
        });

        modelBuilder.Entity<JServicepropertyset>(entity =>
        {
            entity.HasKey(e => e.SvcpsId).HasName("PK_SERVICEPROPERTYSET");

            entity.ToTable("J_SERVICEPROPERTYSET", "JITTOE");

            entity.HasIndex(e => e.SvcpsPropertysetId, "I_PROPERTYSET_SPSET");

            entity.HasIndex(e => e.SvcpsServiceId, "I_SERVICE_SPSET");

            entity.HasIndex(e => new { e.SvcpsServiceId, e.SvcpsPropertysetId }, "UN_SVCPS_KEY").IsUnique();

            entity.Property(e => e.SvcpsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SVCPS_ID");
            entity.Property(e => e.SvcpsPropertysetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SVCPS_PROPERTYSET_ID");
            entity.Property(e => e.SvcpsServiceId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SVCPS_SERVICE_ID");
            entity.Property(e => e.SvcpsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SVCPS_TCREATION");

            entity.HasOne(d => d.SvcpsPropertyset).WithMany(p => p.JServicepropertysets)
                .HasForeignKey(d => d.SvcpsPropertysetId)
                .HasConstraintName("FK_PROPERTYSET_SPSET");

            entity.HasOne(d => d.SvcpsService).WithMany(p => p.JServicepropertysets)
                .HasForeignKey(d => d.SvcpsServiceId)
                .HasConstraintName("FK_SERVICE_SPSET");
        });

        modelBuilder.Entity<JSession>(entity =>
        {
            entity.HasKey(e => e.SessId).HasName("PK_SESSION");

            entity.ToTable("J_SESSION", "JITTOE");

            entity.HasIndex(e => e.SessCompanyId, "I_COMPANY_SESSION");

            entity.Property(e => e.SessId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SESS_ID");
            entity.Property(e => e.SessCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SESS_COMPANY_ID");
            entity.Property(e => e.SessTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SESS_TCREATION");
            entity.Property(e => e.SessTimeended)
                .HasColumnType("DATE")
                .HasColumnName("SESS_TIMEENDED");
            entity.Property(e => e.SessTool)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("SESS_TOOL");
            entity.Property(e => e.SessTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SESS_TUPDATE");
            entity.Property(e => e.SessUser)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("SESS_USER");
            entity.Property(e => e.SessWorkstation)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("SESS_WORKSTATION");

            entity.HasOne(d => d.SessCompany).WithMany(p => p.JSessions)
                .HasForeignKey(d => d.SessCompanyId)
                .HasConstraintName("FK_COMPANY_SESSION");
        });

        modelBuilder.Entity<JSessioninfo>(entity =>
        {
            entity.HasKey(e => e.SessiId).HasName("PK_SESSIONINFO");

            entity.ToTable("J_SESSIONINFO", "JITTOE");

            entity.HasIndex(e => e.SessiSessionId, "I_SESSION_SESSIONINFO");

            entity.HasIndex(e => new { e.SessiSessionId, e.SessiType, e.SessiKey1, e.SessiKey2, e.SessiKey3 }, "UN_SESSI_INFO").IsUnique();

            entity.Property(e => e.SessiId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SESSI_ID");
            entity.Property(e => e.SessiKey1)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SESSI_KEY1");
            entity.Property(e => e.SessiKey2)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SESSI_KEY2");
            entity.Property(e => e.SessiKey3)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SESSI_KEY3");
            entity.Property(e => e.SessiSessionId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SESSI_SESSION_ID");
            entity.Property(e => e.SessiStringvalue)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("SESSI_STRINGVALUE");
            entity.Property(e => e.SessiTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SESSI_TCREATION");
            entity.Property(e => e.SessiTimevalue)
                .HasColumnType("DATE")
                .HasColumnName("SESSI_TIMEVALUE");
            entity.Property(e => e.SessiTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SESSI_TUPDATE");
            entity.Property(e => e.SessiType)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("SESSI_TYPE");

            entity.HasOne(d => d.SessiSession).WithMany(p => p.JSessioninfos)
                .HasForeignKey(d => d.SessiSessionId)
                .HasConstraintName("FK_SESSION_SESSIONINFO");
        });

        modelBuilder.Entity<JSkid>(entity =>
        {
            entity.HasKey(e => e.SkId).HasName("PK_SKID");

            entity.ToTable("J_SKID", "JITTOE");

            entity.HasIndex(e => e.SkColorId, "I_COLOR_SKID");

            entity.HasIndex(e => e.SkContainerId, "I_CONTAINER_SKID");

            entity.HasIndex(e => e.SkLastskidtypeId, "I_LASTSKIDTYPE_SKID");

            entity.HasIndex(e => e.SkPaintunitId, "I_PAINTUNIT_SKID");

            entity.HasIndex(e => e.SkSkidsetId, "I_SKIDSET_SKID");

            entity.HasIndex(e => e.SkSkidtypeId, "I_SKIDTYPE_SKID");

            entity.HasIndex(e => new { e.SkSkidsetId, e.SkCode }, "UN_SK_CODE").IsUnique();

            entity.Property(e => e.SkId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SK_ID");
            entity.Property(e => e.SkCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SK_CODE");
            entity.Property(e => e.SkColorId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SK_COLOR_ID");
            entity.Property(e => e.SkContainerId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SK_CONTAINER_ID");
            entity.Property(e => e.SkCyclecount)
                .HasPrecision(6)
                .HasColumnName("SK_CYCLECOUNT");
            entity.Property(e => e.SkDescr)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("SK_DESCR");
            entity.Property(e => e.SkLastskidtypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SK_LASTSKIDTYPE_ID");
            entity.Property(e => e.SkNeedsmaintenance)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("0  ")
                .HasColumnName("SK_NEEDSMAINTENANCE");
            entity.Property(e => e.SkPaintunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SK_PAINTUNIT_ID");
            entity.Property(e => e.SkPos)
                .HasPrecision(4)
                .HasColumnName("SK_POS");
            entity.Property(e => e.SkSkidsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SK_SKIDSET_ID");
            entity.Property(e => e.SkSkidtypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SK_SKIDTYPE_ID");
            entity.Property(e => e.SkState)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasDefaultValueSql("'Available'  ")
                .HasColumnName("SK_STATE");
            entity.Property(e => e.SkTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SK_TCREATION");
            entity.Property(e => e.SkTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SK_TUPDATE");

            entity.HasOne(d => d.SkColor).WithMany(p => p.JSkids)
                .HasForeignKey(d => d.SkColorId)
                .HasConstraintName("FK_COLOR_SKID");

            entity.HasOne(d => d.SkContainer).WithMany(p => p.JSkids)
                .HasForeignKey(d => d.SkContainerId)
                .HasConstraintName("FK_CONTAINER_SKID");

            entity.HasOne(d => d.SkLastskidtype).WithMany(p => p.JSkidSkLastskidtypes)
                .HasForeignKey(d => d.SkLastskidtypeId)
                .HasConstraintName("FK_LASTSKIDTYPE_SKID");

            entity.HasOne(d => d.SkPaintunit).WithMany(p => p.JSkids)
                .HasForeignKey(d => d.SkPaintunitId)
                .HasConstraintName("FK_PAINTUNIT_SKID");

            entity.HasOne(d => d.SkSkidset).WithMany(p => p.JSkids)
                .HasForeignKey(d => d.SkSkidsetId)
                .HasConstraintName("FK_SKIDSET_SKID");

            entity.HasOne(d => d.SkSkidtype).WithMany(p => p.JSkidSkSkidtypes)
                .HasForeignKey(d => d.SkSkidtypeId)
                .HasConstraintName("FK_SKIDTYPE_SKID");
        });

        modelBuilder.Entity<JSkidbuffer>(entity =>
        {
            entity.HasKey(e => e.SkbId).HasName("PK_SKIDBUFFER");

            entity.ToTable("J_SKIDBUFFER", "JITTOE");

            entity.HasIndex(e => e.SkbCompanyId, "I_COMPANY_SKIDBUFFER");

            entity.HasIndex(e => e.SkbKey, "UN_SKB_KEY").IsUnique();

            entity.Property(e => e.SkbId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SKB_ID");
            entity.Property(e => e.SkbCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SKB_COMPANY_ID");
            entity.Property(e => e.SkbDescr)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("SKB_DESCR");
            entity.Property(e => e.SkbKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SKB_KEY");
            entity.Property(e => e.SkbMaxentries)
                .HasPrecision(5)
                .HasDefaultValueSql("0  ")
                .HasColumnName("SKB_MAXENTRIES");
            entity.Property(e => e.SkbMaxentryageinminutes)
                .HasPrecision(9)
                .HasDefaultValueSql("0  ")
                .HasColumnName("SKB_MAXENTRYAGEINMINUTES");
            entity.Property(e => e.SkbTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SKB_TCREATION");
            entity.Property(e => e.SkbTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SKB_TUPDATE");

            entity.HasOne(d => d.SkbCompany).WithMany(p => p.JSkidbuffers)
                .HasForeignKey(d => d.SkbCompanyId)
                .HasConstraintName("FK_COMPANY_SKIDBUFFER");
        });

        modelBuilder.Entity<JSkidbufferclass>(entity =>
        {
            entity.HasKey(e => e.SkbcId).HasName("PK_SKIDBUFFERCLASS");

            entity.ToTable("J_SKIDBUFFERCLASS", "JITTOE");

            entity.HasIndex(e => e.SkbcCompanyId, "I_COMPANY_SKBCLASS");

            entity.HasIndex(e => e.SkbcKey, "UN_SKBC_KEY").IsUnique();

            entity.Property(e => e.SkbcId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SKBC_ID");
            entity.Property(e => e.SkbcCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SKBC_COMPANY_ID");
            entity.Property(e => e.SkbcDescr)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SKBC_DESCR");
            entity.Property(e => e.SkbcKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SKBC_KEY");
            entity.Property(e => e.SkbcTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SKBC_TCREATION");
            entity.Property(e => e.SkbcTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SKBC_TUPDATE");
            entity.Property(e => e.SkbcUniqueskids)
                .HasPrecision(1)
                .HasColumnName("SKBC_UNIQUESKIDS");

            entity.HasOne(d => d.SkbcCompany).WithMany(p => p.JSkidbufferclasses)
                .HasForeignKey(d => d.SkbcCompanyId)
                .HasConstraintName("FK_COMPANY_SKBCLASS");
        });

        modelBuilder.Entity<JSkidbufferclassmember>(entity =>
        {
            entity.HasKey(e => e.SkbcmId).HasName("PK_SKIDBUFFERCLASSMEMBER");

            entity.ToTable("J_SKIDBUFFERCLASSMEMBER", "JITTOE");

            entity.HasIndex(e => e.SkbcmSkidbufferclassId, "I_SKBC_SKBCMEMBER");

            entity.HasIndex(e => e.SkbcmSkidbufferId, "I_SKIDBUFFER_SKBCMEMBER");

            entity.HasIndex(e => new { e.SkbcmSkidbufferId, e.SkbcmSkidbufferclassId }, "UN_SKBCM_KEY").IsUnique();

            entity.Property(e => e.SkbcmId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SKBCM_ID");
            entity.Property(e => e.SkbcmSkidbufferId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SKBCM_SKIDBUFFER_ID");
            entity.Property(e => e.SkbcmSkidbufferclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SKBCM_SKIDBUFFERCLASS_ID");
            entity.Property(e => e.SkbcmTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SKBCM_TCREATION");
            entity.Property(e => e.SkbcmTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SKBCM_TUPDATE");

            entity.HasOne(d => d.SkbcmSkidbuffer).WithMany(p => p.JSkidbufferclassmembers)
                .HasForeignKey(d => d.SkbcmSkidbufferId)
                .HasConstraintName("FK_SKIDBUFFER_SKBCMEMBER");

            entity.HasOne(d => d.SkbcmSkidbufferclass).WithMany(p => p.JSkidbufferclassmembers)
                .HasForeignKey(d => d.SkbcmSkidbufferclassId)
                .HasConstraintName("FK_SKBC_SKBCMEMBER");
        });

        modelBuilder.Entity<JSkidbufferentry>(entity =>
        {
            entity.HasKey(e => e.SkbeId).HasName("PK_SKIDBUFFERENTRY");

            entity.ToTable("J_SKIDBUFFERENTRY", "JITTOE");

            entity.HasIndex(e => e.SkbeSkidbufferId, "I_SKIDBUFFER_SKBENTRY");

            entity.HasIndex(e => e.SkbeSkidId, "I_SKID_SKBENTRY");

            entity.HasIndex(e => new { e.SkbeSkidbufferId, e.SkbeSkidId }, "UN_SKBE_KEY").IsUnique();

            entity.Property(e => e.SkbeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SKBE_ID");
            entity.Property(e => e.SkbeSkidId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SKBE_SKID_ID");
            entity.Property(e => e.SkbeSkidbufferId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SKBE_SKIDBUFFER_ID");
            entity.Property(e => e.SkbeTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SKBE_TCREATION");
            entity.Property(e => e.SkbeTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SKBE_TUPDATE");

            entity.HasOne(d => d.SkbeSkid).WithMany(p => p.JSkidbufferentries)
                .HasForeignKey(d => d.SkbeSkidId)
                .HasConstraintName("FK_SKID_SKBENTRY");

            entity.HasOne(d => d.SkbeSkidbuffer).WithMany(p => p.JSkidbufferentries)
                .HasForeignKey(d => d.SkbeSkidbufferId)
                .HasConstraintName("FK_SKIDBUFFER_SKBENTRY");
        });

        modelBuilder.Entity<JSkiddatum>(entity =>
        {
            entity.HasKey(e => e.SkdId).HasName("PK_SKIDDATA");

            entity.ToTable("J_SKIDDATA", "JITTOE");

            entity.HasIndex(e => e.SkdSkidId, "I_SKID_SKIDDATA");

            entity.Property(e => e.SkdId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SKD_ID");
            entity.Property(e => e.SkdKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SKD_KEY");
            entity.Property(e => e.SkdSkidId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SKD_SKID_ID");
            entity.Property(e => e.SkdTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SKD_TCREATION");
            entity.Property(e => e.SkdTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SKD_TUPDATE");
            entity.Property(e => e.SkdValue)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("SKD_VALUE");

            entity.HasOne(d => d.SkdSkid).WithMany(p => p.JSkiddata)
                .HasForeignKey(d => d.SkdSkidId)
                .HasConstraintName("FK_SKID_SKIDDATA");
        });

        modelBuilder.Entity<JSkidevent>(entity =>
        {
            entity.HasKey(e => e.SkeId).HasName("PK_SKIDEVENT");

            entity.ToTable("J_SKIDEVENT", "JITTOE");

            entity.HasIndex(e => e.SkeSkideventsetId, "I_SKIDEVENTSET_SKEVENT");

            entity.HasIndex(e => e.SkeSkidId, "I_SKID_SKEVENT");

            entity.HasIndex(e => e.SkeTransitionId, "I_TRANSITION_SKEVENT");

            entity.Property(e => e.SkeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SKE_ID");
            entity.Property(e => e.SkeEventkind)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("SKE_EVENTKIND");
            entity.Property(e => e.SkeInfo1)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("SKE_INFO1");
            entity.Property(e => e.SkeInfo2)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("SKE_INFO2");
            entity.Property(e => e.SkeInfo3)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("SKE_INFO3");
            entity.Property(e => e.SkeSkidId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SKE_SKID_ID");
            entity.Property(e => e.SkeSkideventsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SKE_SKIDEVENTSET_ID");
            entity.Property(e => e.SkeTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SKE_TCREATION");
            entity.Property(e => e.SkeTransitionId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SKE_TRANSITION_ID");

            entity.HasOne(d => d.SkeSkid).WithMany(p => p.JSkidevents)
                .HasForeignKey(d => d.SkeSkidId)
                .HasConstraintName("FK_SKID_SKEVENT");

            entity.HasOne(d => d.SkeSkideventset).WithMany(p => p.JSkidevents)
                .HasForeignKey(d => d.SkeSkideventsetId)
                .HasConstraintName("FK_SKIDEVENTSET_SKEVENT");

            entity.HasOne(d => d.SkeTransition).WithMany(p => p.JSkidevents)
                .HasForeignKey(d => d.SkeTransitionId)
                .HasConstraintName("FK_TRANSITION_SKEVENT");
        });

        modelBuilder.Entity<JSkideventdatum>(entity =>
        {
            entity.HasKey(e => e.SkedId).HasName("PK_SKIDEVENTDATA");

            entity.ToTable("J_SKIDEVENTDATA", "JITTOE");

            entity.HasIndex(e => e.SkedSkideventId, "I_SKIDEVENT_SKEVENTDATA");

            entity.Property(e => e.SkedId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SKED_ID");
            entity.Property(e => e.SkedKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SKED_KEY");
            entity.Property(e => e.SkedSkideventId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SKED_SKIDEVENT_ID");
            entity.Property(e => e.SkedTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SKED_TCREATION");
            entity.Property(e => e.SkedValue)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("SKED_VALUE");

            entity.HasOne(d => d.SkedSkidevent).WithMany(p => p.JSkideventdata)
                .HasForeignKey(d => d.SkedSkideventId)
                .HasConstraintName("FK_SKIDEVENT_SKEVENTDATA");
        });

        modelBuilder.Entity<JSkideventset>(entity =>
        {
            entity.HasKey(e => e.SkesId).HasName("PK_SKIDEVENTSET");

            entity.ToTable("J_SKIDEVENTSET", "JITTOE");

            entity.HasIndex(e => e.SkesCompanyId, "I_COMPANY_SKEVENTSET");

            entity.HasIndex(e => e.SkesKey, "UN_SKES_KEY").IsUnique();

            entity.Property(e => e.SkesId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SKES_ID");
            entity.Property(e => e.SkesCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SKES_COMPANY_ID");
            entity.Property(e => e.SkesDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SKES_DESCR");
            entity.Property(e => e.SkesKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SKES_KEY");
            entity.Property(e => e.SkesTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SKES_TCREATION");
            entity.Property(e => e.SkesTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SKES_TUPDATE");

            entity.HasOne(d => d.SkesCompany).WithMany(p => p.JSkideventsets)
                .HasForeignKey(d => d.SkesCompanyId)
                .HasConstraintName("FK_COMPANY_SKEVENTSET");
        });

        modelBuilder.Entity<JSkidinfo>(entity =>
        {
            entity.HasKey(e => e.SkiId).HasName("PK_SKIDINFO");

            entity.ToTable("J_SKIDINFO", "JITTOE");

            entity.HasIndex(e => e.SkiPaintplanentryId, "I_PAINTPLANENTRY_SKIDINFO");

            entity.HasIndex(e => e.SkiPaintplanId, "I_PAINTPLAN_SKIDINFO");

            entity.HasIndex(e => e.SkiSkidId, "I_SKID_SKIDINFO");

            entity.HasIndex(e => e.SkiSkidinfo1, "I_SKI_SKIDINFO1");

            entity.HasIndex(e => new { e.SkiPaintplanId, e.SkiSkidpos }, "UN_SKI_POS").IsUnique();

            entity.Property(e => e.SkiId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SKI_ID");
            entity.Property(e => e.SkiIndicator1)
                .HasPrecision(1)
                .HasColumnName("SKI_INDICATOR1");
            entity.Property(e => e.SkiIndicator2)
                .HasPrecision(1)
                .HasColumnName("SKI_INDICATOR2");
            entity.Property(e => e.SkiPaintplanId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SKI_PAINTPLAN_ID");
            entity.Property(e => e.SkiPaintplanentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SKI_PAINTPLANENTRY_ID");
            entity.Property(e => e.SkiSkidId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SKI_SKID_ID");
            entity.Property(e => e.SkiSkidinfo1)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("SKI_SKIDINFO1");
            entity.Property(e => e.SkiSkidinfo2)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("SKI_SKIDINFO2");
            entity.Property(e => e.SkiSkidname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SKI_SKIDNAME");
            entity.Property(e => e.SkiSkidpos)
                .HasPrecision(4)
                .HasColumnName("SKI_SKIDPOS");
            entity.Property(e => e.SkiSkidsequenceno)
                .HasPrecision(9)
                .HasDefaultValueSql("0  ")
                .HasColumnName("SKI_SKIDSEQUENCENO");
            entity.Property(e => e.SkiTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SKI_TCREATION");
            entity.Property(e => e.SkiTimeloaded)
                .HasColumnType("DATE")
                .HasColumnName("SKI_TIMELOADED");
            entity.Property(e => e.SkiTimeunloaded)
                .HasColumnType("DATE")
                .HasColumnName("SKI_TIMEUNLOADED");
            entity.Property(e => e.SkiTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SKI_TUPDATE");

            entity.HasOne(d => d.SkiPaintplan).WithMany(p => p.JSkidinfos)
                .HasForeignKey(d => d.SkiPaintplanId)
                .HasConstraintName("FK_PAINTPLAN_SKIDINFO");

            entity.HasOne(d => d.SkiPaintplanentry).WithMany(p => p.JSkidinfos)
                .HasForeignKey(d => d.SkiPaintplanentryId)
                .HasConstraintName("FK_PAINTPLANENTRY_SKIDINFO");

            entity.HasOne(d => d.SkiSkid).WithMany(p => p.JSkidinfos)
                .HasForeignKey(d => d.SkiSkidId)
                .HasConstraintName("FK_SKID_SKIDINFO");
        });

        modelBuilder.Entity<JSkidinfoelem>(entity =>
        {
            entity.HasKey(e => e.SkieId).HasName("PK_SKIDINFOELEM");

            entity.ToTable("J_SKIDINFOELEM", "JITTOE");

            entity.HasIndex(e => e.SkiePaintplanentryelemId, "I_PPEELEM_SKIELEM");

            entity.HasIndex(e => e.SkieSkidinfoId, "I_SKIDINFO_SKIELEM");

            entity.HasIndex(e => new { e.SkieSkidinfoId, e.SkiePaintplanentryelemId }, "UN_SKIE_INDEX").IsUnique();

            entity.Property(e => e.SkieId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SKIE_ID");
            entity.Property(e => e.SkiePaintplanentryelemId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SKIE_PAINTPLANENTRYELEM_ID");
            entity.Property(e => e.SkieQuantity)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("SKIE_QUANTITY");
            entity.Property(e => e.SkieReworkquantity)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("SKIE_REWORKQUANTITY");
            entity.Property(e => e.SkieSkidinfoId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SKIE_SKIDINFO_ID");
            entity.Property(e => e.SkieTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SKIE_TCREATION");

            entity.HasOne(d => d.SkiePaintplanentryelem).WithMany(p => p.JSkidinfoelems)
                .HasForeignKey(d => d.SkiePaintplanentryelemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PPEELEM_SKIELEM");

            entity.HasOne(d => d.SkieSkidinfo).WithMany(p => p.JSkidinfoelems)
                .HasForeignKey(d => d.SkieSkidinfoId)
                .HasConstraintName("FK_SKIDINFO_SKIELEM");
        });

        modelBuilder.Entity<JSkidinfoinfo>(entity =>
        {
            entity.HasKey(e => e.SkiiId).HasName("PK_SKIDINFOINFO");

            entity.ToTable("J_SKIDINFOINFO", "JITTOE");

            entity.HasIndex(e => e.SkiiSkidinfoId, "I_SKIDINFO_SKIDINFOINFO");

            entity.HasIndex(e => new { e.SkiiSkidinfoId, e.SkiiType, e.SkiiKey1, e.SkiiKey2, e.SkiiKey3 }, "UN_SKII_INFO").IsUnique();

            entity.Property(e => e.SkiiId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SKII_ID");
            entity.Property(e => e.SkiiIntvalue)
                .HasPrecision(10)
                .HasColumnName("SKII_INTVALUE");
            entity.Property(e => e.SkiiKey1)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("SKII_KEY1");
            entity.Property(e => e.SkiiKey2)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("SKII_KEY2");
            entity.Property(e => e.SkiiKey3)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("SKII_KEY3");
            entity.Property(e => e.SkiiSkidinfoId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SKII_SKIDINFO_ID");
            entity.Property(e => e.SkiiStringvalue)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("SKII_STRINGVALUE");
            entity.Property(e => e.SkiiTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SKII_TCREATION");
            entity.Property(e => e.SkiiTimevalue)
                .HasColumnType("DATE")
                .HasColumnName("SKII_TIMEVALUE");
            entity.Property(e => e.SkiiTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SKII_TUPDATE");
            entity.Property(e => e.SkiiType)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("SKII_TYPE");

            entity.HasOne(d => d.SkiiSkidinfo).WithMany(p => p.JSkidinfoinfos)
                .HasForeignKey(d => d.SkiiSkidinfoId)
                .HasConstraintName("FK_SKIDINFO_SKIDINFOINFO");
        });

        modelBuilder.Entity<JSkidset>(entity =>
        {
            entity.HasKey(e => e.SksId).HasName("PK_SKIDSET");

            entity.ToTable("J_SKIDSET", "JITTOE");

            entity.HasIndex(e => e.SksCompanyId, "I_COMPANY_SKIDSET");

            entity.HasIndex(e => e.SksContainersetclassId, "I_CONTAINERSETCLASS_SKIDSET");

            entity.HasIndex(e => e.SksDoccfgId, "I_DOCCFG_SKIDSET");

            entity.HasIndex(e => e.SksKey, "UN_SKS_KEY").IsUnique();

            entity.Property(e => e.SksId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SKS_ID");
            entity.Property(e => e.SksCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SKS_COMPANY_ID");
            entity.Property(e => e.SksContainersetclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SKS_CONTAINERSETCLASS_ID");
            entity.Property(e => e.SksDescr)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("SKS_DESCR");
            entity.Property(e => e.SksDoccfgId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SKS_DOCCFG_ID");
            entity.Property(e => e.SksKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SKS_KEY");
            entity.Property(e => e.SksTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SKS_TCREATION");
            entity.Property(e => e.SksTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SKS_TUPDATE");

            entity.HasOne(d => d.SksCompany).WithMany(p => p.JSkidsets)
                .HasForeignKey(d => d.SksCompanyId)
                .HasConstraintName("FK_COMPANY_SKIDSET");

            entity.HasOne(d => d.SksContainersetclass).WithMany(p => p.JSkidsets)
                .HasForeignKey(d => d.SksContainersetclassId)
                .HasConstraintName("FK_CONTAINERSETCLASS_SKIDSET");

            entity.HasOne(d => d.SksDoccfg).WithMany(p => p.JSkidsets)
                .HasForeignKey(d => d.SksDoccfgId)
                .HasConstraintName("FK_DOCCFG_SKIDSET");
        });

        modelBuilder.Entity<JSkidtype>(entity =>
        {
            entity.HasKey(e => e.SktId).HasName("PK_SKIDTYPE");

            entity.ToTable("J_SKIDTYPE", "JITTOE");

            entity.HasIndex(e => e.SktContainersetId, "I_CONTAINERSET_SKIDTYPE");

            entity.HasIndex(e => e.SktContainertypeId, "I_CONTAINERTYPE_SKIDTYPE");

            entity.HasIndex(e => e.SktPaintareaId, "I_PAINTAREA_SKIDTYPE");

            entity.HasIndex(e => e.SktPaintunitId, "I_PAINTUNIT_SKIDTYPE");

            entity.HasIndex(e => e.SktSkidtypesetId, "I_SKIDTYPESET_SKIDTYPE");

            entity.HasIndex(e => new { e.SktSkidtypesetId, e.SktShortname }, "UN_SKT_SHORTNAME").IsUnique();

            entity.Property(e => e.SktId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SKT_ID");
            entity.Property(e => e.SktContainersetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SKT_CONTAINERSET_ID");
            entity.Property(e => e.SktContainertypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SKT_CONTAINERTYPE_ID");
            entity.Property(e => e.SktDescr)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SKT_DESCR");
            entity.Property(e => e.SktLocked)
                .HasPrecision(1)
                .HasColumnName("SKT_LOCKED");
            entity.Property(e => e.SktNoskid)
                .HasPrecision(1)
                .HasColumnName("SKT_NOSKID");
            entity.Property(e => e.SktPaintareaId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SKT_PAINTAREA_ID");
            entity.Property(e => e.SktPaintunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SKT_PAINTUNIT_ID");
            entity.Property(e => e.SktShortname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SKT_SHORTNAME");
            entity.Property(e => e.SktSkidtypesetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SKT_SKIDTYPESET_ID");
            entity.Property(e => e.SktTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SKT_TCREATION");
            entity.Property(e => e.SktTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SKT_TUPDATE");

            entity.HasOne(d => d.SktContainerset).WithMany(p => p.JSkidtypes)
                .HasForeignKey(d => d.SktContainersetId)
                .HasConstraintName("FK_CONTAINERSET_SKIDTYPE");

            entity.HasOne(d => d.SktContainertype).WithMany(p => p.JSkidtypes)
                .HasForeignKey(d => d.SktContainertypeId)
                .HasConstraintName("FK_CONTAINERTYPE_SKIDTYPE");

            entity.HasOne(d => d.SktPaintarea).WithMany(p => p.JSkidtypes)
                .HasForeignKey(d => d.SktPaintareaId)
                .HasConstraintName("FK_PAINTAREA_SKIDTYPE");

            entity.HasOne(d => d.SktPaintunit).WithMany(p => p.JSkidtypes)
                .HasForeignKey(d => d.SktPaintunitId)
                .HasConstraintName("FK_PAINTUNIT_SKIDTYPE");

            entity.HasOne(d => d.SktSkidtypeset).WithMany(p => p.JSkidtypes)
                .HasForeignKey(d => d.SktSkidtypesetId)
                .HasConstraintName("FK_SKIDTYPESET_SKIDTYPE");
        });

        modelBuilder.Entity<JSkidtypecolor>(entity =>
        {
            entity.HasKey(e => e.SktcId).HasName("PK_SKIDTYPECOLOR");

            entity.ToTable("J_SKIDTYPECOLOR", "JITTOE");

            entity.HasIndex(e => e.SktcColorId, "I_COLOR_SKIDTYPECOLOR");

            entity.HasIndex(e => e.SktcSkidtypeId, "I_SKIDTYPE_SKIDTYPECOLOR");

            entity.HasIndex(e => new { e.SktcSkidtypeId, e.SktcColorId }, "UN_SKTC_COLOR").IsUnique();

            entity.Property(e => e.SktcId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SKTC_ID");
            entity.Property(e => e.SktcColorId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SKTC_COLOR_ID");
            entity.Property(e => e.SktcLocked)
                .HasPrecision(1)
                .HasColumnName("SKTC_LOCKED");
            entity.Property(e => e.SktcSkidtypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SKTC_SKIDTYPE_ID");
            entity.Property(e => e.SktcTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SKTC_TCREATION");
            entity.Property(e => e.SktcTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SKTC_TUPDATE");

            entity.HasOne(d => d.SktcColor).WithMany(p => p.JSkidtypecolors)
                .HasForeignKey(d => d.SktcColorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COLOR_SKIDTYPECOLOR");

            entity.HasOne(d => d.SktcSkidtype).WithMany(p => p.JSkidtypecolors)
                .HasForeignKey(d => d.SktcSkidtypeId)
                .HasConstraintName("FK_SKIDTYPE_SKIDTYPECOLOR");
        });

        modelBuilder.Entity<JSkidtypeinfo>(entity =>
        {
            entity.HasKey(e => e.SktiId).HasName("PK_SKIDTYPEINFO");

            entity.ToTable("J_SKIDTYPEINFO", "JITTOE");

            entity.HasIndex(e => e.SktiSkidtypeId, "I_SKIDTYPE_SKIDTYPEINFO");

            entity.HasIndex(e => new { e.SktiSkidtypeId, e.SktiType, e.SktiKey1, e.SktiKey2, e.SktiKey3 }, "UN_SKTI_INFO").IsUnique();

            entity.Property(e => e.SktiId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SKTI_ID");
            entity.Property(e => e.SktiKey1)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SKTI_KEY1");
            entity.Property(e => e.SktiKey2)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SKTI_KEY2");
            entity.Property(e => e.SktiKey3)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SKTI_KEY3");
            entity.Property(e => e.SktiSkidtypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SKTI_SKIDTYPE_ID");
            entity.Property(e => e.SktiStringvalue)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("SKTI_STRINGVALUE");
            entity.Property(e => e.SktiTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SKTI_TCREATION");
            entity.Property(e => e.SktiTimevalue)
                .HasColumnType("DATE")
                .HasColumnName("SKTI_TIMEVALUE");
            entity.Property(e => e.SktiTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SKTI_TUPDATE");
            entity.Property(e => e.SktiType)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("SKTI_TYPE");

            entity.HasOne(d => d.SktiSkidtype).WithMany(p => p.JSkidtypeinfos)
                .HasForeignKey(d => d.SktiSkidtypeId)
                .HasConstraintName("FK_SKIDTYPE_SKIDTYPEINFO");
        });

        modelBuilder.Entity<JSkidtypeset>(entity =>
        {
            entity.HasKey(e => e.SktsId).HasName("PK_SKIDTYPESET");

            entity.ToTable("J_SKIDTYPESET", "JITTOE");

            entity.HasIndex(e => e.SktsCompanyId, "I_COMPANY_SKIDTYPESET");

            entity.HasIndex(e => e.SktsKey, "UN_SKTS_KEY").IsUnique();

            entity.Property(e => e.SktsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SKTS_ID");
            entity.Property(e => e.SktsCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SKTS_COMPANY_ID");
            entity.Property(e => e.SktsDescr)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("SKTS_DESCR");
            entity.Property(e => e.SktsIsinternal)
                .HasPrecision(1)
                .HasColumnName("SKTS_ISINTERNAL");
            entity.Property(e => e.SktsKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("SKTS_KEY");
            entity.Property(e => e.SktsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SKTS_TCREATION");
            entity.Property(e => e.SktsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SKTS_TUPDATE");

            entity.HasOne(d => d.SktsCompany).WithMany(p => p.JSkidtypesets)
                .HasForeignKey(d => d.SktsCompanyId)
                .HasConstraintName("FK_COMPANY_SKIDTYPESET");
        });

        modelBuilder.Entity<JSkidusage>(entity =>
        {
            entity.HasKey(e => e.SkuId).HasName("PK_SKIDUSAGE");

            entity.ToTable("J_SKIDUSAGE", "JITTOE");

            entity.HasIndex(e => e.SkuContainerusageId, "I_CONTAINERUSAGE_SKIDUSAGE");

            entity.HasIndex(e => e.SkuPaintedoutchannelId, "I_PAINTEDOUT_SKIDUSAGE");

            entity.HasIndex(e => e.SkuRawinchannelId, "I_RAWIN_SKIDUSAGE");

            entity.HasIndex(e => e.SkuSkidtypeId, "I_SKIDTYPE_SKIDUSAGE");

            entity.HasIndex(e => new { e.SkuSkidtypeId, e.SkuShortname }, "UN_SKU_SHORTNAME").IsUnique();

            entity.Property(e => e.SkuId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SKU_ID");
            entity.Property(e => e.SkuContainerusageId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SKU_CONTAINERUSAGE_ID");
            entity.Property(e => e.SkuDescr)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SKU_DESCR");
            entity.Property(e => e.SkuPaintedoutchannelId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SKU_PAINTEDOUTCHANNEL_ID");
            entity.Property(e => e.SkuRawinchannelId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SKU_RAWINCHANNEL_ID");
            entity.Property(e => e.SkuShortname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SKU_SHORTNAME");
            entity.Property(e => e.SkuSkidtypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SKU_SKIDTYPE_ID");
            entity.Property(e => e.SkuTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SKU_TCREATION");
            entity.Property(e => e.SkuTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SKU_TUPDATE");

            entity.HasOne(d => d.SkuContainerusage).WithMany(p => p.JSkidusages)
                .HasForeignKey(d => d.SkuContainerusageId)
                .HasConstraintName("FK_CONTAINERUSAGE_SKIDUSAGE");

            entity.HasOne(d => d.SkuPaintedoutchannel).WithMany(p => p.JSkidusageSkuPaintedoutchannels)
                .HasForeignKey(d => d.SkuPaintedoutchannelId)
                .HasConstraintName("FK_PAINTEDOUT_SKIDUSAGE");

            entity.HasOne(d => d.SkuRawinchannel).WithMany(p => p.JSkidusageSkuRawinchannels)
                .HasForeignKey(d => d.SkuRawinchannelId)
                .HasConstraintName("FK_RAWIN_SKIDUSAGE");

            entity.HasOne(d => d.SkuSkidtype).WithMany(p => p.JSkidusages)
                .HasForeignKey(d => d.SkuSkidtypeId)
                .HasConstraintName("FK_SKIDTYPE_SKIDUSAGE");
        });

        modelBuilder.Entity<JSkidusageelem>(entity =>
        {
            entity.HasKey(e => e.SkueId).HasName("PK_SKIDUSAGEELEM");

            entity.ToTable("J_SKIDUSAGEELEM", "JITTOE");

            entity.HasIndex(e => e.SkueSkidusageId, "I_SKIDUSAGE_SKIDUSAGEELEM");

            entity.Property(e => e.SkueId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SKUE_ID");
            entity.Property(e => e.SkueIndex)
                .HasPrecision(3)
                .HasColumnName("SKUE_INDEX");
            entity.Property(e => e.SkueQuantity)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("SKUE_QUANTITY");
            entity.Property(e => e.SkueSkidusageId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SKUE_SKIDUSAGE_ID");
            entity.Property(e => e.SkueTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SKUE_TCREATION");
            entity.Property(e => e.SkueTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SKUE_TUPDATE");

            entity.HasOne(d => d.SkueSkidusage).WithMany(p => p.JSkidusageelems)
                .HasForeignKey(d => d.SkueSkidusageId)
                .HasConstraintName("FK_SKIDUSAGE_SKIDUSAGEELEM");
        });

        modelBuilder.Entity<JSnapshot>(entity =>
        {
            entity.HasKey(e => e.SnsId).HasName("PK_SNAPSHOT");

            entity.ToTable("J_SNAPSHOT", "JITTOE");

            entity.HasIndex(e => e.SnsSnapshotsetId, "I_SNAPSHOTSET_SNAPSHOT");

            entity.HasIndex(e => e.SnsKey, "UN_SNS_KEY").IsUnique();

            entity.Property(e => e.SnsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SNS_ID");
            entity.Property(e => e.SnsDescr)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasColumnName("SNS_DESCR");
            entity.Property(e => e.SnsKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SNS_KEY");
            entity.Property(e => e.SnsSnapshotsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SNS_SNAPSHOTSET_ID");
            entity.Property(e => e.SnsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SNS_TCREATION");
            entity.Property(e => e.SnsType)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasDefaultValueSql("'Other'  ")
                .HasColumnName("SNS_TYPE");

            entity.HasOne(d => d.SnsSnapshotset).WithMany(p => p.JSnapshots)
                .HasForeignKey(d => d.SnsSnapshotsetId)
                .HasConstraintName("FK_SNAPSHOTSET_SNAPSHOT");
        });

        modelBuilder.Entity<JSnapshotset>(entity =>
        {
            entity.HasKey(e => e.SnssId).HasName("PK_SNAPSHOTSET");

            entity.ToTable("J_SNAPSHOTSET", "JITTOE");

            entity.HasIndex(e => e.SnssKey, "UN_SNSS_KEY").IsUnique();

            entity.Property(e => e.SnssId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SNSS_ID");
            entity.Property(e => e.SnssDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SNSS_DESCR");
            entity.Property(e => e.SnssKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SNSS_KEY");
            entity.Property(e => e.SnssTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SNSS_TCREATION");
            entity.Property(e => e.SnssTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SNSS_TUPDATE");
        });

        modelBuilder.Entity<JStation>(entity =>
        {
            entity.HasKey(e => e.StatId).HasName("PK_STATION");

            entity.ToTable("J_STATION", "JITTOE");

            entity.HasIndex(e => e.StatGroupId, "I_GROUP_STATION");

            entity.HasIndex(e => e.StatLogId, "I_LOG_STATION");

            entity.HasIndex(e => e.StatProdunitclassId, "I_PRODUNITCLASS_STATION");

            entity.HasIndex(e => e.StatProdunitId, "I_PRODUNIT_STATION");

            entity.HasIndex(e => e.StatQualificationclassId, "I_QUALCLASS_STATION");

            entity.HasIndex(e => e.StatServerId, "I_SERVER_STATION");

            entity.HasIndex(e => e.StatTanticketsetId, "I_TANTICKETSET_STATION");

            entity.HasIndex(e => e.StatUseridentpolicyId, "I_USERIDENTPOLICY_STATION");

            entity.HasIndex(e => e.StatKey, "UN_STAT_KEY").IsUnique();

            entity.HasIndex(e => new { e.StatServerId, e.StatName }, "UN_STAT_NAME").IsUnique();

            entity.Property(e => e.StatId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STAT_ID");
            entity.Property(e => e.StatAccesspolicy)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasDefaultValueSql("'Shared'  ")
                .HasColumnName("STAT_ACCESSPOLICY");
            entity.Property(e => e.StatComment)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("STAT_COMMENT");
            entity.Property(e => e.StatDebugargs)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("STAT_DEBUGARGS");
            entity.Property(e => e.StatDebugpolicy)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasDefaultValueSql("'None'  ")
                .HasColumnName("STAT_DEBUGPOLICY");
            entity.Property(e => e.StatDebuguntiltime)
                .HasColumnType("DATE")
                .HasColumnName("STAT_DEBUGUNTILTIME");
            entity.Property(e => e.StatDescr)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("STAT_DESCR");
            entity.Property(e => e.StatEnabled)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("1  ")
                .HasColumnName("STAT_ENABLED");
            entity.Property(e => e.StatGroupId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STAT_GROUP_ID");
            entity.Property(e => e.StatKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("STAT_KEY");
            entity.Property(e => e.StatLogId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STAT_LOG_ID");
            entity.Property(e => e.StatLogenabled)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("1  ")
                .HasColumnName("STAT_LOGENABLED");
            entity.Property(e => e.StatLogintype)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("STAT_LOGINTYPE");
            entity.Property(e => e.StatName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("STAT_NAME");
            entity.Property(e => e.StatPrintpolicy)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("STAT_PRINTPOLICY");
            entity.Property(e => e.StatProdunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STAT_PRODUNIT_ID");
            entity.Property(e => e.StatProdunitclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STAT_PRODUNITCLASS_ID");
            entity.Property(e => e.StatQualificationclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STAT_QUALIFICATIONCLASS_ID");
            entity.Property(e => e.StatServerId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STAT_SERVER_ID");
            entity.Property(e => e.StatTanticketsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STAT_TANTICKETSET_ID");
            entity.Property(e => e.StatTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STAT_TCREATION");
            entity.Property(e => e.StatTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STAT_TUPDATE");
            entity.Property(e => e.StatUseridentpolicyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STAT_USERIDENTPOLICY_ID");
            entity.Property(e => e.StatWorkplaceid)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("STAT_WORKPLACEID");

            entity.HasOne(d => d.StatGroup).WithMany(p => p.JStations)
                .HasForeignKey(d => d.StatGroupId)
                .HasConstraintName("FK_GROUP_STATION");

            entity.HasOne(d => d.StatLog).WithMany(p => p.JStations)
                .HasForeignKey(d => d.StatLogId)
                .HasConstraintName("FK_LOG_STATION");

            entity.HasOne(d => d.StatProdunit).WithMany(p => p.JStations)
                .HasForeignKey(d => d.StatProdunitId)
                .HasConstraintName("FK_PRODUNIT_STATION");

            entity.HasOne(d => d.StatProdunitclass).WithMany(p => p.JStations)
                .HasForeignKey(d => d.StatProdunitclassId)
                .HasConstraintName("FK_PRODUNITCLASS_STATION");

            entity.HasOne(d => d.StatQualificationclass).WithMany(p => p.JStations)
                .HasForeignKey(d => d.StatQualificationclassId)
                .HasConstraintName("FK_QUALCLASS_STATION");

            entity.HasOne(d => d.StatServer).WithMany(p => p.JStations)
                .HasForeignKey(d => d.StatServerId)
                .HasConstraintName("FK_SERVER_STATION");

            entity.HasOne(d => d.StatTanticketset).WithMany(p => p.JStations)
                .HasForeignKey(d => d.StatTanticketsetId)
                .HasConstraintName("FK_TANTICKETSET_STATION");

            entity.HasOne(d => d.StatUseridentpolicy).WithMany(p => p.JStations)
                .HasForeignKey(d => d.StatUseridentpolicyId)
                .HasConstraintName("FK_USERIDENTPOLICY_STATION");
        });

        modelBuilder.Entity<JStock>(entity =>
        {
            entity.HasKey(e => e.StId).HasName("PK_STOCK");

            entity.ToTable("J_STOCK", "JITTOE");

            entity.HasIndex(e => e.StDoccfgId, "I_DOCCFG_STOCK");

            entity.HasIndex(e => e.StReconciliationstockId, "I_RSTOCK_STOCK");

            entity.HasIndex(e => e.StStocksetId, "I_STOCKSET_STOCK");

            entity.HasIndex(e => e.StCode, "UN_ST_CODE").IsUnique();

            entity.HasIndex(e => e.StKey, "UN_ST_KEY").IsUnique();

            entity.Property(e => e.StId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ST_ID");
            entity.Property(e => e.StAutodef)
                .HasPrecision(1)
                .HasColumnName("ST_AUTODEF");
            entity.Property(e => e.StCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ST_CODE");
            entity.Property(e => e.StContainernopolicy)
                .HasMaxLength(17)
                .IsUnicode(false)
                .HasDefaultValueSql("'Any'  ")
                .HasColumnName("ST_CONTAINERNOPOLICY");
            entity.Property(e => e.StDefmaxamount)
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("ST_DEFMAXAMOUNT");
            entity.Property(e => e.StDefminamount)
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("ST_DEFMINAMOUNT");
            entity.Property(e => e.StDefupdatestrategy)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("ST_DEFUPDATESTRATEGY");
            entity.Property(e => e.StDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ST_DESCR");
            entity.Property(e => e.StDoccfgId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ST_DOCCFG_ID");
            entity.Property(e => e.StHaslocs)
                .HasPrecision(1)
                .HasColumnName("ST_HASLOCS");
            entity.Property(e => e.StHasparts)
                .HasPrecision(1)
                .HasColumnName("ST_HASPARTS");
            entity.Property(e => e.StKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("ST_KEY");
            entity.Property(e => e.StLocked)
                .HasPrecision(1)
                .HasColumnName("ST_LOCKED");
            entity.Property(e => e.StLocnameformat)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ST_LOCNAMEFORMAT");
            entity.Property(e => e.StMaxageindays)
                .HasPrecision(5)
                .HasColumnName("ST_MAXAGEINDAYS");
            entity.Property(e => e.StOpdamage)
                .HasPrecision(1)
                .HasColumnName("ST_OPDAMAGE");
            entity.Property(e => e.StOpinventory)
                .HasPrecision(1)
                .HasColumnName("ST_OPINVENTORY");
            entity.Property(e => e.StOploss)
                .HasPrecision(1)
                .HasColumnName("ST_OPLOSS");
            entity.Property(e => e.StOpwarnpercentage)
                .HasPrecision(1)
                .HasColumnName("ST_OPWARNPERCENTAGE");
            entity.Property(e => e.StPrivate)
                .HasPrecision(1)
                .HasColumnName("ST_PRIVATE");
            entity.Property(e => e.StReconciliationstockId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ST_RECONCILIATIONSTOCK_ID");
            entity.Property(e => e.StStocksetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("ST_STOCKSET_ID");
            entity.Property(e => e.StTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("ST_TCREATION");
            entity.Property(e => e.StTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("ST_TUPDATE");
            entity.Property(e => e.StWarnpercentage)
                .HasColumnType("NUMBER(5,2)")
                .HasColumnName("ST_WARNPERCENTAGE");

            entity.HasOne(d => d.StDoccfg).WithMany(p => p.JStocks)
                .HasForeignKey(d => d.StDoccfgId)
                .HasConstraintName("FK_DOCCFG_STOCK");

            entity.HasOne(d => d.StReconciliationstock).WithMany(p => p.InverseStReconciliationstock)
                .HasForeignKey(d => d.StReconciliationstockId)
                .HasConstraintName("FK_RSTOCK_STOCK");

            entity.HasOne(d => d.StStockset).WithMany(p => p.JStocks)
                .HasForeignKey(d => d.StStocksetId)
                .HasConstraintName("FK_STOCKSET_STOCK");
        });

        modelBuilder.Entity<JStockcfg>(entity =>
        {
            entity.HasKey(e => e.StcfId).HasName("PK_STOCKCFG");

            entity.ToTable("J_STOCKCFG", "JITTOE");

            entity.HasIndex(e => e.StcfContractId, "I_CONTRACT_STOCKCFG");

            entity.HasIndex(e => e.StcfProdstepId, "I_PRODSTEP_STOCKCFG");

            entity.HasIndex(e => e.StcfProdunitId, "I_PRODUNIT_STOCKCFG");

            entity.HasIndex(e => e.StcfStocklocclassId, "I_STOCKLOCCLASS_STOCKCFG");

            entity.HasIndex(e => e.StcfStocklocId, "I_STOCKLOC_STOCKCFG");

            entity.HasIndex(e => e.StcfStockId, "I_STOCK_STOCKCFG");

            entity.HasIndex(e => e.StcfSubjectattrId, "I_SUBJECTATTR_STOCKCFG");

            entity.HasIndex(e => e.StcfSubjectclassId, "I_SUBJECTCLASS_STOCKCFG");

            entity.HasIndex(e => e.StcfSubjectcomptypeId, "I_SUBJECTCOMPTYPE_STOCKCFG");

            entity.HasIndex(e => e.StcfSubjecttypeId, "I_SUBJECTTYPE_STOCKCFG");

            entity.HasIndex(e => e.StcfSubjectId, "I_SUBJECT_STOCKCFG");

            entity.HasIndex(e => e.StcfTolocationId, "I_TOLOCATION_STOCKCFG");

            entity.HasIndex(e => e.StcfTransitiontypeId, "I_TRANSITIONTYPE_STOCKCFG");

            entity.Property(e => e.StcfId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STCF_ID");
            entity.Property(e => e.StcfAttrvalues)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("STCF_ATTRVALUES");
            entity.Property(e => e.StcfContractId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STCF_CONTRACT_ID");
            entity.Property(e => e.StcfDescr)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("STCF_DESCR");
            entity.Property(e => e.StcfInfo1)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("STCF_INFO1");
            entity.Property(e => e.StcfInfo2)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("STCF_INFO2");
            entity.Property(e => e.StcfPriorityinscore)
                .HasPrecision(3)
                .HasDefaultValueSql("0  ")
                .HasColumnName("STCF_PRIORITYINSCORE");
            entity.Property(e => e.StcfProdstepId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STCF_PRODSTEP_ID");
            entity.Property(e => e.StcfProdunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STCF_PRODUNIT_ID");
            entity.Property(e => e.StcfQualityclass)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STCF_QUALITYCLASS");
            entity.Property(e => e.StcfRole)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("STCF_ROLE");
            entity.Property(e => e.StcfStockId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STCF_STOCK_ID");
            entity.Property(e => e.StcfStocklocId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STCF_STOCKLOC_ID");
            entity.Property(e => e.StcfStocklocclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STCF_STOCKLOCCLASS_ID");
            entity.Property(e => e.StcfStocklocstrategy)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasDefaultValueSql("'None'  ")
                .HasColumnName("STCF_STOCKLOCSTRATEGY");
            entity.Property(e => e.StcfSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STCF_SUBJECT_ID");
            entity.Property(e => e.StcfSubjectattrId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STCF_SUBJECTATTR_ID");
            entity.Property(e => e.StcfSubjectclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STCF_SUBJECTCLASS_ID");
            entity.Property(e => e.StcfSubjectcomptypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STCF_SUBJECTCOMPTYPE_ID");
            entity.Property(e => e.StcfSubjecttypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STCF_SUBJECTTYPE_ID");
            entity.Property(e => e.StcfTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STCF_TCREATION");
            entity.Property(e => e.StcfTolocationId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STCF_TOLOCATION_ID");
            entity.Property(e => e.StcfTransitiontypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STCF_TRANSITIONTYPE_ID");
            entity.Property(e => e.StcfTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STCF_TUPDATE");

            entity.HasOne(d => d.StcfContract).WithMany(p => p.JStockcfgs)
                .HasForeignKey(d => d.StcfContractId)
                .HasConstraintName("FK_CONTRACT_STOCKCFG");

            entity.HasOne(d => d.StcfProdstep).WithMany(p => p.JStockcfgs)
                .HasForeignKey(d => d.StcfProdstepId)
                .HasConstraintName("FK_PRODSTEP_STOCKCFG");

            entity.HasOne(d => d.StcfProdunit).WithMany(p => p.JStockcfgs)
                .HasForeignKey(d => d.StcfProdunitId)
                .HasConstraintName("FK_PRODUNIT_STOCKCFG");

            entity.HasOne(d => d.StcfStock).WithMany(p => p.JStockcfgs)
                .HasForeignKey(d => d.StcfStockId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_STOCK_STOCKCFG");

            entity.HasOne(d => d.StcfStockloc).WithMany(p => p.JStockcfgs)
                .HasForeignKey(d => d.StcfStocklocId)
                .HasConstraintName("FK_STOCKLOC_STOCKCFG");

            entity.HasOne(d => d.StcfStocklocclass).WithMany(p => p.JStockcfgs)
                .HasForeignKey(d => d.StcfStocklocclassId)
                .HasConstraintName("FK_STOCKLOCCLASS_STOCKCFG");

            entity.HasOne(d => d.StcfSubject).WithMany(p => p.JStockcfgs)
                .HasForeignKey(d => d.StcfSubjectId)
                .HasConstraintName("FK_SUBJECT_STOCKCFG");

            entity.HasOne(d => d.StcfSubjectattr).WithMany(p => p.JStockcfgs)
                .HasForeignKey(d => d.StcfSubjectattrId)
                .HasConstraintName("FK_SUBJECTATTR_STOCKCFG");

            entity.HasOne(d => d.StcfSubjectclass).WithMany(p => p.JStockcfgs)
                .HasForeignKey(d => d.StcfSubjectclassId)
                .HasConstraintName("FK_SUBJECTCLASS_STOCKCFG");

            entity.HasOne(d => d.StcfSubjectcomptype).WithMany(p => p.JStockcfgs)
                .HasForeignKey(d => d.StcfSubjectcomptypeId)
                .HasConstraintName("FK_SUBJECTCOMPTYPE_STOCKCFG");

            entity.HasOne(d => d.StcfSubjecttype).WithMany(p => p.JStockcfgs)
                .HasForeignKey(d => d.StcfSubjecttypeId)
                .HasConstraintName("FK_SUBJECTTYPE_STOCKCFG");

            entity.HasOne(d => d.StcfTolocation).WithMany(p => p.JStockcfgs)
                .HasForeignKey(d => d.StcfTolocationId)
                .HasConstraintName("FK_TOLOCATION_STOCKCFG");

            entity.HasOne(d => d.StcfTransitiontype).WithMany(p => p.JStockcfgs)
                .HasForeignKey(d => d.StcfTransitiontypeId)
                .HasConstraintName("FK_TRANSITIONTYPE_STOCKCFG");
        });

        modelBuilder.Entity<JStockchannel>(entity =>
        {
            entity.HasKey(e => e.StchId).HasName("PK_STOCKCHANNEL");

            entity.ToTable("J_STOCKCHANNEL", "JITTOE");

            entity.HasIndex(e => e.StchContainermaptypeId, "I_CONTAINERMAPTYPE_SCHANNEL");

            entity.HasIndex(e => e.StchContainersetclassId, "I_CONTAINERSETCLASS_SCHANNEL");

            entity.HasIndex(e => e.StchOtherstockclassId, "I_OTHERSTOCKCLASS_SCHANNEL");

            entity.HasIndex(e => e.StchOtherstockId, "I_OTHERSTOCK_SCHANNEL");

            entity.HasIndex(e => e.StchStockId, "I_STOCK_SCHANNEL");

            entity.HasIndex(e => e.StchSubjectclassId, "I_SUBJECTCLASS_SCHANNEL");

            entity.HasIndex(e => new { e.StchStockId, e.StchDirection, e.StchCode }, "UN_STCH_CODE").IsUnique();

            entity.Property(e => e.StchId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STCH_ID");
            entity.Property(e => e.StchAllowcontainers)
                .HasPrecision(1)
                .HasColumnName("STCH_ALLOWCONTAINERS");
            entity.Property(e => e.StchAllowparts)
                .HasPrecision(1)
                .HasColumnName("STCH_ALLOWPARTS");
            entity.Property(e => e.StchAllowsubjects)
                .HasPrecision(1)
                .HasColumnName("STCH_ALLOWSUBJECTS");
            entity.Property(e => e.StchCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("STCH_CODE");
            entity.Property(e => e.StchContainermaptypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STCH_CONTAINERMAPTYPE_ID");
            entity.Property(e => e.StchContainersetclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STCH_CONTAINERSETCLASS_ID");
            entity.Property(e => e.StchDescr)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("STCH_DESCR");
            entity.Property(e => e.StchDirection)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("STCH_DIRECTION");
            entity.Property(e => e.StchOtherstockId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STCH_OTHERSTOCK_ID");
            entity.Property(e => e.StchOtherstockclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STCH_OTHERSTOCKCLASS_ID");
            entity.Property(e => e.StchStockId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STCH_STOCK_ID");
            entity.Property(e => e.StchSubjectclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STCH_SUBJECTCLASS_ID");
            entity.Property(e => e.StchTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STCH_TCREATION");
            entity.Property(e => e.StchTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STCH_TUPDATE");

            entity.HasOne(d => d.StchContainermaptype).WithMany(p => p.JStockchannels)
                .HasForeignKey(d => d.StchContainermaptypeId)
                .HasConstraintName("FK_CONTAINERMAPTYPE_SCHANNEL");

            entity.HasOne(d => d.StchContainersetclass).WithMany(p => p.JStockchannels)
                .HasForeignKey(d => d.StchContainersetclassId)
                .HasConstraintName("FK_CONTAINERSETCLASS_SCHANNEL");

            entity.HasOne(d => d.StchOtherstock).WithMany(p => p.JStockchannelStchOtherstocks)
                .HasForeignKey(d => d.StchOtherstockId)
                .HasConstraintName("FK_OTHERSTOCK_SCHANNEL");

            entity.HasOne(d => d.StchOtherstockclass).WithMany(p => p.JStockchannels)
                .HasForeignKey(d => d.StchOtherstockclassId)
                .HasConstraintName("FK_OTHERSTOCKCLASS_SCHANNEL");

            entity.HasOne(d => d.StchStock).WithMany(p => p.JStockchannelStchStocks)
                .HasForeignKey(d => d.StchStockId)
                .HasConstraintName("FK_STOCK_SCHANNEL");

            entity.HasOne(d => d.StchSubjectclass).WithMany(p => p.JStockchannels)
                .HasForeignKey(d => d.StchSubjectclassId)
                .HasConstraintName("FK_SUBJECTCLASS_SCHANNEL");
        });

        modelBuilder.Entity<JStockclass>(entity =>
        {
            entity.HasKey(e => e.StclId).HasName("PK_STOCKCLASS");

            entity.ToTable("J_STOCKCLASS", "JITTOE");

            entity.HasIndex(e => e.StclCompanyId, "I_COMPANY_STOCKCLASS");

            entity.HasIndex(e => e.StclKey, "UN_STCL_KEY").IsUnique();

            entity.Property(e => e.StclId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STCL_ID");
            entity.Property(e => e.StclCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STCL_COMPANY_ID");
            entity.Property(e => e.StclDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STCL_DESCR");
            entity.Property(e => e.StclKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("STCL_KEY");
            entity.Property(e => e.StclTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STCL_TCREATION");
            entity.Property(e => e.StclTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STCL_TUPDATE");

            entity.HasOne(d => d.StclCompany).WithMany(p => p.JStockclasses)
                .HasForeignKey(d => d.StclCompanyId)
                .HasConstraintName("FK_COMPANY_STOCKCLASS");
        });

        modelBuilder.Entity<JStockclassmember>(entity =>
        {
            entity.HasKey(e => e.StclmId).HasName("PK_STOCKCLASSMEMBER");

            entity.ToTable("J_STOCKCLASSMEMBER", "JITTOE");

            entity.HasIndex(e => e.StclmStockclassId, "I_STOCKCLASS_SCMEMBER");

            entity.HasIndex(e => e.StclmStockId, "I_STOCK_SCMEMBER");

            entity.HasIndex(e => new { e.StclmStockId, e.StclmStockclassId }, "UN_STCLM_KEY").IsUnique();

            entity.Property(e => e.StclmId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STCLM_ID");
            entity.Property(e => e.StclmStockId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STCLM_STOCK_ID");
            entity.Property(e => e.StclmStockclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STCLM_STOCKCLASS_ID");
            entity.Property(e => e.StclmTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STCLM_TCREATION");
            entity.Property(e => e.StclmTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STCLM_TUPDATE");

            entity.HasOne(d => d.StclmStock).WithMany(p => p.JStockclassmembers)
                .HasForeignKey(d => d.StclmStockId)
                .HasConstraintName("FK_STOCK_SCMEMBER");

            entity.HasOne(d => d.StclmStockclass).WithMany(p => p.JStockclassmembers)
                .HasForeignKey(d => d.StclmStockclassId)
                .HasConstraintName("FK_STOCKCLASS_SCMEMBER");
        });

        modelBuilder.Entity<JStockcomponent>(entity =>
        {
            entity.HasKey(e => e.StcId).HasName("PK_STOCKCOMPONENT");

            entity.ToTable("J_STOCKCOMPONENT", "JITTOE");

            entity.HasIndex(e => e.StcOrderId, "I_ORDER_STOCKCOMPONENT");

            entity.HasIndex(e => e.StcStockId, "I_STOCK_STOCKCOMPONENT");

            entity.HasIndex(e => e.StcSubjectId, "I_SUBJECT_STOCKCOMPONENT");

            entity.HasIndex(e => new { e.StcStockId, e.StcSubjectId, e.StcOrderId }, "UN_STC_COMP").IsUnique();

            entity.Property(e => e.StcId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STC_ID");
            entity.Property(e => e.StcCurrentamount)
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("STC_CURRENTAMOUNT");
            entity.Property(e => e.StcLockedamount)
                .HasDefaultValueSql("0  ")
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("STC_LOCKEDAMOUNT");
            entity.Property(e => e.StcOrderId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STC_ORDER_ID");
            entity.Property(e => e.StcReservedamount)
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("STC_RESERVEDAMOUNT");
            entity.Property(e => e.StcStockId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STC_STOCK_ID");
            entity.Property(e => e.StcSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STC_SUBJECT_ID");
            entity.Property(e => e.StcTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STC_TCREATION");
            entity.Property(e => e.StcTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STC_TUPDATE");

            entity.HasOne(d => d.StcOrder).WithMany(p => p.JStockcomponents)
                .HasForeignKey(d => d.StcOrderId)
                .HasConstraintName("FK_ORDER_STOCKCOMPONENT");

            entity.HasOne(d => d.StcStock).WithMany(p => p.JStockcomponents)
                .HasForeignKey(d => d.StcStockId)
                .HasConstraintName("FK_STOCK_STOCKCOMPONENT");

            entity.HasOne(d => d.StcSubject).WithMany(p => p.JStockcomponents)
                .HasForeignKey(d => d.StcSubjectId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SUBJECT_STOCKCOMPONENT");
        });

        modelBuilder.Entity<JStockentrydyn>(entity =>
        {
            entity.HasKey(e => e.SedId).HasName("PK_STOCKENTRYDYN");

            entity.ToTable("J_STOCKENTRYDYN", "JITTOE");

            entity.HasIndex(e => e.SedStatId, "I_STOCKENTRYSTAT_DYN");

            entity.Property(e => e.SedId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SED_ID");
            entity.Property(e => e.SedCurrentamount)
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("SED_CURRENTAMOUNT");
            entity.Property(e => e.SedLockedamount)
                .HasDefaultValueSql("0  ")
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("SED_LOCKEDAMOUNT");
            entity.Property(e => e.SedReservedamount)
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("SED_RESERVEDAMOUNT");
            entity.Property(e => e.SedStatId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SED_STAT_ID");
            entity.Property(e => e.SedTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SED_TCREATION");
            entity.Property(e => e.SedTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SED_TUPDATE");

            entity.HasOne(d => d.SedStat).WithMany(p => p.JStockentrydyns)
                .HasForeignKey(d => d.SedStatId)
                .HasConstraintName("FK_STOCKENTRYSTAT_DYN");
        });

        modelBuilder.Entity<JStockentrymark>(entity =>
        {
            entity.HasKey(e => e.SemId).HasName("PK_STOCKENTRYMARK");

            entity.ToTable("J_STOCKENTRYMARK", "JITTOE");

            entity.HasIndex(e => e.SemStockentryId, "I_STOCKENTRY_SEMARK");

            entity.HasIndex(e => e.SemStockeventId, "I_STOCKEVENT_SEMARK");

            entity.Property(e => e.SemId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SEM_ID");
            entity.Property(e => e.SemStockentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SEM_STOCKENTRY_ID");
            entity.Property(e => e.SemStockeventId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SEM_STOCKEVENT_ID");
            entity.Property(e => e.SemTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SEM_TCREATION");

            entity.HasOne(d => d.SemStockentry).WithMany(p => p.JStockentrymarks)
                .HasForeignKey(d => d.SemStockentryId)
                .HasConstraintName("FK_STOCKENTRY_SEMARK");

            entity.HasOne(d => d.SemStockevent).WithMany(p => p.JStockentrymarks)
                .HasForeignKey(d => d.SemStockeventId)
                .HasConstraintName("FK_STOCKEVENT_SEMARK");
        });

        modelBuilder.Entity<JStockentrystat>(entity =>
        {
            entity.HasKey(e => e.SesId).HasName("PK_STOCKENTRYSTAT");

            entity.ToTable("J_STOCKENTRYSTAT", "JITTOE");

            entity.HasIndex(e => e.SesStockId, "I_STOCK_ENTRY");

            entity.HasIndex(e => e.SesSubjectId, "I_SUBJECT_STOCKENTRY");

            entity.HasIndex(e => new { e.SesStockId, e.SesSubjectId }, "UN_SES_KEY").IsUnique();

            entity.Property(e => e.SesId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SES_ID");
            entity.Property(e => e.SesMaxamount)
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("SES_MAXAMOUNT");
            entity.Property(e => e.SesMinamount)
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("SES_MINAMOUNT");
            entity.Property(e => e.SesStockId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SES_STOCK_ID");
            entity.Property(e => e.SesSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SES_SUBJECT_ID");
            entity.Property(e => e.SesSubstcount)
                .HasPrecision(5)
                .HasColumnName("SES_SUBSTCOUNT");
            entity.Property(e => e.SesTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SES_TCREATION");
            entity.Property(e => e.SesTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SES_TUPDATE");
            entity.Property(e => e.SesUpdatestrategy)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("SES_UPDATESTRATEGY");

            entity.HasOne(d => d.SesStock).WithMany(p => p.JStockentrystats)
                .HasForeignKey(d => d.SesStockId)
                .HasConstraintName("FK_STOCK_ENTRY");

            entity.HasOne(d => d.SesSubject).WithMany(p => p.JStockentrystats)
                .HasForeignKey(d => d.SesSubjectId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SUBJECT_STOCKENTRY");
        });

        modelBuilder.Entity<JStockentrysubst>(entity =>
        {
            entity.HasKey(e => e.SesuId).HasName("PK_STOCKENTRYSUBST");

            entity.ToTable("J_STOCKENTRYSUBST", "JITTOE");

            entity.HasIndex(e => e.SesuStatId, "I_STOCKENTRYSTAT_SUBST");

            entity.HasIndex(e => e.SesuSubststatId, "I_STOCKENTRYSUBST_STAT");

            entity.HasIndex(e => new { e.SesuStatId, e.SesuSubststatId }, "UN_SESU_SUBST").IsUnique();

            entity.Property(e => e.SesuId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SESU_ID");
            entity.Property(e => e.SesuStatId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SESU_STAT_ID");
            entity.Property(e => e.SesuSubststatId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SESU_SUBSTSTAT_ID");
            entity.Property(e => e.SesuTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SESU_TCREATION");

            entity.HasOne(d => d.SesuStat).WithMany(p => p.JStockentrysubstSesuStats)
                .HasForeignKey(d => d.SesuStatId)
                .HasConstraintName("FK_STOCKENTRYSTAT_SUBST");

            entity.HasOne(d => d.SesuSubststat).WithMany(p => p.JStockentrysubstSesuSubststats)
                .HasForeignKey(d => d.SesuSubststatId)
                .HasConstraintName("FK_STOCKENTRYSUBST_STAT");
        });

        modelBuilder.Entity<JStockevent>(entity =>
        {
            entity.HasKey(e => e.SeId).HasName("PK_STOCKEVENT");

            entity.ToTable("J_STOCKEVENT", "JITTOE");

            entity.HasIndex(e => e.SeReasoncodeId, "I_CODETABLEENTRY_STOCKEVENT");

            entity.HasIndex(e => e.SeContainerentryId, "I_CONTAINERENTRY_STOCKEVENT");

            entity.HasIndex(e => e.SeExported, "I_SE_EXPORTED");

            entity.HasIndex(e => new { e.SeStockentryId, e.SeTcreation }, "I_SE_TCREATION");

            entity.HasIndex(e => e.SeRefstockeventId, "I_STOCKEVENT_STOCKEVENT");

            entity.HasIndex(e => e.SeStocklocId, "I_STOCKLOC_STOCKEVENT");

            entity.HasIndex(e => e.SeTransitionId, "I_TRANSITION_STOCKEVENT");

            entity.Property(e => e.SeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SE_ID");
            entity.Property(e => e.SeContainerentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SE_CONTAINERENTRY_ID");
            entity.Property(e => e.SeExported)
                .HasColumnType("DATE")
                .HasColumnName("SE_EXPORTED");
            entity.Property(e => e.SeIssubst)
                .HasPrecision(1)
                .HasColumnName("SE_ISSUBST");
            entity.Property(e => e.SeNewamount)
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("SE_NEWAMOUNT");
            entity.Property(e => e.SeNewlockedamount)
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("SE_NEWLOCKEDAMOUNT");
            entity.Property(e => e.SeNewreservedamount)
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("SE_NEWRESERVEDAMOUNT");
            entity.Property(e => e.SeOldamount)
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("SE_OLDAMOUNT");
            entity.Property(e => e.SeOldlockedamount)
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("SE_OLDLOCKEDAMOUNT");
            entity.Property(e => e.SeOldreservedamount)
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("SE_OLDRESERVEDAMOUNT");
            entity.Property(e => e.SeReasoncodeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SE_REASONCODE_ID");
            entity.Property(e => e.SeRefstockeventId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SE_REFSTOCKEVENT_ID");
            entity.Property(e => e.SeStockentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SE_STOCKENTRY_ID");
            entity.Property(e => e.SeStocklocId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SE_STOCKLOC_ID");
            entity.Property(e => e.SeTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SE_TCREATION");
            entity.Property(e => e.SeTransitionId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SE_TRANSITION_ID");

            entity.HasOne(d => d.SeContainerentry).WithMany(p => p.JStockevents)
                .HasForeignKey(d => d.SeContainerentryId)
                .HasConstraintName("FK_CONTAINERENTRY_STOCKEVENT");

            entity.HasOne(d => d.SeReasoncode).WithMany(p => p.JStockevents)
                .HasForeignKey(d => d.SeReasoncodeId)
                .HasConstraintName("FK_CODETABLEENTRY_STOCKEVENT");

            entity.HasOne(d => d.SeRefstockevent).WithMany(p => p.InverseSeRefstockevent)
                .HasForeignKey(d => d.SeRefstockeventId)
                .HasConstraintName("FK_STOCKEVENT_STOCKEVENT");

            entity.HasOne(d => d.SeStockentry).WithMany(p => p.JStockevents)
                .HasForeignKey(d => d.SeStockentryId)
                .HasConstraintName("FK_STOCKENTRYSTAT_EVENT");

            entity.HasOne(d => d.SeStockloc).WithMany(p => p.JStockevents)
                .HasForeignKey(d => d.SeStocklocId)
                .HasConstraintName("FK_STOCKLOC_STOCKEVENT");

            entity.HasOne(d => d.SeTransition).WithMany(p => p.JStockevents)
                .HasForeignKey(d => d.SeTransitionId)
                .HasConstraintName("FK_TRANSITION_STOCKEVENT");
        });

        modelBuilder.Entity<JStockinfo>(entity =>
        {
            entity.HasKey(e => e.StinId).HasName("PK_STOCKINFO");

            entity.ToTable("J_STOCKINFO", "JITTOE");

            entity.HasIndex(e => e.StinErpentityId, "I_ERPENTITY_STOCKINFO");

            entity.HasIndex(e => e.StinStockId, "I_STOCK_STOCKINFO");

            entity.HasIndex(e => new { e.StinStockId, e.StinType, e.StinKey }, "UN_STIN_INFO").IsUnique();

            entity.Property(e => e.StinId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STIN_ID");
            entity.Property(e => e.StinErpentityId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STIN_ERPENTITY_ID");
            entity.Property(e => e.StinIntvalue)
                .HasPrecision(10)
                .HasDefaultValueSql("0  ")
                .HasColumnName("STIN_INTVALUE");
            entity.Property(e => e.StinKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("STIN_KEY");
            entity.Property(e => e.StinStockId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STIN_STOCK_ID");
            entity.Property(e => e.StinStringvalue)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasColumnName("STIN_STRINGVALUE");
            entity.Property(e => e.StinTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STIN_TCREATION");
            entity.Property(e => e.StinTimevalue)
                .HasColumnType("DATE")
                .HasColumnName("STIN_TIMEVALUE");
            entity.Property(e => e.StinTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STIN_TUPDATE");
            entity.Property(e => e.StinType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("STIN_TYPE");

            entity.HasOne(d => d.StinErpentity).WithMany(p => p.JStockinfos)
                .HasForeignKey(d => d.StinErpentityId)
                .HasConstraintName("FK_ERPENTITY_STOCKINFO");

            entity.HasOne(d => d.StinStock).WithMany(p => p.JStockinfos)
                .HasForeignKey(d => d.StinStockId)
                .HasConstraintName("FK_STOCK_STOCKINFO");
        });

        modelBuilder.Entity<JStockinv>(entity =>
        {
            entity.HasKey(e => e.StiId).HasName("PK_STOCKINV");

            entity.ToTable("J_STOCKINV", "JITTOE");

            entity.HasIndex(e => e.StiContainersetclassId, "I_CONTAINERSETCLASS_STOCKINV");

            entity.HasIndex(e => e.StiStockclassId, "I_STOCKCLASS_STOCKINV");

            entity.HasIndex(e => e.StiStockinvtypeId, "I_STOCKINVTYPE_STOCKINV");

            entity.HasIndex(e => e.StiStocktagsetId, "I_STOCKTAGSET_STOCKINV");

            entity.HasIndex(e => e.StiStockId, "I_STOCK_STOCKINV");

            entity.HasIndex(e => e.StiNo, "UN_STI_NO").IsUnique();

            entity.Property(e => e.StiId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STI_ID");
            entity.Property(e => e.StiCmd)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasDefaultValueSql("'None'  ")
                .HasColumnName("STI_CMD");
            entity.Property(e => e.StiCmdstate)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasDefaultValueSql("'Ok'  ")
                .HasColumnName("STI_CMDSTATE");
            entity.Property(e => e.StiContainersetclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STI_CONTAINERSETCLASS_ID");
            entity.Property(e => e.StiDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STI_DESCR");
            entity.Property(e => e.StiLastcmdresult)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasColumnName("STI_LASTCMDRESULT");
            entity.Property(e => e.StiNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("STI_NO");
            entity.Property(e => e.StiState)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("STI_STATE");
            entity.Property(e => e.StiStockId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STI_STOCK_ID");
            entity.Property(e => e.StiStockclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STI_STOCKCLASS_ID");
            entity.Property(e => e.StiStockinvtypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STI_STOCKINVTYPE_ID");
            entity.Property(e => e.StiStocktagsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STI_STOCKTAGSET_ID");
            entity.Property(e => e.StiTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STI_TCREATION");
            entity.Property(e => e.StiTimeended)
                .HasColumnType("DATE")
                .HasColumnName("STI_TIMEENDED");
            entity.Property(e => e.StiTimestarted)
                .HasColumnType("DATE")
                .HasColumnName("STI_TIMESTARTED");
            entity.Property(e => e.StiTimetagscreated)
                .HasColumnType("DATE")
                .HasColumnName("STI_TIMETAGSCREATED");
            entity.Property(e => e.StiTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STI_TUPDATE");

            entity.HasOne(d => d.StiContainersetclass).WithMany(p => p.JStockinvs)
                .HasForeignKey(d => d.StiContainersetclassId)
                .HasConstraintName("FK_CONTAINERSETCLASS_STOCKINV");

            entity.HasOne(d => d.StiStock).WithMany(p => p.JStockinvs)
                .HasForeignKey(d => d.StiStockId)
                .HasConstraintName("FK_STOCK_STOCKINV");

            entity.HasOne(d => d.StiStockclass).WithMany(p => p.JStockinvs)
                .HasForeignKey(d => d.StiStockclassId)
                .HasConstraintName("FK_STOCKCLASS_STOCKINV");

            entity.HasOne(d => d.StiStockinvtype).WithMany(p => p.JStockinvs)
                .HasForeignKey(d => d.StiStockinvtypeId)
                .HasConstraintName("FK_STOCKINVTYPE_STOCKINV");

            entity.HasOne(d => d.StiStocktagset).WithMany(p => p.JStockinvs)
                .HasForeignKey(d => d.StiStocktagsetId)
                .HasConstraintName("FK_STOCKTAGSET_STOCKINV");
        });

        modelBuilder.Entity<JStockinvcontainerset>(entity =>
        {
            entity.HasKey(e => e.SticsId).HasName("PK_STOCKINVCONTAINERSET");

            entity.ToTable("J_STOCKINVCONTAINERSET", "JITTOE");

            entity.HasIndex(e => e.SticsContainersetId, "I_CONTAINERSET_SINVCS");

            entity.HasIndex(e => e.SticsStockinvId, "I_STOCKINV_SINVCS");

            entity.HasIndex(e => new { e.SticsStockinvId, e.SticsContainersetId }, "UN_STICS_KEY").IsUnique();

            entity.Property(e => e.SticsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STICS_ID");
            entity.Property(e => e.SticsContainersetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STICS_CONTAINERSET_ID");
            entity.Property(e => e.SticsStockinvId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STICS_STOCKINV_ID");
            entity.Property(e => e.SticsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STICS_TCREATION");
            entity.Property(e => e.SticsTimecountingended)
                .HasColumnType("DATE")
                .HasColumnName("STICS_TIMECOUNTINGENDED");
            entity.Property(e => e.SticsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STICS_TUPDATE");

            entity.HasOne(d => d.SticsContainerset).WithMany(p => p.JStockinvcontainersets)
                .HasForeignKey(d => d.SticsContainersetId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTAINERSET_SINVCS");

            entity.HasOne(d => d.SticsStockinv).WithMany(p => p.JStockinvcontainersets)
                .HasForeignKey(d => d.SticsStockinvId)
                .HasConstraintName("FK_STOCKINV_SINVCS");
        });

        modelBuilder.Entity<JStockinvcresult>(entity =>
        {
            entity.HasKey(e => e.SticrId).HasName("PK_STOCKINVCRESULT");

            entity.ToTable("J_STOCKINVCRESULT", "JITTOE");

            entity.HasIndex(e => e.SticrStockinvId, "I_STOCKINV_SINVCRESULT");

            entity.Property(e => e.SticrId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STICR_ID");
            entity.Property(e => e.SticrStockinvId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STICR_STOCKINV_ID");
            entity.Property(e => e.SticrTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STICR_TCREATION");
            entity.Property(e => e.SticrTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STICR_TUPDATE");
            entity.Property(e => e.SticrType)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("STICR_TYPE");

            entity.HasOne(d => d.SticrStockinv).WithMany(p => p.JStockinvcresults)
                .HasForeignKey(d => d.SticrStockinvId)
                .HasConstraintName("FK_STOCKINV_SINVCRESULT");
        });

        modelBuilder.Entity<JStockinvcresultitem>(entity =>
        {
            entity.HasKey(e => e.SticriId).HasName("PK_STOCKINVCRESULTITEM");

            entity.ToTable("J_STOCKINVCRESULTITEM", "JITTOE");

            entity.HasIndex(e => e.SticriContainerId, "I_CNR_SINVCRITEM");

            entity.HasIndex(e => e.SticriOtherstocklocId, "I_OTHERSTOCKLOC_SINVCRITEM");

            entity.HasIndex(e => e.SticriOtherstockId, "I_OTHERSTOCK_SINVCRITEM");

            entity.HasIndex(e => e.SticriStockinvcommitresultId, "I_SINVCR_SINVCRITEM");

            entity.HasIndex(e => e.SticriStocklocId, "I_STOCKLOC_SINVCRITEM");

            entity.Property(e => e.SticriId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STICRI_ID");
            entity.Property(e => e.SticriContainerId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STICRI_CONTAINER_ID");
            entity.Property(e => e.SticriDescr)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasColumnName("STICRI_DESCR");
            entity.Property(e => e.SticriOtherstockId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STICRI_OTHERSTOCK_ID");
            entity.Property(e => e.SticriOtherstocklocId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STICRI_OTHERSTOCKLOC_ID");
            entity.Property(e => e.SticriStockinvcommitresultId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STICRI_STOCKINVCOMMITRESULT_ID");
            entity.Property(e => e.SticriStocklocId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STICRI_STOCKLOC_ID");
            entity.Property(e => e.SticriTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STICRI_TCREATION");
            entity.Property(e => e.SticriTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STICRI_TUPDATE");

            entity.HasOne(d => d.SticriContainer).WithMany(p => p.JStockinvcresultitems)
                .HasForeignKey(d => d.SticriContainerId)
                .HasConstraintName("FK_CNR_SINVCRITEM");

            entity.HasOne(d => d.SticriOtherstock).WithMany(p => p.JStockinvcresultitems)
                .HasForeignKey(d => d.SticriOtherstockId)
                .HasConstraintName("FK_OTHERSTOCK_SINVCRITEM");

            entity.HasOne(d => d.SticriOtherstockloc).WithMany(p => p.JStockinvcresultitemSticriOtherstocklocs)
                .HasForeignKey(d => d.SticriOtherstocklocId)
                .HasConstraintName("FK_OTHERSTOCKLOC_SINVCRITEM");

            entity.HasOne(d => d.SticriStockinvcommitresult).WithMany(p => p.JStockinvcresultitems)
                .HasForeignKey(d => d.SticriStockinvcommitresultId)
                .HasConstraintName("FK_SINVCR_SINVCRITEM");

            entity.HasOne(d => d.SticriStockloc).WithMany(p => p.JStockinvcresultitemSticriStocklocs)
                .HasForeignKey(d => d.SticriStocklocId)
                .HasConstraintName("FK_STOCKLOC_SINVCRITEM");
        });

        modelBuilder.Entity<JStockinvdiffitem>(entity =>
        {
            entity.HasKey(e => e.StidiId).HasName("PK_STOCKINVDIFFITEM");

            entity.ToTable("J_STOCKINVDIFFITEM", "JITTOE");

            entity.HasIndex(e => e.StidiNewcontainerId, "I_NEWCNR_SINVDITEM");

            entity.HasIndex(e => e.StidiNewpartId, "I_NEWPART_SINVDITEM");

            entity.HasIndex(e => e.StidiNewsubjectId, "I_NEWSUBJECT_SINVDITEM");

            entity.HasIndex(e => e.StidiOldcontainerId, "I_OLDCNR_SINVDITEM");

            entity.HasIndex(e => e.StidiOldpartId, "I_OLDPART_SINVDITEM");

            entity.HasIndex(e => e.StidiOldsubjectId, "I_OLDSUBJECT_SINVDITEM");

            entity.HasIndex(e => e.StidiStockinvId, "I_STOCKINV_SINVDITEM");

            entity.HasIndex(e => e.StidiStocklocId, "I_STOCKLOC_SINVDITEM");

            entity.Property(e => e.StidiId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STIDI_ID");
            entity.Property(e => e.StidiNewamount)
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("STIDI_NEWAMOUNT");
            entity.Property(e => e.StidiNewcontainerId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STIDI_NEWCONTAINER_ID");
            entity.Property(e => e.StidiNewcontainerentrypos)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("STIDI_NEWCONTAINERENTRYPOS");
            entity.Property(e => e.StidiNewpartId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STIDI_NEWPART_ID");
            entity.Property(e => e.StidiNewsubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STIDI_NEWSUBJECT_ID");
            entity.Property(e => e.StidiOldamount)
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("STIDI_OLDAMOUNT");
            entity.Property(e => e.StidiOldcontainerId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STIDI_OLDCONTAINER_ID");
            entity.Property(e => e.StidiOldcontainerentrypos)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("STIDI_OLDCONTAINERENTRYPOS");
            entity.Property(e => e.StidiOldpartId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STIDI_OLDPART_ID");
            entity.Property(e => e.StidiOldsubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STIDI_OLDSUBJECT_ID");
            entity.Property(e => e.StidiStockinvId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STIDI_STOCKINV_ID");
            entity.Property(e => e.StidiStocklocId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STIDI_STOCKLOC_ID");
            entity.Property(e => e.StidiTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STIDI_TCREATION");
            entity.Property(e => e.StidiTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STIDI_TUPDATE");
            entity.Property(e => e.StidiType)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("STIDI_TYPE");

            entity.HasOne(d => d.StidiNewcontainer).WithMany(p => p.JStockinvdiffitemStidiNewcontainers)
                .HasForeignKey(d => d.StidiNewcontainerId)
                .HasConstraintName("FK_NEWCNR_SINVDITEM");

            entity.HasOne(d => d.StidiNewpart).WithMany(p => p.JStockinvdiffitemStidiNewparts)
                .HasForeignKey(d => d.StidiNewpartId)
                .HasConstraintName("FK_NEWPART_SINVDITEM");

            entity.HasOne(d => d.StidiNewsubject).WithMany(p => p.JStockinvdiffitemStidiNewsubjects)
                .HasForeignKey(d => d.StidiNewsubjectId)
                .HasConstraintName("FK_NEWSUBJECT_SINVDITEM");

            entity.HasOne(d => d.StidiOldcontainer).WithMany(p => p.JStockinvdiffitemStidiOldcontainers)
                .HasForeignKey(d => d.StidiOldcontainerId)
                .HasConstraintName("FK_OLDCNR_SINVDITEM");

            entity.HasOne(d => d.StidiOldpart).WithMany(p => p.JStockinvdiffitemStidiOldparts)
                .HasForeignKey(d => d.StidiOldpartId)
                .HasConstraintName("FK_OLDPART_SINVDITEM");

            entity.HasOne(d => d.StidiOldsubject).WithMany(p => p.JStockinvdiffitemStidiOldsubjects)
                .HasForeignKey(d => d.StidiOldsubjectId)
                .HasConstraintName("FK_OLDSUBJECT_SINVDITEM");

            entity.HasOne(d => d.StidiStockinv).WithMany(p => p.JStockinvdiffitems)
                .HasForeignKey(d => d.StidiStockinvId)
                .HasConstraintName("FK_STOCKINV_SINVDITEM");

            entity.HasOne(d => d.StidiStockloc).WithMany(p => p.JStockinvdiffitems)
                .HasForeignKey(d => d.StidiStocklocId)
                .HasConstraintName("FK_STOCKLOC_SINVDITEM");
        });

        modelBuilder.Entity<JStockinvitem>(entity =>
        {
            entity.HasKey(e => e.StiiId).HasName("PK_STOCKINVITEM");

            entity.ToTable("J_STOCKINVITEM", "JITTOE");

            entity.HasIndex(e => e.StiiContainerId, "I_CNR_SINVITEM");

            entity.HasIndex(e => e.StiiPartId, "I_PART_SINVITEM");

            entity.HasIndex(e => e.StiiStockinvId, "I_STOCKINV_SINVITEM");

            entity.HasIndex(e => e.StiiStocklocId, "I_STOCKLOC_SINVITEM");

            entity.HasIndex(e => e.StiiSubjectId, "I_SUBJECT_SINVITEM");

            entity.Property(e => e.StiiId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STII_ID");
            entity.Property(e => e.StiiAmount)
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("STII_AMOUNT");
            entity.Property(e => e.StiiContainerId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STII_CONTAINER_ID");
            entity.Property(e => e.StiiContainerentrypos)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("STII_CONTAINERENTRYPOS");
            entity.Property(e => e.StiiPartId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STII_PART_ID");
            entity.Property(e => e.StiiStockinvId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STII_STOCKINV_ID");
            entity.Property(e => e.StiiStocklocId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STII_STOCKLOC_ID");
            entity.Property(e => e.StiiSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STII_SUBJECT_ID");
            entity.Property(e => e.StiiTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STII_TCREATION");
            entity.Property(e => e.StiiTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STII_TUPDATE");

            entity.HasOne(d => d.StiiContainer).WithMany(p => p.JStockinvitems)
                .HasForeignKey(d => d.StiiContainerId)
                .HasConstraintName("FK_CNR_SINVITEM");

            entity.HasOne(d => d.StiiPart).WithMany(p => p.JStockinvitems)
                .HasForeignKey(d => d.StiiPartId)
                .HasConstraintName("FK_PART_SINVITEM");

            entity.HasOne(d => d.StiiStockinv).WithMany(p => p.JStockinvitems)
                .HasForeignKey(d => d.StiiStockinvId)
                .HasConstraintName("FK_STOCKINV_SINVITEM");

            entity.HasOne(d => d.StiiStockloc).WithMany(p => p.JStockinvitems)
                .HasForeignKey(d => d.StiiStocklocId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_STOCKLOC_SINVITEM");

            entity.HasOne(d => d.StiiSubject).WithMany(p => p.JStockinvitems)
                .HasForeignKey(d => d.StiiSubjectId)
                .HasConstraintName("FK_SUBJECT_SINVITEM");
        });

        modelBuilder.Entity<JStockinvstockentry>(entity =>
        {
            entity.HasKey(e => e.StiseId).HasName("PK_STOCKINVSTOCKENTRY");

            entity.ToTable("J_STOCKINVSTOCKENTRY", "JITTOE");

            entity.HasIndex(e => e.StiseStockentrystatId, "I_STOCKENTRYSTAT_SINVSENTRY");

            entity.HasIndex(e => e.StiseStockinvId, "I_STOCKINV_SINVSENTRY");

            entity.HasIndex(e => new { e.StiseStockinvId, e.StiseStockentrystatId }, "UN_STISE_KEY").IsUnique();

            entity.Property(e => e.StiseId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STISE_ID");
            entity.Property(e => e.StiseNewamount)
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("STISE_NEWAMOUNT");
            entity.Property(e => e.StiseOldamount)
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("STISE_OLDAMOUNT");
            entity.Property(e => e.StiseStockentrystatId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STISE_STOCKENTRYSTAT_ID");
            entity.Property(e => e.StiseStockinvId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STISE_STOCKINV_ID");
            entity.Property(e => e.StiseTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STISE_TCREATION");
            entity.Property(e => e.StiseTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STISE_TUPDATE");

            entity.HasOne(d => d.StiseStockentrystat).WithMany(p => p.JStockinvstockentries)
                .HasForeignKey(d => d.StiseStockentrystatId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_STOCKENTRYSTAT_SINVSENTRY");

            entity.HasOne(d => d.StiseStockinv).WithMany(p => p.JStockinvstockentries)
                .HasForeignKey(d => d.StiseStockinvId)
                .HasConstraintName("FK_STOCKINV_SINVSENTRY");
        });

        modelBuilder.Entity<JStockinvstockloc>(entity =>
        {
            entity.HasKey(e => e.StislId).HasName("PK_STOCKINVSTOCKLOC");

            entity.ToTable("J_STOCKINVSTOCKLOC", "JITTOE");

            entity.HasIndex(e => e.StislStockinvId, "I_STOCKINV_SINVSLOC");

            entity.HasIndex(e => e.StislStocklocId, "I_STOCKLOC_SINVSLOC");

            entity.HasIndex(e => e.StislTransitionId, "I_TRANSITION_SINVSLOC");

            entity.HasIndex(e => new { e.StislStockinvId, e.StislStocklocId }, "UN_STISL_KEY").IsUnique();

            entity.Property(e => e.StislId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STISL_ID");
            entity.Property(e => e.StislComputed)
                .HasPrecision(1)
                .HasDefaultValueSql("0\n")
                .HasColumnName("STISL_COMPUTED");
            entity.Property(e => e.StislCountidx)
                .HasPrecision(9)
                .HasDefaultValueSql("0  ")
                .HasColumnName("STISL_COUNTIDX");
            entity.Property(e => e.StislStockinvId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STISL_STOCKINV_ID");
            entity.Property(e => e.StislStocklocId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STISL_STOCKLOC_ID");
            entity.Property(e => e.StislTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STISL_TCREATION");
            entity.Property(e => e.StislTimecompleted)
                .HasColumnType("DATE")
                .HasColumnName("STISL_TIMECOMPLETED");
            entity.Property(e => e.StislTransitionId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STISL_TRANSITION_ID");
            entity.Property(e => e.StislTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STISL_TUPDATE");

            entity.HasOne(d => d.StislStockinv).WithMany(p => p.JStockinvstocklocs)
                .HasForeignKey(d => d.StislStockinvId)
                .HasConstraintName("FK_STOCKINV_SINVSLOC");

            entity.HasOne(d => d.StislStockloc).WithMany(p => p.JStockinvstocklocs)
                .HasForeignKey(d => d.StislStocklocId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_STOCKLOC_SINVSLOC");

            entity.HasOne(d => d.StislTransition).WithMany(p => p.JStockinvstocklocs)
                .HasForeignKey(d => d.StislTransitionId)
                .HasConstraintName("FK_TRANSITION_SINVSLOC");
        });

        modelBuilder.Entity<JStockinvstockloccnr>(entity =>
        {
            entity.HasKey(e => e.StislcId).HasName("PK_STOCKINVSTOCKLOCCNR");

            entity.ToTable("J_STOCKINVSTOCKLOCCNR", "JITTOE");

            entity.HasIndex(e => e.StislcContainerId, "I_CONTAINER_SINVSLOCCNR");

            entity.HasIndex(e => e.StislcSelectedcontainersetId, "I_SELCNRSET_SINVSLOCCNR");

            entity.HasIndex(e => e.StislcSelectedcontainerId, "I_SELCNR_SINVSLOCCNR");

            entity.HasIndex(e => e.StislcStockinvstocklocId, "I_SINVSLOC_SINVSLOCCNR");

            entity.HasIndex(e => e.StislcUsedcontainerId, "I_USEDCNR_SINVSLOCCNR");

            entity.Property(e => e.StislcId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STISLC_ID");
            entity.Property(e => e.StislcContainerId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STISLC_CONTAINER_ID");
            entity.Property(e => e.StislcCountidx)
                .HasPrecision(9)
                .HasDefaultValueSql("0  ")
                .HasColumnName("STISLC_COUNTIDX");
            entity.Property(e => e.StislcLastcnrcounttype)
                .HasMaxLength(17)
                .IsUnicode(false)
                .HasDefaultValueSql("'None'  ")
                .HasColumnName("STISLC_LASTCNRCOUNTTYPE");
            entity.Property(e => e.StislcLastcommitresult)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasColumnName("STISLC_LASTCOMMITRESULT");
            entity.Property(e => e.StislcReqcnrcounttype)
                .HasMaxLength(17)
                .IsUnicode(false)
                .HasDefaultValueSql("'None'  ")
                .HasColumnName("STISLC_REQCNRCOUNTTYPE");
            entity.Property(e => e.StislcSelectedcontainerId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STISLC_SELECTEDCONTAINER_ID");
            entity.Property(e => e.StislcSelectedcontainersetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STISLC_SELECTEDCONTAINERSET_ID");
            entity.Property(e => e.StislcStatus)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasDefaultValueSql("'Unknown'  ")
                .HasColumnName("STISLC_STATUS");
            entity.Property(e => e.StislcStockinvstocklocId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STISLC_STOCKINVSTOCKLOC_ID");
            entity.Property(e => e.StislcTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STISLC_TCREATION");
            entity.Property(e => e.StislcTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STISLC_TUPDATE");
            entity.Property(e => e.StislcUsedcontainerId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STISLC_USEDCONTAINER_ID");

            entity.HasOne(d => d.StislcContainer).WithMany(p => p.JStockinvstockloccnrStislcContainers)
                .HasForeignKey(d => d.StislcContainerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTAINER_SINVSLOCCNR");

            entity.HasOne(d => d.StislcSelectedcontainer).WithMany(p => p.JStockinvstockloccnrStislcSelectedcontainers)
                .HasForeignKey(d => d.StislcSelectedcontainerId)
                .HasConstraintName("FK_SELCNR_SINVSLOCCNR");

            entity.HasOne(d => d.StislcSelectedcontainerset).WithMany(p => p.JStockinvstockloccnrs)
                .HasForeignKey(d => d.StislcSelectedcontainersetId)
                .HasConstraintName("FK_SELCNRSET_SINVSLOCCNR");

            entity.HasOne(d => d.StislcStockinvstockloc).WithMany(p => p.JStockinvstockloccnrs)
                .HasForeignKey(d => d.StislcStockinvstocklocId)
                .HasConstraintName("FK_SINVSLOC_SINVSLOCCNR");

            entity.HasOne(d => d.StislcUsedcontainer).WithMany(p => p.JStockinvstockloccnrStislcUsedcontainers)
                .HasForeignKey(d => d.StislcUsedcontainerId)
                .HasConstraintName("FK_USEDCNR_SINVSLOCCNR");
        });

        modelBuilder.Entity<JStockinvstockloccnrpart>(entity =>
        {
            entity.HasKey(e => e.StislcpId).HasName("PK_STOCKINVSTOCKLOCCNRPART");

            entity.ToTable("J_STOCKINVSTOCKLOCCNRPART", "JITTOE");

            entity.HasIndex(e => e.StislcpContainerentryId, "I_CENTRY_SINVSLOCCPART");

            entity.HasIndex(e => e.StislcpPartId, "I_PART_SINVSLOCCPART");

            entity.HasIndex(e => e.StislcpSinvstockloccnrId, "I_SINVSLOCCNR_SINVSLOCCPART");

            entity.Property(e => e.StislcpId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STISLCP_ID");
            entity.Property(e => e.StislcpContainerentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STISLCP_CONTAINERENTRY_ID");
            entity.Property(e => e.StislcpPartId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STISLCP_PART_ID");
            entity.Property(e => e.StislcpSinvstockloccnrId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STISLCP_SINVSTOCKLOCCNR_ID");
            entity.Property(e => e.StislcpTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STISLCP_TCREATION");
            entity.Property(e => e.StislcpTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STISLCP_TUPDATE");

            entity.HasOne(d => d.StislcpContainerentry).WithMany(p => p.JStockinvstockloccnrparts)
                .HasForeignKey(d => d.StislcpContainerentryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CENTRY_SINVSLOCCPART");

            entity.HasOne(d => d.StislcpPart).WithMany(p => p.JStockinvstockloccnrparts)
                .HasForeignKey(d => d.StislcpPartId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PART_SINVSLOCCPART");

            entity.HasOne(d => d.StislcpSinvstockloccnr).WithMany(p => p.JStockinvstockloccnrparts)
                .HasForeignKey(d => d.StislcpSinvstockloccnrId)
                .HasConstraintName("FK_SINVSLOCCNR_SINVSLOCCPART");
        });

        modelBuilder.Entity<JStockinvstocklocpart>(entity =>
        {
            entity.HasKey(e => e.StislpId).HasName("PK_STOCKINVSTOCKLOCPART");

            entity.ToTable("J_STOCKINVSTOCKLOCPART", "JITTOE");

            entity.HasIndex(e => e.StislpPartId, "I_PART_SINVSLOCP");

            entity.HasIndex(e => e.StislpStockinvstocklocId, "I_SINVSLOC_SINVSLOCP");

            entity.Property(e => e.StislpId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STISLP_ID");
            entity.Property(e => e.StislpCountidx)
                .HasPrecision(9)
                .HasDefaultValueSql("0  ")
                .HasColumnName("STISLP_COUNTIDX");
            entity.Property(e => e.StislpPartId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STISLP_PART_ID");
            entity.Property(e => e.StislpStockinvstocklocId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STISLP_STOCKINVSTOCKLOC_ID");
            entity.Property(e => e.StislpTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STISLP_TCREATION");
            entity.Property(e => e.StislpTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STISLP_TUPDATE");

            entity.HasOne(d => d.StislpPart).WithMany(p => p.JStockinvstocklocparts)
                .HasForeignKey(d => d.StislpPartId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PART_SINVSLOCP");

            entity.HasOne(d => d.StislpStockinvstockloc).WithMany(p => p.JStockinvstocklocparts)
                .HasForeignKey(d => d.StislpStockinvstocklocId)
                .HasConstraintName("FK_SINVSLOC_SINVSLOCP");
        });

        modelBuilder.Entity<JStockinvstocklocsubject>(entity =>
        {
            entity.HasKey(e => e.StislsId).HasName("PK_STOCKINVSTOCKLOCSUBJECT");

            entity.ToTable("J_STOCKINVSTOCKLOCSUBJECT", "JITTOE");

            entity.HasIndex(e => e.StislsStockinvstocklocId, "I_SINVSLOC_SINVSLOCS");

            entity.HasIndex(e => e.StislsSubjectId, "I_SUBJECT_SINVSLOCS");

            entity.Property(e => e.StislsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STISLS_ID");
            entity.Property(e => e.StislsAmount)
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("STISLS_AMOUNT");
            entity.Property(e => e.StislsCountidx)
                .HasPrecision(9)
                .HasDefaultValueSql("0  ")
                .HasColumnName("STISLS_COUNTIDX");
            entity.Property(e => e.StislsStockinvstocklocId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STISLS_STOCKINVSTOCKLOC_ID");
            entity.Property(e => e.StislsSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STISLS_SUBJECT_ID");
            entity.Property(e => e.StislsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STISLS_TCREATION");
            entity.Property(e => e.StislsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STISLS_TUPDATE");

            entity.HasOne(d => d.StislsStockinvstockloc).WithMany(p => p.JStockinvstocklocsubjects)
                .HasForeignKey(d => d.StislsStockinvstocklocId)
                .HasConstraintName("FK_SINVSLOC_SINVSLOCS");

            entity.HasOne(d => d.StislsSubject).WithMany(p => p.JStockinvstocklocsubjects)
                .HasForeignKey(d => d.StislsSubjectId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SUBJECT_SINVSLOCS");
        });

        modelBuilder.Entity<JStockinvtype>(entity =>
        {
            entity.HasKey(e => e.StitId).HasName("PK_STOCKINVTYPE");

            entity.ToTable("J_STOCKINVTYPE", "JITTOE");

            entity.HasIndex(e => e.StitEdicfgId, "I_EDICFG_STOCKINVTYPE");

            entity.HasIndex(e => e.StitStockId, "I_STOCK_STOCKINVTYPE");

            entity.Property(e => e.StitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STIT_ID");
            entity.Property(e => e.StitDescr)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("STIT_DESCR");
            entity.Property(e => e.StitEdicfgId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STIT_EDICFG_ID");
            entity.Property(e => e.StitEnabled)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("1  ")
                .HasColumnName("STIT_ENABLED");
            entity.Property(e => e.StitLocktype)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasDefaultValueSql("'Immediate'  ")
                .HasColumnName("STIT_LOCKTYPE");
            entity.Property(e => e.StitStockId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STIT_STOCK_ID");
            entity.Property(e => e.StitStrategy)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("STIT_STRATEGY");
            entity.Property(e => e.StitTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STIT_TCREATION");
            entity.Property(e => e.StitTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STIT_TUPDATE");

            entity.HasOne(d => d.StitEdicfg).WithMany(p => p.JStockinvtypes)
                .HasForeignKey(d => d.StitEdicfgId)
                .HasConstraintName("FK_EDICFG_STOCKINVTYPE");

            entity.HasOne(d => d.StitStock).WithMany(p => p.JStockinvtypes)
                .HasForeignKey(d => d.StitStockId)
                .HasConstraintName("FK_STOCK_STOCKINVTYPE");
        });

        modelBuilder.Entity<JStockloc>(entity =>
        {
            entity.HasKey(e => e.StlId).HasName("PK_STOCKLOC");

            entity.ToTable("J_STOCKLOC", "JITTOE");

            entity.HasIndex(e => e.StlBeforeinvstocklocstatusId, "I_BEFOREINVSLS_STOCKLOC");

            entity.HasIndex(e => e.StlEffsubjectclassId, "I_EFFSUBJECTCLASS_STOCKLOC");

            entity.HasIndex(e => new { e.StlStockId, e.StlFullorder1 }, "I_STL_STOCK_FULLORDER1");

            entity.HasIndex(e => e.StlStocklocstatusId, "I_STOCKLOCSTATUS_STOCKLOC");

            entity.HasIndex(e => e.StlStockloctypeId, "I_STOCKLOCTYPE_STOCKLOC");

            entity.HasIndex(e => e.StlParentId, "I_STOCKLOC_STOCKLOC");

            entity.HasIndex(e => e.StlStockId, "I_STOCK_STOCKLOC");

            entity.HasIndex(e => e.StlSubjectclassId, "I_SUBJECTCLASS_STOCKLOC");

            entity.HasIndex(e => e.StlSubjectId, "I_SUBJECT_STOCKLOC");

            entity.HasIndex(e => new { e.StlStockId, e.StlFullname, e.StlDeletionid }, "UN_STL_STOCKLOC_FULLNAME").IsUnique();

            entity.HasIndex(e => new { e.StlStockId, e.StlParentId, e.StlIndex, e.StlDeletionid }, "UN_STL_STOCKLOC_INDEX").IsUnique();

            entity.HasIndex(e => new { e.StlStockId, e.StlKeyinstock, e.StlDeletionid }, "UN_STL_STOCKLOC_KEYINSTOCK").IsUnique();

            entity.HasIndex(e => new { e.StlStockId, e.StlParentId, e.StlName, e.StlDeletionid }, "UN_STL_STOCKLOC_NAME").IsUnique();

            entity.Property(e => e.StlId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STL_ID");
            entity.Property(e => e.StlBeforeinvstocklocstatusId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STL_BEFOREINVSTOCKLOCSTATUS_ID");
            entity.Property(e => e.StlCheckcode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("STL_CHECKCODE");
            entity.Property(e => e.StlChildnameformat)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("STL_CHILDNAMEFORMAT");
            entity.Property(e => e.StlDeletionid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STL_DELETIONID");
            entity.Property(e => e.StlDepth)
                .HasPrecision(2)
                .HasColumnName("STL_DEPTH");
            entity.Property(e => e.StlDescr)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("STL_DESCR");
            entity.Property(e => e.StlEffsubjectclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STL_EFFSUBJECTCLASS_ID");
            entity.Property(e => e.StlEnablecontainers)
                .HasPrecision(1)
                .HasColumnName("STL_ENABLECONTAINERS");
            entity.Property(e => e.StlEnablesubjects)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("0  ")
                .HasColumnName("STL_ENABLESUBJECTS");
            entity.Property(e => e.StlFullname)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("STL_FULLNAME");
            entity.Property(e => e.StlFullorder1)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("STL_FULLORDER1");
            entity.Property(e => e.StlHomogeneous)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("0  ")
                .HasColumnName("STL_HOMOGENEOUS");
            entity.Property(e => e.StlIndex)
                .HasPrecision(8)
                .HasColumnName("STL_INDEX");
            entity.Property(e => e.StlKeyinstock)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("STL_KEYINSTOCK");
            entity.Property(e => e.StlMaxcontainers)
                .HasPrecision(6)
                .HasColumnName("STL_MAXCONTAINERS");
            entity.Property(e => e.StlName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("STL_NAME");
            entity.Property(e => e.StlNumactiveinv)
                .HasPrecision(4)
                .HasDefaultValueSql("0  ")
                .HasColumnName("STL_NUMACTIVEINV");
            entity.Property(e => e.StlNumcontainers)
                .HasPrecision(6)
                .HasColumnName("STL_NUMCONTAINERS");
            entity.Property(e => e.StlParentId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STL_PARENT_ID");
            entity.Property(e => e.StlStockId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STL_STOCK_ID");
            entity.Property(e => e.StlStocklocstatusId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STL_STOCKLOCSTATUS_ID");
            entity.Property(e => e.StlStockloctypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STL_STOCKLOCTYPE_ID");
            entity.Property(e => e.StlSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STL_SUBJECT_ID");
            entity.Property(e => e.StlSubjectclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STL_SUBJECTCLASS_ID");
            entity.Property(e => e.StlTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STL_TCREATION");
            entity.Property(e => e.StlTdeletion)
                .HasColumnType("DATE")
                .HasColumnName("STL_TDELETION");
            entity.Property(e => e.StlTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STL_TUPDATE");

            entity.HasOne(d => d.StlBeforeinvstocklocstatus).WithMany(p => p.JStocklocStlBeforeinvstocklocstatuses)
                .HasForeignKey(d => d.StlBeforeinvstocklocstatusId)
                .HasConstraintName("FK_BEFOREINVSLS_STOCKLOC");

            entity.HasOne(d => d.StlEffsubjectclass).WithMany(p => p.JStocklocStlEffsubjectclasses)
                .HasForeignKey(d => d.StlEffsubjectclassId)
                .HasConstraintName("FK_EFFSUBJECTCLASS_STOCKLOC");

            entity.HasOne(d => d.StlParent).WithMany(p => p.InverseStlParent)
                .HasForeignKey(d => d.StlParentId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_STOCKLOC_STOCKLOC");

            entity.HasOne(d => d.StlStock).WithMany(p => p.JStocklocs)
                .HasForeignKey(d => d.StlStockId)
                .HasConstraintName("FK_STOCK_STOCKLOC");

            entity.HasOne(d => d.StlStocklocstatus).WithMany(p => p.JStocklocStlStocklocstatuses)
                .HasForeignKey(d => d.StlStocklocstatusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_STOCKLOCSTATUS_STOCKLOC");

            entity.HasOne(d => d.StlStockloctype).WithMany(p => p.JStocklocs)
                .HasForeignKey(d => d.StlStockloctypeId)
                .HasConstraintName("FK_STOCKLOCTYPE_STOCKLOC");

            entity.HasOne(d => d.StlSubject).WithMany(p => p.JStocklocs)
                .HasForeignKey(d => d.StlSubjectId)
                .HasConstraintName("FK_SUBJECT_STOCKLOC");

            entity.HasOne(d => d.StlSubjectclass).WithMany(p => p.JStocklocStlSubjectclasses)
                .HasForeignKey(d => d.StlSubjectclassId)
                .HasConstraintName("FK_SUBJECTCLASS_STOCKLOC");
        });

        modelBuilder.Entity<JStocklocclass>(entity =>
        {
            entity.HasKey(e => e.StlclId).HasName("PK_STOCKLOCCLASS");

            entity.ToTable("J_STOCKLOCCLASS", "JITTOE");

            entity.HasIndex(e => e.StlclCompanyId, "I_COMPANY_STLCLASS");

            entity.HasIndex(e => e.StlclKey, "UN_STLCL_KEY").IsUnique();

            entity.Property(e => e.StlclId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STLCL_ID");
            entity.Property(e => e.StlclCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STLCL_COMPANY_ID");
            entity.Property(e => e.StlclDeftype)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("STLCL_DEFTYPE");
            entity.Property(e => e.StlclDescr)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("STLCL_DESCR");
            entity.Property(e => e.StlclKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("STLCL_KEY");
            entity.Property(e => e.StlclTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STLCL_TCREATION");
            entity.Property(e => e.StlclTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STLCL_TUPDATE");

            entity.HasOne(d => d.StlclCompany).WithMany(p => p.JStocklocclasses)
                .HasForeignKey(d => d.StlclCompanyId)
                .HasConstraintName("FK_COMPANY_STLCLASS");
        });

        modelBuilder.Entity<JStocklocclassdefelem>(entity =>
        {
            entity.HasKey(e => e.StlcldeId).HasName("PK_STOCKLOCCLASSDEFELEM");

            entity.ToTable("J_STOCKLOCCLASSDEFELEM", "JITTOE");

            entity.HasIndex(e => e.StlcldeStocklocclassId, "I_DEFSTLCLASS_STLCDEFELEM");

            entity.HasIndex(e => e.StlcldeInstocklocclassId, "I_STLCLASS_STLCDEFELEM");

            entity.HasIndex(e => e.StlcldeStocklocstatusId, "I_STLSTATUS_STLCDEFELEM");

            entity.HasIndex(e => e.StlcldeStockloctypeId, "I_STLTYPE_STLCDEFELEM");

            entity.HasIndex(e => e.StlcldeStockId, "I_STOCK_STLCDEFELEM");

            entity.Property(e => e.StlcldeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STLCLDE_ID");
            entity.Property(e => e.StlcldeInfokey1)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("STLCLDE_INFOKEY1");
            entity.Property(e => e.StlcldeInfotype)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("STLCLDE_INFOTYPE");
            entity.Property(e => e.StlcldeInfovalues)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("STLCLDE_INFOVALUES");
            entity.Property(e => e.StlcldeInstocklocclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STLCLDE_INSTOCKLOCCLASS_ID");
            entity.Property(e => e.StlcldeQuery)
                .HasColumnType("LONG RAW")
                .HasColumnName("STLCLDE_QUERY");
            entity.Property(e => e.StlcldeStockId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STLCLDE_STOCK_ID");
            entity.Property(e => e.StlcldeStocklocclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STLCLDE_STOCKLOCCLASS_ID");
            entity.Property(e => e.StlcldeStocklocstatusId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STLCLDE_STOCKLOCSTATUS_ID");
            entity.Property(e => e.StlcldeStockloctypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STLCLDE_STOCKLOCTYPE_ID");
            entity.Property(e => e.StlcldeTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STLCLDE_TCREATION");
            entity.Property(e => e.StlcldeTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STLCLDE_TUPDATE");

            entity.HasOne(d => d.StlcldeInstocklocclass).WithMany(p => p.JStocklocclassdefelemStlcldeInstocklocclasses)
                .HasForeignKey(d => d.StlcldeInstocklocclassId)
                .HasConstraintName("FK_STLCLASS_STLCDEFELEM");

            entity.HasOne(d => d.StlcldeStock).WithMany(p => p.JStocklocclassdefelems)
                .HasForeignKey(d => d.StlcldeStockId)
                .HasConstraintName("FK_STOCK_STLCDEFELEM");

            entity.HasOne(d => d.StlcldeStocklocclass).WithMany(p => p.JStocklocclassdefelemStlcldeStocklocclasses)
                .HasForeignKey(d => d.StlcldeStocklocclassId)
                .HasConstraintName("FK_DEFSTLCLASS_STLCDEFELEM");

            entity.HasOne(d => d.StlcldeStocklocstatus).WithMany(p => p.JStocklocclassdefelems)
                .HasForeignKey(d => d.StlcldeStocklocstatusId)
                .HasConstraintName("FK_STLSTATUS_STLCDEFELEM");

            entity.HasOne(d => d.StlcldeStockloctype).WithMany(p => p.JStocklocclassdefelems)
                .HasForeignKey(d => d.StlcldeStockloctypeId)
                .HasConstraintName("FK_STLTYPE_STLCDEFELEM");
        });

        modelBuilder.Entity<JStocklocclassmember>(entity =>
        {
            entity.HasKey(e => e.StlclmId).HasName("PK_STOCKLOCCLASSMEMBER");

            entity.ToTable("J_STOCKLOCCLASSMEMBER", "JITTOE");

            entity.HasIndex(e => e.StlclmStocklocclassId, "I_STLCLASS_STLCLASSMEMBER");

            entity.HasIndex(e => e.StlclmStocklocId, "I_STOCKLOC_STLCLASSMEMBER");

            entity.HasIndex(e => new { e.StlclmStocklocId, e.StlclmStocklocclassId }, "UN_STLCLM_KEY").IsUnique();

            entity.Property(e => e.StlclmId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STLCLM_ID");
            entity.Property(e => e.StlclmStocklocId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STLCLM_STOCKLOC_ID");
            entity.Property(e => e.StlclmStocklocclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STLCLM_STOCKLOCCLASS_ID");
            entity.Property(e => e.StlclmTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STLCLM_TCREATION");
            entity.Property(e => e.StlclmTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STLCLM_TUPDATE");

            entity.HasOne(d => d.StlclmStockloc).WithMany(p => p.JStocklocclassmembers)
                .HasForeignKey(d => d.StlclmStocklocId)
                .HasConstraintName("FK_STOCKLOC_STLCLASSMEMBER");

            entity.HasOne(d => d.StlclmStocklocclass).WithMany(p => p.JStocklocclassmembers)
                .HasForeignKey(d => d.StlclmStocklocclassId)
                .HasConstraintName("FK_STLCLASS_STLCLASSMEMBER");
        });

        modelBuilder.Entity<JStockloccontainer>(entity =>
        {
            entity.HasKey(e => e.StlcId).HasName("PK_STOCKLOCCONTAINER");

            entity.ToTable("J_STOCKLOCCONTAINER", "JITTOE");

            entity.HasIndex(e => e.StlcContainerId, "I_CONTAINER_SLCONTAINER");

            entity.HasIndex(e => e.StlcStocklocId, "I_STOCKLOC_SLCONTAINER");

            entity.Property(e => e.StlcId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STLC_ID");
            entity.Property(e => e.StlcContainerId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STLC_CONTAINER_ID");
            entity.Property(e => e.StlcIsreserved)
                .HasPrecision(1)
                .HasColumnName("STLC_ISRESERVED");
            entity.Property(e => e.StlcStocklocId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STLC_STOCKLOC_ID");
            entity.Property(e => e.StlcTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STLC_TCREATION");
            entity.Property(e => e.StlcTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STLC_TUPDATE");

            entity.HasOne(d => d.StlcContainer).WithMany(p => p.JStockloccontainers)
                .HasForeignKey(d => d.StlcContainerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTAINER_SLCONTAINER");

            entity.HasOne(d => d.StlcStockloc).WithMany(p => p.JStockloccontainers)
                .HasForeignKey(d => d.StlcStocklocId)
                .HasConstraintName("FK_STOCKLOC_SLCONTAINER");
        });

        modelBuilder.Entity<JStocklocinfo>(entity =>
        {
            entity.HasKey(e => e.StliId).HasName("PK_STOCKLOCINFO");

            entity.ToTable("J_STOCKLOCINFO", "JITTOE");

            entity.HasIndex(e => e.StliErpentityId, "I_ERPENTITY_STLINFO");

            entity.HasIndex(e => e.StliStocklocId, "I_STOCKLOC_STLINFO");

            entity.HasIndex(e => new { e.StliStocklocId, e.StliScope, e.StliType, e.StliKey1, e.StliKey2, e.StliKey3 }, "UN_STLI_INFO").IsUnique();

            entity.Property(e => e.StliId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STLI_ID");
            entity.Property(e => e.StliErpentityId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STLI_ERPENTITY_ID");
            entity.Property(e => e.StliKey1)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("STLI_KEY1");
            entity.Property(e => e.StliKey2)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("STLI_KEY2");
            entity.Property(e => e.StliKey3)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("STLI_KEY3");
            entity.Property(e => e.StliScope)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasDefaultValueSql("'Single'  ")
                .HasColumnName("STLI_SCOPE");
            entity.Property(e => e.StliStocklocId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STLI_STOCKLOC_ID");
            entity.Property(e => e.StliStringvalue)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("STLI_STRINGVALUE");
            entity.Property(e => e.StliTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STLI_TCREATION");
            entity.Property(e => e.StliTimevalue)
                .HasColumnType("DATE")
                .HasColumnName("STLI_TIMEVALUE");
            entity.Property(e => e.StliTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STLI_TUPDATE");
            entity.Property(e => e.StliType)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("STLI_TYPE");

            entity.HasOne(d => d.StliErpentity).WithMany(p => p.JStocklocinfos)
                .HasForeignKey(d => d.StliErpentityId)
                .HasConstraintName("FK_ERPENTITY_STLINFO");

            entity.HasOne(d => d.StliStockloc).WithMany(p => p.JStocklocinfos)
                .HasForeignKey(d => d.StliStocklocId)
                .HasConstraintName("FK_STOCKLOC_STLINFO");
        });

        modelBuilder.Entity<JStocklocpart>(entity =>
        {
            entity.HasKey(e => e.StlpId).HasName("PK_STOCKLOCPART");

            entity.ToTable("J_STOCKLOCPART", "JITTOE");

            entity.HasIndex(e => e.StlpStocklocId, "I_STOCKLOC_SLPART");

            entity.HasIndex(e => e.StlpSubjectId, "I_SUBJECT_SLPART");

            entity.HasIndex(e => e.StlpPartId, "UN_STLP_PART").IsUnique();

            entity.Property(e => e.StlpId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STLP_ID");
            entity.Property(e => e.StlpPartId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STLP_PART_ID");
            entity.Property(e => e.StlpStocklocId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STLP_STOCKLOC_ID");
            entity.Property(e => e.StlpSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STLP_SUBJECT_ID");
            entity.Property(e => e.StlpTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STLP_TCREATION");
            entity.Property(e => e.StlpTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STLP_TUPDATE");

            entity.HasOne(d => d.StlpPart).WithOne(p => p.JStocklocpart)
                .HasForeignKey<JStocklocpart>(d => d.StlpPartId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PART_SLPART");

            entity.HasOne(d => d.StlpStockloc).WithMany(p => p.JStocklocparts)
                .HasForeignKey(d => d.StlpStocklocId)
                .HasConstraintName("FK_STOCKLOC_SLPART");

            entity.HasOne(d => d.StlpSubject).WithMany(p => p.JStocklocparts)
                .HasForeignKey(d => d.StlpSubjectId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SUBJECT_SLPART");
        });

        modelBuilder.Entity<JStocklocstatus>(entity =>
        {
            entity.HasKey(e => e.StlstId).HasName("PK_STOCKLOCSTATUS");

            entity.ToTable("J_STOCKLOCSTATUS", "JITTOE");

            entity.HasIndex(e => e.StlstCode, "UN_STLST_CODE").IsUnique();

            entity.Property(e => e.StlstId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STLST_ID");
            entity.Property(e => e.StlstCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("STLST_CODE");
            entity.Property(e => e.StlstDescr)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("STLST_DESCR");
            entity.Property(e => e.StlstIseditable)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("1  ")
                .HasColumnName("STLST_ISEDITABLE");
            entity.Property(e => e.StlstOpedit)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("1  ")
                .HasColumnName("STLST_OPEDIT");
            entity.Property(e => e.StlstOpin)
                .HasPrecision(1)
                .HasColumnName("STLST_OPIN");
            entity.Property(e => e.StlstOpinventory)
                .HasPrecision(1)
                .HasColumnName("STLST_OPINVENTORY");
            entity.Property(e => e.StlstOpout)
                .HasPrecision(1)
                .HasColumnName("STLST_OPOUT");
            entity.Property(e => e.StlstTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STLST_TCREATION");
            entity.Property(e => e.StlstTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STLST_TUPDATE");
        });

        modelBuilder.Entity<JStocklocsubject>(entity =>
        {
            entity.HasKey(e => e.StlsId).HasName("PK_STOCKLOCSUBJECT");

            entity.ToTable("J_STOCKLOCSUBJECT", "JITTOE");

            entity.HasIndex(e => e.StlsOrderentryId, "I_ORDERENTRY_SLSUBJECT");

            entity.HasIndex(e => e.StlsStocklocId, "I_STOCKLOC_SLSUBJECT");

            entity.HasIndex(e => e.StlsSubjectId, "I_SUBJECT_SLSUBJECT");

            entity.Property(e => e.StlsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STLS_ID");
            entity.Property(e => e.StlsAmount)
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("STLS_AMOUNT");
            entity.Property(e => e.StlsOrderentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STLS_ORDERENTRY_ID");
            entity.Property(e => e.StlsStocklocId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STLS_STOCKLOC_ID");
            entity.Property(e => e.StlsSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STLS_SUBJECT_ID");
            entity.Property(e => e.StlsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STLS_TCREATION");
            entity.Property(e => e.StlsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STLS_TUPDATE");

            entity.HasOne(d => d.StlsOrderentry).WithMany(p => p.JStocklocsubjects)
                .HasForeignKey(d => d.StlsOrderentryId)
                .HasConstraintName("FK_ORDERENTRY_SLSUBJECT");

            entity.HasOne(d => d.StlsStockloc).WithMany(p => p.JStocklocsubjects)
                .HasForeignKey(d => d.StlsStocklocId)
                .HasConstraintName("FK_STOCKLOC_SLSUBJECT");

            entity.HasOne(d => d.StlsSubject).WithMany(p => p.JStocklocsubjects)
                .HasForeignKey(d => d.StlsSubjectId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SUBJECT_SLSUBJECT");
        });

        modelBuilder.Entity<JStockloctype>(entity =>
        {
            entity.HasKey(e => e.StltId).HasName("PK_STOCKLOCTYPE");

            entity.ToTable("J_STOCKLOCTYPE", "JITTOE");

            entity.HasIndex(e => e.StltCompanyId, "I_COMPANY_SLTYPE");

            entity.HasIndex(e => e.StltKey, "UN_STLT_KEY").IsUnique();

            entity.Property(e => e.StltId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STLT_ID");
            entity.Property(e => e.StltCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STLT_COMPANY_ID");
            entity.Property(e => e.StltDescr)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("STLT_DESCR");
            entity.Property(e => e.StltDisplaycolor)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("STLT_DISPLAYCOLOR");
            entity.Property(e => e.StltKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("STLT_KEY");
            entity.Property(e => e.StltTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STLT_TCREATION");
            entity.Property(e => e.StltTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STLT_TUPDATE");

            entity.HasOne(d => d.StltCompany).WithMany(p => p.JStockloctypes)
                .HasForeignKey(d => d.StltCompanyId)
                .HasConstraintName("FK_COMPANY_SLTYPE");
        });

        modelBuilder.Entity<JStockre>(entity =>
        {
            entity.HasKey(e => e.StrId).HasName("PK_STOCKRES");

            entity.ToTable("J_STOCKRES", "JITTOE");

            entity.HasIndex(e => e.StrProdjobId, "I_PRODJOB_STOCKRES");

            entity.HasIndex(e => e.StrStockloccontainerId, "I_SLCONTAINER_RES");

            entity.HasIndex(e => e.StrStockcomponentId, "I_STOCKCOMPONENT_RES");

            entity.HasIndex(e => e.StrStockentryId, "I_STOCKENTRYSTAT_RES");

            entity.HasIndex(e => e.StrStocklocId, "I_STOCKLOC_STOCKRES");

            entity.Property(e => e.StrId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STR_ID");
            entity.Property(e => e.StrAmount)
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("STR_AMOUNT");
            entity.Property(e => e.StrDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STR_DESCR");
            entity.Property(e => e.StrProdjobId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STR_PRODJOB_ID");
            entity.Property(e => e.StrStockcomponentId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STR_STOCKCOMPONENT_ID");
            entity.Property(e => e.StrStockentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STR_STOCKENTRY_ID");
            entity.Property(e => e.StrStocklocId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STR_STOCKLOC_ID");
            entity.Property(e => e.StrStockloccontainerId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STR_STOCKLOCCONTAINER_ID");
            entity.Property(e => e.StrTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STR_TCREATION");

            entity.HasOne(d => d.StrProdjob).WithMany(p => p.JStockres)
                .HasForeignKey(d => d.StrProdjobId)
                .HasConstraintName("FK_PRODJOB_STOCKRES");

            entity.HasOne(d => d.StrStockcomponent).WithMany(p => p.JStockres)
                .HasForeignKey(d => d.StrStockcomponentId)
                .HasConstraintName("FK_STOCKCOMPONENT_RES");

            entity.HasOne(d => d.StrStockentry).WithMany(p => p.JStockres)
                .HasForeignKey(d => d.StrStockentryId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_STOCKENTRYSTAT_RES");

            entity.HasOne(d => d.StrStockloc).WithMany(p => p.JStockres)
                .HasForeignKey(d => d.StrStocklocId)
                .HasConstraintName("FK_STOCKLOC_STOCKRES");

            entity.HasOne(d => d.StrStockloccontainer).WithMany(p => p.JStockres)
                .HasForeignKey(d => d.StrStockloccontainerId)
                .HasConstraintName("FK_SLCONTAINER_RES");
        });

        modelBuilder.Entity<JStockset>(entity =>
        {
            entity.HasKey(e => e.SsId).HasName("PK_STOCKSET");

            entity.ToTable("J_STOCKSET", "JITTOE");

            entity.HasIndex(e => e.SsCompanyId, "I_COMPANY_STOCKSET");

            entity.HasIndex(e => e.SsKey, "UN_SS_KEY").IsUnique();

            entity.Property(e => e.SsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SS_ID");
            entity.Property(e => e.SsCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SS_COMPANY_ID");
            entity.Property(e => e.SsDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SS_DESCR");
            entity.Property(e => e.SsKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SS_KEY");
            entity.Property(e => e.SsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SS_TCREATION");
            entity.Property(e => e.SsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SS_TUPDATE");

            entity.HasOne(d => d.SsCompany).WithMany(p => p.JStocksets)
                .HasForeignKey(d => d.SsCompanyId)
                .HasConstraintName("FK_COMPANY_STOCKSET");
        });

        modelBuilder.Entity<JStockstorage>(entity =>
        {
            entity.HasKey(e => e.StsId).HasName("PK_STOCKSTORAGE");

            entity.ToTable("J_STOCKSTORAGE", "JITTOE");

            entity.HasIndex(e => e.StsStockId, "I_STOCK_SSTORAGE");

            entity.Property(e => e.StsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STS_ID");
            entity.Property(e => e.StsDepth)
                .HasPrecision(9)
                .HasColumnName("STS_DEPTH");
            entity.Property(e => e.StsDescr)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("STS_DESCR");
            entity.Property(e => e.StsHeight)
                .HasPrecision(9)
                .HasColumnName("STS_HEIGHT");
            entity.Property(e => e.StsKind)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValueSql("'Shelf'  ")
                .HasColumnName("STS_KIND");
            entity.Property(e => e.StsPosx)
                .HasPrecision(9)
                .HasColumnName("STS_POSX");
            entity.Property(e => e.StsPosy)
                .HasPrecision(9)
                .HasColumnName("STS_POSY");
            entity.Property(e => e.StsRotation)
                .HasColumnType("NUMBER(6,3)")
                .HasColumnName("STS_ROTATION");
            entity.Property(e => e.StsStockId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STS_STOCK_ID");
            entity.Property(e => e.StsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STS_TCREATION");
            entity.Property(e => e.StsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STS_TUPDATE");
            entity.Property(e => e.StsWidth)
                .HasPrecision(9)
                .HasColumnName("STS_WIDTH");

            entity.HasOne(d => d.StsStock).WithMany(p => p.JStockstorages)
                .HasForeignKey(d => d.StsStockId)
                .HasConstraintName("FK_STOCK_SSTORAGE");
        });

        modelBuilder.Entity<JStockstorageelem>(entity =>
        {
            entity.HasKey(e => e.StseId).HasName("PK_STOCKSTORAGEELEM");

            entity.ToTable("J_STOCKSTORAGEELEM", "JITTOE");

            entity.HasIndex(e => e.StseStockstorageId, "I_SSTORAGE_SSTORAGEELEM");

            entity.Property(e => e.StseId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STSE_ID");
            entity.Property(e => e.StseColumns)
                .HasPrecision(4)
                .HasColumnName("STSE_COLUMNS");
            entity.Property(e => e.StseColumnwidth)
                .HasPrecision(9)
                .HasColumnName("STSE_COLUMNWIDTH");
            entity.Property(e => e.StseDescr)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("STSE_DESCR");
            entity.Property(e => e.StsePosx)
                .HasPrecision(9)
                .HasColumnName("STSE_POSX");
            entity.Property(e => e.StsePosy)
                .HasPrecision(9)
                .HasColumnName("STSE_POSY");
            entity.Property(e => e.StseRowheight)
                .HasPrecision(9)
                .HasColumnName("STSE_ROWHEIGHT");
            entity.Property(e => e.StseRows)
                .HasPrecision(4)
                .HasColumnName("STSE_ROWS");
            entity.Property(e => e.StseSepx)
                .HasPrecision(9)
                .HasDefaultValueSql("0  ")
                .HasColumnName("STSE_SEPX");
            entity.Property(e => e.StseStockstorageId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STSE_STOCKSTORAGE_ID");
            entity.Property(e => e.StseTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STSE_TCREATION");
            entity.Property(e => e.StseTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STSE_TUPDATE");

            entity.HasOne(d => d.StseStockstorage).WithMany(p => p.JStockstorageelems)
                .HasForeignKey(d => d.StseStockstorageId)
                .HasConstraintName("FK_SSTORAGE_SSTORAGEELEM");
        });

        modelBuilder.Entity<JStockstorageelemloc>(entity =>
        {
            entity.HasKey(e => e.StselId).HasName("PK_STOCKSTORAGEELEMLOC");

            entity.ToTable("J_STOCKSTORAGEELEMLOC", "JITTOE");

            entity.HasIndex(e => e.StselStockstorageelemId, "I_SSTORAGEEL_SSTORAGEELLOC");

            entity.HasIndex(e => e.StselStocklocId, "I_STOCKLOC_SSTORAGEELEMLOC");

            entity.HasIndex(e => new { e.StselStockstorageelemId, e.StselRowidx, e.StselColumnidx }, "UN_STSEL_IDX").IsUnique();

            entity.Property(e => e.StselId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STSEL_ID");
            entity.Property(e => e.StselColumnidx)
                .HasPrecision(9)
                .HasColumnName("STSEL_COLUMNIDX");
            entity.Property(e => e.StselRowidx)
                .HasPrecision(9)
                .HasColumnName("STSEL_ROWIDX");
            entity.Property(e => e.StselStocklocId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STSEL_STOCKLOC_ID");
            entity.Property(e => e.StselStockstorageelemId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STSEL_STOCKSTORAGEELEM_ID");
            entity.Property(e => e.StselTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STSEL_TCREATION");
            entity.Property(e => e.StselTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STSEL_TUPDATE");

            entity.HasOne(d => d.StselStockloc).WithMany(p => p.JStockstorageelemlocs)
                .HasForeignKey(d => d.StselStocklocId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_STOCKLOC_SSTORAGEELEMLOC");

            entity.HasOne(d => d.StselStockstorageelem).WithMany(p => p.JStockstorageelemlocs)
                .HasForeignKey(d => d.StselStockstorageelemId)
                .HasConstraintName("FK_SSTORAGEEL_SSTORAGEELLOC");
        });

        modelBuilder.Entity<JStockstoragepoint>(entity =>
        {
            entity.HasKey(e => e.StspId).HasName("PK_STOCKSTORAGEPOINT");

            entity.ToTable("J_STOCKSTORAGEPOINT", "JITTOE");

            entity.HasIndex(e => e.StspStockstorageId, "I_SSTORAGE_SSTORAGEPOINT");

            entity.HasIndex(e => new { e.StspStockstorageId, e.StspIdx }, "UN_STSP_IDX").IsUnique();

            entity.Property(e => e.StspId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STSP_ID");
            entity.Property(e => e.StspIdx)
                .HasPrecision(9)
                .HasColumnName("STSP_IDX");
            entity.Property(e => e.StspPosx)
                .HasPrecision(9)
                .HasColumnName("STSP_POSX");
            entity.Property(e => e.StspPosy)
                .HasPrecision(9)
                .HasColumnName("STSP_POSY");
            entity.Property(e => e.StspStockstorageId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STSP_STOCKSTORAGE_ID");
            entity.Property(e => e.StspTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STSP_TCREATION");
            entity.Property(e => e.StspTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STSP_TUPDATE");

            entity.HasOne(d => d.StspStockstorage).WithMany(p => p.JStockstoragepoints)
                .HasForeignKey(d => d.StspStockstorageId)
                .HasConstraintName("FK_SSTORAGE_SSTORAGEPOINT");
        });

        modelBuilder.Entity<JStocksubstevent>(entity =>
        {
            entity.HasKey(e => e.SseId).HasName("PK_STOCKSUBSTEVENT");

            entity.ToTable("J_STOCKSUBSTEVENT", "JITTOE");

            entity.HasIndex(e => e.SseProdjobentryId, "I_PRODJOBENTRY_SSUBSTEVENT");

            entity.HasIndex(e => e.SseProdstepId, "I_PRODSTEP_SSUBSTEVENT");

            entity.HasIndex(e => e.SseStockentryId, "I_SESTAT_SSUBSTEVENT");

            entity.HasIndex(e => e.SseSubststockentryId, "I_SESUBSTSTAT_SSUBSTEVENT");

            entity.HasIndex(e => e.SseParentsubjectId, "I_SUBJECT_SSUBSTEVENT");

            entity.HasIndex(e => e.SseTransitionId, "I_TRANSITION_SSUBSTEVENT");

            entity.Property(e => e.SseId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SSE_ID");
            entity.Property(e => e.SseAmount)
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("SSE_AMOUNT");
            entity.Property(e => e.SseExported)
                .HasColumnType("DATE")
                .HasColumnName("SSE_EXPORTED");
            entity.Property(e => e.SseParentsubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SSE_PARENTSUBJECT_ID");
            entity.Property(e => e.SseProdjobentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SSE_PRODJOBENTRY_ID");
            entity.Property(e => e.SseProdstepId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SSE_PRODSTEP_ID");
            entity.Property(e => e.SseStockentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SSE_STOCKENTRY_ID");
            entity.Property(e => e.SseSubststockentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SSE_SUBSTSTOCKENTRY_ID");
            entity.Property(e => e.SseTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SSE_TCREATION");
            entity.Property(e => e.SseTransitionId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SSE_TRANSITION_ID");

            entity.HasOne(d => d.SseParentsubject).WithMany(p => p.JStocksubstevents)
                .HasForeignKey(d => d.SseParentsubjectId)
                .HasConstraintName("FK_SUBJECT_SSUBSTEVENT");

            entity.HasOne(d => d.SseProdjobentry).WithMany(p => p.JStocksubstevents)
                .HasForeignKey(d => d.SseProdjobentryId)
                .HasConstraintName("FK_PRODJOBENTRY_SSUBSTEVENT");

            entity.HasOne(d => d.SseProdstep).WithMany(p => p.JStocksubstevents)
                .HasForeignKey(d => d.SseProdstepId)
                .HasConstraintName("FK_PRODSTEP_SSUBSTEVENT");

            entity.HasOne(d => d.SseStockentry).WithMany(p => p.JStocksubsteventSseStockentries)
                .HasForeignKey(d => d.SseStockentryId)
                .HasConstraintName("FK_SESTAT_SSUBSTEVENT");

            entity.HasOne(d => d.SseSubststockentry).WithMany(p => p.JStocksubsteventSseSubststockentries)
                .HasForeignKey(d => d.SseSubststockentryId)
                .HasConstraintName("FK_SESUBSTSTAT_SSUBSTEVENT");

            entity.HasOne(d => d.SseTransition).WithMany(p => p.JStocksubstevents)
                .HasForeignKey(d => d.SseTransitionId)
                .HasConstraintName("FK_TRANSITION_SSUBSTEVENT");
        });

        modelBuilder.Entity<JStocktag>(entity =>
        {
            entity.HasKey(e => e.SttId).HasName("PK_STOCKTAG");

            entity.ToTable("J_STOCKTAG", "JITTOE");

            entity.HasIndex(e => e.SttCountedbyuserId, "I_COUNTEDBY_STOCKTAG");

            entity.HasIndex(e => e.SttStockinvId, "I_STOCKINV_STOCKTAG");

            entity.HasIndex(e => e.SttStocktagsetId, "I_STOCKTAGSET_STOCKTAG");

            entity.HasIndex(e => e.SttStockId, "I_STOCK_STOCKTAG");

            entity.HasIndex(e => e.SttSubjectId, "I_SUBJECT_STOCKTAG");

            entity.HasIndex(e => new { e.SttStocktagsetId, e.SttNo }, "UN_STT_NO").IsUnique();

            entity.Property(e => e.SttId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STT_ID");
            entity.Property(e => e.SttAmount)
                .HasColumnType("NUMBER(13,3)")
                .HasColumnName("STT_AMOUNT");
            entity.Property(e => e.SttCountedbyuserId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STT_COUNTEDBYUSER_ID");
            entity.Property(e => e.SttNo)
                .HasPrecision(9)
                .HasColumnName("STT_NO");
            entity.Property(e => e.SttOpen)
                .HasPrecision(1)
                .HasColumnName("STT_OPEN");
            entity.Property(e => e.SttStockId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STT_STOCK_ID");
            entity.Property(e => e.SttStockinvId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STT_STOCKINV_ID");
            entity.Property(e => e.SttStocktagsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STT_STOCKTAGSET_ID");
            entity.Property(e => e.SttSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STT_SUBJECT_ID");
            entity.Property(e => e.SttTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STT_TCREATION");
            entity.Property(e => e.SttTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STT_TUPDATE");

            entity.HasOne(d => d.SttCountedbyuser).WithMany(p => p.JStocktags)
                .HasForeignKey(d => d.SttCountedbyuserId)
                .HasConstraintName("FK_COUNTEDBY_STOCKTAG");

            entity.HasOne(d => d.SttStock).WithMany(p => p.JStocktags)
                .HasForeignKey(d => d.SttStockId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_STOCK_STOCKTAG");

            entity.HasOne(d => d.SttStockinv).WithMany(p => p.JStocktags)
                .HasForeignKey(d => d.SttStockinvId)
                .HasConstraintName("FK_STOCKINV_STOCKTAG");

            entity.HasOne(d => d.SttStocktagset).WithMany(p => p.JStocktags)
                .HasForeignKey(d => d.SttStocktagsetId)
                .HasConstraintName("FK_STOCKTAGSET_STOCKTAG");

            entity.HasOne(d => d.SttSubject).WithMany(p => p.JStocktags)
                .HasForeignKey(d => d.SttSubjectId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SUBJECT_STOCKTAG");
        });

        modelBuilder.Entity<JStocktagset>(entity =>
        {
            entity.HasKey(e => e.SttsId).HasName("PK_STOCKTAGSET");

            entity.ToTable("J_STOCKTAGSET", "JITTOE");

            entity.HasIndex(e => e.SttsCompanyId, "I_COMPANY_STOCKTAGSET");

            entity.HasIndex(e => e.SttsCounterId, "I_COUNTER_TAGSET");

            entity.HasIndex(e => e.SttsDoccfgId, "I_DOCCFG_STOCKTAGSET");

            entity.HasIndex(e => e.SttsEdicfgId, "I_EDICFG_STOCKTAGSET");

            entity.HasIndex(e => e.SttsKey, "UN_STTS_KEY").IsUnique();

            entity.Property(e => e.SttsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STTS_ID");
            entity.Property(e => e.SttsCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STTS_COMPANY_ID");
            entity.Property(e => e.SttsCounterId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STTS_COUNTER_ID");
            entity.Property(e => e.SttsDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STTS_DESCR");
            entity.Property(e => e.SttsDoccfgId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STTS_DOCCFG_ID");
            entity.Property(e => e.SttsEdicfgId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STTS_EDICFG_ID");
            entity.Property(e => e.SttsKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("STTS_KEY");
            entity.Property(e => e.SttsMaxtagno)
                .HasPrecision(9)
                .HasDefaultValueSql("0\n")
                .HasColumnName("STTS_MAXTAGNO");
            entity.Property(e => e.SttsMintagno)
                .HasPrecision(9)
                .HasDefaultValueSql("0")
                .HasColumnName("STTS_MINTAGNO");
            entity.Property(e => e.SttsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STTS_TCREATION");
            entity.Property(e => e.SttsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STTS_TUPDATE");

            entity.HasOne(d => d.SttsCompany).WithMany(p => p.JStocktagsets)
                .HasForeignKey(d => d.SttsCompanyId)
                .HasConstraintName("FK_COMPANY_STOCKTAGSET");

            entity.HasOne(d => d.SttsCounter).WithMany(p => p.JStocktagsets)
                .HasForeignKey(d => d.SttsCounterId)
                .HasConstraintName("FK_COUNTER_TAGSET");

            entity.HasOne(d => d.SttsDoccfg).WithMany(p => p.JStocktagsets)
                .HasForeignKey(d => d.SttsDoccfgId)
                .HasConstraintName("FK_DOCCFG_STOCKTAGSET");

            entity.HasOne(d => d.SttsEdicfg).WithMany(p => p.JStocktagsets)
                .HasForeignKey(d => d.SttsEdicfgId)
                .HasConstraintName("FK_EDICFG_STOCKTAGSET");
        });

        modelBuilder.Entity<JSubject>(entity =>
        {
            entity.HasKey(e => e.SId).HasName("PK_SUBJECT");

            entity.ToTable("J_SUBJECT", "JITTOE");

            entity.HasIndex(e => e.SCompanyId, "I_COMPANY_SUBJECT");

            entity.HasIndex(e => e.SSubjectstatusId, "I_SUBJECTSTATUS_SUBJECT");

            entity.HasIndex(e => e.SSubjecttypeId, "I_SUBJECTTYPE_SUBJECT");

            entity.HasIndex(e => e.SUnitofmeasureId, "I_UNITOFMEASURE_SUBJECT");

            entity.HasIndex(e => new { e.SCompanyId, e.SNo, e.SDeletionid }, "UN_S_COMPANY_NO").IsUnique();

            entity.Property(e => e.SId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("S_ID");
            entity.Property(e => e.SCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("S_COMPANY_ID");
            entity.Property(e => e.SDeletionid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("S_DELETIONID");
            entity.Property(e => e.SDescr)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("S_DESCR");
            entity.Property(e => e.SEngineeringindex)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("S_ENGINEERINGINDEX");
            entity.Property(e => e.SNo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("S_NO");
            entity.Property(e => e.SSubjectstatusId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("S_SUBJECTSTATUS_ID");
            entity.Property(e => e.SSubjecttypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("S_SUBJECTTYPE_ID");
            entity.Property(e => e.STcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("S_TCREATION");
            entity.Property(e => e.STdeletion)
                .HasColumnType("DATE")
                .HasColumnName("S_TDELETION");
            entity.Property(e => e.STupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("S_TUPDATE");
            entity.Property(e => e.SUnitofmeasureId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("S_UNITOFMEASURE_ID");

            entity.HasOne(d => d.SCompany).WithMany(p => p.JSubjects)
                .HasForeignKey(d => d.SCompanyId)
                .HasConstraintName("FK_COMPANY_SUBJECT");

            entity.HasOne(d => d.SSubjectstatus).WithMany(p => p.JSubjects)
                .HasForeignKey(d => d.SSubjectstatusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SUBJECTSTATUS_SUBJECT");

            entity.HasOne(d => d.SSubjecttype).WithMany(p => p.JSubjects)
                .HasForeignKey(d => d.SSubjecttypeId)
                .HasConstraintName("FK_SUBJECTTYPE_SUBJECT");

            entity.HasOne(d => d.SUnitofmeasure).WithMany(p => p.JSubjects)
                .HasForeignKey(d => d.SUnitofmeasureId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UNITOFMEASURE_SUBJECT");
        });

        modelBuilder.Entity<JSubjectSkidusageelem>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("J_SUBJECT_SKIDUSAGEELEM", "JITTOE");

            entity.HasIndex(e => e.SubjectId, "I_SUBJECT_SKIDUSAGEELEM_1");

            entity.HasIndex(e => e.SkidusageelemId, "I_SUBJECT_SKIDUSAGEELEM_2");

            entity.HasIndex(e => new { e.SubjectId, e.SkidusageelemId }, "UN_SUBJECT_SKIDUSAGEELEM").IsUnique();

            entity.Property(e => e.SkidusageelemId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SKIDUSAGEELEM_ID");
            entity.Property(e => e.SubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SUBJECT_ID");
            entity.Property(e => e.Tcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TCREATION");

            entity.HasOne(d => d.Skidusageelem).WithMany()
                .HasForeignKey(d => d.SkidusageelemId)
                .HasConstraintName("FK_SUBJECT_SKIDUSAGEELEM_2");

            entity.HasOne(d => d.Subject).WithMany()
                .HasForeignKey(d => d.SubjectId)
                .HasConstraintName("FK_SUBJECT_SKIDUSAGEELEM_1");
        });

        modelBuilder.Entity<JSubjectattr>(entity =>
        {
            entity.HasKey(e => e.SaId).HasName("PK_SUBJECTATTR");

            entity.ToTable("J_SUBJECTATTR", "JITTOE");

            entity.HasIndex(e => e.SaChoiceId, "I_CHOICE_ATTR");

            entity.HasIndex(e => e.SaCompanyId, "I_COMPANY_ATTR");

            entity.HasIndex(e => new { e.SaCompanyId, e.SaKeyincompany }, "UN_SA_COMPANY_KEY").IsUnique();

            entity.Property(e => e.SaId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SA_ID");
            entity.Property(e => e.SaChoiceId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SA_CHOICE_ID");
            entity.Property(e => e.SaCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SA_COMPANY_ID");
            entity.Property(e => e.SaDecimals)
                .HasPrecision(2)
                .HasColumnName("SA_DECIMALS");
            entity.Property(e => e.SaDescr)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("SA_DESCR");
            entity.Property(e => e.SaIssynchronized)
                .HasPrecision(1)
                .HasColumnName("SA_ISSYNCHRONIZED");
            entity.Property(e => e.SaKeyincompany)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SA_KEYINCOMPANY");
            entity.Property(e => e.SaLength)
                .HasPrecision(4)
                .HasColumnName("SA_LENGTH");
            entity.Property(e => e.SaPosno)
                .HasPrecision(3)
                .HasColumnName("SA_POSNO");
            entity.Property(e => e.SaSubjectcolumnname)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("SA_SUBJECTCOLUMNNAME");
            entity.Property(e => e.SaTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SA_TCREATION");
            entity.Property(e => e.SaTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SA_TUPDATE");
            entity.Property(e => e.SaType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SA_TYPE");
            entity.Property(e => e.SaUomfamily)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("SA_UOMFAMILY");
            entity.Property(e => e.SaValuecolumnname)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("SA_VALUECOLUMNNAME");
            entity.Property(e => e.SaValuetablename)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("SA_VALUETABLENAME");
            entity.Property(e => e.SaValueuomcolumnname)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("SA_VALUEUOMCOLUMNNAME");

            entity.HasOne(d => d.SaChoice).WithMany(p => p.JSubjectattrs)
                .HasForeignKey(d => d.SaChoiceId)
                .HasConstraintName("FK_CHOICE_ATTR");

            entity.HasOne(d => d.SaCompany).WithMany(p => p.JSubjectattrs)
                .HasForeignKey(d => d.SaCompanyId)
                .HasConstraintName("FK_COMPANY_ATTR");
        });

        modelBuilder.Entity<JSubjectattrinfo>(entity =>
        {
            entity.HasKey(e => e.SaiId).HasName("PK_SUBJECTATTRINFO");

            entity.ToTable("J_SUBJECTATTRINFO", "JITTOE");

            entity.HasIndex(e => e.SaiSubjectattrId, "I_SUBJECTATTR_SAINFO");

            entity.HasIndex(e => new { e.SaiSubjectattrId, e.SaiType, e.SaiKey1, e.SaiKey2, e.SaiKey3 }, "UN_SAI_INFO").IsUnique();

            entity.Property(e => e.SaiId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAI_ID");
            entity.Property(e => e.SaiKey1)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SAI_KEY1");
            entity.Property(e => e.SaiKey2)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SAI_KEY2");
            entity.Property(e => e.SaiKey3)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SAI_KEY3");
            entity.Property(e => e.SaiStringvalue)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("SAI_STRINGVALUE");
            entity.Property(e => e.SaiSubjectattrId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAI_SUBJECTATTR_ID");
            entity.Property(e => e.SaiTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SAI_TCREATION");
            entity.Property(e => e.SaiTimevalue)
                .HasColumnType("DATE")
                .HasColumnName("SAI_TIMEVALUE");
            entity.Property(e => e.SaiTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SAI_TUPDATE");
            entity.Property(e => e.SaiType)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("SAI_TYPE");

            entity.HasOne(d => d.SaiSubjectattr).WithMany(p => p.JSubjectattrinfos)
                .HasForeignKey(d => d.SaiSubjectattrId)
                .HasConstraintName("FK_SUBJECTATTR_SAINFO");
        });

        modelBuilder.Entity<JSubjectattrpropa>(entity =>
        {
            entity.HasKey(e => e.SapId).HasName("PK_SUBJECTATTRPROPA");

            entity.ToTable("J_SUBJECTATTRPROPA", "JITTOE");

            entity.HasIndex(e => e.SapDestsubjtypeId, "I_SUBJECTATTRDEST_PROPA");

            entity.HasIndex(e => e.SapSourcesubjtypeId, "I_SUBJECTATTRSOURCE_PROPA");

            entity.HasIndex(e => e.SapSubjectattrId, "I_SUBJECTATTR_PROPA");

            entity.HasIndex(e => e.SapSubjectcomptypeId, "I_SUBJECTCOMPTYPE_PROPA");

            entity.HasIndex(e => new { e.SapSubjectcomptypeId, e.SapSourcesubjtypeId, e.SapDestsubjtypeId, e.SapSubjectattrId }, "UN_SAP_SUBJATTRPROPA").IsUnique();

            entity.Property(e => e.SapId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAP_ID");
            entity.Property(e => e.SapDestsubjtypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAP_DESTSUBJTYPE_ID");
            entity.Property(e => e.SapSourcesubjtypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAP_SOURCESUBJTYPE_ID");
            entity.Property(e => e.SapSubjectattrId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAP_SUBJECTATTR_ID");
            entity.Property(e => e.SapSubjectcomptypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SAP_SUBJECTCOMPTYPE_ID");
            entity.Property(e => e.SapTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SAP_TCREATION");
            entity.Property(e => e.SapTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SAP_TUPDATE");

            entity.HasOne(d => d.SapDestsubjtype).WithMany(p => p.JSubjectattrpropaSapDestsubjtypes)
                .HasForeignKey(d => d.SapDestsubjtypeId)
                .HasConstraintName("FK_SUBJECTATTRDEST_PROPA");

            entity.HasOne(d => d.SapSourcesubjtype).WithMany(p => p.JSubjectattrpropaSapSourcesubjtypes)
                .HasForeignKey(d => d.SapSourcesubjtypeId)
                .HasConstraintName("FK_SUBJECTATTRSOURCE_PROPA");

            entity.HasOne(d => d.SapSubjectattr).WithMany(p => p.JSubjectattrpropaSapSubjectattrs)
                .HasForeignKey(d => d.SapSubjectattrId)
                .HasConstraintName("FK_SUBJECTATTR_PROPA");

            entity.HasOne(d => d.SapSubjectcomptype).WithMany(p => p.JSubjectattrpropas)
                .HasForeignKey(d => d.SapSubjectcomptypeId)
                .HasConstraintName("FK_SUBJECTCOMPTYPE_PROPA");
        });

        modelBuilder.Entity<JSubjectclass>(entity =>
        {
            entity.HasKey(e => e.SclId).HasName("PK_SUBJECTCLASS");

            entity.ToTable("J_SUBJECTCLASS", "JITTOE");

            entity.HasIndex(e => e.SclProductfamilyId, "I_PRODUCTFAMILY_SUBJECTCLASS");

            entity.HasIndex(e => e.SclKey, "UN_SCL_KEY").IsUnique();

            entity.Property(e => e.SclId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SCL_ID");
            entity.Property(e => e.SclDeftype)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("SCL_DEFTYPE");
            entity.Property(e => e.SclDescr)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("SCL_DESCR");
            entity.Property(e => e.SclIseditable)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("1  ")
                .HasColumnName("SCL_ISEDITABLE");
            entity.Property(e => e.SclKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("SCL_KEY");
            entity.Property(e => e.SclProductfamilyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SCL_PRODUCTFAMILY_ID");
            entity.Property(e => e.SclTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SCL_TCREATION");
            entity.Property(e => e.SclTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SCL_TUPDATE");

            entity.HasOne(d => d.SclProductfamily).WithMany(p => p.JSubjectclasses)
                .HasForeignKey(d => d.SclProductfamilyId)
                .HasConstraintName("FK_PRODUCTFAMILY_SUBJECTCLASS");
        });

        modelBuilder.Entity<JSubjectclassSubject>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("J_SUBJECTCLASS_SUBJECT", "JITTOE");

            entity.HasIndex(e => e.SubjectclassId, "I_SUBJECTCLASS_SUBJECT_1");

            entity.HasIndex(e => e.SubjectId, "I_SUBJECTCLASS_SUBJECT_2");

            entity.HasIndex(e => new { e.SubjectclassId, e.SubjectId }, "UN_SUBJECTCLASS_SUBJECT").IsUnique();

            entity.Property(e => e.SubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SUBJECT_ID");
            entity.Property(e => e.SubjectclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SUBJECTCLASS_ID");
            entity.Property(e => e.Tcreation)
                .HasDefaultValueSql("sysdate ")
                .HasColumnType("DATE")
                .HasColumnName("TCREATION");

            entity.HasOne(d => d.Subject).WithMany()
                .HasForeignKey(d => d.SubjectId)
                .HasConstraintName("FK_SUBJECTCLASS_SUBJECT_2");

            entity.HasOne(d => d.Subjectclass).WithMany()
                .HasForeignKey(d => d.SubjectclassId)
                .HasConstraintName("FK_SUBJECTCLASS_SUBJECT_1");
        });

        modelBuilder.Entity<JSubjectclassdefelem>(entity =>
        {
            entity.HasKey(e => e.ScldeId).HasName("PK_SUBJECTCLASSDEFELEM");

            entity.ToTable("J_SUBJECTCLASSDEFELEM", "JITTOE");

            entity.HasIndex(e => e.ScldeSubjectclassId, "I_DEFSUBJECTCLASS_SCDEFELEM");

            entity.HasIndex(e => e.ScldeSubjectattrId, "I_SUBJECTATTR_SCDEFELEM");

            entity.HasIndex(e => e.ScldeInsubjectclassId, "I_SUBJECTCLASS_SCDEFELEM");

            entity.HasIndex(e => e.ScldeSubjectstatusId, "I_SUBJECTSTATUS_SCDEFELEM");

            entity.HasIndex(e => e.ScldeSubjecttypeId, "I_SUBJECTTYPE_SCDEFELEM");

            entity.HasIndex(e => e.ScldeUnitofmeasureId, "I_UOM_SCDEFELEM");

            entity.Property(e => e.ScldeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SCLDE_ID");
            entity.Property(e => e.ScldeInsubjectclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SCLDE_INSUBJECTCLASS_ID");
            entity.Property(e => e.ScldeQuery)
                .HasColumnType("LONG RAW")
                .HasColumnName("SCLDE_QUERY");
            entity.Property(e => e.ScldeSubjectattrId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SCLDE_SUBJECTATTR_ID");
            entity.Property(e => e.ScldeSubjectclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SCLDE_SUBJECTCLASS_ID");
            entity.Property(e => e.ScldeSubjectnopattern)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("SCLDE_SUBJECTNOPATTERN");
            entity.Property(e => e.ScldeSubjectstatusId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SCLDE_SUBJECTSTATUS_ID");
            entity.Property(e => e.ScldeSubjecttypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SCLDE_SUBJECTTYPE_ID");
            entity.Property(e => e.ScldeTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SCLDE_TCREATION");
            entity.Property(e => e.ScldeTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SCLDE_TUPDATE");
            entity.Property(e => e.ScldeUnitofmeasureId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SCLDE_UNITOFMEASURE_ID");
            entity.Property(e => e.ScldeValues)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("SCLDE_VALUES");

            entity.HasOne(d => d.ScldeInsubjectclass).WithMany(p => p.JSubjectclassdefelemScldeInsubjectclasses)
                .HasForeignKey(d => d.ScldeInsubjectclassId)
                .HasConstraintName("FK_SUBJECTCLASS_SCDEFELEM");

            entity.HasOne(d => d.ScldeSubjectattr).WithMany(p => p.JSubjectclassdefelems)
                .HasForeignKey(d => d.ScldeSubjectattrId)
                .HasConstraintName("FK_SUBJECTATTR_SCDEFELEM");

            entity.HasOne(d => d.ScldeSubjectclass).WithMany(p => p.JSubjectclassdefelemScldeSubjectclasses)
                .HasForeignKey(d => d.ScldeSubjectclassId)
                .HasConstraintName("FK_DEFSUBJECTCLASS_SCDEFELEM");

            entity.HasOne(d => d.ScldeSubjectstatus).WithMany(p => p.JSubjectclassdefelems)
                .HasForeignKey(d => d.ScldeSubjectstatusId)
                .HasConstraintName("FK_SUBJECTSTATUS_SCDEFELEM");

            entity.HasOne(d => d.ScldeSubjecttype).WithMany(p => p.JSubjectclassdefelems)
                .HasForeignKey(d => d.ScldeSubjecttypeId)
                .HasConstraintName("FK_SUBJECTTYPE_SCDEFELEM");

            entity.HasOne(d => d.ScldeUnitofmeasure).WithMany(p => p.JSubjectclassdefelems)
                .HasForeignKey(d => d.ScldeUnitofmeasureId)
                .HasConstraintName("FK_UOM_SCDEFELEM");
        });

        modelBuilder.Entity<JSubjectcomp>(entity =>
        {
            entity.HasKey(e => e.ScId).HasName("PK_SUBJECTCOMP");

            entity.ToTable("J_SUBJECTCOMP", "JITTOE");

            entity.HasIndex(e => e.ScSubjectcomptypeId, "I_SUBJECTCOMPTYPE_SUBJECTCOMP");

            entity.HasIndex(e => e.ScProducedsubjectId, "I_SUBJECT_SUBJECTCOMP");

            entity.HasIndex(e => new { e.ScSubjectcomptypeId, e.ScProducedsubjectId, e.ScInvalidid }, "UN_SC_SUBJECT").IsUnique();

            entity.Property(e => e.ScId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SC_ID");
            entity.Property(e => e.ScInvalidid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SC_INVALIDID");
            entity.Property(e => e.ScProducedsubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SC_PRODUCEDSUBJECT_ID");
            entity.Property(e => e.ScSubjectcomptypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SC_SUBJECTCOMPTYPE_ID");
            entity.Property(e => e.ScTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SC_TCREATION");
            entity.Property(e => e.ScTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SC_TUPDATE");
            entity.Property(e => e.ScTvalidfrom)
                .HasColumnType("DATE")
                .HasColumnName("SC_TVALIDFROM");
            entity.Property(e => e.ScTvaliduntil)
                .HasColumnType("DATE")
                .HasColumnName("SC_TVALIDUNTIL");

            entity.HasOne(d => d.ScProducedsubject).WithMany(p => p.JSubjectcomps)
                .HasForeignKey(d => d.ScProducedsubjectId)
                .HasConstraintName("FK_SUBJECT_SUBJECTCOMP");

            entity.HasOne(d => d.ScSubjectcomptype).WithMany(p => p.JSubjectcomps)
                .HasForeignKey(d => d.ScSubjectcomptypeId)
                .HasConstraintName("FK_SUBJECTCOMPTYPE_SUBJECTCOMP");
        });

        modelBuilder.Entity<JSubjectcompelem>(entity =>
        {
            entity.HasKey(e => e.SceId).HasName("PK_SUBJECTCOMPELEM");

            entity.ToTable("J_SUBJECTCOMPELEM", "JITTOE");

            entity.HasIndex(e => e.SceProdstepId, "I_PRODSTEP_SUBJECTCOMPELEM");

            entity.HasIndex(e => e.SceProdunitofmeasureId, "I_PRODUOM_SUBJECTCOMPELEM");

            entity.HasIndex(e => e.SceSubjectcompId, "I_SUBJECTCOMP_ELEM");

            entity.HasIndex(e => e.SceUsedsubjectId, "I_SUBJECT_SUBJECTCOMPELEM");

            entity.HasIndex(e => e.SceUnitofmeasureId, "I_UOM_SUBJECTCOMPELEM");

            entity.HasIndex(e => new { e.SceSubjectcompId, e.SceNo, e.SceUsedsubjectId, e.SceProdstepId, e.SceInvalidid }, "UN_SCE_DATA").IsUnique();

            entity.Property(e => e.SceId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SCE_ID");
            entity.Property(e => e.SceInfo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("SCE_INFO");
            entity.Property(e => e.SceInvalidid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SCE_INVALIDID");
            entity.Property(e => e.SceNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("SCE_NO");
            entity.Property(e => e.SceProdquantity)
                .HasDefaultValueSql("1  ")
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("SCE_PRODQUANTITY");
            entity.Property(e => e.SceProdstepId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SCE_PRODSTEP_ID");
            entity.Property(e => e.SceProdunitofmeasureId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SCE_PRODUNITOFMEASURE_ID");
            entity.Property(e => e.SceQuantity)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("SCE_QUANTITY");
            entity.Property(e => e.SceSubjectcompId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SCE_SUBJECTCOMP_ID");
            entity.Property(e => e.SceTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SCE_TCREATION");
            entity.Property(e => e.SceTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SCE_TUPDATE");
            entity.Property(e => e.SceTvalidfrom)
                .HasColumnType("DATE")
                .HasColumnName("SCE_TVALIDFROM");
            entity.Property(e => e.SceTvaliduntil)
                .HasColumnType("DATE")
                .HasColumnName("SCE_TVALIDUNTIL");
            entity.Property(e => e.SceUnitofmeasureId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SCE_UNITOFMEASURE_ID");
            entity.Property(e => e.SceUsedsubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SCE_USEDSUBJECT_ID");

            entity.HasOne(d => d.SceProdstep).WithMany(p => p.JSubjectcompelems)
                .HasForeignKey(d => d.SceProdstepId)
                .HasConstraintName("FK_PRODSTEP_SUBJECTCOMPELEM");

            entity.HasOne(d => d.SceProdunitofmeasure).WithMany(p => p.JSubjectcompelemSceProdunitofmeasures)
                .HasForeignKey(d => d.SceProdunitofmeasureId)
                .HasConstraintName("FK_PRODUOM_SUBJECTCOMPELEM");

            entity.HasOne(d => d.SceSubjectcomp).WithMany(p => p.JSubjectcompelems)
                .HasForeignKey(d => d.SceSubjectcompId)
                .HasConstraintName("FK_SUBJECTCOMP_ELEM");

            entity.HasOne(d => d.SceUnitofmeasure).WithMany(p => p.JSubjectcompelemSceUnitofmeasures)
                .HasForeignKey(d => d.SceUnitofmeasureId)
                .HasConstraintName("FK_UOM_SUBJECTCOMPELEM");

            entity.HasOne(d => d.SceUsedsubject).WithMany(p => p.JSubjectcompelems)
                .HasForeignKey(d => d.SceUsedsubjectId)
                .HasConstraintName("FK_SUBJECT_SUBJECTCOMPELEM");
        });

        modelBuilder.Entity<JSubjectcomptype>(entity =>
        {
            entity.HasKey(e => e.SctId).HasName("PK_SUBJECTCOMPTYPE");

            entity.ToTable("J_SUBJECTCOMPTYPE", "JITTOE");

            entity.HasIndex(e => e.SctCompanyId, "I_COMPANY_SUBJECTCOMPTYPE");

            entity.HasIndex(e => e.SctKey, "UN_SCT_KEY").IsUnique();

            entity.Property(e => e.SctId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SCT_ID");
            entity.Property(e => e.SctCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SCT_COMPANY_ID");
            entity.Property(e => e.SctDescr)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("SCT_DESCR");
            entity.Property(e => e.SctKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SCT_KEY");
            entity.Property(e => e.SctTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SCT_TCREATION");
            entity.Property(e => e.SctTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SCT_TUPDATE");

            entity.HasOne(d => d.SctCompany).WithMany(p => p.JSubjectcomptypes)
                .HasForeignKey(d => d.SctCompanyId)
                .HasConstraintName("FK_COMPANY_SUBJECTCOMPTYPE");
        });

        modelBuilder.Entity<JSubjectinfo>(entity =>
        {
            entity.HasKey(e => e.SiId).HasName("PK_SUBJECTINFO");

            entity.ToTable("J_SUBJECTINFO", "JITTOE");

            entity.HasIndex(e => e.SiRefsubjectId, "I_REFSUBJECT_SINFO");

            entity.HasIndex(e => e.SiSubjectId, "I_SUBJECTINFO_SUBJECT");

            entity.HasIndex(e => new { e.SiSubjectId, e.SiType, e.SiKey, e.SiInvalidid }, "UN_SI_INFO").IsUnique();

            entity.Property(e => e.SiId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SI_ID");
            entity.Property(e => e.SiInvalidid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SI_INVALIDID");
            entity.Property(e => e.SiKey)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("SI_KEY");
            entity.Property(e => e.SiRefsubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SI_REFSUBJECT_ID");
            entity.Property(e => e.SiSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SI_SUBJECT_ID");
            entity.Property(e => e.SiTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SI_TCREATION");
            entity.Property(e => e.SiTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SI_TUPDATE");
            entity.Property(e => e.SiTvalidfrom)
                .HasColumnType("DATE")
                .HasColumnName("SI_TVALIDFROM");
            entity.Property(e => e.SiTvaliduntil)
                .HasColumnType("DATE")
                .HasColumnName("SI_TVALIDUNTIL");
            entity.Property(e => e.SiType)
                .HasMaxLength(17)
                .IsUnicode(false)
                .HasColumnName("SI_TYPE");
            entity.Property(e => e.SiValue)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("SI_VALUE");

            entity.HasOne(d => d.SiRefsubject).WithMany(p => p.JSubjectinfoSiRefsubjects)
                .HasForeignKey(d => d.SiRefsubjectId)
                .HasConstraintName("FK_REFSUBJECT_SINFO");

            entity.HasOne(d => d.SiSubject).WithMany(p => p.JSubjectinfoSiSubjects)
                .HasForeignKey(d => d.SiSubjectId)
                .HasConstraintName("FK_SUBJECTINFO_SUBJECT");
        });

        modelBuilder.Entity<JSubjectstatus>(entity =>
        {
            entity.HasKey(e => e.SstId).HasName("PK_SUBJECTSTATUS");

            entity.ToTable("J_SUBJECTSTATUS", "JITTOE");

            entity.HasIndex(e => e.SstCode, "UN_SST_CODE").IsUnique();

            entity.Property(e => e.SstId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SST_ID");
            entity.Property(e => e.SstCode)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("SST_CODE");
            entity.Property(e => e.SstDescr)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("SST_DESCR");
            entity.Property(e => e.SstIseditable)
                .HasPrecision(1)
                .HasColumnName("SST_ISEDITABLE");
            entity.Property(e => e.SstOpconsume)
                .HasPrecision(1)
                .HasColumnName("SST_OPCONSUME");
            entity.Property(e => e.SstOpproduce)
                .HasPrecision(1)
                .HasColumnName("SST_OPPRODUCE");
            entity.Property(e => e.SstOppurchase)
                .HasPrecision(1)
                .HasColumnName("SST_OPPURCHASE");
            entity.Property(e => e.SstOpreceive)
                .HasPrecision(1)
                .HasColumnName("SST_OPRECEIVE");
            entity.Property(e => e.SstOpsale)
                .HasPrecision(1)
                .HasColumnName("SST_OPSALE");
            entity.Property(e => e.SstOpship)
                .HasPrecision(1)
                .HasColumnName("SST_OPSHIP");
            entity.Property(e => e.SstOpstock)
                .HasPrecision(1)
                .HasColumnName("SST_OPSTOCK");
            entity.Property(e => e.SstTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SST_TCREATION");
            entity.Property(e => e.SstTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SST_TUPDATE");
        });

        modelBuilder.Entity<JSubjecttype>(entity =>
        {
            entity.HasKey(e => e.StyId).HasName("PK_SUBJECTTYPE");

            entity.ToTable("J_SUBJECTTYPE", "JITTOE");

            entity.HasIndex(e => e.StyCompanyId, "I_COMPANY_TYPE");

            entity.HasIndex(e => e.StyDoccfgId, "I_DOCCFG_TYPE");

            entity.HasIndex(e => e.StyProductfamilyId, "I_PRODUCTFAMILY_TYPE");

            entity.HasIndex(e => new { e.StyCompanyId, e.StyKeyincompany }, "UN_STY_COMPANY_KEY").IsUnique();

            entity.Property(e => e.StyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STY_ID");
            entity.Property(e => e.StyCommodity)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STY_COMMODITY");
            entity.Property(e => e.StyCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STY_COMPANY_ID");
            entity.Property(e => e.StyContainertypes)
                .HasPrecision(1)
                .HasColumnName("STY_CONTAINERTYPES");
            entity.Property(e => e.StyDescr)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("STY_DESCR");
            entity.Property(e => e.StyDoccfgId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STY_DOCCFG_ID");
            entity.Property(e => e.StyGroup)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("STY_GROUP");
            entity.Property(e => e.StyIconfile)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STY_ICONFILE");
            entity.Property(e => e.StyKeyincompany)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("STY_KEYINCOMPANY");
            entity.Property(e => e.StyPackingmaterial)
                .HasPrecision(1)
                .HasColumnName("STY_PACKINGMATERIAL");
            entity.Property(e => e.StyProductfamilyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STY_PRODUCTFAMILY_ID");
            entity.Property(e => e.StyShortdescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STY_SHORTDESCR");
            entity.Property(e => e.StyTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STY_TCREATION");
            entity.Property(e => e.StyTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STY_TUPDATE");

            entity.HasOne(d => d.StyCompany).WithMany(p => p.JSubjecttypes)
                .HasForeignKey(d => d.StyCompanyId)
                .HasConstraintName("FK_COMPANY_TYPE");

            entity.HasOne(d => d.StyDoccfg).WithMany(p => p.JSubjecttypes)
                .HasForeignKey(d => d.StyDoccfgId)
                .HasConstraintName("FK_DOCCFG_TYPE");

            entity.HasOne(d => d.StyProductfamily).WithMany(p => p.JSubjecttypes)
                .HasForeignKey(d => d.StyProductfamilyId)
                .HasConstraintName("FK_PRODUCTFAMILY_TYPE");
        });

        modelBuilder.Entity<JSubjecttypeattr>(entity =>
        {
            entity.HasKey(e => e.StaId).HasName("PK_SUBJECTTYPEATTR");

            entity.ToTable("J_SUBJECTTYPEATTR", "JITTOE");

            entity.HasIndex(e => e.StaSubjectattrId, "I_SUBJECTATTR_TYPEATTR");

            entity.HasIndex(e => e.StaSubjecttypeId, "I_SUBJECTTYPE_TYPEATTR");

            entity.HasIndex(e => new { e.StaSubjecttypeId, e.StaSubjectattrId }, "UN_STA_SUBJECTTYPEATTR").IsUnique();

            entity.HasIndex(e => new { e.StaSubjecttypeId, e.StaPosno }, "UN_STA_TYPE_POSNO").IsUnique();

            entity.Property(e => e.StaId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STA_ID");
            entity.Property(e => e.StaPosno)
                .HasPrecision(3)
                .HasColumnName("STA_POSNO");
            entity.Property(e => e.StaSubjectattrId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STA_SUBJECTATTR_ID");
            entity.Property(e => e.StaSubjecttypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STA_SUBJECTTYPE_ID");
            entity.Property(e => e.StaTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STA_TCREATION");
            entity.Property(e => e.StaTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STA_TUPDATE");

            entity.HasOne(d => d.StaSubjectattr).WithMany(p => p.JSubjecttypeattrs)
                .HasForeignKey(d => d.StaSubjectattrId)
                .HasConstraintName("FK_SUBJECTATTR_TYPEATTR");

            entity.HasOne(d => d.StaSubjecttype).WithMany(p => p.JSubjecttypeattrs)
                .HasForeignKey(d => d.StaSubjecttypeId)
                .HasConstraintName("FK_SUBJECTTYPE_TYPEATTR");
        });

        modelBuilder.Entity<JSubjecttypeinfo>(entity =>
        {
            entity.HasKey(e => e.StyiId).HasName("PK_SUBJECTTYPEINFO");

            entity.ToTable("J_SUBJECTTYPEINFO", "JITTOE");

            entity.HasIndex(e => e.StyiSubjecttypeId, "I_SUBJECTTYPE_STYINFO");

            entity.HasIndex(e => new { e.StyiSubjecttypeId, e.StyiType, e.StyiKey1, e.StyiKey2, e.StyiKey3 }, "UN_STYI_INFO").IsUnique();

            entity.Property(e => e.StyiId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STYI_ID");
            entity.Property(e => e.StyiKey1)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("STYI_KEY1");
            entity.Property(e => e.StyiKey2)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("STYI_KEY2");
            entity.Property(e => e.StyiKey3)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("STYI_KEY3");
            entity.Property(e => e.StyiStringvalue)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("STYI_STRINGVALUE");
            entity.Property(e => e.StyiSubjecttypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("STYI_SUBJECTTYPE_ID");
            entity.Property(e => e.StyiTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STYI_TCREATION");
            entity.Property(e => e.StyiTimevalue)
                .HasColumnType("DATE")
                .HasColumnName("STYI_TIMEVALUE");
            entity.Property(e => e.StyiTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("STYI_TUPDATE");
            entity.Property(e => e.StyiType)
                .HasMaxLength(21)
                .IsUnicode(false)
                .HasColumnName("STYI_TYPE");

            entity.HasOne(d => d.StyiSubjecttype).WithMany(p => p.JSubjecttypeinfos)
                .HasForeignKey(d => d.StyiSubjecttypeId)
                .HasConstraintName("FK_SUBJECTTYPE_STYINFO");
        });

        modelBuilder.Entity<JSupply>(entity =>
        {
            entity.HasKey(e => e.SuId).HasName("PK_SUPPLY");

            entity.ToTable("J_SUPPLY", "JITTOE");

            entity.HasIndex(e => e.SuCompanyId, "I_COMPANY_SUPPLY");

            entity.HasIndex(e => e.SuDoccfgId, "I_DOCCFG_SUPPLY");

            entity.Property(e => e.SuId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SU_ID");
            entity.Property(e => e.SuCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SU_COMPANY_ID");
            entity.Property(e => e.SuDoccfgId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SU_DOCCFG_ID");
            entity.Property(e => e.SuTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SU_TCREATION");
            entity.Property(e => e.SuTransporttype)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("SU_TRANSPORTTYPE");

            entity.HasOne(d => d.SuCompany).WithMany(p => p.JSupplies)
                .HasForeignKey(d => d.SuCompanyId)
                .HasConstraintName("FK_COMPANY_SUPPLY");

            entity.HasOne(d => d.SuDoccfg).WithMany(p => p.JSupplies)
                .HasForeignKey(d => d.SuDoccfgId)
                .HasConstraintName("FK_DOCCFG_SUPPLY");
        });

        modelBuilder.Entity<JSupplyentry>(entity =>
        {
            entity.HasKey(e => e.SueId).HasName("PK_SUPPLYENTRY");

            entity.ToTable("J_SUPPLYENTRY", "JITTOE");

            entity.HasIndex(e => e.SueContractId, "I_CONTRACT_SUPPLYENTRY");

            entity.HasIndex(e => e.SueConfirmedbyprodunitId, "I_PRODUNIT_SUPPLYENTRY");

            entity.HasIndex(e => e.SueSupplyId, "I_SUPPLY_SUPPLYENTRY");

            entity.HasIndex(e => e.SueConfirmedbyuserId, "I_USER_SUPPLYENTRY");

            entity.HasIndex(e => new { e.SueContractId, e.SueNo, e.SueClosedtimestamp }, "UN_SUE_NO").IsUnique();

            entity.Property(e => e.SueId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SUE_ID");
            entity.Property(e => e.SueClosedtimestamp)
                .HasColumnType("DATE")
                .HasColumnName("SUE_CLOSEDTIMESTAMP");
            entity.Property(e => e.SueConfirmed)
                .HasPrecision(1)
                .HasColumnName("SUE_CONFIRMED");
            entity.Property(e => e.SueConfirmedbyprodunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SUE_CONFIRMEDBYPRODUNIT_ID");
            entity.Property(e => e.SueConfirmedbyuserId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SUE_CONFIRMEDBYUSER_ID");
            entity.Property(e => e.SueContractId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SUE_CONTRACT_ID");
            entity.Property(e => e.SueCreatorkind)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("SUE_CREATORKIND");
            entity.Property(e => e.SueNo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("SUE_NO");
            entity.Property(e => e.SueSupplyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SUE_SUPPLY_ID");
            entity.Property(e => e.SueTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SUE_TCREATION");
            entity.Property(e => e.SueTimeverified)
                .HasColumnType("DATE")
                .HasColumnName("SUE_TIMEVERIFIED");
            entity.Property(e => e.SueTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SUE_TUPDATE");

            entity.HasOne(d => d.SueConfirmedbyprodunit).WithMany(p => p.JSupplyentries)
                .HasForeignKey(d => d.SueConfirmedbyprodunitId)
                .HasConstraintName("FK_PRODUNIT_SUPPLYENTRY");

            entity.HasOne(d => d.SueConfirmedbyuser).WithMany(p => p.JSupplyentries)
                .HasForeignKey(d => d.SueConfirmedbyuserId)
                .HasConstraintName("FK_USER_SUPPLYENTRY");

            entity.HasOne(d => d.SueContract).WithMany(p => p.JSupplyentries)
                .HasForeignKey(d => d.SueContractId)
                .HasConstraintName("FK_CONTRACT_SUPPLYENTRY");

            entity.HasOne(d => d.SueSupply).WithMany(p => p.JSupplyentries)
                .HasForeignKey(d => d.SueSupplyId)
                .HasConstraintName("FK_SUPPLY_SUPPLYENTRY");
        });

        modelBuilder.Entity<JSupplynote>(entity =>
        {
            entity.HasKey(e => e.SunId).HasName("PK_SUPPLYNOTE");

            entity.ToTable("J_SUPPLYNOTE", "JITTOE");

            entity.HasIndex(e => e.SunHandledbycontainerId, "I_CONTAINER_SUPPLYNOTE");

            entity.HasIndex(e => e.SunLocationId, "I_LOCATION_SUPPLYNOTE");

            entity.HasIndex(e => e.SunConfirmedbyprodunitId, "I_PRODUNIT_SUPPLYNOTE");

            entity.HasIndex(e => e.SunSupplyentryId, "I_SUPPLYENTRY_SUPPLYNOTE");

            entity.HasIndex(e => e.SunConfirmedbyuserId, "I_USER_SUPPLYNOTE");

            entity.HasIndex(e => new { e.SunSupplyentryId, e.SunNo, e.SunDeletionid }, "UN_SUN_NO").IsUnique();

            entity.Property(e => e.SunId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SUN_ID");
            entity.Property(e => e.SunConfirmed)
                .HasPrecision(1)
                .HasColumnName("SUN_CONFIRMED");
            entity.Property(e => e.SunConfirmedbyprodunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SUN_CONFIRMEDBYPRODUNIT_ID");
            entity.Property(e => e.SunConfirmedbyuserId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SUN_CONFIRMEDBYUSER_ID");
            entity.Property(e => e.SunDeletionid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SUN_DELETIONID");
            entity.Property(e => e.SunErpno)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("SUN_ERPNO");
            entity.Property(e => e.SunHandledbycontainerId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SUN_HANDLEDBYCONTAINER_ID");
            entity.Property(e => e.SunLocationId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SUN_LOCATION_ID");
            entity.Property(e => e.SunNo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("SUN_NO");
            entity.Property(e => e.SunQualifier1)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("SUN_QUALIFIER1");
            entity.Property(e => e.SunQualifier2)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("SUN_QUALIFIER2");
            entity.Property(e => e.SunReceipttimestamp)
                .HasColumnType("DATE")
                .HasColumnName("SUN_RECEIPTTIMESTAMP");
            entity.Property(e => e.SunSupplyentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SUN_SUPPLYENTRY_ID");
            entity.Property(e => e.SunTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SUN_TCREATION");
            entity.Property(e => e.SunTdeletion)
                .HasColumnType("DATE")
                .HasColumnName("SUN_TDELETION");
            entity.Property(e => e.SunTimeadvised)
                .HasColumnType("DATE")
                .HasColumnName("SUN_TIMEADVISED");
            entity.Property(e => e.SunTimearrivalconfirmed)
                .HasColumnType("DATE")
                .HasColumnName("SUN_TIMEARRIVALCONFIRMED");
            entity.Property(e => e.SunTimearrived)
                .HasColumnType("DATE")
                .HasColumnName("SUN_TIMEARRIVED");
            entity.Property(e => e.SunTimedelivered)
                .HasColumnType("DATE")
                .HasColumnName("SUN_TIMEDELIVERED");
            entity.Property(e => e.SunTimeissued)
                .HasColumnType("DATE")
                .HasColumnName("SUN_TIMEISSUED");
            entity.Property(e => e.SunTimeverified)
                .HasColumnType("DATE")
                .HasColumnName("SUN_TIMEVERIFIED");
            entity.Property(e => e.SunTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SUN_TUPDATE");

            entity.HasOne(d => d.SunConfirmedbyprodunit).WithMany(p => p.JSupplynotes)
                .HasForeignKey(d => d.SunConfirmedbyprodunitId)
                .HasConstraintName("FK_PRODUNIT_SUPPLYNOTE");

            entity.HasOne(d => d.SunConfirmedbyuser).WithMany(p => p.JSupplynotes)
                .HasForeignKey(d => d.SunConfirmedbyuserId)
                .HasConstraintName("FK_USER_SUPPLYNOTE");

            entity.HasOne(d => d.SunHandledbycontainer).WithMany(p => p.JSupplynotes)
                .HasForeignKey(d => d.SunHandledbycontainerId)
                .HasConstraintName("FK_CONTAINER_SUPPLYNOTE");

            entity.HasOne(d => d.SunLocation).WithMany(p => p.JSupplynotes)
                .HasForeignKey(d => d.SunLocationId)
                .HasConstraintName("FK_LOCATION_SUPPLYNOTE");

            entity.HasOne(d => d.SunSupplyentry).WithMany(p => p.JSupplynotes)
                .HasForeignKey(d => d.SunSupplyentryId)
                .HasConstraintName("FK_SUPPLYENTRY_SUPPLYNOTE");
        });

        modelBuilder.Entity<JSupplynotecontainer>(entity =>
        {
            entity.HasKey(e => e.SuncId).HasName("PK_SUPPLYNOTECONTAINER");

            entity.ToTable("J_SUPPLYNOTECONTAINER", "JITTOE");

            entity.HasIndex(e => e.SuncAdvisedsuncontainerId, "I_ADVISEDSUNCONT_SUNCONT");

            entity.HasIndex(e => e.SuncContainerId, "I_CONTAINER_SUPPLYNOTECONT");

            entity.HasIndex(e => e.SuncSupplynoteId, "I_SUPPLYNOTE_SUPPLYNOTECONT");

            entity.HasIndex(e => e.SuncUnloadedbyuserId, "I_UNLOADEDBYUSER_SUNCONT");

            entity.HasIndex(e => e.SuncWhcontainerId, "I_WHCONTAINER_SUNCONT");

            entity.Property(e => e.SuncId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SUNC_ID");
            entity.Property(e => e.SuncAdvisedsuncontainerId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SUNC_ADVISEDSUNCONTAINER_ID");
            entity.Property(e => e.SuncContainerId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SUNC_CONTAINER_ID");
            entity.Property(e => e.SuncHoldscontainers)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("0  ")
                .HasColumnName("SUNC_HOLDSCONTAINERS");
            entity.Property(e => e.SuncSupplynoteId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SUNC_SUPPLYNOTE_ID");
            entity.Property(e => e.SuncTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SUNC_TCREATION");
            entity.Property(e => e.SuncTimeadvised)
                .HasColumnType("DATE")
                .HasColumnName("SUNC_TIMEADVISED");
            entity.Property(e => e.SuncTimeunloaded)
                .HasColumnType("DATE")
                .HasColumnName("SUNC_TIMEUNLOADED");
            entity.Property(e => e.SuncUnloadedbyuserId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SUNC_UNLOADEDBYUSER_ID");
            entity.Property(e => e.SuncWhcontainerId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SUNC_WHCONTAINER_ID");

            entity.HasOne(d => d.SuncAdvisedsuncontainer).WithMany(p => p.InverseSuncAdvisedsuncontainer)
                .HasForeignKey(d => d.SuncAdvisedsuncontainerId)
                .HasConstraintName("FK_ADVISEDSUNCONT_SUNCONT");

            entity.HasOne(d => d.SuncContainer).WithMany(p => p.JSupplynotecontainerSuncContainers)
                .HasForeignKey(d => d.SuncContainerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTAINER_SUPPLYNOTECONT");

            entity.HasOne(d => d.SuncSupplynote).WithMany(p => p.JSupplynotecontainers)
                .HasForeignKey(d => d.SuncSupplynoteId)
                .HasConstraintName("FK_SUPPLYNOTE_SUPPLYNOTECONT");

            entity.HasOne(d => d.SuncUnloadedbyuser).WithMany(p => p.JSupplynotecontainers)
                .HasForeignKey(d => d.SuncUnloadedbyuserId)
                .HasConstraintName("FK_UNLOADEDBYUSER_SUNCONT");

            entity.HasOne(d => d.SuncWhcontainer).WithMany(p => p.JSupplynotecontainerSuncWhcontainers)
                .HasForeignKey(d => d.SuncWhcontainerId)
                .HasConstraintName("FK_WHCONTAINER_SUNCONT");
        });

        modelBuilder.Entity<JSupplynoteentry>(entity =>
        {
            entity.HasKey(e => e.SuneId).HasName("PK_SUPPLYNOTEENTRY");

            entity.ToTable("J_SUPPLYNOTEENTRY", "JITTOE");

            entity.HasIndex(e => e.SuneConfirmedunitofmeasureId, "I_CONFIRMEDUOM_SNENTRY");

            entity.HasIndex(e => e.SuneContractorderId, "I_ORDER_SNENTRY");

            entity.HasIndex(e => e.SuneOthersubjectId, "I_OTHERSUBJECT_SNENTRY");

            entity.HasIndex(e => e.SuneSubjectId, "I_SUBJECT_SUPPLYNOTEENTRY");

            entity.HasIndex(e => e.SuneSupplynoteId, "I_SUPPLYNOTE_SUPPLYNOTEENTRY");

            entity.HasIndex(e => e.SuneUnitofmeasureId, "I_UOM_SNENTRY");

            entity.HasIndex(e => new { e.SuneSupplynoteId, e.SuneNo }, "UN_SUNE_NO").IsUnique();

            entity.Property(e => e.SuneId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SUNE_ID");
            entity.Property(e => e.SuneAmount)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("SUNE_AMOUNT");
            entity.Property(e => e.SuneConfirmedamount)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("SUNE_CONFIRMEDAMOUNT");
            entity.Property(e => e.SuneConfirmedunitofmeasureId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SUNE_CONFIRMEDUNITOFMEASURE_ID");
            entity.Property(e => e.SuneContractorderId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SUNE_CONTRACTORDER_ID");
            entity.Property(e => e.SuneCumulatedamount)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("SUNE_CUMULATEDAMOUNT");
            entity.Property(e => e.SuneNo)
                .HasPrecision(8)
                .HasColumnName("SUNE_NO");
            entity.Property(e => e.SuneOthersubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SUNE_OTHERSUBJECT_ID");
            entity.Property(e => e.SunePackageinfo1)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("SUNE_PACKAGEINFO1");
            entity.Property(e => e.SunePackageinfo2)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("SUNE_PACKAGEINFO2");
            entity.Property(e => e.SuneSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SUNE_SUBJECT_ID");
            entity.Property(e => e.SuneSupplynoteId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SUNE_SUPPLYNOTE_ID");
            entity.Property(e => e.SuneTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SUNE_TCREATION");
            entity.Property(e => e.SuneTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SUNE_TUPDATE");
            entity.Property(e => e.SuneUnitofmeasureId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SUNE_UNITOFMEASURE_ID");

            entity.HasOne(d => d.SuneConfirmedunitofmeasure).WithMany(p => p.JSupplynoteentrySuneConfirmedunitofmeasures)
                .HasForeignKey(d => d.SuneConfirmedunitofmeasureId)
                .HasConstraintName("FK_CONFIRMEDUOM_SNENTRY");

            entity.HasOne(d => d.SuneContractorder).WithMany(p => p.JSupplynoteentries)
                .HasForeignKey(d => d.SuneContractorderId)
                .HasConstraintName("FK_ORDER_SNENTRY");

            entity.HasOne(d => d.SuneOthersubject).WithMany(p => p.JSupplynoteentrySuneOthersubjects)
                .HasForeignKey(d => d.SuneOthersubjectId)
                .HasConstraintName("FK_OTHERSUBJECT_SNENTRY");

            entity.HasOne(d => d.SuneSubject).WithMany(p => p.JSupplynoteentrySuneSubjects)
                .HasForeignKey(d => d.SuneSubjectId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SUBJECT_SUPPLYNOTEENTRY");

            entity.HasOne(d => d.SuneSupplynote).WithMany(p => p.JSupplynoteentries)
                .HasForeignKey(d => d.SuneSupplynoteId)
                .HasConstraintName("FK_SUPPLYNOTE_SUPPLYNOTEENTRY");

            entity.HasOne(d => d.SuneUnitofmeasure).WithMany(p => p.JSupplynoteentrySuneUnitofmeasures)
                .HasForeignKey(d => d.SuneUnitofmeasureId)
                .HasConstraintName("FK_UOM_SNENTRY");
        });

        modelBuilder.Entity<JSupplynoteentryorder>(entity =>
        {
            entity.HasKey(e => e.SuneoId).HasName("PK_SUPPLYNOTEENTRYORDER");

            entity.ToTable("J_SUPPLYNOTEENTRYORDER", "JITTOE");

            entity.HasIndex(e => e.SuneoSupplynoteentryId, "I_SNOTEENTRY_SNOTEENTRYORDER");

            entity.HasIndex(e => e.SuneoSupplynoteorderId, "I_SNOTEORDER_SNOTEENTRYORDER");

            entity.HasIndex(e => new { e.SuneoSupplynoteentryId, e.SuneoSupplynoteorderId }, "UN_SUNEO_ENTRYORDER").IsUnique();

            entity.Property(e => e.SuneoId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SUNEO_ID");
            entity.Property(e => e.SuneoAmount)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("SUNEO_AMOUNT");
            entity.Property(e => e.SuneoConfirmedamount)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("SUNEO_CONFIRMEDAMOUNT");
            entity.Property(e => e.SuneoSupplynoteentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SUNEO_SUPPLYNOTEENTRY_ID");
            entity.Property(e => e.SuneoSupplynoteorderId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SUNEO_SUPPLYNOTEORDER_ID");
            entity.Property(e => e.SuneoTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SUNEO_TCREATION");
            entity.Property(e => e.SuneoTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SUNEO_TUPDATE");

            entity.HasOne(d => d.SuneoSupplynoteentry).WithMany(p => p.JSupplynoteentryorders)
                .HasForeignKey(d => d.SuneoSupplynoteentryId)
                .HasConstraintName("FK_SNOTEENTRY_SNOTEENTRYORDER");

            entity.HasOne(d => d.SuneoSupplynoteorder).WithMany(p => p.JSupplynoteentryorders)
                .HasForeignKey(d => d.SuneoSupplynoteorderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SNOTEORDER_SNOTEENTRYORDER");
        });

        modelBuilder.Entity<JSupplynoteinfo>(entity =>
        {
            entity.HasKey(e => e.SuniId).HasName("PK_SUPPLYNOTEINFO");

            entity.ToTable("J_SUPPLYNOTEINFO", "JITTOE");

            entity.HasIndex(e => e.SuniFailurereasonId, "I_FAILUREREASON_SNINFO");

            entity.HasIndex(e => e.SuniSupplynoteId, "I_SUPPLYNOTE_SNINFO");

            entity.HasIndex(e => new { e.SuniSupplynoteId, e.SuniType, e.SuniKey1, e.SuniKey2, e.SuniKey3 }, "UN_SUNI_INFO").IsUnique();

            entity.Property(e => e.SuniId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SUNI_ID");
            entity.Property(e => e.SuniFailurereasonId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SUNI_FAILUREREASON_ID");
            entity.Property(e => e.SuniKey1)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SUNI_KEY1");
            entity.Property(e => e.SuniKey2)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SUNI_KEY2");
            entity.Property(e => e.SuniKey3)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SUNI_KEY3");
            entity.Property(e => e.SuniStringvalue)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasColumnName("SUNI_STRINGVALUE");
            entity.Property(e => e.SuniSupplynoteId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SUNI_SUPPLYNOTE_ID");
            entity.Property(e => e.SuniTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SUNI_TCREATION");
            entity.Property(e => e.SuniTimevalue)
                .HasColumnType("DATE")
                .HasColumnName("SUNI_TIMEVALUE");
            entity.Property(e => e.SuniTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SUNI_TUPDATE");
            entity.Property(e => e.SuniType)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("SUNI_TYPE");

            entity.HasOne(d => d.SuniFailurereason).WithMany(p => p.JSupplynoteinfos)
                .HasForeignKey(d => d.SuniFailurereasonId)
                .HasConstraintName("FK_FAILUREREASON_SNINFO");

            entity.HasOne(d => d.SuniSupplynote).WithMany(p => p.JSupplynoteinfos)
                .HasForeignKey(d => d.SuniSupplynoteId)
                .HasConstraintName("FK_SUPPLYNOTE_SNINFO");
        });

        modelBuilder.Entity<JSupplynoteorder>(entity =>
        {
            entity.HasKey(e => e.SunoId).HasName("PK_SUPPLYNOTEORDER");

            entity.ToTable("J_SUPPLYNOTEORDER", "JITTOE");

            entity.HasIndex(e => e.SunoSupplynoteId, "I_SUPPLYNOTE_SUPPLYNOTEORDER");

            entity.Property(e => e.SunoId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SUNO_ID");
            entity.Property(e => e.SunoOrderno)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("SUNO_ORDERNO");
            entity.Property(e => e.SunoSupplynoteId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SUNO_SUPPLYNOTE_ID");
            entity.Property(e => e.SunoTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SUNO_TCREATION");

            entity.HasOne(d => d.SunoSupplynote).WithMany(p => p.JSupplynoteorders)
                .HasForeignKey(d => d.SunoSupplynoteId)
                .HasConstraintName("FK_SUPPLYNOTE_SUPPLYNOTEORDER");
        });

        modelBuilder.Entity<JSupplynotepart>(entity =>
        {
            entity.HasKey(e => e.SunpId).HasName("PK_SUPPLYNOTEPART");

            entity.ToTable("J_SUPPLYNOTEPART", "JITTOE");

            entity.HasIndex(e => e.SunpContainerentryId, "I_CONTAINERENTRY_SNPART");

            entity.HasIndex(e => e.SunpSupplynoteId, "I_SUPPLYNOTE_SNPART");

            entity.Property(e => e.SunpId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SUNP_ID");
            entity.Property(e => e.SunpContainerentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SUNP_CONTAINERENTRY_ID");
            entity.Property(e => e.SunpNo)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("SUNP_NO");
            entity.Property(e => e.SunpStatus)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("SUNP_STATUS");
            entity.Property(e => e.SunpSupplynoteId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SUNP_SUPPLYNOTE_ID");
            entity.Property(e => e.SunpTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SUNP_TCREATION");
            entity.Property(e => e.SunpTimeunloaded)
                .HasColumnType("DATE")
                .HasColumnName("SUNP_TIMEUNLOADED");

            entity.HasOne(d => d.SunpContainerentry).WithMany(p => p.JSupplynoteparts)
                .HasForeignKey(d => d.SunpContainerentryId)
                .HasConstraintName("FK_CONTAINERENTRY_SNPART");

            entity.HasOne(d => d.SunpSupplynote).WithMany(p => p.JSupplynoteparts)
                .HasForeignKey(d => d.SunpSupplynoteId)
                .HasConstraintName("FK_SUPPLYNOTE_SNPART");
        });

        modelBuilder.Entity<JSystem>(entity =>
        {
            entity.HasKey(e => e.SysId).HasName("PK_SYSTEM");

            entity.ToTable("J_SYSTEM", "JITTOE");

            entity.Property(e => e.SysId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SYS_ID");
            entity.Property(e => e.SysCopyright)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SYS_COPYRIGHT");
            entity.Property(e => e.SysMajorschemaversion)
                .HasPrecision(3)
                .HasColumnName("SYS_MAJORSCHEMAVERSION");
            entity.Property(e => e.SysMinorschemaversion)
                .HasPrecision(3)
                .HasColumnName("SYS_MINORSCHEMAVERSION");
            entity.Property(e => e.SysMode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SYS_MODE");
            entity.Property(e => e.SysName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("SYS_NAME");
            entity.Property(e => e.SysSite)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SYS_SITE");
            entity.Property(e => e.SysTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SYS_TCREATION");
            entity.Property(e => e.SysTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("SYS_TUPDATE");
            entity.Property(e => e.SysUpdateversionno)
                .HasDefaultValueSql("0  ")
                .HasColumnType("NUMBER(22)")
                .HasColumnName("SYS_UPDATEVERSIONNO");
        });

        modelBuilder.Entity<JText>(entity =>
        {
            entity.HasKey(e => e.TxId).HasName("PK_TEXT");

            entity.ToTable("J_TEXT", "JITTOE");

            entity.HasIndex(e => e.TxTextcategoryId, "I_TEXTCATEGORY_TEXT");

            entity.HasIndex(e => new { e.TxTextcategoryId, e.TxKey }, "UN_TX_KEY").IsUnique();

            entity.Property(e => e.TxId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TX_ID");
            entity.Property(e => e.TxKey)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TX_KEY");
            entity.Property(e => e.TxTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TX_TCREATION");
            entity.Property(e => e.TxTextcategoryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TX_TEXTCATEGORY_ID");

            entity.HasOne(d => d.TxTextcategory).WithMany(p => p.JTexts)
                .HasForeignKey(d => d.TxTextcategoryId)
                .HasConstraintName("FK_TEXTCATEGORY_TEXT");
        });

        modelBuilder.Entity<JTextcategory>(entity =>
        {
            entity.HasKey(e => e.TxcId).HasName("PK_TEXTCATEGORY");

            entity.ToTable("J_TEXTCATEGORY", "JITTOE");

            entity.HasIndex(e => e.TxcKey, "UN_TXC_KEY").IsUnique();

            entity.Property(e => e.TxcId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TXC_ID");
            entity.Property(e => e.TxcIdcolumnname)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("TXC_IDCOLUMNNAME");
            entity.Property(e => e.TxcKey)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TXC_KEY");
            entity.Property(e => e.TxcTablename)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("TXC_TABLENAME");
            entity.Property(e => e.TxcTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TXC_TCREATION");
            entity.Property(e => e.TxcType)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("TXC_TYPE");
        });

        modelBuilder.Entity<JTicket>(entity =>
        {
            entity.HasKey(e => e.TicId).HasName("PK_TICKET");

            entity.ToTable("J_TICKET", "JITTOE");

            entity.HasIndex(e => e.TicAuthorId, "I_AUTHOR_TICKET");

            entity.HasIndex(e => e.TicReasonId, "I_FAILUREREASON_TICKET");

            entity.HasIndex(e => e.TicProcessorgroupId, "I_PROCESSORGROUP_TICKET");

            entity.HasIndex(e => e.TicProcessorId, "I_PROCESSOR_TICKET");

            entity.HasIndex(e => e.TicProdunitId, "I_PRODUNIT_TICKET");

            entity.HasIndex(e => e.TicStateId, "I_STATE_TICKET");

            entity.HasIndex(e => e.TicTicketsetId, "I_TICKETSET_TICKET");

            entity.HasIndex(e => new { e.TicReleasecode, e.TicHistoryid, e.TicTicketsetId }, "I_TIC_RELEASECODE");

            entity.HasIndex(e => new { e.TicTicketsetId, e.TicNo, e.TicHistoryid }, "UN_TIC_TICKETSET_NO").IsUnique();

            entity.Property(e => e.TicId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TIC_ID");
            entity.Property(e => e.TicAuthorId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TIC_AUTHOR_ID");
            entity.Property(e => e.TicComment)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasColumnName("TIC_COMMENT");
            entity.Property(e => e.TicHistoryid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TIC_HISTORYID");
            entity.Property(e => e.TicHistoryrefid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TIC_HISTORYREFID");
            entity.Property(e => e.TicNo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("TIC_NO");
            entity.Property(e => e.TicProcessorId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TIC_PROCESSOR_ID");
            entity.Property(e => e.TicProcessorgroupId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TIC_PROCESSORGROUP_ID");
            entity.Property(e => e.TicProdunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TIC_PRODUNIT_ID");
            entity.Property(e => e.TicReasonId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TIC_REASON_ID");
            entity.Property(e => e.TicReleasecode)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("TIC_RELEASECODE");
            entity.Property(e => e.TicStateId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TIC_STATE_ID");
            entity.Property(e => e.TicTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TIC_TCREATION");
            entity.Property(e => e.TicTicketsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TIC_TICKETSET_ID");
            entity.Property(e => e.TicTimeended)
                .HasColumnType("DATE")
                .HasColumnName("TIC_TIMEENDED");
            entity.Property(e => e.TicTimeexpires)
                .HasColumnType("DATE")
                .HasColumnName("TIC_TIMEEXPIRES");
            entity.Property(e => e.TicTimeworkstarted)
                .HasColumnType("DATE")
                .HasColumnName("TIC_TIMEWORKSTARTED");
            entity.Property(e => e.TicTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TIC_TUPDATE");

            entity.HasOne(d => d.TicAuthor).WithMany(p => p.JTicketTicAuthors)
                .HasForeignKey(d => d.TicAuthorId)
                .HasConstraintName("FK_AUTHOR_TICKET");

            entity.HasOne(d => d.TicProcessor).WithMany(p => p.JTicketTicProcessors)
                .HasForeignKey(d => d.TicProcessorId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PROCESSOR_TICKET");

            entity.HasOne(d => d.TicProcessorgroup).WithMany(p => p.JTickets)
                .HasForeignKey(d => d.TicProcessorgroupId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PROCESSORGROUP_TICKET");

            entity.HasOne(d => d.TicProdunit).WithMany(p => p.JTickets)
                .HasForeignKey(d => d.TicProdunitId)
                .HasConstraintName("FK_PRODUNIT_TICKET");

            entity.HasOne(d => d.TicReason).WithMany(p => p.JTickets)
                .HasForeignKey(d => d.TicReasonId)
                .HasConstraintName("FK_FAILUREREASON_TICKET");

            entity.HasOne(d => d.TicState).WithMany(p => p.JTickets)
                .HasForeignKey(d => d.TicStateId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_STATE_TICKET");

            entity.HasOne(d => d.TicTicketset).WithMany(p => p.JTickets)
                .HasForeignKey(d => d.TicTicketsetId)
                .HasConstraintName("FK_TICKETSET_TICKET");
        });

        modelBuilder.Entity<JTicketset>(entity =>
        {
            entity.HasKey(e => e.TicsId).HasName("PK_TICKETSET");

            entity.ToTable("J_TICKETSET", "JITTOE");

            entity.HasIndex(e => e.TicsCounterId, "I_COUNTER_TICKETSET");

            entity.HasIndex(e => new { e.TicsKey, e.TicsDeletionid }, "UN_TICS_KEY").IsUnique();

            entity.Property(e => e.TicsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TICS_ID");
            entity.Property(e => e.TicsCounterId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TICS_COUNTER_ID");
            entity.Property(e => e.TicsDeletionid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TICS_DELETIONID");
            entity.Property(e => e.TicsDescr)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("TICS_DESCR");
            entity.Property(e => e.TicsKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("TICS_KEY");
            entity.Property(e => e.TicsTanlength)
                .HasPrecision(2)
                .HasDefaultValueSql("6  ")
                .HasColumnName("TICS_TANLENGTH");
            entity.Property(e => e.TicsTanvalidityinsec)
                .HasPrecision(5)
                .HasDefaultValueSql("300  ")
                .HasColumnName("TICS_TANVALIDITYINSEC");
            entity.Property(e => e.TicsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TICS_TCREATION");
            entity.Property(e => e.TicsTdeletion)
                .HasColumnType("DATE")
                .HasColumnName("TICS_TDELETION");
            entity.Property(e => e.TicsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TICS_TUPDATE");
            entity.Property(e => e.TicsType)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValueSql("'Help'  ")
                .HasColumnName("TICS_TYPE");

            entity.HasOne(d => d.TicsCounter).WithMany(p => p.JTicketsets)
                .HasForeignKey(d => d.TicsCounterId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COUNTER_TICKETSET");
        });

        modelBuilder.Entity<JTicketworkflow>(entity =>
        {
            entity.HasKey(e => e.TwfId).HasName("PK_TICKETWORKFLOW");

            entity.ToTable("J_TICKETWORKFLOW", "JITTOE");

            entity.HasIndex(e => e.TwfTicketworkflowsetId, "I_TWFSET_TWF");

            entity.HasIndex(e => new { e.TwfKey, e.TwfDeletionid }, "UN_TWF_KEY").IsUnique();

            entity.Property(e => e.TwfId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TWF_ID");
            entity.Property(e => e.TwfDeletionid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TWF_DELETIONID");
            entity.Property(e => e.TwfDescr)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("TWF_DESCR");
            entity.Property(e => e.TwfEnabled)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("1  ")
                .HasColumnName("TWF_ENABLED");
            entity.Property(e => e.TwfKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("TWF_KEY");
            entity.Property(e => e.TwfTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TWF_TCREATION");
            entity.Property(e => e.TwfTdeletion)
                .HasColumnType("DATE")
                .HasColumnName("TWF_TDELETION");
            entity.Property(e => e.TwfTicketworkflowsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TWF_TICKETWORKFLOWSET_ID");
            entity.Property(e => e.TwfTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TWF_TUPDATE");

            entity.HasOne(d => d.TwfTicketworkflowset).WithMany(p => p.JTicketworkflows)
                .HasForeignKey(d => d.TwfTicketworkflowsetId)
                .HasConstraintName("FK_TWFSET_TWF");
        });

        modelBuilder.Entity<JTicketworkflowset>(entity =>
        {
            entity.HasKey(e => e.TwfsId).HasName("PK_TICKETWORKFLOWSET");

            entity.ToTable("J_TICKETWORKFLOWSET", "JITTOE");

            entity.HasIndex(e => new { e.TwfsKey, e.TwfsDeletionid }, "UN_TWFS_KEY").IsUnique();

            entity.Property(e => e.TwfsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TWFS_ID");
            entity.Property(e => e.TwfsDeletionid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TWFS_DELETIONID");
            entity.Property(e => e.TwfsDescr)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("TWFS_DESCR");
            entity.Property(e => e.TwfsKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("TWFS_KEY");
            entity.Property(e => e.TwfsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TWFS_TCREATION");
            entity.Property(e => e.TwfsTdeletion)
                .HasColumnType("DATE")
                .HasColumnName("TWFS_TDELETION");
            entity.Property(e => e.TwfsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TWFS_TUPDATE");
        });

        modelBuilder.Entity<JTicketworkflowstate>(entity =>
        {
            entity.HasKey(e => e.TwfstId).HasName("PK_TICKETWORKFLOWSTATE");

            entity.ToTable("J_TICKETWORKFLOWSTATE", "JITTOE");

            entity.HasIndex(e => e.TwfstTicketworkflowId, "I_TWF_TWFSTATE");

            entity.HasIndex(e => new { e.TwfstTicketworkflowId, e.TwfstShortname, e.TwfstDeletionid }, "UN_TWFST_SHORTNAME").IsUnique();

            entity.Property(e => e.TwfstId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TWFST_ID");
            entity.Property(e => e.TwfstDeletionid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TWFST_DELETIONID");
            entity.Property(e => e.TwfstDescr)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("TWFST_DESCR");
            entity.Property(e => e.TwfstShortname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TWFST_SHORTNAME");
            entity.Property(e => e.TwfstTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TWFST_TCREATION");
            entity.Property(e => e.TwfstTdeletion)
                .HasColumnType("DATE")
                .HasColumnName("TWFST_TDELETION");
            entity.Property(e => e.TwfstTicketworkflowId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TWFST_TICKETWORKFLOW_ID");
            entity.Property(e => e.TwfstTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TWFST_TUPDATE");
            entity.Property(e => e.TwfstType)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("TWFST_TYPE");

            entity.HasOne(d => d.TwfstTicketworkflow).WithMany(p => p.JTicketworkflowstates)
                .HasForeignKey(d => d.TwfstTicketworkflowId)
                .HasConstraintName("FK_TWF_TWFSTATE");
        });

        modelBuilder.Entity<JToken>(entity =>
        {
            entity.HasKey(e => e.TokId).HasName("PK_TOKEN");

            entity.ToTable("J_TOKEN", "JITTOE");

            entity.HasIndex(e => e.TokTokensetId, "I_TOKENSET_TOKEN");

            entity.HasIndex(e => e.TokUserId, "I_USER_TOKEN");

            entity.HasIndex(e => new { e.TokNo, e.TokTokensetId }, "UN_TOK_NO").IsUnique();

            entity.Property(e => e.TokId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TOK_ID");
            entity.Property(e => e.TokDescr)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("TOK_DESCR");
            entity.Property(e => e.TokNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TOK_NO");
            entity.Property(e => e.TokTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TOK_TCREATION");
            entity.Property(e => e.TokTokensetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TOK_TOKENSET_ID");
            entity.Property(e => e.TokTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TOK_TUPDATE");
            entity.Property(e => e.TokUserId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TOK_USER_ID");
            entity.Property(e => e.TokValiduntiltime)
                .HasColumnType("DATE")
                .HasColumnName("TOK_VALIDUNTILTIME");

            entity.HasOne(d => d.TokTokenset).WithMany(p => p.JTokens)
                .HasForeignKey(d => d.TokTokensetId)
                .HasConstraintName("FK_TOKENSET_TOKEN");

            entity.HasOne(d => d.TokUser).WithMany(p => p.JTokens)
                .HasForeignKey(d => d.TokUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_USER_TOKEN");
        });

        modelBuilder.Entity<JTokenset>(entity =>
        {
            entity.HasKey(e => e.ToksId).HasName("PK_TOKENSET");

            entity.ToTable("J_TOKENSET", "JITTOE");

            entity.HasIndex(e => e.ToksCompanyId, "I_COMPANY_TOKENSET");

            entity.HasIndex(e => e.ToksKey, "UN_TOKS_KEY").IsUnique();

            entity.Property(e => e.ToksId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TOKS_ID");
            entity.Property(e => e.ToksCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TOKS_COMPANY_ID");
            entity.Property(e => e.ToksDescr)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("TOKS_DESCR");
            entity.Property(e => e.ToksKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("TOKS_KEY");
            entity.Property(e => e.ToksTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TOKS_TCREATION");
            entity.Property(e => e.ToksTokenlength)
                .HasPrecision(2)
                .HasDefaultValueSql("4  ")
                .HasColumnName("TOKS_TOKENLENGTH");
            entity.Property(e => e.ToksTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TOKS_TUPDATE");
            entity.Property(e => e.ToksValidityinminutes)
                .HasPrecision(4)
                .HasDefaultValueSql("10  ")
                .HasColumnName("TOKS_VALIDITYINMINUTES");

            entity.HasOne(d => d.ToksCompany).WithMany(p => p.JTokensets)
                .HasForeignKey(d => d.ToksCompanyId)
                .HasConstraintName("FK_COMPANY_TOKENSET");
        });

        modelBuilder.Entity<JTool>(entity =>
        {
            entity.HasKey(e => e.ToId).HasName("PK_TOOL");

            entity.ToTable("J_TOOL", "JITTOE");

            entity.HasIndex(e => e.ToAccessrightsetId, "I_ARIGHTSET_TOOL");

            entity.HasIndex(e => e.ToTooldefId, "I_TOOLDEF_TOOL");

            entity.HasIndex(e => e.ToToolgroupId, "I_TOOLGROUP_TOOL");

            entity.HasIndex(e => e.ToKey, "UN_TO_KEY").IsUnique();

            entity.Property(e => e.ToId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TO_ID");
            entity.Property(e => e.ToAccessrightsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TO_ACCESSRIGHTSET_ID");
            entity.Property(e => e.ToCommand)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("TO_COMMAND");
            entity.Property(e => e.ToDescr)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("TO_DESCR");
            entity.Property(e => e.ToIconfile)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TO_ICONFILE");
            entity.Property(e => e.ToKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("TO_KEY");
            entity.Property(e => e.ToTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TO_TCREATION");
            entity.Property(e => e.ToTooldefId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TO_TOOLDEF_ID");
            entity.Property(e => e.ToToolgroupId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TO_TOOLGROUP_ID");
            entity.Property(e => e.ToTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TO_TUPDATE");
            entity.Property(e => e.ToUrl)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("TO_URL");

            entity.HasOne(d => d.ToAccessrightset).WithMany(p => p.JTools)
                .HasForeignKey(d => d.ToAccessrightsetId)
                .HasConstraintName("FK_ARIGHTSET_TOOL");

            entity.HasOne(d => d.ToTooldef).WithMany(p => p.JTools)
                .HasForeignKey(d => d.ToTooldefId)
                .HasConstraintName("FK_TOOLDEF_TOOL");

            entity.HasOne(d => d.ToToolgroup).WithMany(p => p.JTools)
                .HasForeignKey(d => d.ToToolgroupId)
                .HasConstraintName("FK_TOOLGROUP_TOOL");
        });

        modelBuilder.Entity<JToolaccessright>(entity =>
        {
            entity.HasKey(e => e.ToarId).HasName("PK_TOOLACCESSRIGHT");

            entity.ToTable("J_TOOLACCESSRIGHT", "JITTOE");

            entity.HasIndex(e => e.ToarAccessobjecttypeId, "I_AOBJECTTYPE_TARIGHT");

            entity.HasIndex(e => e.ToarToolaccessrightsetId, "I_TARIGHTSET_TARIGHT");

            entity.HasIndex(e => new { e.ToarToolaccessrightsetId, e.ToarKey }, "UN_TOAR_KEY").IsUnique();

            entity.Property(e => e.ToarId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TOAR_ID");
            entity.Property(e => e.ToarAccesscategory)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("TOAR_ACCESSCATEGORY");
            entity.Property(e => e.ToarAccessobjecttypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TOAR_ACCESSOBJECTTYPE_ID");
            entity.Property(e => e.ToarDescr)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("TOAR_DESCR");
            entity.Property(e => e.ToarEnabled)
                .HasPrecision(1)
                .HasColumnName("TOAR_ENABLED");
            entity.Property(e => e.ToarKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("TOAR_KEY");
            entity.Property(e => e.ToarTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TOAR_TCREATION");
            entity.Property(e => e.ToarToolaccessrightsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TOAR_TOOLACCESSRIGHTSET_ID");
            entity.Property(e => e.ToarTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TOAR_TUPDATE");
            entity.Property(e => e.ToarType)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("TOAR_TYPE");

            entity.HasOne(d => d.ToarAccessobjecttype).WithMany(p => p.JToolaccessrights)
                .HasForeignKey(d => d.ToarAccessobjecttypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AOBJECTTYPE_TARIGHT");

            entity.HasOne(d => d.ToarToolaccessrightset).WithMany(p => p.JToolaccessrights)
                .HasForeignKey(d => d.ToarToolaccessrightsetId)
                .HasConstraintName("FK_TARIGHTSET_TARIGHT");
        });

        modelBuilder.Entity<JToolaccessrightset>(entity =>
        {
            entity.HasKey(e => e.ToarsId).HasName("PK_TOOLACCESSRIGHTSET");

            entity.ToTable("J_TOOLACCESSRIGHTSET", "JITTOE");

            entity.HasIndex(e => e.ToarsToolId, "I_TOOL_TARIGHTSET");

            entity.HasIndex(e => e.ToarsUserroleId, "I_USERROLE_TARIGHTSET");

            entity.HasIndex(e => new { e.ToarsToolId, e.ToarsUserroleId }, "UN_TOARS_KEY").IsUnique();

            entity.Property(e => e.ToarsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TOARS_ID");
            entity.Property(e => e.ToarsDescr)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("TOARS_DESCR");
            entity.Property(e => e.ToarsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TOARS_TCREATION");
            entity.Property(e => e.ToarsToolId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TOARS_TOOL_ID");
            entity.Property(e => e.ToarsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TOARS_TUPDATE");
            entity.Property(e => e.ToarsUserroleId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TOARS_USERROLE_ID");

            entity.HasOne(d => d.ToarsTool).WithMany(p => p.JToolaccessrightsets)
                .HasForeignKey(d => d.ToarsToolId)
                .HasConstraintName("FK_TOOL_TARIGHTSET");

            entity.HasOne(d => d.ToarsUserrole).WithMany(p => p.JToolaccessrightsets)
                .HasForeignKey(d => d.ToarsUserroleId)
                .HasConstraintName("FK_USERROLE_TARIGHTSET");
        });

        modelBuilder.Entity<JTooldef>(entity =>
        {
            entity.HasKey(e => e.TodId).HasName("PK_TOOLDEF");

            entity.ToTable("J_TOOLDEF", "JITTOE");

            entity.HasIndex(e => e.TodConfigdefId, "I_CONFIGDEF_TOOLDEF");

            entity.HasIndex(e => e.TodKey, "UN_TOD_KEY").IsUnique();

            entity.Property(e => e.TodId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TOD_ID");
            entity.Property(e => e.TodCommand)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("TOD_COMMAND");
            entity.Property(e => e.TodConfigdefId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TOD_CONFIGDEF_ID");
            entity.Property(e => e.TodDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TOD_DESCR");
            entity.Property(e => e.TodIsbatchjob)
                .HasPrecision(1)
                .HasColumnName("TOD_ISBATCHJOB");
            entity.Property(e => e.TodIsservice)
                .HasPrecision(1)
                .HasColumnName("TOD_ISSERVICE");
            entity.Property(e => e.TodIswebjit)
                .HasPrecision(1)
                .HasColumnName("TOD_ISWEBJIT");
            entity.Property(e => e.TodIsx11)
                .HasPrecision(1)
                .HasColumnName("TOD_ISX11");
            entity.Property(e => e.TodKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("TOD_KEY");
            entity.Property(e => e.TodTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TOD_TCREATION");
            entity.Property(e => e.TodTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TOD_TUPDATE");
            entity.Property(e => e.TodUrl)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("TOD_URL");

            entity.HasOne(d => d.TodConfigdef).WithMany(p => p.JTooldefs)
                .HasForeignKey(d => d.TodConfigdefId)
                .HasConstraintName("FK_CONFIGDEF_TOOLDEF");
        });

        modelBuilder.Entity<JTooldefpropertyset>(entity =>
        {
            entity.HasKey(e => e.TodpsId).HasName("PK_TOOLDEFPROPERTYSET");

            entity.ToTable("J_TOOLDEFPROPERTYSET", "JITTOE");

            entity.HasIndex(e => e.TodpsPropertysetId, "I_PROPERTYSET_TDPSET");

            entity.HasIndex(e => e.TodpsTooldefId, "I_TOOLDEF_TDPSET");

            entity.HasIndex(e => new { e.TodpsTooldefId, e.TodpsPropertysetId }, "UN_TODPS_KEY").IsUnique();

            entity.Property(e => e.TodpsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TODPS_ID");
            entity.Property(e => e.TodpsPropertysetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TODPS_PROPERTYSET_ID");
            entity.Property(e => e.TodpsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TODPS_TCREATION");
            entity.Property(e => e.TodpsTooldefId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TODPS_TOOLDEF_ID");

            entity.HasOne(d => d.TodpsPropertyset).WithMany(p => p.JTooldefpropertysets)
                .HasForeignKey(d => d.TodpsPropertysetId)
                .HasConstraintName("FK_PROPERTYSET_TDPSET");

            entity.HasOne(d => d.TodpsTooldef).WithMany(p => p.JTooldefpropertysets)
                .HasForeignKey(d => d.TodpsTooldefId)
                .HasConstraintName("FK_TOOLDEF_TDPSET");
        });

        modelBuilder.Entity<JToolgroup>(entity =>
        {
            entity.HasKey(e => e.TogId).HasName("PK_TOOLGROUP");

            entity.ToTable("J_TOOLGROUP", "JITTOE");

            entity.HasIndex(e => e.TogCompanyId, "I_COMPANY_TOOLGROUP");

            entity.HasIndex(e => e.TogKey, "UN_TOG_KEY").IsUnique();

            entity.Property(e => e.TogId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TOG_ID");
            entity.Property(e => e.TogCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TOG_COMPANY_ID");
            entity.Property(e => e.TogDescr)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("TOG_DESCR");
            entity.Property(e => e.TogKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("TOG_KEY");
            entity.Property(e => e.TogTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TOG_TCREATION");
            entity.Property(e => e.TogTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TOG_TUPDATE");

            entity.HasOne(d => d.TogCompany).WithMany(p => p.JToolgroups)
                .HasForeignKey(d => d.TogCompanyId)
                .HasConstraintName("FK_COMPANY_TOOLGROUP");
        });

        modelBuilder.Entity<JToolpropertyset>(entity =>
        {
            entity.HasKey(e => e.TopsId).HasName("PK_TOOLPROPERTYSET");

            entity.ToTable("J_TOOLPROPERTYSET", "JITTOE");

            entity.HasIndex(e => e.TopsPropertysetId, "I_PROPERTYSET_TPSET");

            entity.HasIndex(e => e.TopsToolId, "I_TOOL_TPSET");

            entity.HasIndex(e => new { e.TopsToolId, e.TopsPropertysetId }, "UN_TOPS_KEY").IsUnique();

            entity.Property(e => e.TopsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TOPS_ID");
            entity.Property(e => e.TopsPropertysetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TOPS_PROPERTYSET_ID");
            entity.Property(e => e.TopsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TOPS_TCREATION");
            entity.Property(e => e.TopsToolId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TOPS_TOOL_ID");

            entity.HasOne(d => d.TopsPropertyset).WithMany(p => p.JToolpropertysets)
                .HasForeignKey(d => d.TopsPropertysetId)
                .HasConstraintName("FK_PROPERTYSET_TPSET");

            entity.HasOne(d => d.TopsTool).WithMany(p => p.JToolpropertysets)
                .HasForeignKey(d => d.TopsToolId)
                .HasConstraintName("FK_TOOL_TPSET");
        });

        modelBuilder.Entity<JTour>(entity =>
        {
            entity.HasKey(e => e.TId).HasName("PK_TOUR");

            entity.ToTable("J_TOUR", "JITTOE");

            entity.HasIndex(e => e.TBorderocounterId, "I_BORDEROCOUNTER_TOUR");

            entity.HasIndex(e => e.TCarrierId, "I_COMPANYCARRIER_TOUR");

            entity.HasIndex(e => e.TDeliveryId, "I_DELIVERY_TOUR");

            entity.HasIndex(e => e.TPlanneddeliveryId, "I_PLANNEDDELIVERY_TOUR");

            entity.HasIndex(e => e.TScriptdefId, "I_SCRIPTDEF_TOUR");

            entity.HasIndex(e => e.TToursetId, "I_TOURSET_TOUR");

            entity.HasIndex(e => e.TTrucktypeId, "I_TRUCKTYPE_TOUR");

            entity.HasIndex(e => e.TUserId, "I_USER_TOUR");

            entity.HasIndex(e => new { e.TToursetId, e.TDayofweek, e.TShortname }, "UN_T_TOUR_NAME").IsUnique();

            entity.Property(e => e.TId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("T_ID");
            entity.Property(e => e.TAltname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("T_ALTNAME");
            entity.Property(e => e.TArrivaltime)
                .HasColumnType("DATE")
                .HasColumnName("T_ARRIVALTIME");
            entity.Property(e => e.TBorderocounterId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("T_BORDEROCOUNTER_ID");
            entity.Property(e => e.TCarrierId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("T_CARRIER_ID");
            entity.Property(e => e.TDayofweek)
                .HasPrecision(1)
                .HasColumnName("T_DAYOFWEEK");
            entity.Property(e => e.TDeliveryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("T_DELIVERY_ID");
            entity.Property(e => e.TDeliveryplanningtype)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasDefaultValueSql("'None'  ")
                .HasColumnName("T_DELIVERYPLANNINGTYPE");
            entity.Property(e => e.TDeparturetime)
                .HasColumnType("DATE")
                .HasColumnName("T_DEPARTURETIME");
            entity.Property(e => e.TDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("T_DESCR");
            entity.Property(e => e.TLoadingadvinminutes)
                .HasPrecision(4)
                .HasColumnName("T_LOADINGADVINMINUTES");
            entity.Property(e => e.TLoadsizex)
                .HasPrecision(9)
                .HasDefaultValueSql("0  ")
                .HasColumnName("T_LOADSIZEX");
            entity.Property(e => e.TLoadsizey)
                .HasPrecision(9)
                .HasDefaultValueSql("0  ")
                .HasColumnName("T_LOADSIZEY");
            entity.Property(e => e.TLoadsizez)
                .HasPrecision(9)
                .HasDefaultValueSql("0  ")
                .HasColumnName("T_LOADSIZEZ");
            entity.Property(e => e.TPlanneddeliveryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("T_PLANNEDDELIVERY_ID");
            entity.Property(e => e.TScriptdefId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("T_SCRIPTDEF_ID");
            entity.Property(e => e.TShortname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("T_SHORTNAME");
            entity.Property(e => e.TStatus)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("T_STATUS");
            entity.Property(e => e.TTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("T_TCREATION");
            entity.Property(e => e.TTimearrived)
                .HasColumnType("DATE")
                .HasColumnName("T_TIMEARRIVED");
            entity.Property(e => e.TTimecompleted)
                .HasColumnType("DATE")
                .HasColumnName("T_TIMECOMPLETED");
            entity.Property(e => e.TTimeestimatedarrival)
                .HasColumnType("DATE")
                .HasColumnName("T_TIMEESTIMATEDARRIVAL");
            entity.Property(e => e.TTimeplanned)
                .HasColumnType("DATE")
                .HasColumnName("T_TIMEPLANNED");
            entity.Property(e => e.TTimeprinted)
                .HasColumnType("DATE")
                .HasColumnName("T_TIMEPRINTED");
            entity.Property(e => e.TTimestaged)
                .HasColumnType("DATE")
                .HasColumnName("T_TIMESTAGED");
            entity.Property(e => e.TTimetransport)
                .HasColumnType("DATE")
                .HasColumnName("T_TIMETRANSPORT");
            entity.Property(e => e.TTimeverified)
                .HasColumnType("DATE")
                .HasColumnName("T_TIMEVERIFIED");
            entity.Property(e => e.TToursetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("T_TOURSET_ID");
            entity.Property(e => e.TTransportinminutes)
                .HasPrecision(4)
                .HasDefaultValueSql("0  ")
                .HasColumnName("T_TRANSPORTINMINUTES");
            entity.Property(e => e.TTransportmedia)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("T_TRANSPORTMEDIA");
            entity.Property(e => e.TTrucktypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("T_TRUCKTYPE_ID");
            entity.Property(e => e.TTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("T_TUPDATE");
            entity.Property(e => e.TUserId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("T_USER_ID");

            entity.HasOne(d => d.TBorderocounter).WithMany(p => p.JTours)
                .HasForeignKey(d => d.TBorderocounterId)
                .HasConstraintName("FK_BORDEROCOUNTER_TOUR");

            entity.HasOne(d => d.TCarrier).WithMany(p => p.JTours)
                .HasForeignKey(d => d.TCarrierId)
                .HasConstraintName("FK_COMPANYCARRIER_TOUR");

            entity.HasOne(d => d.TDelivery).WithMany(p => p.JTourTDeliveries)
                .HasForeignKey(d => d.TDeliveryId)
                .HasConstraintName("FK_DELIVERY_TOUR");

            entity.HasOne(d => d.TPlanneddelivery).WithMany(p => p.JTourTPlanneddeliveries)
                .HasForeignKey(d => d.TPlanneddeliveryId)
                .HasConstraintName("FK_PLANNEDDELIVERY_TOUR");

            entity.HasOne(d => d.TScriptdef).WithMany(p => p.JTours)
                .HasForeignKey(d => d.TScriptdefId)
                .HasConstraintName("FK_SCRIPTDEF_TOUR");

            entity.HasOne(d => d.TTourset).WithMany(p => p.JTours)
                .HasForeignKey(d => d.TToursetId)
                .HasConstraintName("FK_TOURSET_TOUR");

            entity.HasOne(d => d.TTrucktype).WithMany(p => p.JTours)
                .HasForeignKey(d => d.TTrucktypeId)
                .HasConstraintName("FK_TRUCKTYPE_TOUR");

            entity.HasOne(d => d.TUser).WithMany(p => p.JTours)
                .HasForeignKey(d => d.TUserId)
                .HasConstraintName("FK_USER_TOUR");
        });

        modelBuilder.Entity<JTourcontainer>(entity =>
        {
            entity.HasKey(e => e.TcnId).HasName("PK_TOURCONTAINER");

            entity.ToTable("J_TOURCONTAINER", "JITTOE");

            entity.HasIndex(e => e.TcnContainerId, "I_CONTAINER_TOURCONTAINER");

            entity.HasIndex(e => e.TcnOrigcontractId, "I_CONTRACT_TOURCONTAINER");

            entity.HasIndex(e => e.TcnOriglocationId, "I_LOCATION_TOURCONTAINER");

            entity.HasIndex(e => e.TcnPlanneddeliverynoteId, "I_PLANNEDDNOTE_TOURCNR");

            entity.HasIndex(e => e.TcnTourId, "I_TOUR_TOURCONTAINER");

            entity.HasIndex(e => new { e.TcnTourId, e.TcnContainerId }, "UN_TCN_CONTAINER").IsUnique();

            entity.Property(e => e.TcnId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TCN_ID");
            entity.Property(e => e.TcnContainerId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TCN_CONTAINER_ID");
            entity.Property(e => e.TcnLoadingorder)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("TCN_LOADINGORDER");
            entity.Property(e => e.TcnLoadlocationinfo1)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("TCN_LOADLOCATIONINFO1");
            entity.Property(e => e.TcnLoadlocationinfo2)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("TCN_LOADLOCATIONINFO2");
            entity.Property(e => e.TcnLoadlocationinfo3)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("TCN_LOADLOCATIONINFO3");
            entity.Property(e => e.TcnOrigcontractId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TCN_ORIGCONTRACT_ID");
            entity.Property(e => e.TcnOriglocationId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TCN_ORIGLOCATION_ID");
            entity.Property(e => e.TcnPlanneddeliverynoteId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TCN_PLANNEDDELIVERYNOTE_ID");
            entity.Property(e => e.TcnPosx)
                .HasPrecision(9)
                .HasDefaultValueSql("0 ")
                .HasColumnName("TCN_POSX");
            entity.Property(e => e.TcnPosy)
                .HasPrecision(9)
                .HasDefaultValueSql("0 ")
                .HasColumnName("TCN_POSY");
            entity.Property(e => e.TcnPosz)
                .HasPrecision(9)
                .HasDefaultValueSql("0 ")
                .HasColumnName("TCN_POSZ");
            entity.Property(e => e.TcnSizex)
                .HasPrecision(9)
                .HasDefaultValueSql("0 ")
                .HasColumnName("TCN_SIZEX");
            entity.Property(e => e.TcnSizey)
                .HasPrecision(9)
                .HasDefaultValueSql("0 ")
                .HasColumnName("TCN_SIZEY");
            entity.Property(e => e.TcnSizez)
                .HasPrecision(9)
                .HasDefaultValueSql("0 ")
                .HasColumnName("TCN_SIZEZ");
            entity.Property(e => e.TcnStagingorder)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("TCN_STAGINGORDER");
            entity.Property(e => e.TcnTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TCN_TCREATION");
            entity.Property(e => e.TcnTimeloaded)
                .HasColumnType("DATE")
                .HasColumnName("TCN_TIMELOADED");
            entity.Property(e => e.TcnTimereplaced)
                .HasColumnType("DATE")
                .HasColumnName("TCN_TIMEREPLACED");
            entity.Property(e => e.TcnTimestaged)
                .HasColumnType("DATE")
                .HasColumnName("TCN_TIMESTAGED");
            entity.Property(e => e.TcnTimeverified)
                .HasColumnType("DATE")
                .HasColumnName("TCN_TIMEVERIFIED");
            entity.Property(e => e.TcnTourId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TCN_TOUR_ID");

            entity.HasOne(d => d.TcnContainer).WithMany(p => p.JTourcontainers)
                .HasForeignKey(d => d.TcnContainerId)
                .HasConstraintName("FK_CONTAINER_TOURCONTAINER");

            entity.HasOne(d => d.TcnOrigcontract).WithMany(p => p.JTourcontainers)
                .HasForeignKey(d => d.TcnOrigcontractId)
                .HasConstraintName("FK_CONTRACT_TOURCONTAINER");

            entity.HasOne(d => d.TcnOriglocation).WithMany(p => p.JTourcontainers)
                .HasForeignKey(d => d.TcnOriglocationId)
                .HasConstraintName("FK_LOCATION_TOURCONTAINER");

            entity.HasOne(d => d.TcnPlanneddeliverynote).WithMany(p => p.JTourcontainers)
                .HasForeignKey(d => d.TcnPlanneddeliverynoteId)
                .HasConstraintName("FK_PLANNEDDNOTE_TOURCNR");

            entity.HasOne(d => d.TcnTour).WithMany(p => p.JTourcontainers)
                .HasForeignKey(d => d.TcnTourId)
                .HasConstraintName("FK_TOUR_TOURCONTAINER");
        });

        modelBuilder.Entity<JTourcontainerdemand>(entity =>
        {
            entity.HasKey(e => e.TcndId).HasName("PK_TOURCONTAINERDEMAND");

            entity.ToTable("J_TOURCONTAINERDEMAND", "JITTOE");

            entity.HasIndex(e => e.TcndDemandId, "I_DEMAND_TCDEMAND");

            entity.HasIndex(e => e.TcndTourcontainerId, "I_TOURCONTAINER_TCDEMAND");

            entity.Property(e => e.TcndId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TCND_ID");
            entity.Property(e => e.TcndDemandId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TCND_DEMAND_ID");
            entity.Property(e => e.TcndTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TCND_TCREATION");
            entity.Property(e => e.TcndTourcontainerId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TCND_TOURCONTAINER_ID");

            entity.HasOne(d => d.TcndDemand).WithMany(p => p.JTourcontainerdemands)
                .HasForeignKey(d => d.TcndDemandId)
                .HasConstraintName("FK_DEMAND_TCDEMAND");

            entity.HasOne(d => d.TcndTourcontainer).WithMany(p => p.JTourcontainerdemands)
                .HasForeignKey(d => d.TcndTourcontainerId)
                .HasConstraintName("FK_TOURCONTAINER_TCDEMAND");
        });

        modelBuilder.Entity<JToureventcfg>(entity =>
        {
            entity.HasKey(e => e.TevcId).HasName("PK_TOUREVENTCFG");

            entity.ToTable("J_TOUREVENTCFG", "JITTOE");

            entity.HasIndex(e => e.TevcToursetId, "I_TOURSET_TOUREVENTCFG");

            entity.HasIndex(e => e.TevcTourtemplateId, "I_TTEMPLATE_TOUREVENTCFG");

            entity.HasIndex(e => e.TevcKey, "UN_TEVC_KEY").IsUnique();

            entity.Property(e => e.TevcId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TEVC_ID");
            entity.Property(e => e.TevcCategory)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasDefaultValueSql("'LoadByLoadPlan'  ")
                .HasColumnName("TEVC_CATEGORY");
            entity.Property(e => e.TevcDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TEVC_DESCR");
            entity.Property(e => e.TevcKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("TEVC_KEY");
            entity.Property(e => e.TevcTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TEVC_TCREATION");
            entity.Property(e => e.TevcToursetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TEVC_TOURSET_ID");
            entity.Property(e => e.TevcTourtemplateId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TEVC_TOURTEMPLATE_ID");
            entity.Property(e => e.TevcTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TEVC_TUPDATE");

            entity.HasOne(d => d.TevcTourset).WithMany(p => p.JToureventcfgs)
                .HasForeignKey(d => d.TevcToursetId)
                .HasConstraintName("FK_TOURSET_TOUREVENTCFG");

            entity.HasOne(d => d.TevcTourtemplate).WithMany(p => p.JToureventcfgs)
                .HasForeignKey(d => d.TevcTourtemplateId)
                .HasConstraintName("FK_TTEMPLATE_TOUREVENTCFG");
        });

        modelBuilder.Entity<JToureventcfgcontract>(entity =>
        {
            entity.HasKey(e => e.TevccId).HasName("PK_TOUREVENTCFGCONTRACT");

            entity.ToTable("J_TOUREVENTCFGCONTRACT", "JITTOE");

            entity.HasIndex(e => e.TevccContractId, "I_TECCONTRACT_CONTRACT");

            entity.HasIndex(e => e.TevccOrdereventcfgId, "I_TECCONTRACT_OEVC");

            entity.HasIndex(e => e.TevccToureventcfgId, "I_TOUREVENTCFG_TECCONTRACT");

            entity.HasIndex(e => new { e.TevccToureventcfgId, e.TevccContractId }, "UN_TEVCC_CONTRACTOEVC").IsUnique();

            entity.Property(e => e.TevccId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TEVCC_ID");
            entity.Property(e => e.TevccContractId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TEVCC_CONTRACT_ID");
            entity.Property(e => e.TevccOrdereventcfgId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TEVCC_ORDEREVENTCFG_ID");
            entity.Property(e => e.TevccTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TEVCC_TCREATION");
            entity.Property(e => e.TevccToureventcfgId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TEVCC_TOUREVENTCFG_ID");

            entity.HasOne(d => d.TevccContract).WithMany(p => p.JToureventcfgcontracts)
                .HasForeignKey(d => d.TevccContractId)
                .HasConstraintName("FK_TECCONTRACT_CONTRACT");

            entity.HasOne(d => d.TevccOrdereventcfg).WithMany(p => p.JToureventcfgcontracts)
                .HasForeignKey(d => d.TevccOrdereventcfgId)
                .HasConstraintName("FK_TECCONTRACT_OEVC");

            entity.HasOne(d => d.TevccToureventcfg).WithMany(p => p.JToureventcfgcontracts)
                .HasForeignKey(d => d.TevccToureventcfgId)
                .HasConstraintName("FK_TOUREVENTCFG_TECCONTRACT");
        });

        modelBuilder.Entity<JToureventcfgparam>(entity =>
        {
            entity.HasKey(e => e.TevcpId).HasName("PK_TOUREVENTCFGPARAM");

            entity.ToTable("J_TOUREVENTCFGPARAM", "JITTOE");

            entity.HasIndex(e => e.TevcpToureventcfgId, "I_TOUREVC_TOUREVCPARAM");

            entity.HasIndex(e => new { e.TevcpToureventcfgId, e.TevcpName }, "UN_TEVCP_PARAM_NAME").IsUnique();

            entity.Property(e => e.TevcpId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TEVCP_ID");
            entity.Property(e => e.TevcpDefaultvalue)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("TEVCP_DEFAULTVALUE");
            entity.Property(e => e.TevcpDescr)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("TEVCP_DESCR");
            entity.Property(e => e.TevcpIseditable)
                .HasPrecision(1)
                .HasColumnName("TEVCP_ISEDITABLE");
            entity.Property(e => e.TevcpName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TEVCP_NAME");
            entity.Property(e => e.TevcpTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TEVCP_TCREATION");
            entity.Property(e => e.TevcpToureventcfgId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TEVCP_TOUREVENTCFG_ID");
            entity.Property(e => e.TevcpTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TEVCP_TUPDATE");

            entity.HasOne(d => d.TevcpToureventcfg).WithMany(p => p.JToureventcfgparams)
                .HasForeignKey(d => d.TevcpToureventcfgId)
                .HasConstraintName("FK_TOUREVC_TOUREVCPARAM");
        });

        modelBuilder.Entity<JTourinfo>(entity =>
        {
            entity.HasKey(e => e.TiId).HasName("PK_TOURINFO");

            entity.ToTable("J_TOURINFO", "JITTOE");

            entity.HasIndex(e => e.TiTourId, "I_TOUR_TOURINFO");

            entity.HasIndex(e => new { e.TiTourId, e.TiType, e.TiKey }, "UN_TI_INFO").IsUnique();

            entity.Property(e => e.TiId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TI_ID");
            entity.Property(e => e.TiKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("TI_KEY");
            entity.Property(e => e.TiStringvalue)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("TI_STRINGVALUE");
            entity.Property(e => e.TiTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TI_TCREATION");
            entity.Property(e => e.TiTimevalue)
                .HasColumnType("DATE")
                .HasColumnName("TI_TIMEVALUE");
            entity.Property(e => e.TiTourId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TI_TOUR_ID");
            entity.Property(e => e.TiTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TI_TUPDATE");
            entity.Property(e => e.TiType)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("TI_TYPE");

            entity.HasOne(d => d.TiTour).WithMany(p => p.JTourinfos)
                .HasForeignKey(d => d.TiTourId)
                .HasConstraintName("FK_TOUR_TOURINFO");
        });

        modelBuilder.Entity<JTourset>(entity =>
        {
            entity.HasKey(e => e.TsId).HasName("PK_TOURSET");

            entity.ToTable("J_TOURSET", "JITTOE");

            entity.HasIndex(e => e.TsAdvdemandcategoryId, "I_ADVDC_TOURSET");

            entity.HasIndex(e => e.TsCompanyId, "I_COMPANY_TOURSET");

            entity.HasIndex(e => e.TsDemandcategoryId, "I_DEMANDCATEGORY_TOURSET");

            entity.HasIndex(e => e.TsDoccfgId, "I_DOCCFG_TOURSET");

            entity.HasIndex(e => e.TsKey, "UN_TS_KEY").IsUnique();

            entity.Property(e => e.TsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TS_ID");
            entity.Property(e => e.TsAdvdemandcategoryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TS_ADVDEMANDCATEGORY_ID");
            entity.Property(e => e.TsCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TS_COMPANY_ID");
            entity.Property(e => e.TsDemandcategoryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TS_DEMANDCATEGORY_ID");
            entity.Property(e => e.TsDescr)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("TS_DESCR");
            entity.Property(e => e.TsDoccfgId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TS_DOCCFG_ID");
            entity.Property(e => e.TsKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("TS_KEY");
            entity.Property(e => e.TsMaxlocations)
                .HasPrecision(4)
                .HasColumnName("TS_MAXLOCATIONS");
            entity.Property(e => e.TsSchedule)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("TS_SCHEDULE");
            entity.Property(e => e.TsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TS_TCREATION");
            entity.Property(e => e.TsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TS_TUPDATE");

            entity.HasOne(d => d.TsAdvdemandcategory).WithMany(p => p.JToursetTsAdvdemandcategories)
                .HasForeignKey(d => d.TsAdvdemandcategoryId)
                .HasConstraintName("FK_ADVDC_TOURSET");

            entity.HasOne(d => d.TsCompany).WithMany(p => p.JToursets)
                .HasForeignKey(d => d.TsCompanyId)
                .HasConstraintName("FK_COMPANY_TOURSET");

            entity.HasOne(d => d.TsDemandcategory).WithMany(p => p.JToursetTsDemandcategories)
                .HasForeignKey(d => d.TsDemandcategoryId)
                .HasConstraintName("FK_DEMANDCATEGORY_TOURSET");

            entity.HasOne(d => d.TsDoccfg).WithMany(p => p.JToursets)
                .HasForeignKey(d => d.TsDoccfgId)
                .HasConstraintName("FK_DOCCFG_TOURSET");
        });

        modelBuilder.Entity<JTourtemplate>(entity =>
        {
            entity.HasKey(e => e.TteId).HasName("PK_TOURTEMPLATE");

            entity.ToTable("J_TOURTEMPLATE", "JITTOE");

            entity.HasIndex(e => e.TteBorderocounterId, "I_BORDEROCOUNTER_TTEMPLATE");

            entity.HasIndex(e => e.TteCarrierId, "I_COMPANYCARRIER_TTEMPLATE");

            entity.HasIndex(e => e.TteComponentdefId, "I_COMPONENTDEF_TTEMPLATE");

            entity.HasIndex(e => e.TteScriptdefId, "I_SCRIPTDEF_TTEMPLATE");

            entity.HasIndex(e => e.TteShortnameId, "I_SHORTNAMECOUNTER_TTEMPLATE");

            entity.HasIndex(e => e.TteToursetId, "I_TOURSET_TTEMPLATE");

            entity.HasIndex(e => e.TteTrucktypeId, "I_TRUCKTYPE_TTEMPLATE");

            entity.HasIndex(e => e.TteKey, "UN_TTE_KEY").IsUnique();

            entity.Property(e => e.TteId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TTE_ID");
            entity.Property(e => e.TteBorderocounterId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TTE_BORDEROCOUNTER_ID");
            entity.Property(e => e.TteCarrierId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TTE_CARRIER_ID");
            entity.Property(e => e.TteComponentdefId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TTE_COMPONENTDEF_ID");
            entity.Property(e => e.TteDescr)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("TTE_DESCR");
            entity.Property(e => e.TteKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("TTE_KEY");
            entity.Property(e => e.TteLoadingadvinminutes)
                .HasPrecision(4)
                .HasColumnName("TTE_LOADINGADVINMINUTES");
            entity.Property(e => e.TteLoadsizex)
                .HasPrecision(9)
                .HasDefaultValueSql("0  ")
                .HasColumnName("TTE_LOADSIZEX");
            entity.Property(e => e.TteLoadsizey)
                .HasPrecision(9)
                .HasDefaultValueSql("0  ")
                .HasColumnName("TTE_LOADSIZEY");
            entity.Property(e => e.TteLoadsizez)
                .HasPrecision(9)
                .HasDefaultValueSql("0  ")
                .HasColumnName("TTE_LOADSIZEZ");
            entity.Property(e => e.TteScriptdefId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TTE_SCRIPTDEF_ID");
            entity.Property(e => e.TteShortnameId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TTE_SHORTNAME_ID");
            entity.Property(e => e.TteTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TTE_TCREATION");
            entity.Property(e => e.TteTourdescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TTE_TOURDESCR");
            entity.Property(e => e.TteToursetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TTE_TOURSET_ID");
            entity.Property(e => e.TteTransportinminutes)
                .HasPrecision(4)
                .HasDefaultValueSql("0  ")
                .HasColumnName("TTE_TRANSPORTINMINUTES");
            entity.Property(e => e.TteTransportmedia)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("TTE_TRANSPORTMEDIA");
            entity.Property(e => e.TteTrucktypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TTE_TRUCKTYPE_ID");
            entity.Property(e => e.TteTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TTE_TUPDATE");

            entity.HasOne(d => d.TteBorderocounter).WithMany(p => p.JTourtemplateTteBorderocounters)
                .HasForeignKey(d => d.TteBorderocounterId)
                .HasConstraintName("FK_BORDEROCOUNTER_TTEMPLATE");

            entity.HasOne(d => d.TteCarrier).WithMany(p => p.JTourtemplates)
                .HasForeignKey(d => d.TteCarrierId)
                .HasConstraintName("FK_COMPANYCARRIER_TTEMPLATE");

            entity.HasOne(d => d.TteComponentdef).WithMany(p => p.JTourtemplates)
                .HasForeignKey(d => d.TteComponentdefId)
                .HasConstraintName("FK_COMPONENTDEF_TTEMPLATE");

            entity.HasOne(d => d.TteScriptdef).WithMany(p => p.JTourtemplates)
                .HasForeignKey(d => d.TteScriptdefId)
                .HasConstraintName("FK_SCRIPTDEF_TTEMPLATE");

            entity.HasOne(d => d.TteShortname).WithMany(p => p.JTourtemplateTteShortnames)
                .HasForeignKey(d => d.TteShortnameId)
                .HasConstraintName("FK_SHORTNAMECOUNTER_TTEMPLATE");

            entity.HasOne(d => d.TteTourset).WithMany(p => p.JTourtemplates)
                .HasForeignKey(d => d.TteToursetId)
                .HasConstraintName("FK_TOURSET_TTEMPLATE");

            entity.HasOne(d => d.TteTrucktype).WithMany(p => p.JTourtemplates)
                .HasForeignKey(d => d.TteTrucktypeId)
                .HasConstraintName("FK_TRUCKTYPE_TTEMPLATE");
        });

        modelBuilder.Entity<JTourtemplateinfo>(entity =>
        {
            entity.HasKey(e => e.TteiId).HasName("PK_TOURTEMPLATEINFO");

            entity.ToTable("J_TOURTEMPLATEINFO", "JITTOE");

            entity.HasIndex(e => e.TteiTourtemplateId, "I_TTEMPLATE_TTEMPLATEINFO");

            entity.HasIndex(e => new { e.TteiTourtemplateId, e.TteiType, e.TteiKey }, "UN_TTEI_INFO").IsUnique();

            entity.Property(e => e.TteiId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TTEI_ID");
            entity.Property(e => e.TteiKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("TTEI_KEY");
            entity.Property(e => e.TteiStringvalue)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("TTEI_STRINGVALUE");
            entity.Property(e => e.TteiTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TTEI_TCREATION");
            entity.Property(e => e.TteiTimevalue)
                .HasColumnType("DATE")
                .HasColumnName("TTEI_TIMEVALUE");
            entity.Property(e => e.TteiTourtemplateId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TTEI_TOURTEMPLATE_ID");
            entity.Property(e => e.TteiTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TTEI_TUPDATE");
            entity.Property(e => e.TteiType)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("TTEI_TYPE");

            entity.HasOne(d => d.TteiTourtemplate).WithMany(p => p.JTourtemplateinfos)
                .HasForeignKey(d => d.TteiTourtemplateId)
                .HasConstraintName("FK_TTEMPLATE_TTEMPLATEINFO");
        });

        modelBuilder.Entity<JTransferconnclass>(entity =>
        {
            entity.HasKey(e => e.TcclId).HasName("PK_TRANSFERCONNCLASS");

            entity.ToTable("J_TRANSFERCONNCLASS", "JITTOE");

            entity.HasIndex(e => e.TcclCompanyId, "I_COMPANY_TCONNCLASS");

            entity.HasIndex(e => e.TcclKey, "UN_TCCL_KEY").IsUnique();

            entity.Property(e => e.TcclId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TCCL_ID");
            entity.Property(e => e.TcclCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TCCL_COMPANY_ID");
            entity.Property(e => e.TcclDescr)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("TCCL_DESCR");
            entity.Property(e => e.TcclKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("TCCL_KEY");
            entity.Property(e => e.TcclTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TCCL_TCREATION");
            entity.Property(e => e.TcclTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TCCL_TUPDATE");

            entity.HasOne(d => d.TcclCompany).WithMany(p => p.JTransferconnclasses)
                .HasForeignKey(d => d.TcclCompanyId)
                .HasConstraintName("FK_COMPANY_TCONNCLASS");
        });

        modelBuilder.Entity<JTransferconnclassm>(entity =>
        {
            entity.HasKey(e => e.TcclmId).HasName("PK_TRANSFERCONNCLASSM");

            entity.ToTable("J_TRANSFERCONNCLASSM", "JITTOE");

            entity.HasIndex(e => e.TcclmTransferconnclassId, "I_TCONNCLASS_TCONNCLASSM");

            entity.HasIndex(e => e.TcclmTransferconnectionId, "I_TCONN_TCONNCLASSM");

            entity.HasIndex(e => new { e.TcclmTransferconnectionId, e.TcclmTransferconnclassId }, "UN_TCCLM_KEY").IsUnique();

            entity.Property(e => e.TcclmId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TCCLM_ID");
            entity.Property(e => e.TcclmTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TCCLM_TCREATION");
            entity.Property(e => e.TcclmTransferconnclassId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TCCLM_TRANSFERCONNCLASS_ID");
            entity.Property(e => e.TcclmTransferconnectionId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TCCLM_TRANSFERCONNECTION_ID");
            entity.Property(e => e.TcclmTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TCCLM_TUPDATE");

            entity.HasOne(d => d.TcclmTransferconnclass).WithMany(p => p.JTransferconnclassms)
                .HasForeignKey(d => d.TcclmTransferconnclassId)
                .HasConstraintName("FK_TCONNCLASS_TCONNCLASSM");

            entity.HasOne(d => d.TcclmTransferconnection).WithMany(p => p.JTransferconnclassms)
                .HasForeignKey(d => d.TcclmTransferconnectionId)
                .HasConstraintName("FK_TCONN_TCONNCLASSM");
        });

        modelBuilder.Entity<JTransferconnection>(entity =>
        {
            entity.HasKey(e => e.TcId).HasName("PK_TRANSFERCONNECTION");

            entity.ToTable("J_TRANSFERCONNECTION", "JITTOE");

            entity.HasIndex(e => e.TcCompanyId, "I_COMPANY_TCONN");

            entity.HasIndex(e => e.TcOthercompanyId, "I_COMPANY_TRANSFERCONNECTION");

            entity.HasIndex(e => e.TcConfigdefId, "I_CONFIGDEF_TCONN");

            entity.HasIndex(e => e.TcKey, "UN_TC_KEY").IsUnique();

            entity.Property(e => e.TcId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TC_ID");
            entity.Property(e => e.TcBlockexternal)
                .HasPrecision(1)
                .HasColumnName("TC_BLOCKEXTERNAL");
            entity.Property(e => e.TcBlockinternal)
                .HasPrecision(1)
                .HasColumnName("TC_BLOCKINTERNAL");
            entity.Property(e => e.TcCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TC_COMPANY_ID");
            entity.Property(e => e.TcConfigdefId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TC_CONFIGDEF_ID");
            entity.Property(e => e.TcDatatype)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("TC_DATATYPE");
            entity.Property(e => e.TcDatatypeadd)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("TC_DATATYPEADD");
            entity.Property(e => e.TcDescr)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("TC_DESCR");
            entity.Property(e => e.TcDirection)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("TC_DIRECTION");
            entity.Property(e => e.TcExternalcharencoding)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TC_EXTERNALCHARENCODING");
            entity.Property(e => e.TcHandler)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("TC_HANDLER");
            entity.Property(e => e.TcInternalcharencoding)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TC_INTERNALCHARENCODING");
            entity.Property(e => e.TcKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("TC_KEY");
            entity.Property(e => e.TcLastevent)
                .HasColumnType("DATE")
                .HasColumnName("TC_LASTEVENT");
            entity.Property(e => e.TcLasteventid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TC_LASTEVENTID");
            entity.Property(e => e.TcLastfileno)
                .HasPrecision(8)
                .HasColumnName("TC_LASTFILENO");
            entity.Property(e => e.TcLasttransmissionno)
                .HasPrecision(9)
                .HasColumnName("TC_LASTTRANSMISSIONNO");
            entity.Property(e => e.TcMaxageindays)
                .HasPrecision(5)
                .HasColumnName("TC_MAXAGEINDAYS");
            entity.Property(e => e.TcNotificationtype)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasDefaultValueSql("'None'  ")
                .HasColumnName("TC_NOTIFICATIONTYPE");
            entity.Property(e => e.TcOthercompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TC_OTHERCOMPANY_ID");
            entity.Property(e => e.TcPacketcoding)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("TC_PACKETCODING");
            entity.Property(e => e.TcProtocol)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("TC_PROTOCOL");
            entity.Property(e => e.TcTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TC_TCREATION");
            entity.Property(e => e.TcTransmissionnotype)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TC_TRANSMISSIONNOTYPE");
            entity.Property(e => e.TcTransport)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("TC_TRANSPORT");
            entity.Property(e => e.TcTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TC_TUPDATE");

            entity.HasOne(d => d.TcCompany).WithMany(p => p.JTransferconnectionTcCompanies)
                .HasForeignKey(d => d.TcCompanyId)
                .HasConstraintName("FK_COMPANY_TCONN");

            entity.HasOne(d => d.TcConfigdef).WithMany(p => p.JTransferconnections)
                .HasForeignKey(d => d.TcConfigdefId)
                .HasConstraintName("FK_CONFIGDEF_TCONN");

            entity.HasOne(d => d.TcOthercompany).WithMany(p => p.JTransferconnectionTcOthercompanies)
                .HasForeignKey(d => d.TcOthercompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPANY_TRANSFERCONNECTION");
        });

        modelBuilder.Entity<JTransfercontrol>(entity =>
        {
            entity.HasKey(e => e.TctrlId).HasName("PK_TRANSFERCONTROL");

            entity.ToTable("J_TRANSFERCONTROL", "JITTOE");

            entity.HasIndex(e => e.TctrlAlerttypeId, "I_ALERTTYPE_CONTROL");

            entity.HasIndex(e => e.TctrlCalendarId, "I_CALENDAR_CONTROL");

            entity.HasIndex(e => e.TctrlConnectionId, "I_TRANSFERCONN_CONTROL");

            entity.HasIndex(e => new { e.TctrlConnectionId, e.TctrlKeyinconnection }, "UN_TCTRL_CONNECTION_KEY").IsUnique();

            entity.Property(e => e.TctrlId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TCTRL_ID");
            entity.Property(e => e.TctrlAlerttypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TCTRL_ALERTTYPE_ID");
            entity.Property(e => e.TctrlCalendarId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TCTRL_CALENDAR_ID");
            entity.Property(e => e.TctrlCheckidletime)
                .HasPrecision(1)
                .HasColumnName("TCTRL_CHECKIDLETIME");
            entity.Property(e => e.TctrlConnectionId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TCTRL_CONNECTION_ID");
            entity.Property(e => e.TctrlDescr)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("TCTRL_DESCR");
            entity.Property(e => e.TctrlEnabled)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("1  ")
                .HasColumnName("TCTRL_ENABLED");
            entity.Property(e => e.TctrlInterface)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValueSql("'Internal' ")
                .HasColumnName("TCTRL_INTERFACE");
            entity.Property(e => e.TctrlIntervalinminutes)
                .HasPrecision(5)
                .HasColumnName("TCTRL_INTERVALINMINUTES");
            entity.Property(e => e.TctrlKeyinconnection)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("TCTRL_KEYINCONNECTION");
            entity.Property(e => e.TctrlMaxidletimeinminutes)
                .HasPrecision(5)
                .HasColumnName("TCTRL_MAXIDLETIMEINMINUTES");
            entity.Property(e => e.TctrlMode)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasDefaultValueSql("'CheckIdleTime'  ")
                .HasColumnName("TCTRL_MODE");
            entity.Property(e => e.TctrlMsgcontext)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TCTRL_MSGCONTEXT");
            entity.Property(e => e.TctrlNotifyactivity)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("0 ")
                .HasColumnName("TCTRL_NOTIFYACTIVITY");
            entity.Property(e => e.TctrlPacketdatarx)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasColumnName("TCTRL_PACKETDATARX");
            entity.Property(e => e.TctrlPacketidlastcheck)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TCTRL_PACKETIDLASTCHECK");
            entity.Property(e => e.TctrlPacketidlastmatch)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TCTRL_PACKETIDLASTMATCH");
            entity.Property(e => e.TctrlTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TCTRL_TCREATION");
            entity.Property(e => e.TctrlTimelastcheck)
                .HasColumnType("DATE")
                .HasColumnName("TCTRL_TIMELASTCHECK");
            entity.Property(e => e.TctrlTimelastmatch)
                .HasColumnType("DATE")
                .HasColumnName("TCTRL_TIMELASTMATCH");
            entity.Property(e => e.TctrlTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TCTRL_TUPDATE");

            entity.HasOne(d => d.TctrlAlerttype).WithMany(p => p.JTransfercontrols)
                .HasForeignKey(d => d.TctrlAlerttypeId)
                .HasConstraintName("FK_ALERTTYPE_CONTROL");

            entity.HasOne(d => d.TctrlCalendar).WithMany(p => p.JTransfercontrols)
                .HasForeignKey(d => d.TctrlCalendarId)
                .HasConstraintName("FK_CALENDAR_CONTROL");

            entity.HasOne(d => d.TctrlConnection).WithMany(p => p.JTransfercontrols)
                .HasForeignKey(d => d.TctrlConnectionId)
                .HasConstraintName("FK_TRANSFERCONN_CONTROL");
        });

        modelBuilder.Entity<JTransfercpacket>(entity =>
        {
            entity.HasKey(e => e.TcpId).HasName("PK_TRANSFERCPACKET");

            entity.ToTable("J_TRANSFERCPACKET", "JITTOE");

            entity.HasIndex(e => new { e.TcpConnectionId, e.TcpId }, "I_TCP_PACKETID");

            entity.HasIndex(e => e.TcpTcreation, "I_TCP_TCREATION");

            entity.Property(e => e.TcpId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TCP_ID");
            entity.Property(e => e.TcpConnectionId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TCP_CONNECTION_ID");
            entity.Property(e => e.TcpCsize)
                .HasPrecision(9)
                .HasColumnName("TCP_CSIZE");
            entity.Property(e => e.TcpData)
                .HasColumnType("LONG RAW")
                .HasColumnName("TCP_DATA");
            entity.Property(e => e.TcpExternalname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TCP_EXTERNALNAME");
            entity.Property(e => e.TcpLines)
                .HasPrecision(9)
                .HasColumnName("TCP_LINES");
            entity.Property(e => e.TcpQualifier1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TCP_QUALIFIER1");
            entity.Property(e => e.TcpQualifier2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TCP_QUALIFIER2");
            entity.Property(e => e.TcpSize)
                .HasPrecision(9)
                .HasColumnName("TCP_SIZE");
            entity.Property(e => e.TcpTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TCP_TCREATION");
            entity.Property(e => e.TcpTimetransferred)
                .HasColumnType("DATE")
                .HasColumnName("TCP_TIMETRANSFERRED");
            entity.Property(e => e.TcpTransferrefno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TCP_TRANSFERREFNO");

            entity.HasOne(d => d.TcpConnection).WithMany(p => p.JTransfercpackets)
                .HasForeignKey(d => d.TcpConnectionId)
                .HasConstraintName("FK_TRANSFERCONNECTION_CPACKET");
        });

        modelBuilder.Entity<JTransfercpacketdone>(entity =>
        {
            entity.HasKey(e => e.TcpdId).HasName("PK_TRANSFERCPACKETDONE");

            entity.ToTable("J_TRANSFERCPACKETDONE", "JITTOE");

            entity.HasIndex(e => e.TcpdConnectionId, "I_TRANSFERCONN_CPACKETDONE");

            entity.HasIndex(e => new { e.TcpdConnectionId, e.TcpdFilename }, "UN_TCPD_FILENAME").IsUnique();

            entity.Property(e => e.TcpdId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TCPD_ID");
            entity.Property(e => e.TcpdConnectionId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TCPD_CONNECTION_ID");
            entity.Property(e => e.TcpdFilename)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TCPD_FILENAME");
            entity.Property(e => e.TcpdTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TCPD_TCREATION");

            entity.HasOne(d => d.TcpdConnection).WithMany(p => p.JTransfercpacketdones)
                .HasForeignKey(d => d.TcpdConnectionId)
                .HasConstraintName("FK_TRANSFERCONN_CPACKETDONE");
        });

        modelBuilder.Entity<JTransfercpacketmessage>(entity =>
        {
            entity.HasKey(e => e.TcpmId).HasName("PK_TRANSFERCPACKETMESSAGE");

            entity.ToTable("J_TRANSFERCPACKETMESSAGE", "JITTOE");

            entity.HasIndex(e => e.TcpmCpacketId, "I_TRANSFERCPACKET_MESSAGE");

            entity.Property(e => e.TcpmId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TCPM_ID");
            entity.Property(e => e.TcpmCpacketId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TCPM_CPACKET_ID");
            entity.Property(e => e.TcpmLine)
                .HasPrecision(9)
                .HasColumnName("TCPM_LINE");
            entity.Property(e => e.TcpmTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TCPM_TCREATION");
            entity.Property(e => e.TcpmText)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasColumnName("TCPM_TEXT");

            entity.HasOne(d => d.TcpmCpacket).WithMany(p => p.JTransfercpacketmessages)
                .HasForeignKey(d => d.TcpmCpacketId)
                .HasConstraintName("FK_TRANSFERCPACKET_MESSAGE");
        });

        modelBuilder.Entity<JTransfercpacketref>(entity =>
        {
            entity.HasKey(e => e.TcprId).HasName("PK_TRANSFERCPACKETREF");

            entity.ToTable("J_TRANSFERCPACKETREF", "JITTOE");

            entity.HasIndex(e => e.TcprCpacketId, "I_TRANSFERCPACKET_REF");

            entity.Property(e => e.TcprId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TCPR_ID");
            entity.Property(e => e.TcprCpacketId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TCPR_CPACKET_ID");
            entity.Property(e => e.TcprObjectclassname)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("TCPR_OBJECTCLASSNAME");
            entity.Property(e => e.TcprObjectid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TCPR_OBJECTID");
            entity.Property(e => e.TcprObjectinfo1)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("TCPR_OBJECTINFO1");
            entity.Property(e => e.TcprObjectinfo2)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("TCPR_OBJECTINFO2");
            entity.Property(e => e.TcprRoleinfo1)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("TCPR_ROLEINFO1");
            entity.Property(e => e.TcprRoleinfo2)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("TCPR_ROLEINFO2");
            entity.Property(e => e.TcprTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TCPR_TCREATION");

            entity.HasOne(d => d.TcprCpacket).WithMany(p => p.JTransfercpacketrefs)
                .HasForeignKey(d => d.TcprCpacketId)
                .HasConstraintName("FK_TRANSFERCPACKET_REF");
        });

        modelBuilder.Entity<JTransfercpacketstatus>(entity =>
        {
            entity.HasKey(e => e.TcpsId).HasName("PK_TRANSFERCPACKETSTATUS");

            entity.ToTable("J_TRANSFERCPACKETSTATUS", "JITTOE");

            entity.HasIndex(e => e.TcpsNewcount, "I_TCPS_NEWCOUNT");

            entity.HasIndex(e => e.TcpsPendingcount, "I_TCPS_PENDINGCOUNT");

            entity.HasIndex(e => e.TcpsCpacketId, "UN_TCPS_CPACKET").IsUnique();

            entity.Property(e => e.TcpsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TCPS_ID");
            entity.Property(e => e.TcpsCpacketId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TCPS_CPACKET_ID");
            entity.Property(e => e.TcpsCsize)
                .HasPrecision(9)
                .HasColumnName("TCPS_CSIZE");
            entity.Property(e => e.TcpsData)
                .HasColumnType("LONG RAW")
                .HasColumnName("TCPS_DATA");
            entity.Property(e => e.TcpsDonecount)
                .HasPrecision(9)
                .HasColumnName("TCPS_DONECOUNT");
            entity.Property(e => e.TcpsErrorcount)
                .HasPrecision(9)
                .HasColumnName("TCPS_ERRORCOUNT");
            entity.Property(e => e.TcpsIgnoredcount)
                .HasPrecision(9)
                .HasColumnName("TCPS_IGNOREDCOUNT");
            entity.Property(e => e.TcpsNewcount)
                .HasPrecision(9)
                .HasColumnName("TCPS_NEWCOUNT");
            entity.Property(e => e.TcpsPendingcount)
                .HasPrecision(9)
                .HasColumnName("TCPS_PENDINGCOUNT");
            entity.Property(e => e.TcpsSize)
                .HasPrecision(9)
                .HasColumnName("TCPS_SIZE");
            entity.Property(e => e.TcpsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TCPS_TCREATION");
            entity.Property(e => e.TcpsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TCPS_TUPDATE");

            entity.HasOne(d => d.TcpsCpacket).WithOne(p => p.JTransfercpacketstatus)
                .HasForeignKey<JTransfercpacketstatus>(d => d.TcpsCpacketId)
                .HasConstraintName("FK_TRANSFERCPACKET_CSTATUS");
        });

        modelBuilder.Entity<JTransfermessage>(entity =>
        {
            entity.HasKey(e => e.TmId).HasName("PK_TRANSFERMESSAGE");

            entity.ToTable("J_TRANSFERMESSAGE", "JITTOE");

            entity.HasIndex(e => e.TmRecordId, "I_TRANSFERRECORD_MESSAGE");

            entity.Property(e => e.TmId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TM_ID");
            entity.Property(e => e.TmRecordId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TM_RECORD_ID");
            entity.Property(e => e.TmTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TM_TCREATION");
            entity.Property(e => e.TmText)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasColumnName("TM_TEXT");

            entity.HasOne(d => d.TmRecord).WithMany(p => p.JTransfermessages)
                .HasForeignKey(d => d.TmRecordId)
                .HasConstraintName("FK_TRANSFERRECORD_MESSAGE");
        });

        modelBuilder.Entity<JTransferpacket>(entity =>
        {
            entity.HasKey(e => e.TpId).HasName("PK_TRANSFERPACKET");

            entity.ToTable("J_TRANSFERPACKET", "JITTOE");

            entity.HasIndex(e => e.TpConnectionId, "I_TRANSFERCONNECTION_PACKET");

            entity.Property(e => e.TpId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TP_ID");
            entity.Property(e => e.TpConnectionId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TP_CONNECTION_ID");
            entity.Property(e => e.TpDonecount)
                .HasPrecision(9)
                .HasColumnName("TP_DONECOUNT");
            entity.Property(e => e.TpErrorcount)
                .HasPrecision(9)
                .HasColumnName("TP_ERRORCOUNT");
            entity.Property(e => e.TpExternalname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TP_EXTERNALNAME");
            entity.Property(e => e.TpIgnoredcount)
                .HasPrecision(9)
                .HasColumnName("TP_IGNOREDCOUNT");
            entity.Property(e => e.TpNewcount)
                .HasPrecision(9)
                .HasColumnName("TP_NEWCOUNT");
            entity.Property(e => e.TpPendingcount)
                .HasPrecision(9)
                .HasColumnName("TP_PENDINGCOUNT");
            entity.Property(e => e.TpQualifier1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TP_QUALIFIER1");
            entity.Property(e => e.TpQualifier2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TP_QUALIFIER2");
            entity.Property(e => e.TpTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TP_TCREATION");
            entity.Property(e => e.TpTimetransferred)
                .HasColumnType("DATE")
                .HasColumnName("TP_TIMETRANSFERRED");
            entity.Property(e => e.TpTransferrefno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TP_TRANSFERREFNO");

            entity.HasOne(d => d.TpConnection).WithMany(p => p.JTransferpackets)
                .HasForeignKey(d => d.TpConnectionId)
                .HasConstraintName("FK_TRANSFERCONNECTION_PACKET");
        });

        modelBuilder.Entity<JTransferpacketdone>(entity =>
        {
            entity.HasKey(e => e.TpdId).HasName("PK_TRANSFERPACKETDONE");

            entity.ToTable("J_TRANSFERPACKETDONE", "JITTOE");

            entity.HasIndex(e => e.TpdConnectionId, "I_TRANSFERCONN_PACKETDONE");

            entity.HasIndex(e => new { e.TpdConnectionId, e.TpdFilename }, "UN_TPD_FILENAME").IsUnique();

            entity.Property(e => e.TpdId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TPD_ID");
            entity.Property(e => e.TpdConnectionId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TPD_CONNECTION_ID");
            entity.Property(e => e.TpdFilename)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TPD_FILENAME");
            entity.Property(e => e.TpdTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TPD_TCREATION");

            entity.HasOne(d => d.TpdConnection).WithMany(p => p.JTransferpacketdones)
                .HasForeignKey(d => d.TpdConnectionId)
                .HasConstraintName("FK_TRANSFERCONN_PACKETDONE");
        });

        modelBuilder.Entity<JTransferrecord>(entity =>
        {
            entity.HasKey(e => e.TrId).HasName("PK_TRANSFERRECORD");

            entity.ToTable("J_TRANSFERRECORD", "JITTOE");

            entity.HasIndex(e => e.TrPacketId, "I_TRANSFERPACKET_RECORD");

            entity.HasIndex(e => e.TrStatus, "I_TR_STATUS");

            entity.Property(e => e.TrId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TR_ID");
            entity.Property(e => e.TrData)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasColumnName("TR_DATA");
            entity.Property(e => e.TrPacketId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TR_PACKET_ID");
            entity.Property(e => e.TrPrevstatus)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("TR_PREVSTATUS");
            entity.Property(e => e.TrStatus)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("TR_STATUS");
            entity.Property(e => e.TrTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TR_TCREATION");

            entity.HasOne(d => d.TrPacket).WithMany(p => p.JTransferrecords)
                .HasForeignKey(d => d.TrPacketId)
                .HasConstraintName("FK_TRANSFERPACKET_RECORD");
        });

        modelBuilder.Entity<JTransferspacket>(entity =>
        {
            entity.HasKey(e => e.TspId).HasName("PK_TRANSFERSPACKET");

            entity.ToTable("J_TRANSFERSPACKET", "JITTOE");

            entity.HasIndex(e => new { e.TspConnectionId, e.TspStatus }, "I_TSP_STATUS");

            entity.HasIndex(e => new { e.TspConnectionId, e.TspTcreation }, "I_TSP_TCREATION");

            entity.Property(e => e.TspId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TSP_ID");
            entity.Property(e => e.TspConnectionId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TSP_CONNECTION_ID");
            entity.Property(e => e.TspData)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("TSP_DATA");
            entity.Property(e => e.TspExternalname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TSP_EXTERNALNAME");
            entity.Property(e => e.TspPrevstatus)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("TSP_PREVSTATUS");
            entity.Property(e => e.TspQualifier1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TSP_QUALIFIER1");
            entity.Property(e => e.TspQualifier2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TSP_QUALIFIER2");
            entity.Property(e => e.TspStatus)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("TSP_STATUS");
            entity.Property(e => e.TspTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TSP_TCREATION");
            entity.Property(e => e.TspTimetransferred)
                .HasColumnType("DATE")
                .HasColumnName("TSP_TIMETRANSFERRED");
            entity.Property(e => e.TspTransferrefno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TSP_TRANSFERREFNO");

            entity.HasOne(d => d.TspConnection).WithMany(p => p.JTransferspackets)
                .HasForeignKey(d => d.TspConnectionId)
                .HasConstraintName("FK_TRANSFERCONNECTION_SPACKET");
        });

        modelBuilder.Entity<JTransferspacketmessage>(entity =>
        {
            entity.HasKey(e => e.TspmId).HasName("PK_TRANSFERSPACKETMESSAGE");

            entity.ToTable("J_TRANSFERSPACKETMESSAGE", "JITTOE");

            entity.HasIndex(e => e.TspmSpacketId, "I_TRANSFERSPACKET_MESSAGE");

            entity.Property(e => e.TspmId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TSPM_ID");
            entity.Property(e => e.TspmSpacketId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TSPM_SPACKET_ID");
            entity.Property(e => e.TspmTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TSPM_TCREATION");
            entity.Property(e => e.TspmText)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasColumnName("TSPM_TEXT");

            entity.HasOne(d => d.TspmSpacket).WithMany(p => p.JTransferspacketmessages)
                .HasForeignKey(d => d.TspmSpacketId)
                .HasConstraintName("FK_TRANSFERSPACKET_MESSAGE");
        });

        modelBuilder.Entity<JTransferspacketref>(entity =>
        {
            entity.HasKey(e => e.TsprId).HasName("PK_TRANSFERSPACKETREF");

            entity.ToTable("J_TRANSFERSPACKETREF", "JITTOE");

            entity.HasIndex(e => e.TsprSpacketId, "I_TRANSFERSPACKET_REF");

            entity.Property(e => e.TsprId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TSPR_ID");
            entity.Property(e => e.TsprObjectclassname)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("TSPR_OBJECTCLASSNAME");
            entity.Property(e => e.TsprObjectid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TSPR_OBJECTID");
            entity.Property(e => e.TsprObjectinfo1)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("TSPR_OBJECTINFO1");
            entity.Property(e => e.TsprObjectinfo2)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("TSPR_OBJECTINFO2");
            entity.Property(e => e.TsprRoleinfo1)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("TSPR_ROLEINFO1");
            entity.Property(e => e.TsprRoleinfo2)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("TSPR_ROLEINFO2");
            entity.Property(e => e.TsprSpacketId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TSPR_SPACKET_ID");
            entity.Property(e => e.TsprTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TSPR_TCREATION");

            entity.HasOne(d => d.TsprSpacket).WithMany(p => p.JTransferspacketrefs)
                .HasForeignKey(d => d.TsprSpacketId)
                .HasConstraintName("FK_TRANSFERSPACKET_REF");
        });

        modelBuilder.Entity<JTransition>(entity =>
        {
            entity.HasKey(e => e.TrsId).HasName("PK_TRANSITION");

            entity.ToTable("J_TRANSITION", "JITTOE");

            entity.HasIndex(e => e.TrsSessionId, "I_SESSION_TRANSITION");

            entity.HasIndex(e => new { e.TrsTransitionsetId, e.TrsTcreation }, "I_TRS_TCREATION");

            entity.Property(e => e.TrsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TRS_ID");
            entity.Property(e => e.TrsDescr)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasColumnName("TRS_DESCR");
            entity.Property(e => e.TrsInfo1)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("TRS_INFO1");
            entity.Property(e => e.TrsInfo2)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("TRS_INFO2");
            entity.Property(e => e.TrsSessionId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TRS_SESSION_ID");
            entity.Property(e => e.TrsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TRS_TCREATION");
            entity.Property(e => e.TrsTransitionsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TRS_TRANSITIONSET_ID");
            entity.Property(e => e.TrsTranstypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TRS_TRANSTYPE_ID");

            entity.HasOne(d => d.TrsSession).WithMany(p => p.JTransitions)
                .HasForeignKey(d => d.TrsSessionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SESSION_TRANSITION");

            entity.HasOne(d => d.TrsTransitionset).WithMany(p => p.JTransitions)
                .HasForeignKey(d => d.TrsTransitionsetId)
                .HasConstraintName("FK_TRANSITIONSET_TRANSITION");

            entity.HasOne(d => d.TrsTranstype).WithMany(p => p.JTransitions)
                .HasForeignKey(d => d.TrsTranstypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TRANSTYPE_TRANSITION");
        });

        modelBuilder.Entity<JTransitioninfo>(entity =>
        {
            entity.HasKey(e => e.TrsiId).HasName("PK_TRANSITIONINFO");

            entity.ToTable("J_TRANSITIONINFO", "JITTOE");

            entity.HasIndex(e => e.TrsiTransitionId, "I_TRANSITION_TRANSITIONINFO");

            entity.HasIndex(e => new { e.TrsiTransitionId, e.TrsiKey1, e.TrsiKey2, e.TrsiKey3 }, "I_TRSI_KEYS");

            entity.Property(e => e.TrsiId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TRSI_ID");
            entity.Property(e => e.TrsiKey1)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("TRSI_KEY1");
            entity.Property(e => e.TrsiKey2)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("TRSI_KEY2");
            entity.Property(e => e.TrsiKey3)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("TRSI_KEY3");
            entity.Property(e => e.TrsiObjectclassname)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("TRSI_OBJECTCLASSNAME");
            entity.Property(e => e.TrsiObjectid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TRSI_OBJECTID");
            entity.Property(e => e.TrsiObjectinfo1)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("TRSI_OBJECTINFO1");
            entity.Property(e => e.TrsiObjectinfo2)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("TRSI_OBJECTINFO2");
            entity.Property(e => e.TrsiStringvalue)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasColumnName("TRSI_STRINGVALUE");
            entity.Property(e => e.TrsiTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TRSI_TCREATION");
            entity.Property(e => e.TrsiTransitionId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TRSI_TRANSITION_ID");
            entity.Property(e => e.TrsiValuetype)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("TRSI_VALUETYPE");

            entity.HasOne(d => d.TrsiTransition).WithMany(p => p.JTransitioninfos)
                .HasForeignKey(d => d.TrsiTransitionId)
                .HasConstraintName("FK_TRANSITION_TRANSITIONINFO");
        });

        modelBuilder.Entity<JTransitioninfocontrol>(entity =>
        {
            entity.HasKey(e => e.TrsicId).HasName("PK_TRANSITIONINFOCONTROL");

            entity.ToTable("J_TRANSITIONINFOCONTROL", "JITTOE");

            entity.HasIndex(e => e.TrsicKey, "UN_TRSIC_KEY").IsUnique();

            entity.Property(e => e.TrsicId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TRSIC_ID");
            entity.Property(e => e.TrsicAssoc)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("TRSIC_ASSOC");
            entity.Property(e => e.TrsicDescr)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("TRSIC_DESCR");
            entity.Property(e => e.TrsicEnabled)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("0  ")
                .HasColumnName("TRSIC_ENABLED");
            entity.Property(e => e.TrsicInstruction)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("TRSIC_INSTRUCTION");
            entity.Property(e => e.TrsicKey)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("TRSIC_KEY");
            entity.Property(e => e.TrsicObjectclassname)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("TRSIC_OBJECTCLASSNAME");
            entity.Property(e => e.TrsicPriority)
                .HasPrecision(3)
                .HasDefaultValueSql("0  ")
                .HasColumnName("TRSIC_PRIORITY");
            entity.Property(e => e.TrsicQuery)
                .HasColumnType("LONG RAW")
                .HasColumnName("TRSIC_QUERY");
            entity.Property(e => e.TrsicTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TRSIC_TCREATION");
            entity.Property(e => e.TrsicTransitiontypekeyrx)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasColumnName("TRSIC_TRANSITIONTYPEKEYRX");
            entity.Property(e => e.TrsicTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TRSIC_TUPDATE");
        });

        modelBuilder.Entity<JTransitionset>(entity =>
        {
            entity.HasKey(e => e.TrssId).HasName("PK_TRANSITIONSET");

            entity.ToTable("J_TRANSITIONSET", "JITTOE");

            entity.HasIndex(e => e.TrssCompanyId, "I_COMPANY_TRANSITIONSET");

            entity.HasIndex(e => e.TrssKey, "UN_TRSS_KEY").IsUnique();

            entity.Property(e => e.TrssId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TRSS_ID");
            entity.Property(e => e.TrssCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TRSS_COMPANY_ID");
            entity.Property(e => e.TrssDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TRSS_DESCR");
            entity.Property(e => e.TrssKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("TRSS_KEY");
            entity.Property(e => e.TrssTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TRSS_TCREATION");
            entity.Property(e => e.TrssTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TRSS_TUPDATE");

            entity.HasOne(d => d.TrssCompany).WithMany(p => p.JTransitionsets)
                .HasForeignKey(d => d.TrssCompanyId)
                .HasConstraintName("FK_COMPANY_TRANSITIONSET");
        });

        modelBuilder.Entity<JTransitiontype>(entity =>
        {
            entity.HasKey(e => e.TrtId).HasName("PK_TRANSITIONTYPE");

            entity.ToTable("J_TRANSITIONTYPE", "JITTOE");

            entity.HasIndex(e => e.TrtTranstypesetId, "I_TRANSTYPESET_TRANSTYPE");

            entity.HasIndex(e => e.TrtKey, "UN_TRT_KEY").IsUnique();

            entity.Property(e => e.TrtId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TRT_ID");
            entity.Property(e => e.TrtDescr)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("TRT_DESCR");
            entity.Property(e => e.TrtKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("TRT_KEY");
            entity.Property(e => e.TrtTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TRT_TCREATION");
            entity.Property(e => e.TrtTranstypesetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TRT_TRANSTYPESET_ID");

            entity.HasOne(d => d.TrtTranstypeset).WithMany(p => p.JTransitiontypes)
                .HasForeignKey(d => d.TrtTranstypesetId)
                .HasConstraintName("FK_TRANSTYPESET_TRANSTYPE");
        });

        modelBuilder.Entity<JTransitiontypeset>(entity =>
        {
            entity.HasKey(e => e.TrtsId).HasName("PK_TRANSITIONTYPESET");

            entity.ToTable("J_TRANSITIONTYPESET", "JITTOE");

            entity.HasIndex(e => e.TrtsCompanyId, "I_COMPANY_TRANSTYPESET");

            entity.HasIndex(e => e.TrtsKey, "UN_TRTS_KEY").IsUnique();

            entity.Property(e => e.TrtsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TRTS_ID");
            entity.Property(e => e.TrtsCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TRTS_COMPANY_ID");
            entity.Property(e => e.TrtsDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TRTS_DESCR");
            entity.Property(e => e.TrtsKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("TRTS_KEY");
            entity.Property(e => e.TrtsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TRTS_TCREATION");
            entity.Property(e => e.TrtsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TRTS_TUPDATE");

            entity.HasOne(d => d.TrtsCompany).WithMany(p => p.JTransitiontypesets)
                .HasForeignKey(d => d.TrtsCompanyId)
                .HasConstraintName("FK_COMPANY_TRANSTYPESET");
        });

        modelBuilder.Entity<JTranslation>(entity =>
        {
            entity.HasKey(e => e.TraId).HasName("PK_TRANSLATION");

            entity.ToTable("J_TRANSLATION", "JITTOE");

            entity.HasIndex(e => e.TraLanguageId, "I_LANGUAGE_TRANSLATION");

            entity.HasIndex(e => e.TraTextId, "I_TEXT_TRANSLATION");

            entity.HasIndex(e => new { e.TraLanguageId, e.TraTextId }, "UN_TRA_TRANSLATION").IsUnique();

            entity.Property(e => e.TraId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TRA_ID");
            entity.Property(e => e.TraLanguageId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TRA_LANGUAGE_ID");
            entity.Property(e => e.TraTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TRA_TCREATION");
            entity.Property(e => e.TraText)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasColumnName("TRA_TEXT");
            entity.Property(e => e.TraTextId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TRA_TEXT_ID");

            entity.HasOne(d => d.TraLanguage).WithMany(p => p.JTranslations)
                .HasForeignKey(d => d.TraLanguageId)
                .HasConstraintName("FK_LANGUAGE_TRANSLATION");

            entity.HasOne(d => d.TraTextNavigation).WithMany(p => p.JTranslations)
                .HasForeignKey(d => d.TraTextId)
                .HasConstraintName("FK_TEXT_TRANSLATION");
        });

        modelBuilder.Entity<JTrucktype>(entity =>
        {
            entity.HasKey(e => e.TtId).HasName("PK_TRUCKTYPE");

            entity.ToTable("J_TRUCKTYPE", "JITTOE");

            entity.HasIndex(e => e.TtCompanyId, "I_COMPANY_TRUCKTYPE");

            entity.HasIndex(e => new { e.TtCompanyId, e.TtShortname }, "UN_TT_COMPANY_SHORTNAME").IsUnique();

            entity.Property(e => e.TtId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TT_ID");
            entity.Property(e => e.TtCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TT_COMPANY_ID");
            entity.Property(e => e.TtDescr)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("TT_DESCR");
            entity.Property(e => e.TtMaxcontainers)
                .HasPrecision(4)
                .HasColumnName("TT_MAXCONTAINERS");
            entity.Property(e => e.TtShortname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TT_SHORTNAME");
            entity.Property(e => e.TtTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TT_TCREATION");
            entity.Property(e => e.TtTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TT_TUPDATE");

            entity.HasOne(d => d.TtCompany).WithMany(p => p.JTrucktypes)
                .HasForeignKey(d => d.TtCompanyId)
                .HasConstraintName("FK_COMPANY_TRUCKTYPE");
        });

        modelBuilder.Entity<JTrucktypeinfo>(entity =>
        {
            entity.HasKey(e => e.TtiId).HasName("PK_TRUCKTYPEINFO");

            entity.ToTable("J_TRUCKTYPEINFO", "JITTOE");

            entity.HasIndex(e => e.TtiTrucktypeId, "I_TRUCKTYPE_TTINFO");

            entity.HasIndex(e => new { e.TtiTrucktypeId, e.TtiType, e.TtiKey1, e.TtiKey2, e.TtiKey3 }, "UN_TTI_INFO").IsUnique();

            entity.Property(e => e.TtiId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TTI_ID");
            entity.Property(e => e.TtiKey1)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("TTI_KEY1");
            entity.Property(e => e.TtiKey2)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("TTI_KEY2");
            entity.Property(e => e.TtiKey3)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("TTI_KEY3");
            entity.Property(e => e.TtiStringvalue)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("TTI_STRINGVALUE");
            entity.Property(e => e.TtiTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TTI_TCREATION");
            entity.Property(e => e.TtiTimevalue)
                .HasColumnType("DATE")
                .HasColumnName("TTI_TIMEVALUE");
            entity.Property(e => e.TtiTrucktypeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("TTI_TRUCKTYPE_ID");
            entity.Property(e => e.TtiTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("TTI_TUPDATE");
            entity.Property(e => e.TtiType)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TTI_TYPE");

            entity.HasOne(d => d.TtiTrucktype).WithMany(p => p.JTrucktypeinfos)
                .HasForeignKey(d => d.TtiTrucktypeId)
                .HasConstraintName("FK_TRUCKTYPE_TTINFO");
        });

        modelBuilder.Entity<JUnitofmeasure>(entity =>
        {
            entity.HasKey(e => e.UomId).HasName("PK_UNITOFMEASURE");

            entity.ToTable("J_UNITOFMEASURE", "JITTOE");

            entity.HasIndex(e => e.UomRefunitId, "I_REFUOM_UOM");

            entity.HasIndex(e => e.UomCode, "UN_UOM_CODE").IsUnique();

            entity.Property(e => e.UomId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("UOM_ID");
            entity.Property(e => e.UomCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("UOM_CODE");
            entity.Property(e => e.UomDescr)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("UOM_DESCR");
            entity.Property(e => e.UomFactor)
                .HasColumnType("NUMBER(16,6)")
                .HasColumnName("UOM_FACTOR");
            entity.Property(e => e.UomFactordenominator)
                .HasDefaultValueSql("1  ")
                .HasColumnType("NUMBER(16,6)")
                .HasColumnName("UOM_FACTORDENOMINATOR");
            entity.Property(e => e.UomFamily)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("UOM_FAMILY");
            entity.Property(e => e.UomRefunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("UOM_REFUNIT_ID");
            entity.Property(e => e.UomShortname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UOM_SHORTNAME");
            entity.Property(e => e.UomTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("UOM_TCREATION");
            entity.Property(e => e.UomTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("UOM_TUPDATE");

            entity.HasOne(d => d.UomRefunit).WithMany(p => p.InverseUomRefunit)
                .HasForeignKey(d => d.UomRefunitId)
                .HasConstraintName("FK_REFUOM_UOM");
        });

        modelBuilder.Entity<JUsedasedlcontract>(entity =>
        {
            entity.HasKey(e => e.UaecId).HasName("PK_USEDASEDLCONTRACT");

            entity.ToTable("J_USEDASEDLCONTRACT", "JITTOE");

            entity.HasIndex(e => e.UaecDeliveryaddressId, "I_ADDRESS_UAECONTR");

            entity.HasIndex(e => e.UaecTransportstockdelivId, "I_DELIVTSTOCK_USEDASEDLCONT");

            entity.HasIndex(e => e.UaecSupplyediId, "I_EDICFG_UAECONTR");

            entity.HasIndex(e => e.UaecSalecontractId, "I_SALECONTRACT_UAECONTR");

            entity.HasIndex(e => e.UaecTransportstocksupplyId, "I_SUPPLYTSTOCK_USEDASEDLCONT");

            entity.HasIndex(e => e.UaecContractId, "UN_UAEC_CONTRACT").IsUnique();

            entity.Property(e => e.UaecId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("UAEC_ID");
            entity.Property(e => e.UaecContractId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("UAEC_CONTRACT_ID");
            entity.Property(e => e.UaecDeliveryaddressId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("UAEC_DELIVERYADDRESS_ID");
            entity.Property(e => e.UaecSalecontractId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("UAEC_SALECONTRACT_ID");
            entity.Property(e => e.UaecSupplyediId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("UAEC_SUPPLYEDI_ID");
            entity.Property(e => e.UaecTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("UAEC_TCREATION");
            entity.Property(e => e.UaecTransportstockdelivId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("UAEC_TRANSPORTSTOCKDELIV_ID");
            entity.Property(e => e.UaecTransportstocksupplyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("UAEC_TRANSPORTSTOCKSUPPLY_ID");
            entity.Property(e => e.UaecTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("UAEC_TUPDATE");

            entity.HasOne(d => d.UaecContract).WithOne(p => p.JUsedasedlcontractUaecContract)
                .HasForeignKey<JUsedasedlcontract>(d => d.UaecContractId)
                .HasConstraintName("FK_CONTRACT_UAECONTR");

            entity.HasOne(d => d.UaecDeliveryaddress).WithMany(p => p.JUsedasedlcontracts)
                .HasForeignKey(d => d.UaecDeliveryaddressId)
                .HasConstraintName("FK_ADDRESS_UAECONTR");

            entity.HasOne(d => d.UaecSalecontract).WithMany(p => p.JUsedasedlcontractUaecSalecontracts)
                .HasForeignKey(d => d.UaecSalecontractId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SALECONTRACT_UAECONTR");

            entity.HasOne(d => d.UaecSupplyedi).WithMany(p => p.JUsedasedlcontracts)
                .HasForeignKey(d => d.UaecSupplyediId)
                .HasConstraintName("FK_EDICFG_UAECONTR");

            entity.HasOne(d => d.UaecTransportstockdeliv).WithMany(p => p.JUsedasedlcontractUaecTransportstockdelivs)
                .HasForeignKey(d => d.UaecTransportstockdelivId)
                .HasConstraintName("FK_DELIVTSTOCK_USEDASEDLCONT");

            entity.HasOne(d => d.UaecTransportstocksupply).WithMany(p => p.JUsedasedlcontractUaecTransportstocksupplies)
                .HasForeignKey(d => d.UaecTransportstocksupplyId)
                .HasConstraintName("FK_SUPPLYTSTOCK_USEDASEDLCONT");
        });

        modelBuilder.Entity<JUser>(entity =>
        {
            entity.HasKey(e => e.UId).HasName("PK_USER");

            entity.ToTable("J_USER", "JITTOE");

            entity.HasIndex(e => e.ULoginpolicyId, "I_LOGINPOLICY_USER");

            entity.HasIndex(e => e.UMenuId, "I_MENU_USER");

            entity.HasIndex(e => e.UDefaultuserroleId, "I_USERROLE_USER");

            entity.HasIndex(e => e.UUsersetId, "I_USERSET_USER");

            entity.HasIndex(e => new { e.UCardid, e.UDeletionid }, "UN_U_CARDID").IsUnique();

            entity.HasIndex(e => new { e.UNo, e.UDeletionid }, "UN_U_NO").IsUnique();

            entity.HasIndex(e => new { e.UShortname, e.UDeletionid }, "UN_U_SHORTNAME").IsUnique();

            entity.Property(e => e.UId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("U_ID");
            entity.Property(e => e.UAuthentication)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasDefaultValueSql("'Intern'  ")
                .HasColumnName("U_AUTHENTICATION");
            entity.Property(e => e.UCardid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("U_CARDID");
            entity.Property(e => e.UDefaultuserroleId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("U_DEFAULTUSERROLE_ID");
            entity.Property(e => e.UDeletionid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("U_DELETIONID");
            entity.Property(e => e.UDescr)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("U_DESCR");
            entity.Property(e => e.UEmail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("U_EMAIL");
            entity.Property(e => e.UFirstname)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("U_FIRSTNAME");
            entity.Property(e => e.ULastname)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("U_LASTNAME");
            entity.Property(e => e.ULoginpolicyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("U_LOGINPOLICY_ID");
            entity.Property(e => e.UMenuId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("U_MENU_ID");
            entity.Property(e => e.UNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("U_NO");
            entity.Property(e => e.UPassword)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("U_PASSWORD");
            entity.Property(e => e.UShortname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("U_SHORTNAME");
            entity.Property(e => e.UTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("U_TCREATION");
            entity.Property(e => e.UTdeletion)
                .HasColumnType("DATE")
                .HasColumnName("U_TDELETION");
            entity.Property(e => e.UTimelastlogin)
                .HasColumnType("DATE")
                .HasColumnName("U_TIMELASTLOGIN");
            entity.Property(e => e.UTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("U_TUPDATE");
            entity.Property(e => e.UUsersetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("U_USERSET_ID");

            entity.HasOne(d => d.UDefaultuserrole).WithMany(p => p.JUsers)
                .HasForeignKey(d => d.UDefaultuserroleId)
                .HasConstraintName("FK_USERROLE_USER");

            entity.HasOne(d => d.ULoginpolicy).WithMany(p => p.JUsers)
                .HasForeignKey(d => d.ULoginpolicyId)
                .HasConstraintName("FK_LOGINPOLICY_USER");

            entity.HasOne(d => d.UMenu).WithMany(p => p.JUsers)
                .HasForeignKey(d => d.UMenuId)
                .HasConstraintName("FK_MENU_USER");

            entity.HasOne(d => d.UUserset).WithMany(p => p.JUsers)
                .HasForeignKey(d => d.UUsersetId)
                .HasConstraintName("FK_USERSET_USER");
        });

        modelBuilder.Entity<JUseridentpolicy>(entity =>
        {
            entity.HasKey(e => e.UidpId).HasName("PK_USERIDENTPOLICY");

            entity.ToTable("J_USERIDENTPOLICY", "JITTOE");

            entity.HasIndex(e => e.UidpCompanyId, "I_COMPANY_USERIDENTPOLICY");

            entity.HasIndex(e => e.UidpKey, "UN_UIDP_KEY").IsUnique();

            entity.Property(e => e.UidpId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("UIDP_ID");
            entity.Property(e => e.UidpBycardid)
                .HasPrecision(1)
                .HasColumnName("UIDP_BYCARDID");
            entity.Property(e => e.UidpByno)
                .HasPrecision(1)
                .HasColumnName("UIDP_BYNO");
            entity.Property(e => e.UidpByshortname)
                .HasPrecision(1)
                .HasColumnName("UIDP_BYSHORTNAME");
            entity.Property(e => e.UidpCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("UIDP_COMPANY_ID");
            entity.Property(e => e.UidpDescr)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("UIDP_DESCR");
            entity.Property(e => e.UidpKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("UIDP_KEY");
            entity.Property(e => e.UidpTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("UIDP_TCREATION");
            entity.Property(e => e.UidpTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("UIDP_TUPDATE");

            entity.HasOne(d => d.UidpCompany).WithMany(p => p.JUseridentpolicies)
                .HasForeignKey(d => d.UidpCompanyId)
                .HasConstraintName("FK_COMPANY_USERIDENTPOLICY");
        });

        modelBuilder.Entity<JUserinfo>(entity =>
        {
            entity.HasKey(e => e.UiId).HasName("PK_USERINFO");

            entity.ToTable("J_USERINFO", "JITTOE");

            entity.HasIndex(e => e.UiUserId, "I_USER_USERINFO");

            entity.HasIndex(e => new { e.UiUserId, e.UiType, e.UiKey1, e.UiKey2, e.UiKey3 }, "UN_UI_INFO").IsUnique();

            entity.Property(e => e.UiId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("UI_ID");
            entity.Property(e => e.UiKey1)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("UI_KEY1");
            entity.Property(e => e.UiKey2)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("UI_KEY2");
            entity.Property(e => e.UiKey3)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("UI_KEY3");
            entity.Property(e => e.UiStringvalue)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("UI_STRINGVALUE");
            entity.Property(e => e.UiTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("UI_TCREATION");
            entity.Property(e => e.UiTimevalue)
                .HasColumnType("DATE")
                .HasColumnName("UI_TIMEVALUE");
            entity.Property(e => e.UiTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("UI_TUPDATE");
            entity.Property(e => e.UiType)
                .HasMaxLength(21)
                .IsUnicode(false)
                .HasColumnName("UI_TYPE");
            entity.Property(e => e.UiUserId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("UI_USER_ID");

            entity.HasOne(d => d.UiUser).WithMany(p => p.JUserinfos)
                .HasForeignKey(d => d.UiUserId)
                .HasConstraintName("FK_USER_USERINFO");
        });

        modelBuilder.Entity<JUserqualification>(entity =>
        {
            entity.HasKey(e => e.UqId).HasName("PK_USERQUALIFICATION");

            entity.ToTable("J_USERQUALIFICATION", "JITTOE");

            entity.HasIndex(e => e.UqQualificationId, "I_QUAL_USERQUAL");

            entity.HasIndex(e => e.UqUserId, "I_USER_USERQUAL");

            entity.HasIndex(e => new { e.UqUserId, e.UqQualificationId, e.UqInvalidid }, "UN_UQ_USER_QUAL").IsUnique();

            entity.Property(e => e.UqId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("UQ_ID");
            entity.Property(e => e.UqInvalidid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("UQ_INVALIDID");
            entity.Property(e => e.UqQualificationId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("UQ_QUALIFICATION_ID");
            entity.Property(e => e.UqTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("UQ_TCREATION");
            entity.Property(e => e.UqTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("UQ_TUPDATE");
            entity.Property(e => e.UqTvalidfrom)
                .HasColumnType("DATE")
                .HasColumnName("UQ_TVALIDFROM");
            entity.Property(e => e.UqTvaliduntil)
                .HasColumnType("DATE")
                .HasColumnName("UQ_TVALIDUNTIL");
            entity.Property(e => e.UqUserId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("UQ_USER_ID");

            entity.HasOne(d => d.UqQualification).WithMany(p => p.JUserqualifications)
                .HasForeignKey(d => d.UqQualificationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QUAL_USERQUAL");

            entity.HasOne(d => d.UqUser).WithMany(p => p.JUserqualifications)
                .HasForeignKey(d => d.UqUserId)
                .HasConstraintName("FK_USER_USERQUAL");
        });

        modelBuilder.Entity<JUserqualificationevent>(entity =>
        {
            entity.HasKey(e => e.UqeId).HasName("PK_USERQUALIFICATIONEVENT");

            entity.ToTable("J_USERQUALIFICATIONEVENT", "JITTOE");

            entity.HasIndex(e => e.UqeTransitionId, "I_TRANSITION_USERQUALEVENT");

            entity.HasIndex(e => e.UqeUserqualificationId, "I_USERQUAL_USERQUALEVENT");

            entity.Property(e => e.UqeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("UQE_ID");
            entity.Property(e => e.UqeTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("UQE_TCREATION");
            entity.Property(e => e.UqeTransitionId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("UQE_TRANSITION_ID");
            entity.Property(e => e.UqeType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("UQE_TYPE");
            entity.Property(e => e.UqeUserqualificationId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("UQE_USERQUALIFICATION_ID");

            entity.HasOne(d => d.UqeTransition).WithMany(p => p.JUserqualificationevents)
                .HasForeignKey(d => d.UqeTransitionId)
                .HasConstraintName("FK_TRANSITION_USERQUALEVENT");

            entity.HasOne(d => d.UqeUserqualification).WithMany(p => p.JUserqualificationevents)
                .HasForeignKey(d => d.UqeUserqualificationId)
                .HasConstraintName("FK_USERQUAL_USERQUALEVENT");
        });

        modelBuilder.Entity<JUserrole>(entity =>
        {
            entity.HasKey(e => e.UrId).HasName("PK_USERROLE");

            entity.ToTable("J_USERROLE", "JITTOE");

            entity.HasIndex(e => e.UrAccessrightsetId, "I_ARIGHTSET_USERROLE");

            entity.HasIndex(e => e.UrCompanyId, "I_COMPANY_USERROLE");

            entity.HasIndex(e => e.UrGroupId, "I_GROUP_USERROLE");

            entity.HasIndex(e => e.UrMenuId, "I_MENU_USERROLE");

            entity.HasIndex(e => e.UrKey, "UN_UR_KEY").IsUnique();

            entity.Property(e => e.UrId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("UR_ID");
            entity.Property(e => e.UrAccessrightsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("UR_ACCESSRIGHTSET_ID");
            entity.Property(e => e.UrAllowfilterassignment)
                .IsRequired()
                .HasPrecision(1)
                .HasDefaultValueSql("0  ")
                .HasColumnName("UR_ALLOWFILTERASSIGNMENT");
            entity.Property(e => e.UrCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("UR_COMPANY_ID");
            entity.Property(e => e.UrDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UR_DESCR");
            entity.Property(e => e.UrGroupId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("UR_GROUP_ID");
            entity.Property(e => e.UrKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("UR_KEY");
            entity.Property(e => e.UrMenuId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("UR_MENU_ID");
            entity.Property(e => e.UrTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("UR_TCREATION");
            entity.Property(e => e.UrTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("UR_TUPDATE");

            entity.HasOne(d => d.UrAccessrightset).WithMany(p => p.JUserroles)
                .HasForeignKey(d => d.UrAccessrightsetId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARIGHTSET_USERROLE");

            entity.HasOne(d => d.UrCompany).WithMany(p => p.JUserroles)
                .HasForeignKey(d => d.UrCompanyId)
                .HasConstraintName("FK_COMPANY_USERROLE");

            entity.HasOne(d => d.UrGroup).WithMany(p => p.JUserroles)
                .HasForeignKey(d => d.UrGroupId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GROUP_USERROLE");

            entity.HasOne(d => d.UrMenu).WithMany(p => p.JUserroles)
                .HasForeignKey(d => d.UrMenuId)
                .HasConstraintName("FK_MENU_USERROLE");
        });

        modelBuilder.Entity<JUserset>(entity =>
        {
            entity.HasKey(e => e.UsId).HasName("PK_USERSET");

            entity.ToTable("J_USERSET", "JITTOE");

            entity.HasIndex(e => e.UsCompanyId, "I_COMPANY_USERSET");

            entity.HasIndex(e => e.UsDoccfgId, "I_DOCCFG_USERSET");

            entity.HasIndex(e => e.UsLoginpolicyId, "I_LOGINPOLICY_USERSET");

            entity.HasIndex(e => e.UsKey, "UN_US_KEY").IsUnique();

            entity.Property(e => e.UsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("US_ID");
            entity.Property(e => e.UsCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("US_COMPANY_ID");
            entity.Property(e => e.UsDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("US_DESCR");
            entity.Property(e => e.UsDoccfgId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("US_DOCCFG_ID");
            entity.Property(e => e.UsKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("US_KEY");
            entity.Property(e => e.UsLoginpolicyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("US_LOGINPOLICY_ID");
            entity.Property(e => e.UsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("US_TCREATION");
            entity.Property(e => e.UsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("US_TUPDATE");

            entity.HasOne(d => d.UsCompany).WithMany(p => p.JUsersets)
                .HasForeignKey(d => d.UsCompanyId)
                .HasConstraintName("FK_COMPANY_USERSET");

            entity.HasOne(d => d.UsDoccfg).WithMany(p => p.JUsersets)
                .HasForeignKey(d => d.UsDoccfgId)
                .HasConstraintName("FK_DOCCFG_USERSET");

            entity.HasOne(d => d.UsLoginpolicy).WithMany(p => p.JUsersets)
                .HasForeignKey(d => d.UsLoginpolicyId)
                .HasConstraintName("FK_LOGINPOLICY_USERSET");
        });

        modelBuilder.Entity<JUsersetting>(entity =>
        {
            entity.HasKey(e => e.UseId).HasName("PK_USERSETTING");

            entity.ToTable("J_USERSETTING", "JITTOE");

            entity.HasIndex(e => e.UseUserroleId, "I_USERROLE_USERSETTING");

            entity.HasIndex(e => e.UseUserId, "I_USER_USERSETTING");

            entity.HasIndex(e => new { e.UseUserId, e.UseUserroleId, e.UseType, e.UseKey1, e.UseKey2, e.UseKey3, e.UseKey4 }, "UN_USE_SETTING").IsUnique();

            entity.Property(e => e.UseId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("USE_ID");
            entity.Property(e => e.UseIntvalue)
                .HasPrecision(10)
                .HasDefaultValueSql("0  ")
                .HasColumnName("USE_INTVALUE");
            entity.Property(e => e.UseKey1)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("USE_KEY1");
            entity.Property(e => e.UseKey2)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("USE_KEY2");
            entity.Property(e => e.UseKey3)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("USE_KEY3");
            entity.Property(e => e.UseKey4)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("USE_KEY4");
            entity.Property(e => e.UseStringvalue)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasColumnName("USE_STRINGVALUE");
            entity.Property(e => e.UseTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("USE_TCREATION");
            entity.Property(e => e.UseTimevalue)
                .HasColumnType("DATE")
                .HasColumnName("USE_TIMEVALUE");
            entity.Property(e => e.UseTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("USE_TUPDATE");
            entity.Property(e => e.UseType)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("USE_TYPE");
            entity.Property(e => e.UseUserId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("USE_USER_ID");
            entity.Property(e => e.UseUserroleId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("USE_USERROLE_ID");

            entity.HasOne(d => d.UseUser).WithMany(p => p.JUsersettings)
                .HasForeignKey(d => d.UseUserId)
                .HasConstraintName("FK_USER_USERSETTING");

            entity.HasOne(d => d.UseUserrole).WithMany(p => p.JUsersettings)
                .HasForeignKey(d => d.UseUserroleId)
                .HasConstraintName("FK_USERROLE_USERSETTING");
        });

        modelBuilder.Entity<JUsingedlcontract>(entity =>
        {
            entity.HasKey(e => e.UecId).HasName("PK_USINGEDLCONTRACT");

            entity.ToTable("J_USINGEDLCONTRACT", "JITTOE");

            entity.HasIndex(e => e.UecDeliveryaddressId, "I_ADDRESS_UECONTR");

            entity.HasIndex(e => e.UecDeliveryediId, "I_EDICFG_UECONTR");

            entity.HasIndex(e => e.UecEdllockedstockId, "I_EDLLOCKEDSTOCK_UECONTR");

            entity.HasIndex(e => e.UecEdlstockId, "I_EDLSTOCK_UECONTR");

            entity.HasIndex(e => e.UecSalecontractId, "I_SALECONTRACT_UECONTR");

            entity.HasIndex(e => e.UecTransportstockId, "I_TSTOCK_USINGEDLCONTRACT");

            entity.HasIndex(e => e.UecContractId, "UN_UEC_CONTRACT").IsUnique();

            entity.Property(e => e.UecId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("UEC_ID");
            entity.Property(e => e.UecContractId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("UEC_CONTRACT_ID");
            entity.Property(e => e.UecDeliveryaddressId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("UEC_DELIVERYADDRESS_ID");
            entity.Property(e => e.UecDeliveryediId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("UEC_DELIVERYEDI_ID");
            entity.Property(e => e.UecEdllockedstockId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("UEC_EDLLOCKEDSTOCK_ID");
            entity.Property(e => e.UecEdlstockId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("UEC_EDLSTOCK_ID");
            entity.Property(e => e.UecSalecontractId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("UEC_SALECONTRACT_ID");
            entity.Property(e => e.UecTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("UEC_TCREATION");
            entity.Property(e => e.UecTransportstockId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("UEC_TRANSPORTSTOCK_ID");
            entity.Property(e => e.UecTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("UEC_TUPDATE");

            entity.HasOne(d => d.UecContract).WithOne(p => p.JUsingedlcontractUecContract)
                .HasForeignKey<JUsingedlcontract>(d => d.UecContractId)
                .HasConstraintName("FK_CONTRACT_UECONTR");

            entity.HasOne(d => d.UecDeliveryaddress).WithMany(p => p.JUsingedlcontracts)
                .HasForeignKey(d => d.UecDeliveryaddressId)
                .HasConstraintName("FK_ADDRESS_UECONTR");

            entity.HasOne(d => d.UecDeliveryedi).WithMany(p => p.JUsingedlcontracts)
                .HasForeignKey(d => d.UecDeliveryediId)
                .HasConstraintName("FK_EDICFG_UECONTR");

            entity.HasOne(d => d.UecEdllockedstock).WithMany(p => p.JUsingedlcontractUecEdllockedstocks)
                .HasForeignKey(d => d.UecEdllockedstockId)
                .HasConstraintName("FK_EDLLOCKEDSTOCK_UECONTR");

            entity.HasOne(d => d.UecEdlstock).WithMany(p => p.JUsingedlcontractUecEdlstocks)
                .HasForeignKey(d => d.UecEdlstockId)
                .HasConstraintName("FK_EDLSTOCK_UECONTR");

            entity.HasOne(d => d.UecSalecontract).WithMany(p => p.JUsingedlcontractUecSalecontracts)
                .HasForeignKey(d => d.UecSalecontractId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SALECONTRACT_UECONTR");

            entity.HasOne(d => d.UecTransportstock).WithMany(p => p.JUsingedlcontractUecTransportstocks)
                .HasForeignKey(d => d.UecTransportstockId)
                .HasConstraintName("FK_TSTOCK_USINGEDLCONTRACT");
        });

        modelBuilder.Entity<JVersioninfo>(entity =>
        {
            entity.HasKey(e => e.VId).HasName("PK_VERSIONINFO");

            entity.ToTable("J_VERSIONINFO", "JITTOE");

            entity.HasIndex(e => e.VSchemaname, "UN_V_SCHEMANAME").IsUnique();

            entity.Property(e => e.VId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("V_ID");
            entity.Property(e => e.VCopyright)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("V_COPYRIGHT");
            entity.Property(e => e.VLastupdateinfo)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("V_LASTUPDATEINFO");
            entity.Property(e => e.VMajorversion)
                .HasPrecision(4)
                .HasColumnName("V_MAJORVERSION");
            entity.Property(e => e.VMinorversion)
                .HasPrecision(4)
                .HasColumnName("V_MINORVERSION");
            entity.Property(e => e.VSchemaname)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValueSql("'Standard' ")
                .HasColumnName("V_SCHEMANAME");
            entity.Property(e => e.VTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("V_TCREATION");
            entity.Property(e => e.VTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("V_TUPDATE");
        });

        modelBuilder.Entity<JVideo>(entity =>
        {
            entity.HasKey(e => e.ViId).HasName("PK_VIDEO");

            entity.ToTable("J_VIDEO", "JITTOE");

            entity.HasIndex(e => e.ViVideosetId, "I_VIDEOSET_VIDEO");

            entity.HasIndex(e => new { e.ViKey, e.ViDeletionid }, "UN_VI_KEY").IsUnique();

            entity.Property(e => e.ViId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("VI_ID");
            entity.Property(e => e.ViData)
                .HasColumnType("LONG RAW")
                .HasColumnName("VI_DATA");
            entity.Property(e => e.ViDatasize)
                .HasPrecision(9)
                .HasColumnName("VI_DATASIZE");
            entity.Property(e => e.ViDeletionid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("VI_DELETIONID");
            entity.Property(e => e.ViDescr)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("VI_DESCR");
            entity.Property(e => e.ViEncoding)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VI_ENCODING");
            entity.Property(e => e.ViFilename)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("VI_FILENAME");
            entity.Property(e => e.ViKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("VI_KEY");
            entity.Property(e => e.ViTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("VI_TCREATION");
            entity.Property(e => e.ViTdeletion)
                .HasColumnType("DATE")
                .HasColumnName("VI_TDELETION");
            entity.Property(e => e.ViTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("VI_TUPDATE");
            entity.Property(e => e.ViVideosetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("VI_VIDEOSET_ID");

            entity.HasOne(d => d.ViVideoset).WithMany(p => p.JVideos)
                .HasForeignKey(d => d.ViVideosetId)
                .HasConstraintName("FK_VIDEOSET_VIDEO");
        });

        modelBuilder.Entity<JVideoset>(entity =>
        {
            entity.HasKey(e => e.VisId).HasName("PK_VIDEOSET");

            entity.ToTable("J_VIDEOSET", "JITTOE");

            entity.HasIndex(e => e.VisKey, "UN_VIS_KEY").IsUnique();

            entity.Property(e => e.VisId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("VIS_ID");
            entity.Property(e => e.VisDescr)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("VIS_DESCR");
            entity.Property(e => e.VisKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("VIS_KEY");
            entity.Property(e => e.VisTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("VIS_TCREATION");
            entity.Property(e => e.VisTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("VIS_TUPDATE");
        });

        modelBuilder.Entity<JWorkflow>(entity =>
        {
            entity.HasKey(e => e.WfId).HasName("PK_WORKFLOW");

            entity.ToTable("J_WORKFLOW", "JITTOE");

            entity.HasIndex(e => e.WfConfigdefId, "I_CONFIGDEF_WF");

            entity.HasIndex(e => e.WfWorkflowsetId, "I_WFSET_WF");

            entity.HasIndex(e => new { e.WfKey, e.WfDeletionid }, "UN_WF_KEY").IsUnique();

            entity.Property(e => e.WfId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("WF_ID");
            entity.Property(e => e.WfConfigdefId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("WF_CONFIGDEF_ID");
            entity.Property(e => e.WfDeletionid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("WF_DELETIONID");
            entity.Property(e => e.WfDescr)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("WF_DESCR");
            entity.Property(e => e.WfKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("WF_KEY");
            entity.Property(e => e.WfTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("WF_TCREATION");
            entity.Property(e => e.WfTdeletion)
                .HasColumnType("DATE")
                .HasColumnName("WF_TDELETION");
            entity.Property(e => e.WfTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("WF_TUPDATE");
            entity.Property(e => e.WfWorkflowsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("WF_WORKFLOWSET_ID");

            entity.HasOne(d => d.WfConfigdef).WithMany(p => p.JWorkflows)
                .HasForeignKey(d => d.WfConfigdefId)
                .HasConstraintName("FK_CONFIGDEF_WF");

            entity.HasOne(d => d.WfWorkflowset).WithMany(p => p.JWorkflows)
                .HasForeignKey(d => d.WfWorkflowsetId)
                .HasConstraintName("FK_WFSET_WF");
        });

        modelBuilder.Entity<JWorkflowjob>(entity =>
        {
            entity.HasKey(e => e.WfjId).HasName("PK_WORKFLOWJOB");

            entity.ToTable("J_WORKFLOWJOB", "JITTOE");

            entity.HasIndex(e => e.WfjWorkflowjobsetId, "I_WFJOBSET_WFJOB");

            entity.HasIndex(e => new { e.WfjWorkflowjobsetId, e.WfjNo, e.WfjDeletionid }, "UN_WFJ_WFJOBSET_NO").IsUnique();

            entity.Property(e => e.WfjId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("WFJ_ID");
            entity.Property(e => e.WfjDeletionid)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("WFJ_DELETIONID");
            entity.Property(e => e.WfjNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("WFJ_NO");
            entity.Property(e => e.WfjTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("WFJ_TCREATION");
            entity.Property(e => e.WfjTdeletion)
                .HasColumnType("DATE")
                .HasColumnName("WFJ_TDELETION");
            entity.Property(e => e.WfjTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("WFJ_TUPDATE");
            entity.Property(e => e.WfjWorkflowjobsetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("WFJ_WORKFLOWJOBSET_ID");

            entity.HasOne(d => d.WfjWorkflowjobset).WithMany(p => p.JWorkflowjobs)
                .HasForeignKey(d => d.WfjWorkflowjobsetId)
                .HasConstraintName("FK_WFJOBSET_WFJOB");
        });

        modelBuilder.Entity<JWorkflowjobentry>(entity =>
        {
            entity.HasKey(e => e.WfjeId).HasName("PK_WORKFLOWJOBENTRY");

            entity.ToTable("J_WORKFLOWJOBENTRY", "JITTOE");

            entity.HasIndex(e => e.WfjeContainerentryId, "I_CONTAINERENTRY_WFJOBENTRY");

            entity.HasIndex(e => e.WfjeOrderentryId, "I_ORDERENTRY_WFJOBENTRY");

            entity.HasIndex(e => e.WfjeSubjectId, "I_SUBJECT_WFJOBENTRY");

            entity.HasIndex(e => e.WfjeWorkflowjobId, "I_WFJOB_WFJOBENTRY");

            entity.Property(e => e.WfjeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("WFJE_ID");
            entity.Property(e => e.WfjeContainerentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("WFJE_CONTAINERENTRY_ID");
            entity.Property(e => e.WfjeOrderentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("WFJE_ORDERENTRY_ID");
            entity.Property(e => e.WfjeQuantity)
                .HasColumnType("NUMBER(12,3)")
                .HasColumnName("WFJE_QUANTITY");
            entity.Property(e => e.WfjeSubjectId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("WFJE_SUBJECT_ID");
            entity.Property(e => e.WfjeTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("WFJE_TCREATION");
            entity.Property(e => e.WfjeTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("WFJE_TUPDATE");
            entity.Property(e => e.WfjeWorkflowjobId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("WFJE_WORKFLOWJOB_ID");

            entity.HasOne(d => d.WfjeContainerentry).WithMany(p => p.JWorkflowjobentries)
                .HasForeignKey(d => d.WfjeContainerentryId)
                .HasConstraintName("FK_CONTAINERENTRY_WFJOBENTRY");

            entity.HasOne(d => d.WfjeOrderentry).WithMany(p => p.JWorkflowjobentries)
                .HasForeignKey(d => d.WfjeOrderentryId)
                .HasConstraintName("FK_ORDERENTRY_WFJOBENTRY");

            entity.HasOne(d => d.WfjeSubject).WithMany(p => p.JWorkflowjobentries)
                .HasForeignKey(d => d.WfjeSubjectId)
                .HasConstraintName("FK_SUBJECT_WFJOBENTRY");

            entity.HasOne(d => d.WfjeWorkflowjob).WithMany(p => p.JWorkflowjobentries)
                .HasForeignKey(d => d.WfjeWorkflowjobId)
                .HasConstraintName("FK_WFJOB_WFJOBENTRY");
        });

        modelBuilder.Entity<JWorkflowjobset>(entity =>
        {
            entity.HasKey(e => e.WfjsId).HasName("PK_WORKFLOWJOBSET");

            entity.ToTable("J_WORKFLOWJOBSET", "JITTOE");

            entity.HasIndex(e => e.WfjsCompanyId, "I_COMPANY_WFJOBSET");

            entity.HasIndex(e => e.WfjsCounterId, "I_COUNTER_WFJOBSET");

            entity.HasIndex(e => e.WfjsKey, "UN_WFJS_KEY").IsUnique();

            entity.Property(e => e.WfjsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("WFJS_ID");
            entity.Property(e => e.WfjsCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("WFJS_COMPANY_ID");
            entity.Property(e => e.WfjsCounterId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("WFJS_COUNTER_ID");
            entity.Property(e => e.WfjsDescr)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("WFJS_DESCR");
            entity.Property(e => e.WfjsKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("WFJS_KEY");
            entity.Property(e => e.WfjsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("WFJS_TCREATION");
            entity.Property(e => e.WfjsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("WFJS_TUPDATE");

            entity.HasOne(d => d.WfjsCompany).WithMany(p => p.JWorkflowjobsets)
                .HasForeignKey(d => d.WfjsCompanyId)
                .HasConstraintName("FK_COMPANY_WFJOBSET");

            entity.HasOne(d => d.WfjsCounter).WithMany(p => p.JWorkflowjobsets)
                .HasForeignKey(d => d.WfjsCounterId)
                .HasConstraintName("FK_COUNTER_WFJOBSET");
        });

        modelBuilder.Entity<JWorkflowset>(entity =>
        {
            entity.HasKey(e => e.WfsId).HasName("PK_WORKFLOWSET");

            entity.ToTable("J_WORKFLOWSET", "JITTOE");

            entity.HasIndex(e => e.WfsCompanyId, "I_COMPANY_WFSET");

            entity.HasIndex(e => e.WfsKey, "UN_WFS_KEY").IsUnique();

            entity.Property(e => e.WfsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("WFS_ID");
            entity.Property(e => e.WfsCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("WFS_COMPANY_ID");
            entity.Property(e => e.WfsDescr)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("WFS_DESCR");
            entity.Property(e => e.WfsKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("WFS_KEY");
            entity.Property(e => e.WfsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("WFS_TCREATION");
            entity.Property(e => e.WfsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("WFS_TUPDATE");

            entity.HasOne(d => d.WfsCompany).WithMany(p => p.JWorkflowsets)
                .HasForeignKey(d => d.WfsCompanyId)
                .HasConstraintName("FK_COMPANY_WFSET");
        });

        modelBuilder.Entity<JWorkflowtask>(entity =>
        {
            entity.HasKey(e => e.WftId).HasName("PK_WORKFLOWTASK");

            entity.ToTable("J_WORKFLOWTASK", "JITTOE");

            entity.HasIndex(e => e.WftProdstepId, "I_PRODSTEP_WFTASK");

            entity.HasIndex(e => e.WftWorkflowId, "I_WF_WFTASK");

            entity.HasIndex(e => new { e.WftWorkflowId, e.WftShortname }, "UN_WFT_SHORTNAME").IsUnique();

            entity.Property(e => e.WftId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("WFT_ID");
            entity.Property(e => e.WftProdjobstate)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("WFT_PRODJOBSTATE");
            entity.Property(e => e.WftProdjobstrategy)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("WFT_PRODJOBSTRATEGY");
            entity.Property(e => e.WftProdstepId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("WFT_PRODSTEP_ID");
            entity.Property(e => e.WftShortname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("WFT_SHORTNAME");
            entity.Property(e => e.WftTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("WFT_TCREATION");
            entity.Property(e => e.WftTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("WFT_TUPDATE");
            entity.Property(e => e.WftWorkflowId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("WFT_WORKFLOW_ID");

            entity.HasOne(d => d.WftProdstep).WithMany(p => p.JWorkflowtasks)
                .HasForeignKey(d => d.WftProdstepId)
                .HasConstraintName("FK_PRODSTEP_WFTASK");

            entity.HasOne(d => d.WftWorkflow).WithMany(p => p.JWorkflowtasks)
                .HasForeignKey(d => d.WftWorkflowId)
                .HasConstraintName("FK_WF_WFTASK");
        });

        modelBuilder.Entity<JWorktime>(entity =>
        {
            entity.HasKey(e => e.WtId).HasName("PK_WORKTIME");

            entity.ToTable("J_WORKTIME", "JITTOE");

            entity.HasIndex(e => e.WtCalendarentryId, "I_CALENDARENTRY_WORKTIME");

            entity.HasIndex(e => e.WtMaintjobId, "I_MAINTJOB_WORKTIME");

            entity.HasIndex(e => e.WtOrderId, "I_ORDER_WORKTIME");

            entity.HasIndex(e => e.WtProdjobId, "I_PRODJOB_WORKTIME");

            entity.HasIndex(e => e.WtProdunitId, "I_PRODUNIT_WORKTIME");

            entity.HasIndex(e => e.WtUserId, "I_USER_WORKTIME");

            entity.HasIndex(e => e.WtWorktimesetId, "I_WTSET_WORKTIME");

            entity.Property(e => e.WtId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("WT_ID");
            entity.Property(e => e.WtCalendarentryId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("WT_CALENDARENTRY_ID");
            entity.Property(e => e.WtMaintjobId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("WT_MAINTJOB_ID");
            entity.Property(e => e.WtOrderId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("WT_ORDER_ID");
            entity.Property(e => e.WtProdjobId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("WT_PRODJOB_ID");
            entity.Property(e => e.WtProdunitId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("WT_PRODUNIT_ID");
            entity.Property(e => e.WtTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("WT_TCREATION");
            entity.Property(e => e.WtTimeended)
                .HasColumnType("DATE")
                .HasColumnName("WT_TIMEENDED");
            entity.Property(e => e.WtTimestarted)
                .HasColumnType("DATE")
                .HasColumnName("WT_TIMESTARTED");
            entity.Property(e => e.WtType)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("WT_TYPE");
            entity.Property(e => e.WtUserId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("WT_USER_ID");
            entity.Property(e => e.WtWorktimesetId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("WT_WORKTIMESET_ID");

            entity.HasOne(d => d.WtCalendarentry).WithMany(p => p.JWorktimes)
                .HasForeignKey(d => d.WtCalendarentryId)
                .HasConstraintName("FK_CALENDARENTRY_WORKTIME");

            entity.HasOne(d => d.WtMaintjob).WithMany(p => p.JWorktimes)
                .HasForeignKey(d => d.WtMaintjobId)
                .HasConstraintName("FK_MAINTJOB_WORKTIME");

            entity.HasOne(d => d.WtOrder).WithMany(p => p.JWorktimes)
                .HasForeignKey(d => d.WtOrderId)
                .HasConstraintName("FK_ORDER_WORKTIME");

            entity.HasOne(d => d.WtProdjob).WithMany(p => p.JWorktimes)
                .HasForeignKey(d => d.WtProdjobId)
                .HasConstraintName("FK_PRODJOB_WORKTIME");

            entity.HasOne(d => d.WtProdunit).WithMany(p => p.JWorktimes)
                .HasForeignKey(d => d.WtProdunitId)
                .HasConstraintName("FK_PRODUNIT_WORKTIME");

            entity.HasOne(d => d.WtUser).WithMany(p => p.JWorktimes)
                .HasForeignKey(d => d.WtUserId)
                .HasConstraintName("FK_USER_WORKTIME");

            entity.HasOne(d => d.WtWorktimeset).WithMany(p => p.JWorktimes)
                .HasForeignKey(d => d.WtWorktimesetId)
                .HasConstraintName("FK_WTSET_WORKTIME");
        });

        modelBuilder.Entity<JWorktimeinfo>(entity =>
        {
            entity.HasKey(e => e.WtiId).HasName("PK_WORKTIMEINFO");

            entity.ToTable("J_WORKTIMEINFO", "JITTOE");

            entity.HasIndex(e => e.WtiWorktimeId, "I_WORKTIME_WORKTIMEINFO");

            entity.HasIndex(e => new { e.WtiWorktimeId, e.WtiType, e.WtiKey1, e.WtiKey2, e.WtiKey3 }, "UN_WTI_INFO").IsUnique();

            entity.Property(e => e.WtiId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("WTI_ID");
            entity.Property(e => e.WtiIntvalue)
                .HasPrecision(10)
                .HasColumnName("WTI_INTVALUE");
            entity.Property(e => e.WtiKey1)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("WTI_KEY1");
            entity.Property(e => e.WtiKey2)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("WTI_KEY2");
            entity.Property(e => e.WtiKey3)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("WTI_KEY3");
            entity.Property(e => e.WtiStringvalue)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("WTI_STRINGVALUE");
            entity.Property(e => e.WtiTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("WTI_TCREATION");
            entity.Property(e => e.WtiTimevalue)
                .HasColumnType("DATE")
                .HasColumnName("WTI_TIMEVALUE");
            entity.Property(e => e.WtiTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("WTI_TUPDATE");
            entity.Property(e => e.WtiType)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("WTI_TYPE");
            entity.Property(e => e.WtiWorktimeId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("WTI_WORKTIME_ID");

            entity.HasOne(d => d.WtiWorktime).WithMany(p => p.JWorktimeinfos)
                .HasForeignKey(d => d.WtiWorktimeId)
                .HasConstraintName("FK_WORKTIME_WORKTIMEINFO");
        });

        modelBuilder.Entity<JWorktimeset>(entity =>
        {
            entity.HasKey(e => e.WtsId).HasName("PK_WORKTIMESET");

            entity.ToTable("J_WORKTIMESET", "JITTOE");

            entity.HasIndex(e => e.WtsCompanyId, "I_COMPANY_WORKTIMESET");

            entity.HasIndex(e => e.WtsKey, "UN_WTS_KEY").IsUnique();

            entity.Property(e => e.WtsId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("WTS_ID");
            entity.Property(e => e.WtsCompanyId)
                .HasColumnType("NUMBER(22)")
                .HasColumnName("WTS_COMPANY_ID");
            entity.Property(e => e.WtsDescr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WTS_DESCR");
            entity.Property(e => e.WtsKey)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("WTS_KEY");
            entity.Property(e => e.WtsTcreation)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("WTS_TCREATION");
            entity.Property(e => e.WtsTupdate)
                .HasDefaultValueSql("sysdate  ")
                .HasColumnType("DATE")
                .HasColumnName("WTS_TUPDATE");

            entity.HasOne(d => d.WtsCompany).WithMany(p => p.JWorktimesets)
                .HasForeignKey(d => d.WtsCompanyId)
                .HasConstraintName("FK_COMPANY_WORKTIMESET");
        });

        modelBuilder.Entity<JitLockcache>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("JIT_LOCKCACHE", "JITTOE");

            entity.Property(e => e.Block)
                .HasColumnType("NUMBER")
                .HasColumnName("BLOCK");
            entity.Property(e => e.Id1)
                .HasColumnType("NUMBER")
                .HasColumnName("ID1");
            entity.Property(e => e.Id2)
                .HasColumnType("NUMBER")
                .HasColumnName("ID2");
            entity.Property(e => e.Lmode)
                .HasColumnType("NUMBER")
                .HasColumnName("LMODE");
            entity.Property(e => e.Request)
                .HasColumnType("NUMBER")
                .HasColumnName("REQUEST");
            entity.Property(e => e.Sid)
                .HasColumnType("NUMBER")
                .HasColumnName("SID");
        });

        modelBuilder.Entity<JitSessioncache>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("JIT_SESSIONCACHE", "JITTOE");

            entity.Property(e => e.Machine)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("MACHINE");
            entity.Property(e => e.Process)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("PROCESS");
            entity.Property(e => e.Program)
                .HasMaxLength(48)
                .IsUnicode(false)
                .HasColumnName("PROGRAM");
            entity.Property(e => e.RowWaitBlock)
                .HasColumnType("NUMBER")
                .HasColumnName("ROW_WAIT_BLOCK#");
            entity.Property(e => e.RowWaitFile)
                .HasColumnType("NUMBER")
                .HasColumnName("ROW_WAIT_FILE#");
            entity.Property(e => e.RowWaitObj)
                .HasColumnType("NUMBER")
                .HasColumnName("ROW_WAIT_OBJ#");
            entity.Property(e => e.RowWaitRow)
                .HasColumnType("NUMBER")
                .HasColumnName("ROW_WAIT_ROW#");
            entity.Property(e => e.Serial)
                .HasColumnType("NUMBER")
                .HasColumnName("SERIAL#");
            entity.Property(e => e.Sid)
                .HasColumnType("NUMBER")
                .HasColumnName("SID");
        });

        modelBuilder.Entity<PlanTable>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PLAN_TABLE", "JITTOE");

            entity.Property(e => e.AccessPredicates)
                .IsUnicode(false)
                .HasColumnName("ACCESS_PREDICATES");
            entity.Property(e => e.Bytes)
                .HasColumnType("NUMBER(38)")
                .HasColumnName("BYTES");
            entity.Property(e => e.Cardinality)
                .HasColumnType("NUMBER(38)")
                .HasColumnName("CARDINALITY");
            entity.Property(e => e.Cost)
                .HasColumnType("NUMBER(38)")
                .HasColumnName("COST");
            entity.Property(e => e.CpuCost)
                .HasColumnType("NUMBER(38)")
                .HasColumnName("CPU_COST");
            entity.Property(e => e.Depth)
                .HasColumnType("NUMBER(38)")
                .HasColumnName("DEPTH");
            entity.Property(e => e.Distribution)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DISTRIBUTION");
            entity.Property(e => e.FilterPredicates)
                .IsUnicode(false)
                .HasColumnName("FILTER_PREDICATES");
            entity.Property(e => e.Id)
                .HasColumnType("NUMBER(38)")
                .HasColumnName("ID");
            entity.Property(e => e.IoCost)
                .HasColumnType("NUMBER(38)")
                .HasColumnName("IO_COST");
            entity.Property(e => e.ObjectAlias)
                .HasMaxLength(65)
                .IsUnicode(false)
                .HasColumnName("OBJECT_ALIAS");
            entity.Property(e => e.ObjectInstance)
                .HasColumnType("NUMBER(38)")
                .HasColumnName("OBJECT_INSTANCE");
            entity.Property(e => e.ObjectName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("OBJECT_NAME");
            entity.Property(e => e.ObjectNode)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("OBJECT_NODE");
            entity.Property(e => e.ObjectOwner)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("OBJECT_OWNER");
            entity.Property(e => e.ObjectType)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("OBJECT_TYPE");
            entity.Property(e => e.Operation)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("OPERATION");
            entity.Property(e => e.Optimizer)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("OPTIMIZER");
            entity.Property(e => e.Options)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("OPTIONS");
            entity.Property(e => e.Other)
                .HasColumnType("LONG")
                .HasColumnName("OTHER");
            entity.Property(e => e.OtherTag)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("OTHER_TAG");
            entity.Property(e => e.OtherXml)
                .HasColumnType("CLOB")
                .HasColumnName("OTHER_XML");
            entity.Property(e => e.ParentId)
                .HasColumnType("NUMBER(38)")
                .HasColumnName("PARENT_ID");
            entity.Property(e => e.PartitionId)
                .HasColumnType("NUMBER(38)")
                .HasColumnName("PARTITION_ID");
            entity.Property(e => e.PartitionStart)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PARTITION_START");
            entity.Property(e => e.PartitionStop)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PARTITION_STOP");
            entity.Property(e => e.PlanId)
                .HasColumnType("NUMBER")
                .HasColumnName("PLAN_ID");
            entity.Property(e => e.Position)
                .HasColumnType("NUMBER(38)")
                .HasColumnName("POSITION");
            entity.Property(e => e.Projection)
                .IsUnicode(false)
                .HasColumnName("PROJECTION");
            entity.Property(e => e.QblockName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("QBLOCK_NAME");
            entity.Property(e => e.Remarks)
                .IsUnicode(false)
                .HasColumnName("REMARKS");
            entity.Property(e => e.SearchColumns)
                .HasColumnType("NUMBER")
                .HasColumnName("SEARCH_COLUMNS");
            entity.Property(e => e.StatementId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("STATEMENT_ID");
            entity.Property(e => e.TempSpace)
                .HasColumnType("NUMBER(38)")
                .HasColumnName("TEMP_SPACE");
            entity.Property(e => e.Time)
                .HasColumnType("NUMBER(38)")
                .HasColumnName("TIME");
            entity.Property(e => e.Timestamp)
                .HasColumnType("DATE")
                .HasColumnName("TIMESTAMP");
        });

        modelBuilder.Entity<ToadPlanTable>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TOAD_PLAN_TABLE", "JITTOE");

            entity.Property(e => e.AccessPredicates)
                .IsUnicode(false)
                .HasColumnName("ACCESS_PREDICATES");
            entity.Property(e => e.Bytes)
                .HasColumnType("NUMBER(38)")
                .HasColumnName("BYTES");
            entity.Property(e => e.Cardinality)
                .HasColumnType("NUMBER(38)")
                .HasColumnName("CARDINALITY");
            entity.Property(e => e.Cost)
                .HasColumnType("NUMBER(38)")
                .HasColumnName("COST");
            entity.Property(e => e.CpuCost)
                .HasColumnType("NUMBER(38)")
                .HasColumnName("CPU_COST");
            entity.Property(e => e.Depth)
                .HasColumnType("NUMBER(38)")
                .HasColumnName("DEPTH");
            entity.Property(e => e.Distribution)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DISTRIBUTION");
            entity.Property(e => e.FilterPredicates)
                .IsUnicode(false)
                .HasColumnName("FILTER_PREDICATES");
            entity.Property(e => e.Id)
                .HasColumnType("NUMBER(38)")
                .HasColumnName("ID");
            entity.Property(e => e.IoCost)
                .HasColumnType("NUMBER(38)")
                .HasColumnName("IO_COST");
            entity.Property(e => e.ObjectAlias)
                .HasMaxLength(65)
                .IsUnicode(false)
                .HasColumnName("OBJECT_ALIAS");
            entity.Property(e => e.ObjectInstance)
                .HasColumnType("NUMBER(38)")
                .HasColumnName("OBJECT_INSTANCE");
            entity.Property(e => e.ObjectName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("OBJECT_NAME");
            entity.Property(e => e.ObjectNode)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("OBJECT_NODE");
            entity.Property(e => e.ObjectOwner)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("OBJECT_OWNER");
            entity.Property(e => e.ObjectType)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("OBJECT_TYPE");
            entity.Property(e => e.Operation)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("OPERATION");
            entity.Property(e => e.Optimizer)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("OPTIMIZER");
            entity.Property(e => e.Options)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("OPTIONS");
            entity.Property(e => e.Other)
                .HasColumnType("LONG")
                .HasColumnName("OTHER");
            entity.Property(e => e.OtherTag)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("OTHER_TAG");
            entity.Property(e => e.OtherXml)
                .HasColumnType("CLOB")
                .HasColumnName("OTHER_XML");
            entity.Property(e => e.ParentId)
                .HasColumnType("NUMBER(38)")
                .HasColumnName("PARENT_ID");
            entity.Property(e => e.PartitionId)
                .HasColumnType("NUMBER(38)")
                .HasColumnName("PARTITION_ID");
            entity.Property(e => e.PartitionStart)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PARTITION_START");
            entity.Property(e => e.PartitionStop)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PARTITION_STOP");
            entity.Property(e => e.PlanId)
                .HasColumnType("NUMBER")
                .HasColumnName("PLAN_ID");
            entity.Property(e => e.Position)
                .HasColumnType("NUMBER(38)")
                .HasColumnName("POSITION");
            entity.Property(e => e.Projection)
                .IsUnicode(false)
                .HasColumnName("PROJECTION");
            entity.Property(e => e.QblockName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("QBLOCK_NAME");
            entity.Property(e => e.Remarks)
                .IsUnicode(false)
                .HasColumnName("REMARKS");
            entity.Property(e => e.SearchColumns)
                .HasColumnType("NUMBER")
                .HasColumnName("SEARCH_COLUMNS");
            entity.Property(e => e.StatementId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("STATEMENT_ID");
            entity.Property(e => e.TempSpace)
                .HasColumnType("NUMBER(38)")
                .HasColumnName("TEMP_SPACE");
            entity.Property(e => e.Time)
                .HasColumnType("NUMBER(38)")
                .HasColumnName("TIME");
            entity.Property(e => e.Timestamp)
                .HasColumnType("DATE")
                .HasColumnName("TIMESTAMP");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
